"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[5565],{3960:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'time-travel\',title:\'Time Travel\'};var contentTitle=undefined;var metadata={"unversionedId":"advanced/time-travel","id":"advanced/time-travel","title":"Time Travel","description":"This guide is very low-level. Dev tools should implement this for you.","source":"@site/docs/advanced/time-travel.mdx","sourceDirName":"advanced","slug":"/advanced/time-travel","permalink":"/zedux/docs/advanced/time-travel","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/advanced/time-travel.mdx","tags":[],"version":"current","frontMatter":{"id":"time-travel","title":"Time Travel"},"sidebar":"react","previous":{"title":"Store Composition","permalink":"/zedux/docs/advanced/store-composition"},"next":{"title":"TypeScript Tips","permalink":"/zedux/docs/advanced/typescript-tips"}};var assets={};var toc=[{value:\'Time Travel Basics\',id:\'time-travel-basics\',level:2},{value:\'In Zedux\',id:\'in-zedux\',level:2},{value:\'Store Traveler\',id:\'store-traveler\',level:2},{value:\'Atom Traveler\',id:\'atom-traveler\',level:2},{value:\'Ecosystem Traveler\',id:\'ecosystem-traveler\',level:2},{value:\'Recap\',id:\'recap\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"low-level warning","type":"caution"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"This guide is very low-level. Dev tools should implement this for you."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"If you\'re new here, you probably don\'t want to read this doc yet.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"This guide assumes knowledge of the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"store-composition"},"store composition guide"),". It\'s recommended to read that first.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Redux popularized the ability to undo and redo state updates in your app. Earlier flux models didn\'t have this capability because they split state up across multiple stores. Well Zedux reintroduces the concept of multiple stores, so does that mean it loses out on time travel?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux also introduces the concept of zero-config stores. In Redux, the boilerplate-heavy action-reducer model is central to its time traveling ability. Surely zero-config Zedux stores can\'t time travel... Can they?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As you can probably guess by the existence of this walkthrough page, the answer is that Zedux fully supports time travel. Let\'s Learn Everything."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How Zedux\'s powerful store composition model enables time travel."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to implement undo/redo for individual stores, atoms, or an entire ecosystem."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"time-travel-basics"},"Time Travel Basics"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"First off, time travel has several overlapping concepts, with differing opinions about what they mean. This guide will assume these meanings:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Undo/Redo - Step backward and forward through a state history."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Replayable Actions - Given a list of actions and a starting state, dispatch those actions one-by-one to consistently arrive at a final state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Time Travel - The overarching concept containing both undo/redo and replayable actions, adding the ability to jump backward several states at a time or forward several states or actions at a time.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Undo/redo is cool, but more limited, since it doesn\'t dispatch actions exactly how they were originally dispatched. This means undo/redo can skip side effects or run them in an entirely different way than the real app. However, if you manage to design your side effects around this (nigh impossible), it can be very powerful."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Replayable actions more faithfully replicate state changes. In Zedux, all state changes produce an action that can be used to fully reproduce the state change."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux has full support for both kinds of time travel at the store, atom instance, and ecosystem levels. This guide will demonstrate undo/redo since it\'s generally simpler, but the high-level concepts should also give enough insight into how to implement replayable actions."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"in-zedux"},"In Zedux"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every state update in Zedux is trackable and reproducible. When tracking changes in a composed store hierarchy, you only need one subscriber in the root store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every parent store is able to track and reproduce every state change anywhere in its children, grandchildren, etc. That means a subscriber attached to the parent store receives actions that can be used to reproduce every state change (useful for replayable actions). Also, setting state on the parent store directly updates its children (useful for undo/redo)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live resultVar=output","live":true,"resultVar":"output"},"const parent = createStore()\\nconst child = createStore()\\n\\nparent.use({ child })\\n\\nchild.setState(\'initial state\') // set child\'s state ...\\nparent.setState({ child: \'better state\' }) // ... and immediately change it\\n\\nconst output = {\\n  child: child.getState(),\\n  parent: parent.getState(),\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To track and replay an action:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live resultVar=output","live":true,"resultVar":"output"},"const parent = createStore()\\nconst child = createStore()\\n\\nparent.use({ child })\\n\\n// for this example, we\'ll track one action and re-dispatch it:\\nlet trackedAction\\n\\nparent.subscribe({\\n  effects: ({ action }) => {\\n    if (!trackedAction) trackedAction = action\\n  },\\n})\\n\\n// creates a \\"pseudo-action\\"\\nchild.setState(\'initial state\') // we\'ll track this state ...\\nchild.setState(\'better state\') // ... and use it to override this state\\n\\n// dispatch the tracked action directly to the parent store:\\nparent.dispatch(trackedAction) // state is now back to \'initial state\'\\n\\nconst output = {\\n  child: child.getState(),\\n  parent: parent.getState(),\\n  trackedAction,\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Bottom line: In Zedux, you only need access to the parent store and you\'re golden. Atoms naturally expose exactly one parent store, so this works out beautifully."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The rest of this guide will walk through specific possible implementations of undo/redo. You should probably not be implementing time travel yourself, but if you\'re curious, by all means continue."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"store-traveler"},"Store Traveler"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To implement undo/redo for a store, first attach a subscriber to the parent store:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const formStore = createStore()\\nconst emailStore = createStore(null, \'\')\\nconst passwordStore = createStore(null, \'\')\\n\\nformStore.use({\\n  email: emailStore,\\n  password: passwordStore,\\n})\\n\\nformStore.subscribe((newState, oldState) => {\\n  if (newState === oldState) return\\n\\n  // we\'ll add this logic next\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"To implement replayable actions, you\'d need to attach an effects subscriber instead to receive a notification for every action.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now the parent needs to track state history somewhere. We\'ll use another store for this."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// highlight-start\\nconst historyStore = createStore(null, {\\n  history: [formStore.getState()], // start with the current state\\n})\\n// highlight-end\\n\\nformStore.subscribe((newState, oldState) => {\\n  if (newState === oldState) return\\n\\n  // highlight-start\\n  historyStore.setState(({ history }) => ({\\n    history: [...history, newState],\\n  }))\\n  // highlight-end\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"With history tracked, we need the ability to \\"point\\" to a different state in the history. This lets us keep track of where we\'ve time traveled to. Default this to pointing at the last history state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const historyStore = createStore(null, {\\n  history: [formStore.getState()],\\n  // highlight-next-line\\n  pointer: 0,\\n})\\n\\nformStore.subscribe((newState, oldState) => {\\n  if (newState === oldState) return\\n\\n  historyStore.setState(({ history, pointer }) => ({\\n    history: [...history, newState],\\n    // highlight-next-line\\n    pointer: pointer + 1,\\n  }))\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now to implement undo/redo:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const undo = () => {\\n  const newState = historyStore.setStateDeep(({ pointer }) => ({\\n    pointer: Math.max(0, pointer - 1),\\n  }))\\n\\n  formStore.setState(newState.history[newState.pointer])\\n}\\n\\nconst redo = () => {\\n  const newState = historyStore.setStateDeep(({ history, pointer }) => ({\\n    pointer: Math.min(history.length - 1, pointer + 1),\\n  }))\\n\\n  formStore.setState(newState.history[newState.pointer])\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Math.min")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Math.max")," to clamp the pointer to the history length."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But now there\'s a problem. Setting the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"formStore"),"s state like this will trigger the subscriber, pushing the state onto the history again! When we call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"undo"),"/",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"redo"),", we need to prevent the subscriber from running."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There are several ways to accomplish that. We\'ll do this:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"formStore.subscribe((newState, oldState) => {\\n  if (newState === oldState) return\\n\\n  // highlight-start\\n  const { history, pointer } = historyStore.getState()\\n  if (newState === history[pointer]) return\\n  // highlight-end\\n\\n  historyStore.setState(({ history, pointer }) => ({\\n    history: [...history, newState],\\n    pointer: pointer + 1,\\n  }))\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If the current state exactly matches the state the history is pointing at, we know the current state is a history state. We don\'t need to track it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Almost there! We just need to fix one little thing. If the user changes the form\'s state while we\'re showing a history state, we need to erase the history after the pointer and start tracking history anew starting from the pointer\'s location."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"formStore.subscribe((newState, oldState) => {\\n  if (newState === oldState) return\\n\\n  const { history, pointer } = historyStore.getState()\\n  if (newState === history[pointer]) return\\n\\n  historyStore.setState(({ history, pointer }) => ({\\n    // highlight-next-line\\n    history: [...history.slice(0, pointer + 1), newState],\\n    pointer: pointer + 1,\\n  }))\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright! We\'re ready to put it all together. Here\'s the full example wrapped in a simple ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"form")," atom:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=time-travel/store-traveler resultVar=App","live":true,"ecosystemId":"time-travel/store-traveler","resultVar":"App"},"const formAtom = atom(\'form\', () => {\\n  const formStore = injectStore()\\n  const emailStore = injectStore(\'\', { subscribe: false }) // don\'t need to subscribe to child stores\\n  const passwordStore = injectStore(\'\', { subscribe: false }) // don\'t need to subscribe to child stores\\n\\n  formStore.use({\\n    email: emailStore,\\n    password: passwordStore,\\n  })\\n\\n  const historyStore = injectStore({\\n    history: [formStore.getState()],\\n    pointer: 0,\\n  })\\n\\n  injectEffect(() => {\\n    const subscription = formStore.subscribe((newState, oldState) => {\\n      if (newState === oldState) return\\n\\n      const { history, pointer } = historyStore.getState()\\n      if (newState === history[pointer]) return\\n\\n      historyStore.setState(({ history, pointer }) => ({\\n        history: [...history.slice(0, pointer + 1), newState],\\n        pointer: pointer + 1,\\n      }))\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  }, [])\\n\\n  const redo = () => {\\n    const newState = historyStore.setStateDeep(({ history, pointer }) => ({\\n      pointer: Math.min(history.length - 1, pointer + 1),\\n    }))\\n\\n    formStore.setState(newState.history[newState.pointer])\\n  }\\n\\n  const setEmail = email => emailStore.setState(email)\\n  const setPassword = password => passwordStore.setState(password)\\n\\n  const undo = () => {\\n    const newState = historyStore.setStateDeep(({ pointer }) => ({\\n      pointer: Math.max(0, pointer - 1),\\n    }))\\n\\n    formStore.setState(newState.history[newState.pointer])\\n  }\\n\\n  return api(formStore).setExports({\\n    redo,\\n    setEmail,\\n    setPassword,\\n    undo,\\n  })\\n})\\n\\nfunction Devtools() {\\n  const { redo, undo } = useAtomInstance(formAtom).exports\\n\\n  return (\\n    <div>\\n      <button onClick={undo}>Undo</button>\\n      <button onClick={redo}>Redo</button>\\n    </div>\\n  )\\n}\\n\\nfunction LoginForm() {\\n  const [{ email, password }, { setEmail, setPassword }] =\\n    useAtomState(formAtom)\\n\\n  return (\\n    <>\\n      <div>\\n        Email:{\' \'}\\n        <input onChange={event => setEmail(event.target.value)} value={email} />\\n      </div>\\n      <div>\\n        Password:{\' \'}\\n        <input\\n          onChange={event => setPassword(event.target.value)}\\n          value={password}\\n        />\\n      </div>\\n    </>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Devtools />\\n      <LoginForm />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-traveler"},"Atom Traveler"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since an atom has exactly one exposed store, undo/redo is very similar with atoms. In fact, you can simply extract the above time travel logic to a custom injector and reuse that in every atom where you want time travel. For example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const injectTimeTravel = store => {\\n  const historyStore = injectStore({\\n    history: [formStore.getState()],\\n    pointer: 0,\\n  })\\n\\n  injectEffect(() => {\\n    const subscription = formStore.subscribe((newState, oldState) => {\\n      if (newState === oldState) return\\n\\n      const { history, pointer } = historyStore.getState()\\n      if (newState === history[pointer]) return\\n\\n      historyStore.setState(({ history, pointer }) => ({\\n        history: [...history.slice(0, pointer + 1), newState],\\n        pointer: pointer + 1,\\n      }))\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  }, [])\\n\\n  const redo = () => {\\n    const newState = historyStore.setStateDeep(({ history, pointer }) => ({\\n      pointer: Math.min(history.length - 1, pointer + 1),\\n    }))\\n\\n    store.setState(newState.history[newState.pointer])\\n  }\\n\\n  const undo = () => {\\n    const newState = historyStore.setStateDeep(({ pointer }) => ({\\n      pointer: Math.max(0, pointer - 1),\\n    }))\\n\\n    store.setState(newState.history[newState.pointer])\\n  }\\n\\n  return api(historyStore).setExports({ redo, undo })\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Example usage:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const formAtom = atom(\'form\', () => {\\n  const formStore = injectStore()\\n  const emailStore = injectStore(\'\', { subscribe: false })\\n  const passwordStore = injectStore(\'\', { subscribe: false })\\n\\n  formStore.use({\\n    email: emailStore,\\n    password: passwordStore,\\n  })\\n\\n  // highlight-next-line\\n  const historyApi = injectTimeTravel(formStore)\\n\\n  const setEmail = email => emailStore.setState(email)\\n  const setPassword = password => passwordStore.setState(password)\\n\\n  return api(formStore).setExports({\\n    // highlight-next-line\\n    ...historyApi.exports,\\n    setEmail,\\n    setPassword,\\n  })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This approach is fine if it works for you, but a theoretical downside is that state management and time travel are orthogonal concerns. Tightly coupling an atom to its time travel implementation is ... weird. It should feel unnatural because it is."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since we know we\'re working with an atom, we can upgrade this setup a little."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Remember that atoms can take other atom instances as params. We can use this power to create a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"timeTravelAtom")," that accepts any atom instance and tacks time travel onto it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const timeTravelAtom = ion(\'timeTravel\', ({ get }, instance) => {\\n  const instanceState = get(instance)\\n  const store = injectStore({\\n    history: [instanceState],\\n    pointer: 0,\\n  })\\n  const { history, pointer } = store.getState()\\n\\n  // if the state changed, add it to the history\\n  if (instanceState !== history[pointer]) {\\n    store.setStateDeep(({ history, pointer }) => ({\\n      history: [...history.slice(0, pointer + 1), instanceState],\\n      pointer: pointer + 1,\\n    }))\\n  }\\n\\n  const redo = () => {\\n    const newState = store.setStateDeep(({ history, pointer }) => ({\\n      pointer: Math.min(history.length - 1, pointer + 1),\\n    }))\\n\\n    instance.setState(newState.history[newState.pointer])\\n  }\\n\\n  const undo = () => {\\n    const newState = store.setStateDeep(({ pointer }) => ({\\n      pointer: Math.max(0, pointer - 1),\\n    }))\\n\\n    instance.setState(newState.history[newState.pointer])\\n  }\\n\\n  return api(store).setExports({ redo, undo })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Example usage:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function Devtools() {\\n  const instance = useAtomInstance(formAtom)\\n  const [stateHistory, { redo, undo }] = useAtomState(timeTravelAtom, [\\n    instance,\\n  ])\\n\\n  return (\\n    <div>\\n      <button onClick={undo}>Undo</button>\\n      <button onClick={redo}>Redo</button>\\n    </div>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The primary advantage of this approach over the custom injector approach is that time travel is now a completely separate concern. Any atom can be made time-travelable, and no atom has to know whether it is."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Full live example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=time-travel/atom-traveler resultVar=App","live":true,"ecosystemId":"time-travel/atom-traveler","resultVar":"App"},"const textAtom = atom(\'text\', (id: string) => \'\')\\n\\nconst formAtom = atom(\'form\', () => {\\n  const store = injectStore()\\n  const emailInstance = injectAtomInstance(textAtom, [\'email\'])\\n  const passwordInstance = injectAtomInstance(textAtom, [\'password\'])\\n\\n  store.use({\\n    email: emailInstance.store,\\n    password: passwordInstance.store,\\n  })\\n\\n  return api(store).setExports({\\n    setEmail: email => store.setStateDeep({ email }),\\n    setPassword: password => store.setStateDeep({ password }),\\n  })\\n})\\n\\nconst timeTravelAtom = ion(\'timeTravel\', ({ get }, instance) => {\\n  const instanceState = get(instance)\\n  const store = injectStore({\\n    history: [instanceState],\\n    pointer: 0,\\n  })\\n  const { history, pointer } = store.getState()\\n\\n  // if the state changed, add it to the history\\n  if (instanceState !== history[pointer]) {\\n    store.setStateDeep(({ history, pointer }) => ({\\n      history: [...history.slice(0, pointer + 1), instanceState],\\n      pointer: pointer + 1,\\n    }))\\n  }\\n\\n  const redo = () => {\\n    const newState = store.setStateDeep(({ history, pointer }) => ({\\n      pointer: Math.min(history.length - 1, pointer + 1),\\n    }))\\n\\n    instance.setState(newState.history[newState.pointer])\\n  }\\n\\n  const undo = () => {\\n    const newState = store.setStateDeep(({ pointer }) => ({\\n      pointer: Math.max(0, pointer - 1),\\n    }))\\n\\n    instance.setState(newState.history[newState.pointer])\\n  }\\n\\n  return api(store).setExports({ redo, undo })\\n})\\n\\nfunction Devtools() {\\n  const instance = useAtomInstance(formAtom)\\n  const { redo, undo } = useAtomInstance(timeTravelAtom, [instance]).exports\\n\\n  return (\\n    <div>\\n      <button onClick={undo}>Undo</button>\\n      <button onClick={redo}>Redo</button>\\n    </div>\\n  )\\n}\\n\\nfunction LoginForm() {\\n  const [{ email, password }, { setEmail, setPassword }] =\\n    useAtomState(formAtom)\\n\\n  return (\\n    <>\\n      <div>\\n        Email:{\' \'}\\n        <input onChange={event => setEmail(event.target.value)} value={email} />\\n      </div>\\n      <div>\\n        Password:{\' \'}\\n        <input\\n          onChange={event => setPassword(event.target.value)}\\n          value={password}\\n        />\\n      </div>\\n    </>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Devtools />\\n      <LoginForm />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"ecosystem-traveler"},"Ecosystem Traveler"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"This section assumes basic knowledge of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"plugins"},"plugins"),". It\'s recommended to read that guide first.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright, we\'re in a completely different world now. Tracking and restoring every state change in the entire application is a big task and can only be accomplished with plugins."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To track state changes, a plugin needs to turn on the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/ZeduxPlugin#statechanged"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"stateChanged")," mod"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { ZeduxPlugin } from \'@zedux/react\'\\n\\nconst timeTravelPlugin = new ZeduxPlugin({\\n  initialMods: [\'stateChanged\'],\\n\\n  registerEcosystem: ecosystem => {\\n    // we\'ll add this logic next\\n  },\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now you need to track history state. This is almost the same as tracking history state for a single atom, but with a separate entry for every atom."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A simple way to get an object mapping atom instance ids to their values is to use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#dehydrate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ecosystem.dehydrate()")),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const timeTravelPlugin = new ZeduxPlugin({\\n  initialMods: [\'stateChanged\'],\\n\\n  registerEcosystem: ecosystem => {\\n    // highlight-start\\n    const state = {\\n      history: [ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] })],\\n      pointer: 0,\\n    }\\n    // highlight-end\\n  },\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now add a simple subscription on the ecosystem\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#modbus"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"modBus"))," that filters out everything but ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"stateChanged")," mod events."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since atom selectors also trigger ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"stateChanged")," mod events, filter out any events that don\'t have a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".instance")," property too. Time travel only deals with top-level state. State derivations like selectors shouldn\'t be tracked."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const timeTravelPlugin = new ZeduxPlugin({\\n  initialMods: [\'stateChanged\'],\\n\\n  registerEcosystem: ecosystem => {\\n    const state = {\\n      history: [ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] })],\\n      pointer: 0,\\n    }\\n\\n    // highlight-start\\n    const subscription = ecosystem.modBus.subscribe({\\n      effects: ({ action }) => {\\n        // only handle stateChanged mod events for atom instances\\n        if (\\n          action.type === ZeduxPlugin.actions.stateChanged.type &&\\n          action.payload?.instance\\n        ) {\\n          state.history = [\\n            ...state.history.slice(0, state.pointer + 1),\\n            ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] }),\\n          ]\\n          state.pointer += 1\\n        }\\n      },\\n    })\\n    // highlight-end\\n\\n    return () => subscription.unsubscribe()\\n  },\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now we need to actually handle undo/redo. We\'ll use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"plugins#via-modbus"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"modBus")," to send actions")," to the plugin. The plugin can use its existing ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"modBus")," subscription to listen for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"undo")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"redo")," events:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// highlight-start\\nconst undo = actionFactory(\'@@timeTravel/undo\')\\nconst redo = actionFactory(\'@@timeTravel/redo\')\\n// highlight-end\\n\\nconst timeTravelPlugin = new ZeduxPlugin({\\n  initialMods: [\'stateChanged\'],\\n\\n  registerEcosystem: ecosystem => {\\n    const state = {\\n      history: [ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] })],\\n      // highlight-next-line\\n      isHydrating: false,\\n      pointer: 0,\\n    }\\n\\n    const subscription = ecosystem.modBus.subscribe({\\n      effects: ({ action }) => {\\n        // only track history if we\'re not currently time traveling\\n        // highlight-next-line\\n        if (state.isHydrating) return\\n\\n        // only handle stateChanged mod events for atom instances\\n        if (\\n          action.type === ZeduxPlugin.actions.stateChanged.type &&\\n          action.payload?.instance\\n        ) {\\n          state.history = [\\n            ...state.history.slice(0, state.pointer + 1),\\n            ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] }),\\n          ]\\n          state.pointer += 1\\n          return\\n        }\\n\\n        // highlight-start\\n        if (action.type === undo.type) {\\n          const { pointer } = state\\n          const newPointer = Math.max(0, pointer - 1)\\n\\n          if (newPointer === pointer) return\\n\\n          state.pointer = newPointer\\n          state.isHydrating = true\\n          ecosystem.hydrate(state.history[newPointer])\\n          state.isHydrating = false\\n          return\\n        }\\n\\n        if (action.type === redo.type) {\\n          const { history, pointer } = state\\n          const newPointer = Math.min(history.length - 1, pointer + 1)\\n\\n          if (newPointer === pointer) return\\n\\n          state.pointer = newPointer\\n          state.isHydrating = true\\n          ecosystem.hydrate(state.history[newPointer])\\n          state.isHydrating = false\\n          return\\n        }\\n        // highlight-end\\n      },\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  },\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There\'s one last thing to fix. Since ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"registerEcosystem")," is called as soon as the plugin is registered, our initial state snapshot will be empty. The ecosystem doesn\'t know what atoms are going to exist inside it, so the dehydration is a completely empty object."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This means that the hydration won\'t affect any atoms. There are several ways to fix this."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"One approach is to make the plugin hook into ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"statusChanged")," events and walk back through the state history, updating every snapshot to include the new atom\'s initial state when a new atom\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"status")," changes from Initializing to Active."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But for simplicity in this example, we\'re just gonna set the initial history the first time we see any state change, instead of setting it as soon as the plugin is registered in the ecosystem."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const timeTravelPlugin = new ZeduxPlugin({\\n  initialMods: [\'stateChanged\'],\\n\\n  registerEcosystem: ecosystem => {\\n    const state = {\\n      // highlight-next-line\\n      history: [],\\n      isHydrating: false,\\n      pointer: 0,\\n    }\\n\\n    const subscription = ecosystem.modBus.subscribe({\\n      effects: ({ action }) => {\\n        // only track history if we\'re not currently time traveling\\n        if (state.isHydrating) return\\n\\n        // only handle stateChanged mod events for atom instances\\n        if (\\n          action.type === ZeduxPlugin.actions.stateChanged.type &&\\n          action.payload?.instance\\n        ) {\\n          // get initial snapshot now\\n          // highlight-start\\n          if (!state.history.length) {\\n            const snapshot = ecosystem.dehydrate({\\n              excludeFlags: [\'no-time-travel\'],\\n            })\\n\\n            snapshot[action.payload.instance.id] = action.payload.oldState\\n            state.history.push(snapshot)\\n          }\\n          // highlight-end\\n\\n          state.history = [\\n            ...state.history.slice(0, state.pointer + 1),\\n            ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] }),\\n          ]\\n          state.pointer += 1\\n          return\\n        }\\n\\n        if (action.type === undo.type) {\\n          const { pointer } = state\\n          const newPointer = Math.max(0, pointer - 1)\\n\\n          if (newPointer === pointer) return\\n\\n          state.pointer = newPointer\\n          state.isHydrating = true\\n          ecosystem.hydrate(state.history[newPointer])\\n          state.isHydrating = false\\n          return\\n        }\\n\\n        if (action.type === redo.type) {\\n          const { history, pointer } = state\\n          const newPointer = Math.min(history.length - 1, pointer + 1)\\n\\n          if (newPointer === pointer) return\\n\\n          state.pointer = newPointer\\n          state.isHydrating = true\\n          ecosystem.hydrate(state.history[newPointer])\\n          state.isHydrating = false\\n          return\\n        }\\n      },\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  },\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"And finally, all together:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=ecosystem-time-travel noProvide resultVar=App","live":true,"ecosystemId":"ecosystem-time-travel","noProvide":true,"resultVar":"App"},"const undo = actionFactory(\'@@timeTravel/undo\')\\nconst redo = actionFactory(\'@@timeTravel/redo\')\\n\\nconst timeTravelPlugin = new ZeduxPlugin({\\n  initialMods: [\'stateChanged\'],\\n\\n  registerEcosystem: ecosystem => {\\n    const state = {\\n      history: [],\\n      isHydrating: false,\\n      pointer: 0,\\n    }\\n\\n    const subscription = ecosystem.modBus.subscribe({\\n      effects: ({ action }) => {\\n        // only track history if we\'re not currently time traveling\\n        if (state.isHydrating) return\\n\\n        // only handle stateChanged mod events for atom instances\\n        if (\\n          action.type === ZeduxPlugin.actions.stateChanged.type &&\\n          action.payload?.instance\\n        ) {\\n          // get initial snapshot now\\n          if (!state.history.length) {\\n            const snapshot = ecosystem.dehydrate({\\n              excludeFlags: [\'no-time-travel\'],\\n            })\\n\\n            snapshot[action.payload.instance.id] = action.payload.oldState\\n            state.history.push(snapshot)\\n          }\\n\\n          state.history = [\\n            ...state.history.slice(0, state.pointer + 1),\\n            ecosystem.dehydrate({ excludeFlags: [\'no-time-travel\'] }),\\n          ]\\n          state.pointer += 1\\n          return\\n        }\\n\\n        if (action.type === undo.type) {\\n          const { pointer } = state\\n          const newPointer = Math.max(0, pointer - 1)\\n\\n          if (newPointer === pointer) return\\n\\n          state.pointer = newPointer\\n          state.isHydrating = true\\n          ecosystem.hydrate(state.history[newPointer])\\n          state.isHydrating = false\\n          return\\n        }\\n\\n        if (action.type === redo.type) {\\n          const { history, pointer } = state\\n          const newPointer = Math.min(history.length - 1, pointer + 1)\\n\\n          if (newPointer === pointer) return\\n\\n          state.pointer = newPointer\\n          state.isHydrating = true\\n          ecosystem.hydrate(state.history[newPointer])\\n          state.isHydrating = false\\n          return\\n        }\\n      },\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  },\\n})\\n\\nconst formAtom = atom(\'form\', () => {\\n  const store = injectStore({\\n    email: \'\',\\n    password: \'\',\\n  })\\n\\n  return api(store).setExports({\\n    setEmail: email => store.setStateDeep({ email }),\\n    setPassword: password => store.setStateDeep({ password }),\\n  })\\n})\\n\\nfunction Devtools() {\\n  const ecosystem = useEcosystem()\\n\\n  return (\\n    <div>\\n      <button onClick={() => ecosystem.modBus.dispatch(undo())}>Undo</button>\\n      <button onClick={() => ecosystem.modBus.dispatch(redo())}>Redo</button>\\n    </div>\\n  )\\n}\\n\\nfunction LoginForm() {\\n  const [{ email, password }, { setEmail, setPassword }] =\\n    useAtomState(formAtom)\\n\\n  return (\\n    <>\\n      <div>\\n        Email:{\' \'}\\n        <input onChange={event => setEmail(event.target.value)} value={email} />\\n      </div>\\n      <div>\\n        Password:{\' \'}\\n        <input\\n          onChange={event => setPassword(event.target.value)}\\n          value={password}\\n        />\\n      </div>\\n    </>\\n  )\\n}\\n\\nfunction App() {\\n  const ecosystem = useMemo(() => {\\n    const ecosystem = createEcosystem({ id: \'ecosystem-time-travel\' })\\n\\n    ecosystem.registerPlugin(timeTravelPlugin)\\n\\n    return ecosystem\\n  }, [])\\n\\n  return (\\n    <EcosystemProvider ecosystem={ecosystem}>\\n      <Devtools />\\n      <LoginForm />\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"The parent store is a powerful single point of entry for working time travel magic."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use a simple subscriber to track store state history (for undo/redo)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use an effects subscriber or action stream to track all actions dispatched to a store (for replayable actions)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Dispatch tracked actions directly to the parent store to replay the action, no matter where in the hierarchy it originally happened."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Set state directly on the parent store to update the state of all or several child stores at once."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Passing atom instances as params is a powerful way to attach time travel to any atom instance while maintaining separation of concerns."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use a plugin for maximum control.")));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3960\n')}}]);