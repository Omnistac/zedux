"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[7038],{7014:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var a=n(3117),o=n(102),i=(n(7294),n(3905)),c=n(3052),r=["components"],s={id:"injectMemo",title:"injectMemo"},l=void 0,u={unversionedId:"api/injectors/injectMemo",id:"api/injectors/injectMemo",isDocsHomePage:!1,title:"injectMemo",description:"An injector that memoizes a value. You control whether the value changes on subsequent evaluations.",source:"@site/docs/api/injectors/injectMemo.mdx",sourceDirName:"api/injectors",slug:"/api/injectors/injectMemo",permalink:"/zedux/docs/api/injectors/injectMemo",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectMemo.mdx",tags:[],version:"current",frontMatter:{id:"injectMemo",title:"injectMemo"},sidebar:"react",previous:{title:"injectInvalidate",permalink:"/zedux/docs/api/injectors/injectInvalidate"},next:{title:"injectRef",permalink:"/zedux/docs/api/injectors/injectRef"}},d=[{value:"Example",id:"example",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"<code>factory</code>",id:"factory",children:[],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2}],p={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectMemo } from '@zedux/react'\n")),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"../glossary#injector"},"injector")," that memoizes a value. You control whether the value changes on subsequent evaluations."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)(c.u,{resultVar:"Seconds",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', () => {\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nconst everyFifthAtom = atom('everyFifth', () => {\n  const seconds = injectAtomValue(secondsAtom)\n\n  return injectMemo(() => seconds, [Math.floor(seconds / 5)])\n})\n\nfunction Seconds() {\n  const seconds = useAtomValue(secondsAtom)\n  const everyFifth = useAtomValue(everyFifthAtom)\n\n  return (\n    <>\n      <div>Seconds: {seconds}</div>\n      <div>Every Fifth Second: {everyFifth}</div>\n    </>\n  )\n}\n"),(0,i.kt)("p",null,"Miscellaneous:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const constantVal = injectMemo(() => getExpensiveVal(), [])\n\nconst changesWhenDepsChange = injectMemo(getExpensiveVal, [depA, depB])\n\nconst changesEveryTimeButJustWhy = injectMemo(getExpensiveVal)\n")),(0,i.kt)("h2",{id:"signature"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"injectMemo(factory, deps?)\n")),(0,i.kt)("p",null,"Returns the result of ",(0,i.kt)("inlineCode",{parentName:"p"},"factory"),"."),(0,i.kt)("h3",{id:"factory"},(0,i.kt)("inlineCode",{parentName:"h3"},"factory")),(0,i.kt)("p",null,"A function that returns the memoized value. This function will only be called when the atom is created and whenever any passed ",(0,i.kt)("inlineCode",{parentName:"p"},"deps")," change."),(0,i.kt)("p",null,"This is a good place to run expensive calculations that you don't want to run on every atom instance evaluation. It can also be used to ensure references are stable across evaluations. But, depending on the use case, ",(0,i.kt)("a",{parentName:"p",href:"injectStore"},(0,i.kt)("inlineCode",{parentName:"a"},"injectStore")),", ",(0,i.kt)("a",{parentName:"p",href:"injectRef"},(0,i.kt)("inlineCode",{parentName:"a"},"injectRef")),", or ",(0,i.kt)("a",{parentName:"p",href:"injectCallback"},(0,i.kt)("inlineCode",{parentName:"a"},"injectCallback"))," may be a better choice."),(0,i.kt)("h3",{id:"deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"deps")),(0,i.kt)("p",null,"Optional (but you should probably pass it). An array of values that will cause the ",(0,i.kt)("inlineCode",{parentName:"p"},"factory")," function to rerun and calculate a new value every time they change."))}m.isMDXComponent=!0}}]);