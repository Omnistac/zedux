(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[6570],{9272:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return r},toc:function(){return d},default:function(){return l}});var o=n(4034),s=n(9973),a=(n(7294),n(3905)),i={id:"EcosystemConfig",title:"EcosystemConfig"},r={unversionedId:"api/types/EcosystemConfig",id:"api/types/EcosystemConfig",isDocsHomePage:!1,title:"EcosystemConfig",description:"The config object passed to the ecosystem() factory.",source:"@site/docs/api/types/EcosystemConfig.mdx",sourceDirName:"api/types",slug:"/api/types/EcosystemConfig",permalink:"/zedux/docs/api/types/EcosystemConfig",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/EcosystemConfig.mdx",version:"current",frontMatter:{id:"EcosystemConfig",title:"EcosystemConfig"},sidebar:"react",previous:{title:"DispatchInterceptor",permalink:"/zedux/docs/api/types/DispatchInterceptor"},next:{title:"EvaluationReason",permalink:"/zedux/docs/api/types/EvaluationReason"}},d=[{value:"Definition",id:"definition",children:[{value:"<code>context</code>",id:"context",children:[]},{value:"<code>destroyOnUnmount</code>",id:"destroyonunmount",children:[]},{value:"<code>flags</code>",id:"flags",children:[]},{value:"<code>id</code>",id:"id",children:[]},{value:"<code>overrides</code>",id:"overrides",children:[]},{value:"<code>preload</code>",id:"preload",children:[]}]}],c={toc:d};function l(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The config object passed to ",(0,a.kt)("a",{parentName:"p",href:"../factories/ecosystem"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"ecosystem()")," factory"),"."),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface EcosystemConfig<Context extends Record<string, any> = any> {\n  context?: Context\n  destroyOnUnmount?: boolean\n  flags?: string[]\n  id?: string\n  overrides?: Atom[]\n  preload?: (ecosystem: Ecosystem, context: Context) => void\n}\n")),(0,a.kt)("p",null,"All fields are optional. It is recommended to at least pass an id."),(0,a.kt)("h3",{id:"context"},(0,a.kt)("inlineCode",{parentName:"h3"},"context")),(0,a.kt)("p",null,"An object. The initial ",(0,a.kt)("a",{parentName:"p",href:"../classes/Ecosystem#context"},"context")," for the ecosystem."),(0,a.kt)("h3",{id:"destroyonunmount"},(0,a.kt)("inlineCode",{parentName:"h3"},"destroyOnUnmount")),(0,a.kt)("p",null,"A boolean. Whether the ecosystem should destroy itself when its last ",(0,a.kt)("a",{parentName:"p",href:"../components/EcosystemProvider"},(0,a.kt)("inlineCode",{parentName:"a"},"<EcosystemProvider>"))," unmounts. Useful for testing."),(0,a.kt)("h3",{id:"flags"},(0,a.kt)("inlineCode",{parentName:"h3"},"flags")),(0,a.kt)("p",null,"An array of strings. Will be set as the ",(0,a.kt)("a",{parentName:"p",href:"../classes/Ecosystem#flags"},"ecosystem's flags"),"."),(0,a.kt)("h3",{id:"id"},(0,a.kt)("inlineCode",{parentName:"h3"},"id")),(0,a.kt)("p",null,"A string. Identifies the ecosystem in the ",(0,a.kt)("a",{parentName:"p",href:"../constants/zeduxGlobalStore"},"zeduxGlobalStore")," and in dev tools."),(0,a.kt)("h3",{id:"overrides"},(0,a.kt)("inlineCode",{parentName:"h3"},"overrides")),(0,a.kt)("p",null,"An array of ",(0,a.kt)("a",{parentName:"p",href:"../classes/Atom"},"atoms"),". Will be set as the ",(0,a.kt)("a",{parentName:"p",href:"../classes/Ecosystem#overrides"},"ecosystem's overrides"),". Used for ",(0,a.kt)("a",{parentName:"p",href:"../../walkthrough/dependency-injection"},"Dependency Injection"),"."),(0,a.kt)("h3",{id:"preload"},(0,a.kt)("inlineCode",{parentName:"h3"},"preload")),(0,a.kt)("p",null,"A function. Will be called as soon as the ecosystem has initialized. Can be used to bootstrap data and preload atoms."),(0,a.kt)("p",null,"Signature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"(ecosystem, context) => void\n")),(0,a.kt)("p",null,"Receives the freshly initialized or reset ecosystem and the context object (if one was passed) as parameters."))}l.isMDXComponent=!0}}]);