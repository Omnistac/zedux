"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9862],{23:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'side-effects\',title:\'Side Effects\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/side-effects","id":"walkthrough/side-effects","title":"Side Effects","description":"Zedux doesn\'t place any restrictions on how you manage asynchronous code. You can use promises, observables, sockets, generators, or any third-party library.","source":"@site/docs/walkthrough/side-effects.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/side-effects","permalink":"/zedux/docs/walkthrough/side-effects","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/side-effects.mdx","tags":[],"version":"current","frontMatter":{"id":"side-effects","title":"Side Effects"},"sidebar":"react","previous":{"title":"Stores","permalink":"/zedux/docs/walkthrough/stores"},"next":{"title":"Custom Injectors","permalink":"/zedux/docs/walkthrough/custom-injectors"}};var assets={};var toc=[{value:\'Render As You Fetch\',id:\'render-as-you-fetch\',level:2},{value:\'<code>Syncing State</code>\',id:\'syncing-state\',level:2},{value:\'<code>injectWhy()</code>\',id:\'injectwhy\',level:2},{value:\'Odd-Looking Actions\',id:\'odd-looking-actions\',level:2},{value:\'Observables\',id:\'observables\',level:2},{value:\'Action Streams\',id:\'action-streams\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux doesn\'t place any restrictions on how you manage asynchronous code. You can use promises, observables, sockets, generators, or any third-party library."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux stores do not have middleware. Read more on that in the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../about/redux-comparison"},"Redux comparison"),". There are many other ways to manage side effects that avoid hijacking control from the store like middleware does."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ve learned how to use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect")," to run side effects on state changes that cause atom reevaluations. We also learned in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"stores"},"the stores walkthrough")," that stores can take effects subscribers. We\'ll learn all about those here."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"That you may not need ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectEffect")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to use effects subscribers"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Some utilities for conditionally running side effects"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"render-as-you-fetch"},"Render As You Fetch"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Many of the best practices for managing side effects in React still apply with Zedux. If you\'ve been following the React community, you\'ve probably heard that ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useEffect")," is not a great pattern for most side effects - it\'s prone to race conditions and some of its quirks are unintuitive. The same applies for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When React suspense came out, we learned about a new pattern called \\"render-as-you-fetch\\". This boils down to putting side effects in event handlers instead of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useEffect"),". That is boiling it pretty heavily, but let\'s see an example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const userAtom = atom(\'user\', () => {\\n  const idStore = injectStore(1)\\n  const promiseRef = injectRef()\\n\\n  if (!promiseRef.current) {\\n    promiseRef.current = fetch(`/users/${idStore.getState()}`)\\n      .then(data => data.json())\\n  }\\n\\n  const setId = (newId: number) => {\\n    idStore.setState(newId)\\n    promiseRef.current = fetch(`/users/${newId}`).then(data => data.json())\\n  }\\n\\n  return api(idStore).setExports({ setId }).setPromise(promiseRef.current)\\n})\\n\\nfunction User() {\\n  const userData = useAtomValue(userAtom)\\n  const { setId } = useAtomInstance(userAtom).exports\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Rather than using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect")," to listen to a state update on ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"idStore"),", we kick off the request immediately, in the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"setId")," callback. The state update will cause the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"User")," component to rerender, and when it does it will suspend again."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll learn more about suspense in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense"},"the suspense walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"In general, side effects should be colocated with the state they manipulate. This is exactly what we do in React thanks to hooks and props. In Zedux, we can use injectors and exports.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"syncing-state"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"Syncing State")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A key piece of managing side effects well is having as few of them as possible. Here\'s a common situation you might find yourself in:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ions are often used as selectors with better memoization capabilities. As such, they often transform state from one shape to another. You might be tempted to use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect")," for this:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const sortUsers = list => [...list].sort((a, b) => a.name.localeCompare(b.name))\\n\\nconst sortedUsersAtom = ion(\'sortedUsers\', () => {\\n  const usersList = injectAtomValue(usersAtom)\\n  const store = injectStore(sortUsers(usersList))\\n\\n  injectEffect(() => {\\n    store.setState(sortUsers(usersList))\\n  }, [usersList])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This works but has a few imperfections:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"We set the initial state twice! Once on initial evaluation and once the first time the effect runs."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"We had to define the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"sort")," logic outside the ion so we can reuse it when setting the initial state and inside the effect."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectEffect")," runs the callback one tick later than the atom evaluation. This can be annoying to account for in tests."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"We call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"sortUsers")," every time this ion evaluates and discard the result every time except on the first evaluation. This can be fixed by using the function overload of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectStore"),", but that\'s much more verbose since it requires creating the store manually.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The fix is simple: Remove ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect"),"! Remember that you can call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setState()")," on local stores during atom evaluation without triggering another evaluation. Let\'s refactor:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const sortedUsersAtom = ion(\'sortedUsers\', () => {\\n  const usersList = injectAtomValue(usersAtom)\\n  const store = injectStore()\\n\\n  // highlight-next-line\\n  store.setState([...usersList].sort((a, b) => a.name.localeCompare(b.name)))\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This fixes every single problem. Zedux is very specifically designed to work like this. Take advantage of it!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"While updating a locally injected store during evaluation is good, updating stores in other atom instances during evaluation is not recommended. This is because atom instances can be created during render, and React doesn\'t like it when components update while another component is rendering.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But now. We did introduce a new potential problem: What if we had other dependencies in this atom? We\'d be spreading and sorting the users list every single time this atom reevaluates as a result of any of those dependencies changing. Well. You won\'t believe this ... but Zedux actually has yet another superpower:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"injectwhy"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"injectWhy()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This little beast returns an array of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/EvaluationReason"},"reasons")," that tell you why the current atom is evaluating \\uD83E\\uDD2F. Yes. \\uD83E\\uDD2F."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The list is empty on initial evaluation. After that, every reason in the list has a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"sourceKey")," field that gives the unique key, if any, of the dependency that caused the update. We can use this to determine if the current evaluation is the initial evaluation or was caused by a specific dependency updating:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const sortedUsersAtom = ion(\'sortedUsers\', () => {\\n  // highlight-next-line\\n  const usersInstance = injectAtomInstance(usersAtom)\\n  const usersList = injectAtomValue(usersInstance)\\n  const store = injectStore()\\n  const reasons = injectWhy()\\n\\n  // only set state if this is the initial evaluation or this evaluation was at\\n  // least partially caused by usersInstance:\\n  // highlight-next-line\\n  if (\\n    !reasons.length ||\\n    reasons.some(reason => reason.sourceKey === usersInstance.keyHash)\\n  ) {\\n    store.setState([...usersList].sort((a, b) => a.name.localeCompare(b.name)))\\n  }\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll learn more about ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectWhy")," in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../advanced/dev-tools"},"the dev tools walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"odd-looking-actions"},"Odd-Looking Actions"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux\' store composition model works by making actions themselves composable objects called ActionChains. The ActionChain contains needed metadata for Zedux to perform its store composition magic. ActionChains consist of any number of \\"meta nodes\\" with the wrapped action being the last node in the chain."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll go over the specifics of Zedux\' store composition model in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../advanced/store-composition"},"the store composition guide"),". For now you just need to know that, depending on your store setup, you may see these ActionChain objects as the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"action")," property in your effects handlers. Zedux doesn\'t unwrap the action because sometimes you will need to observe the metadata the action is wrapped in."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If you don\'t care about the metadata, you can get the wrapped action with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"/not-done"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"removeAllMeta"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { removeAllMeta, when } from \'@zedux/react\'\\n\\nstore.subscribe((newState, oldState, actionChain) => {\\n  const action = removeAllMeta(actionChain)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"observables"},"Observables"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux stores are a type of observable. They can be passed directly to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://github.com/ReactiveX/rxjs"},"RxJS"),"\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"from()")," to create full-fledged streams of state:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const filterUsersAtom = atom(\'filterUsers\', \'User Joe\')\\n\\nconst instance = ecosystem.getInstance(filterUsersAtom)\\nconst state$ = from(instance.store)\\n\\nconst subscription = state$\\n  .pipe(filter(state => state.length >= 3))\\n  .subscribe(currentState => {\\n    fetchUsers({ filter: currentState })\\n  })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You\'ll often want the first emission to be the current state. For that, the following pattern can be helpful:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { defer, from, merge, of } from \'rxjs\'\\n\\nexport const getState$ = <T>(store: Store<T>) =>\\n  defer(() => merge(of(store.getState()), from(store)))\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There are many ways that the extreme flexibility of RxJS and Zedux work together beautifully. For example, any atom\'s value can be an observable:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom } from \'@zedux/react\'\\nimport { of } from \'rxjs\'\\n\\nconst observableValue = atom(\'observableValue\', of(\'hello, world\'))\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This can be useful for taking advantage of Zedux\' caching abilities to share observable references."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can also export an observable from any atom:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { api, atom, injectMemo } from \'@zedux/react\'\\nimport { from } from \'rxjs\'\\n\\nconst usersStreamAtom = atom(\'usersStream\', () => {\\n  const users$ = injectMemo(() => from(streamUsers()), [])\\n\\n  return api().setExports({\\n    users$,\\n  })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Handling observable subscriptions is easy with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom, injectAtomValue, injectEffect, injectStore } from \'@zedux/react\'\\n\\nconst userAtom = atom(\'user\', () => {\\n  const user$ = injectAtomValue(userStreamAtom)\\n  const store = injectStore(null)\\n\\n  injectEffect(() => {\\n    const subscription = user$.subscribe(val => store.setState(val))\\n\\n    return () => subscription.unsubscribe()\\n  }, [user$])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"action-streams"},"Action Streams"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"One of the superpowers of Zedux stores is that they can be consumed as streams of actions. Call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"store.actionStream()")," to get an \\"observable\\"-like object that you can subscribe to to receive notifications for every action dispatched to the store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This observable-like object is compatible with RxJS\' ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"from()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { from } from \'rxjs\'\\nimport { filter } from \'rxjs/operators\'\\nimport { atom, actionFactory } from \'@zedux/react\'\\n\\nconst updateRow = actionFactory<RowUpdateEvent>(\'updateRow\')\\nconst messageBusAtom = atom(\'messageBus\', null)\\n\\nfunction BigGrid() {\\n  const busInstance = useAtomInstance(messageBusAtom)\\n  const gridRef = useRef()\\n\\n  useEffect(() => {\\n    // highlight-next-line\\n    const subscription = from(busInstance.store.actionStream())\\n      .pipe(filter(action => action.type === updateRow.type))\\n      .subscribe(action =>\\n        gridRef.current.updateRow(action.payload.rowId, action.payload)\\n      )\\n\\n    return () => subscription.unsubscribe()\\n  }, [])\\n\\n  return <ThirdPartyGridComponent ref={gridRef} />\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectEffect()")," is a simple tool for running side effects on changes that trigger atom reevaluation. It\'s also good for managing cleanup."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"BUT you may not need ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectEffect()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectWhy()")," can help reduce side effects."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Stores can be consumed directly as streams of state or as streams of actions via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"store.actionStream()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Zedux can handle every possible asynchronous flow, e.g. RxJS streams, generators, promises, sockets, etc.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Let\'s take a closer look at using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"custom-injectors"},"custom injectors")," to simplify managing side effects."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUF3SSxDQUMvUyw4SEFBNEQsMkVBQVksVUFBVSxDQUFDLEdBQUcsV0FBd0IsS0FBUyxDQUN2SCx3RUFBSyxxRUFBTSxVQUFVLENBQUMsS0FBSyxDQUN2QixXQUFXLENBQUUsY0FBYyw4dUJBeUIxQixDQUFNLENBQ1gsbUVBQ0UsSUFBSSxDQUFFLE9BQU8sVUFDRSxDQUNqQix1RUFDRSxtRUFBSSxVQUFVLENBQUMsSUFBSSxFQUFDLDJFQUFZLFVBQVUsQ0FBQyxJQUFJLG1CQUFnQyw4SEFBbUksQ0FDbE4sbUVBQUksVUFBVSxDQUFDLElBQUksMEJBQTBCLDJFQUFZLFVBQVUsQ0FBQyxJQUFJLG1CQUFnQyxLQUFVLENBQ2xILG1FQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUMsMkVBQVksVUFBVSxDQUFDLElBQUksZ0JBQTZCLGtDQUF1QyxDQUNuSCxtRUFBSSxVQUFVLENBQUMsSUFBSSxzRkFBc0YsMkVBQVksVUFBVSxDQUFDLElBQUkseUJBQXNDLEtBQVUsQ0FDcEwsbUVBQUksVUFBVSxDQUFDLElBQUksOEdBQW1ILENBQ25JLENBQ0wsbUVBQ0UsSUFBSSxDQUFFLFlBQVksZUFDRSxDQUN0QiwyR0FBeUMsa0VBQUcsVUFBVSxDQUFDLEdBQUcsQ0FDdEQsTUFBTSxDQUFFLGtCQUFrQixxQkFDRCx1Q0FBMkMsQ0FDNUQsQ0FDaEIsQ0FDQSxDQUNBRCxVQUFVLENBQUNHLGNBQWMsQ0FBRyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL2RvY3Mvd2Fsa3Rocm91Z2gvc2lkZS1lZmZlY3RzLm1keD9kOWFjIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG4vKiBAanN4UnVudGltZSBjbGFzc2ljICovXG4vKiBAanN4IG1keCAqL1xuLyogQGpzeEZyYWcgUmVhY3QuRnJhZ21lbnQgKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnO1xuXG5cbmV4cG9ydCBjb25zdCBmcm9udE1hdHRlciA9IHtcblx0aWQ6ICdzaWRlLWVmZmVjdHMnLFxuXHR0aXRsZTogJ1NpZGUgRWZmZWN0cydcbn07XG5leHBvcnQgY29uc3QgY29udGVudFRpdGxlID0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IG1ldGFkYXRhID0ge1xuICBcInVudmVyc2lvbmVkSWRcIjogXCJ3YWxrdGhyb3VnaC9zaWRlLWVmZmVjdHNcIixcbiAgXCJpZFwiOiBcIndhbGt0aHJvdWdoL3NpZGUtZWZmZWN0c1wiLFxuICBcInRpdGxlXCI6IFwiU2lkZSBFZmZlY3RzXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJaZWR1eCBkb2Vzbid0IHBsYWNlIGFueSByZXN0cmljdGlvbnMgb24gaG93IHlvdSBtYW5hZ2UgYXN5bmNocm9ub3VzIGNvZGUuIFlvdSBjYW4gdXNlIHByb21pc2VzLCBvYnNlcnZhYmxlcywgc29ja2V0cywgZ2VuZXJhdG9ycywgb3IgYW55IHRoaXJkLXBhcnR5IGxpYnJhcnkuXCIsXG4gIFwic291cmNlXCI6IFwiQHNpdGUvZG9jcy93YWxrdGhyb3VnaC9zaWRlLWVmZmVjdHMubWR4XCIsXG4gIFwic291cmNlRGlyTmFtZVwiOiBcIndhbGt0aHJvdWdoXCIsXG4gIFwic2x1Z1wiOiBcIi93YWxrdGhyb3VnaC9zaWRlLWVmZmVjdHNcIixcbiAgXCJwZXJtYWxpbmtcIjogXCIvemVkdXgvZG9jcy93YWxrdGhyb3VnaC9zaWRlLWVmZmVjdHNcIixcbiAgXCJkcmFmdFwiOiBmYWxzZSxcbiAgXCJlZGl0VXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL09tbmlzdGFjL3plZHV4L3RyZWUvbWFzdGVyL2RvY3Mvd2Fsa3Rocm91Z2gvc2lkZS1lZmZlY3RzLm1keFwiLFxuICBcInRhZ3NcIjogW10sXG4gIFwidmVyc2lvblwiOiBcImN1cnJlbnRcIixcbiAgXCJmcm9udE1hdHRlclwiOiB7XG4gICAgXCJpZFwiOiBcInNpZGUtZWZmZWN0c1wiLFxuICAgIFwidGl0bGVcIjogXCJTaWRlIEVmZmVjdHNcIlxuICB9LFxuICBcInNpZGViYXJcIjogXCJyZWFjdFwiLFxuICBcInByZXZpb3VzXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiU3RvcmVzXCIsXG4gICAgXCJwZXJtYWxpbmtcIjogXCIvemVkdXgvZG9jcy93YWxrdGhyb3VnaC9zdG9yZXNcIlxuICB9LFxuICBcIm5leHRcIjoge1xuICAgIFwidGl0bGVcIjogXCJDdXN0b20gSW5qZWN0b3JzXCIsXG4gICAgXCJwZXJtYWxpbmtcIjogXCIvemVkdXgvZG9jcy93YWxrdGhyb3VnaC9jdXN0b20taW5qZWN0b3JzXCJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBhc3NldHMgPSB7XG5cbn07XG5cblxuZXhwb3J0IGNvbnN0IHRvYyA9IFt7XG4gIHZhbHVlOiAnUmVuZGVyIEFzIFlvdSBGZXRjaCcsXG4gIGlkOiAncmVuZGVyLWFzLXlvdS1mZXRjaCcsXG4gIGxldmVsOiAyXG59LCB7XG4gIHZhbHVlOiAnPGNvZGU+U3luY2luZyBTdGF0ZTwvY29kZT4nLFxuICBpZDogJ3N5bmNpbmctc3RhdGUnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJzxjb2RlPmluamVjdFdoeSgpPC9jb2RlPicsXG4gIGlkOiAnaW5qZWN0d2h5JyxcbiAgbGV2ZWw6IDJcbn0sIHtcbiAgdmFsdWU6ICdPZGQtTG9va2luZyBBY3Rpb25zJyxcbiAgaWQ6ICdvZGQtbG9va2luZy1hY3Rpb25zJyxcbiAgbGV2ZWw6IDJcbn0sIHtcbiAgdmFsdWU6ICdPYnNlcnZhYmxlcycsXG4gIGlkOiAnb2JzZXJ2YWJsZXMnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJ0FjdGlvbiBTdHJlYW1zJyxcbiAgaWQ6ICdhY3Rpb24tc3RyZWFtcycsXG4gIGxldmVsOiAyXG59LCB7XG4gIHZhbHVlOiAnUmVjYXAnLFxuICBpZDogJ3JlY2FwJyxcbiAgbGV2ZWw6IDJcbn0sIHtcbiAgdmFsdWU6ICdOZXh0IFN0ZXBzJyxcbiAgaWQ6ICduZXh0LXN0ZXBzJyxcbiAgbGV2ZWw6IDJcbn1dO1xuXG5jb25zdCBsYXlvdXRQcm9wcyA9IHtcbiAgdG9jXG59O1xuY29uc3QgTURYTGF5b3V0ID0gXCJ3cmFwcGVyXCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoe1xuICBjb21wb25lbnRzLFxuICAuLi5wcm9wc1xufSkge1xuICByZXR1cm4gPE1EWExheW91dCB7Li4ubGF5b3V0UHJvcHN9IHsuLi5wcm9wc30gY29tcG9uZW50cz17Y29tcG9uZW50c30gbWR4VHlwZT1cIk1EWExheW91dFwiPlxuXG4gICAgPHA+e2BaZWR1eCBkb2Vzbid0IHBsYWNlIGFueSByZXN0cmljdGlvbnMgb24gaG93IHlvdSBtYW5hZ2UgYXN5bmNocm9ub3VzIGNvZGUuIFlvdSBjYW4gdXNlIHByb21pc2VzLCBvYnNlcnZhYmxlcywgc29ja2V0cywgZ2VuZXJhdG9ycywgb3IgYW55IHRoaXJkLXBhcnR5IGxpYnJhcnkuYH08L3A+XG4gICAgPHA+e2BaZWR1eCBzdG9yZXMgZG8gbm90IGhhdmUgbWlkZGxld2FyZS4gUmVhZCBtb3JlIG9uIHRoYXQgaW4gdGhlIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCIuLi9hYm91dC9yZWR1eC1jb21wYXJpc29uXCJcbiAgICAgIH19PntgUmVkdXggY29tcGFyaXNvbmB9PC9hPntgLiBUaGVyZSBhcmUgbWFueSBvdGhlciB3YXlzIHRvIG1hbmFnZSBzaWRlIGVmZmVjdHMgdGhhdCBhdm9pZCBoaWphY2tpbmcgY29udHJvbCBmcm9tIHRoZSBzdG9yZSBsaWtlIG1pZGRsZXdhcmUgZG9lcy5gfTwvcD5cbiAgICA8cD57YFdlJ3ZlIGxlYXJuZWQgaG93IHRvIHVzZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbmplY3RFZmZlY3RgfTwvaW5saW5lQ29kZT57YCB0byBydW4gc2lkZSBlZmZlY3RzIG9uIHN0YXRlIGNoYW5nZXMgdGhhdCBjYXVzZSBhdG9tIHJlZXZhbHVhdGlvbnMuIFdlIGFsc28gbGVhcm5lZCBpbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwic3RvcmVzXCJcbiAgICAgIH19PntgdGhlIHN0b3JlcyB3YWxrdGhyb3VnaGB9PC9hPntgIHRoYXQgc3RvcmVzIGNhbiB0YWtlIGVmZmVjdHMgc3Vic2NyaWJlcnMuIFdlJ2xsIGxlYXJuIGFsbCBhYm91dCB0aG9zZSBoZXJlLmB9PC9wPlxuICAgIDxhZG1vbml0aW9uIHsuLi57XG4gICAgICBcInRpdGxlXCI6IFwieW91IHdpbGwgbGVhcm5cIixcbiAgICAgIFwidHlwZVwiOiBcInRpcFwiXG4gICAgfX0+PHVsIHBhcmVudE5hbWU9XCJhZG1vbml0aW9uXCI+XG4gICAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YFRoYXQgeW91IG1heSBub3QgbmVlZCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJsaVwiPntgaW5qZWN0RWZmZWN0YH08L2lubGluZUNvZGU+PC9saT5cbiAgICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgSG93IHRvIHVzZSBlZmZlY3RzIHN1YnNjcmliZXJzYH08L2xpPlxuICAgICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BTb21lIHV0aWxpdGllcyBmb3IgY29uZGl0aW9uYWxseSBydW5uaW5nIHNpZGUgZWZmZWN0c2B9PC9saT5cbiAgICAgIDwvdWw+PC9hZG1vbml0aW9uPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInJlbmRlci1hcy15b3UtZmV0Y2hcIlxuICAgIH19PntgUmVuZGVyIEFzIFlvdSBGZXRjaGB9PC9oMj5cbiAgICA8cD57YE1hbnkgb2YgdGhlIGJlc3QgcHJhY3RpY2VzIGZvciBtYW5hZ2luZyBzaWRlIGVmZmVjdHMgaW4gUmVhY3Qgc3RpbGwgYXBwbHkgd2l0aCBaZWR1eC4gSWYgeW91J3ZlIGJlZW4gZm9sbG93aW5nIHRoZSBSZWFjdCBjb21tdW5pdHksIHlvdSd2ZSBwcm9iYWJseSBoZWFyZCB0aGF0IGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YHVzZUVmZmVjdGB9PC9pbmxpbmVDb2RlPntgIGlzIG5vdCBhIGdyZWF0IHBhdHRlcm4gZm9yIG1vc3Qgc2lkZSBlZmZlY3RzIC0gaXQncyBwcm9uZSB0byByYWNlIGNvbmRpdGlvbnMgYW5kIHNvbWUgb2YgaXRzIHF1aXJrcyBhcmUgdW5pbnR1aXRpdmUuIFRoZSBzYW1lIGFwcGxpZXMgZm9yIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGluamVjdEVmZmVjdGB9PC9pbmxpbmVDb2RlPntgLmB9PC9wPlxuICAgIDxwPntgV2hlbiBSZWFjdCBzdXNwZW5zZSBjYW1lIG91dCwgd2UgbGVhcm5lZCBhYm91dCBhIG5ldyBwYXR0ZXJuIGNhbGxlZCBcInJlbmRlci1hcy15b3UtZmV0Y2hcIi4gVGhpcyBib2lscyBkb3duIHRvIHB1dHRpbmcgc2lkZSBlZmZlY3RzIGluIGV2ZW50IGhhbmRsZXJzIGluc3RlYWQgb2YgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgdXNlRWZmZWN0YH08L2lubGluZUNvZGU+e2AuIFRoYXQgaXMgYm9pbGluZyBpdCBwcmV0dHkgaGVhdmlseSwgYnV0IGxldCdzIHNlZSBhbiBleGFtcGxlOmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHN4XCJcbiAgICAgIH19PntgY29uc3QgdXNlckF0b20gPSBhdG9tKCd1c2VyJywgKCkgPT4ge1xuICBjb25zdCBpZFN0b3JlID0gaW5qZWN0U3RvcmUoMSlcbiAgY29uc3QgcHJvbWlzZVJlZiA9IGluamVjdFJlZigpXG5cbiAgaWYgKCFwcm9taXNlUmVmLmN1cnJlbnQpIHtcbiAgICBwcm9taXNlUmVmLmN1cnJlbnQgPSBmZXRjaChcXGAvdXNlcnMvXFwke2lkU3RvcmUuZ2V0U3RhdGUoKX1cXGApXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEuanNvbigpKVxuICB9XG5cbiAgY29uc3Qgc2V0SWQgPSAobmV3SWQ6IG51bWJlcikgPT4ge1xuICAgIGlkU3RvcmUuc2V0U3RhdGUobmV3SWQpXG4gICAgcHJvbWlzZVJlZi5jdXJyZW50ID0gZmV0Y2goXFxgL3VzZXJzL1xcJHtuZXdJZH1cXGApLnRoZW4oZGF0YSA9PiBkYXRhLmpzb24oKSlcbiAgfVxuXG4gIHJldHVybiBhcGkoaWRTdG9yZSkuc2V0RXhwb3J0cyh7IHNldElkIH0pLnNldFByb21pc2UocHJvbWlzZVJlZi5jdXJyZW50KVxufSlcblxuZnVuY3Rpb24gVXNlcigpIHtcbiAgY29uc3QgdXNlckRhdGEgPSB1c2VBdG9tVmFsdWUodXNlckF0b20pXG4gIGNvbnN0IHsgc2V0SWQgfSA9IHVzZUF0b21JbnN0YW5jZSh1c2VyQXRvbSkuZXhwb3J0c1xuICAuLi5cbn1cbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgUmF0aGVyIHRoYW4gdXNpbmcgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5qZWN0RWZmZWN0YH08L2lubGluZUNvZGU+e2AgdG8gbGlzdGVuIHRvIGEgc3RhdGUgdXBkYXRlIG9uIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGlkU3RvcmVgfTwvaW5saW5lQ29kZT57YCwgd2Uga2ljayBvZmYgdGhlIHJlcXVlc3QgaW1tZWRpYXRlbHksIGluIHRoZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BzZXRJZGB9PC9pbmxpbmVDb2RlPntgIGNhbGxiYWNrLiBUaGUgc3RhdGUgdXBkYXRlIHdpbGwgY2F1c2UgdGhlIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YFVzZXJgfTwvaW5saW5lQ29kZT57YCBjb21wb25lbnQgdG8gcmVyZW5kZXIsIGFuZCB3aGVuIGl0IGRvZXMgaXQgd2lsbCBzdXNwZW5kIGFnYWluLmB9PC9wPlxuICAgIDxwPntgV2UnbGwgbGVhcm4gbW9yZSBhYm91dCBzdXNwZW5zZSBpbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwic3VzcGVuc2VcIlxuICAgICAgfX0+e2B0aGUgc3VzcGVuc2Ugd2Fsa3Rocm91Z2hgfTwvYT57YC5gfTwvcD5cbiAgICA8YWRtb25pdGlvbiB7Li4ue1xuICAgICAgXCJ0eXBlXCI6IFwidGlwXCJcbiAgICB9fT48cCBwYXJlbnROYW1lPVwiYWRtb25pdGlvblwiPntgSW4gZ2VuZXJhbCwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBjb2xvY2F0ZWQgd2l0aCB0aGUgc3RhdGUgdGhleSBtYW5pcHVsYXRlLiBUaGlzIGlzIGV4YWN0bHkgd2hhdCB3ZSBkbyBpbiBSZWFjdCB0aGFua3MgdG8gaG9va3MgYW5kIHByb3BzLiBJbiBaZWR1eCwgd2UgY2FuIHVzZSBpbmplY3RvcnMgYW5kIGV4cG9ydHMuYH08L3A+PC9hZG1vbml0aW9uPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInN5bmNpbmctc3RhdGVcIlxuICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJoMlwiPntgU3luY2luZyBTdGF0ZWB9PC9pbmxpbmVDb2RlPjwvaDI+XG4gICAgPHA+e2BBIGtleSBwaWVjZSBvZiBtYW5hZ2luZyBzaWRlIGVmZmVjdHMgd2VsbCBpcyBoYXZpbmcgYXMgZmV3IG9mIHRoZW0gYXMgcG9zc2libGUuIEhlcmUncyBhIGNvbW1vbiBzaXR1YXRpb24geW91IG1pZ2h0IGZpbmQgeW91cnNlbGYgaW46YH08L3A+XG4gICAgPHA+e2BJb25zIGFyZSBvZnRlbiB1c2VkIGFzIHNlbGVjdG9ycyB3aXRoIGJldHRlciBtZW1vaXphdGlvbiBjYXBhYmlsaXRpZXMuIEFzIHN1Y2gsIHRoZXkgb2Z0ZW4gdHJhbnNmb3JtIHN0YXRlIGZyb20gb25lIHNoYXBlIHRvIGFub3RoZXIuIFlvdSBtaWdodCBiZSB0ZW1wdGVkIHRvIHVzZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbmplY3RFZmZlY3RgfTwvaW5saW5lQ29kZT57YCBmb3IgdGhpczpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgY29uc3Qgc29ydFVzZXJzID0gbGlzdCA9PiBbLi4ubGlzdF0uc29ydCgoYSwgYikgPT4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKSlcblxuY29uc3Qgc29ydGVkVXNlcnNBdG9tID0gaW9uKCdzb3J0ZWRVc2VycycsICgpID0+IHtcbiAgY29uc3QgdXNlcnNMaXN0ID0gaW5qZWN0QXRvbVZhbHVlKHVzZXJzQXRvbSlcbiAgY29uc3Qgc3RvcmUgPSBpbmplY3RTdG9yZShzb3J0VXNlcnModXNlcnNMaXN0KSlcblxuICBpbmplY3RFZmZlY3QoKCkgPT4ge1xuICAgIHN0b3JlLnNldFN0YXRlKHNvcnRVc2Vycyh1c2Vyc0xpc3QpKVxuICB9LCBbdXNlcnNMaXN0XSlcblxuICByZXR1cm4gc3RvcmVcbn0pXG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFRoaXMgd29ya3MgYnV0IGhhcyBhIGZldyBpbXBlcmZlY3Rpb25zOmB9PC9wPlxuICAgIDx1bD5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YFdlIHNldCB0aGUgaW5pdGlhbCBzdGF0ZSB0d2ljZSEgT25jZSBvbiBpbml0aWFsIGV2YWx1YXRpb24gYW5kIG9uY2UgdGhlIGZpcnN0IHRpbWUgdGhlIGVmZmVjdCBydW5zLmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YFdlIGhhZCB0byBkZWZpbmUgdGhlIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImxpXCI+e2Bzb3J0YH08L2lubGluZUNvZGU+e2AgbG9naWMgb3V0c2lkZSB0aGUgaW9uIHNvIHdlIGNhbiByZXVzZSBpdCB3aGVuIHNldHRpbmcgdGhlIGluaXRpYWwgc3RhdGUgYW5kIGluc2lkZSB0aGUgZWZmZWN0LmB9PC9saT5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwibGlcIj57YGluamVjdEVmZmVjdGB9PC9pbmxpbmVDb2RlPntgIHJ1bnMgdGhlIGNhbGxiYWNrIG9uZSB0aWNrIGxhdGVyIHRoYW4gdGhlIGF0b20gZXZhbHVhdGlvbi4gVGhpcyBjYW4gYmUgYW5ub3lpbmcgdG8gYWNjb3VudCBmb3IgaW4gdGVzdHMuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgV2UgY2FsbCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJsaVwiPntgc29ydFVzZXJzYH08L2lubGluZUNvZGU+e2AgZXZlcnkgdGltZSB0aGlzIGlvbiBldmFsdWF0ZXMgYW5kIGRpc2NhcmQgdGhlIHJlc3VsdCBldmVyeSB0aW1lIGV4Y2VwdCBvbiB0aGUgZmlyc3QgZXZhbHVhdGlvbi4gVGhpcyBjYW4gYmUgZml4ZWQgYnkgdXNpbmcgdGhlIGZ1bmN0aW9uIG92ZXJsb2FkIG9mIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImxpXCI+e2BpbmplY3RTdG9yZWB9PC9pbmxpbmVDb2RlPntgLCBidXQgdGhhdCdzIG11Y2ggbW9yZSB2ZXJib3NlIHNpbmNlIGl0IHJlcXVpcmVzIGNyZWF0aW5nIHRoZSBzdG9yZSBtYW51YWxseS5gfTwvbGk+XG4gICAgPC91bD5cbiAgICA8cD57YFRoZSBmaXggaXMgc2ltcGxlOiBSZW1vdmUgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5qZWN0RWZmZWN0YH08L2lubGluZUNvZGU+e2AhIFJlbWVtYmVyIHRoYXQgeW91IGNhbiBjYWxsIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YC5zZXRTdGF0ZSgpYH08L2lubGluZUNvZGU+e2Agb24gbG9jYWwgc3RvcmVzIGR1cmluZyBhdG9tIGV2YWx1YXRpb24gd2l0aG91dCB0cmlnZ2VyaW5nIGFub3RoZXIgZXZhbHVhdGlvbi4gTGV0J3MgcmVmYWN0b3I6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGNvbnN0IHNvcnRlZFVzZXJzQXRvbSA9IGlvbignc29ydGVkVXNlcnMnLCAoKSA9PiB7XG4gIGNvbnN0IHVzZXJzTGlzdCA9IGluamVjdEF0b21WYWx1ZSh1c2Vyc0F0b20pXG4gIGNvbnN0IHN0b3JlID0gaW5qZWN0U3RvcmUoKVxuXG4gIC8vIGhpZ2hsaWdodC1uZXh0LWxpbmVcbiAgc3RvcmUuc2V0U3RhdGUoWy4uLnVzZXJzTGlzdF0uc29ydCgoYSwgYikgPT4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKSkpXG5cbiAgcmV0dXJuIHN0b3JlXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BUaGlzIGZpeGVzIGV2ZXJ5IHNpbmdsZSBwcm9ibGVtLiBaZWR1eCBpcyB2ZXJ5IHNwZWNpZmljYWxseSBkZXNpZ25lZCB0byB3b3JrIGxpa2UgdGhpcy4gVGFrZSBhZHZhbnRhZ2Ugb2YgaXQhYH08L3A+XG4gICAgPGFkbW9uaXRpb24gey4uLntcbiAgICAgIFwidHlwZVwiOiBcInRpcFwiXG4gICAgfX0+PHAgcGFyZW50TmFtZT1cImFkbW9uaXRpb25cIj57YFdoaWxlIHVwZGF0aW5nIGEgbG9jYWxseSBpbmplY3RlZCBzdG9yZSBkdXJpbmcgZXZhbHVhdGlvbiBpcyBnb29kLCB1cGRhdGluZyBzdG9yZXMgaW4gb3RoZXIgYXRvbSBpbnN0YW5jZXMgZHVyaW5nIGV2YWx1YXRpb24gaXMgbm90IHJlY29tbWVuZGVkLiBUaGlzIGlzIGJlY2F1c2UgYXRvbSBpbnN0YW5jZXMgY2FuIGJlIGNyZWF0ZWQgZHVyaW5nIHJlbmRlciwgYW5kIFJlYWN0IGRvZXNuJ3QgbGlrZSBpdCB3aGVuIGNvbXBvbmVudHMgdXBkYXRlIHdoaWxlIGFub3RoZXIgY29tcG9uZW50IGlzIHJlbmRlcmluZy5gfTwvcD48L2FkbW9uaXRpb24+XG4gICAgPHA+e2BCdXQgbm93LiBXZSBkaWQgaW50cm9kdWNlIGEgbmV3IHBvdGVudGlhbCBwcm9ibGVtOiBXaGF0IGlmIHdlIGhhZCBvdGhlciBkZXBlbmRlbmNpZXMgaW4gdGhpcyBhdG9tPyBXZSdkIGJlIHNwcmVhZGluZyBhbmQgc29ydGluZyB0aGUgdXNlcnMgbGlzdCBldmVyeSBzaW5nbGUgdGltZSB0aGlzIGF0b20gcmVldmFsdWF0ZXMgYXMgYSByZXN1bHQgb2YgYW55IG9mIHRob3NlIGRlcGVuZGVuY2llcyBjaGFuZ2luZy4gV2VsbC4gWW91IHdvbid0IGJlbGlldmUgdGhpcyAuLi4gYnV0IFplZHV4IGFjdHVhbGx5IGhhcyB5ZXQgYW5vdGhlciBzdXBlcnBvd2VyOmB9PC9wPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcImluamVjdHdoeVwiXG4gICAgfX0+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImgyXCI+e2BpbmplY3RXaHkoKWB9PC9pbmxpbmVDb2RlPjwvaDI+XG4gICAgPHA+e2BUaGlzIGxpdHRsZSBiZWFzdCByZXR1cm5zIGFuIGFycmF5IG9mIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCIuLi9hcGkvdHlwZXMvRXZhbHVhdGlvblJlYXNvblwiXG4gICAgICB9fT57YHJlYXNvbnNgfTwvYT57YCB0aGF0IHRlbGwgeW91IHdoeSB0aGUgY3VycmVudCBhdG9tIGlzIGV2YWx1YXRpbmcg8J+kry4gWWVzLiDwn6SvLmB9PC9wPlxuICAgIDxwPntgVGhlIGxpc3QgaXMgZW1wdHkgb24gaW5pdGlhbCBldmFsdWF0aW9uLiBBZnRlciB0aGF0LCBldmVyeSByZWFzb24gaW4gdGhlIGxpc3QgaGFzIGEgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgc291cmNlS2V5YH08L2lubGluZUNvZGU+e2AgZmllbGQgdGhhdCBnaXZlcyB0aGUgdW5pcXVlIGtleSwgaWYgYW55LCBvZiB0aGUgZGVwZW5kZW5jeSB0aGF0IGNhdXNlZCB0aGUgdXBkYXRlLiBXZSBjYW4gdXNlIHRoaXMgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IGV2YWx1YXRpb24gaXMgdGhlIGluaXRpYWwgZXZhbHVhdGlvbiBvciB3YXMgY2F1c2VkIGJ5IGEgc3BlY2lmaWMgZGVwZW5kZW5jeSB1cGRhdGluZzpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgY29uc3Qgc29ydGVkVXNlcnNBdG9tID0gaW9uKCdzb3J0ZWRVc2VycycsICgpID0+IHtcbiAgLy8gaGlnaGxpZ2h0LW5leHQtbGluZVxuICBjb25zdCB1c2Vyc0luc3RhbmNlID0gaW5qZWN0QXRvbUluc3RhbmNlKHVzZXJzQXRvbSlcbiAgY29uc3QgdXNlcnNMaXN0ID0gaW5qZWN0QXRvbVZhbHVlKHVzZXJzSW5zdGFuY2UpXG4gIGNvbnN0IHN0b3JlID0gaW5qZWN0U3RvcmUoKVxuICBjb25zdCByZWFzb25zID0gaW5qZWN0V2h5KClcblxuICAvLyBvbmx5IHNldCBzdGF0ZSBpZiB0aGlzIGlzIHRoZSBpbml0aWFsIGV2YWx1YXRpb24gb3IgdGhpcyBldmFsdWF0aW9uIHdhcyBhdFxuICAvLyBsZWFzdCBwYXJ0aWFsbHkgY2F1c2VkIGJ5IHVzZXJzSW5zdGFuY2U6XG4gIC8vIGhpZ2hsaWdodC1uZXh0LWxpbmVcbiAgaWYgKFxuICAgICFyZWFzb25zLmxlbmd0aCB8fFxuICAgIHJlYXNvbnMuc29tZShyZWFzb24gPT4gcmVhc29uLnNvdXJjZUtleSA9PT0gdXNlcnNJbnN0YW5jZS5rZXlIYXNoKVxuICApIHtcbiAgICBzdG9yZS5zZXRTdGF0ZShbLi4udXNlcnNMaXN0XS5zb3J0KChhLCBiKSA9PiBhLm5hbWUubG9jYWxlQ29tcGFyZShiLm5hbWUpKSlcbiAgfVxuXG4gIHJldHVybiBzdG9yZVxufSlcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgV2UnbGwgbGVhcm4gbW9yZSBhYm91dCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbmplY3RXaHlgfTwvaW5saW5lQ29kZT57YCBpbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiLi4vYWR2YW5jZWQvZGV2LXRvb2xzXCJcbiAgICAgIH19PntgdGhlIGRldiB0b29scyB3YWxrdGhyb3VnaGB9PC9hPntgLmB9PC9wPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcIm9kZC1sb29raW5nLWFjdGlvbnNcIlxuICAgIH19PntgT2RkLUxvb2tpbmcgQWN0aW9uc2B9PC9oMj5cbiAgICA8cD57YFplZHV4JyBzdG9yZSBjb21wb3NpdGlvbiBtb2RlbCB3b3JrcyBieSBtYWtpbmcgYWN0aW9ucyB0aGVtc2VsdmVzIGNvbXBvc2FibGUgb2JqZWN0cyBjYWxsZWQgQWN0aW9uQ2hhaW5zLiBUaGUgQWN0aW9uQ2hhaW4gY29udGFpbnMgbmVlZGVkIG1ldGFkYXRhIGZvciBaZWR1eCB0byBwZXJmb3JtIGl0cyBzdG9yZSBjb21wb3NpdGlvbiBtYWdpYy4gQWN0aW9uQ2hhaW5zIGNvbnNpc3Qgb2YgYW55IG51bWJlciBvZiBcIm1ldGEgbm9kZXNcIiB3aXRoIHRoZSB3cmFwcGVkIGFjdGlvbiBiZWluZyB0aGUgbGFzdCBub2RlIGluIHRoZSBjaGFpbi5gfTwvcD5cbiAgICA8cD57YFdlJ2xsIGdvIG92ZXIgdGhlIHNwZWNpZmljcyBvZiBaZWR1eCcgc3RvcmUgY29tcG9zaXRpb24gbW9kZWwgaW4gYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgIFwiaHJlZlwiOiBcIi4uL2FkdmFuY2VkL3N0b3JlLWNvbXBvc2l0aW9uXCJcbiAgICAgIH19PntgdGhlIHN0b3JlIGNvbXBvc2l0aW9uIGd1aWRlYH08L2E+e2AuIEZvciBub3cgeW91IGp1c3QgbmVlZCB0byBrbm93IHRoYXQsIGRlcGVuZGluZyBvbiB5b3VyIHN0b3JlIHNldHVwLCB5b3UgbWF5IHNlZSB0aGVzZSBBY3Rpb25DaGFpbiBvYmplY3RzIGFzIHRoZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BhY3Rpb25gfTwvaW5saW5lQ29kZT57YCBwcm9wZXJ0eSBpbiB5b3VyIGVmZmVjdHMgaGFuZGxlcnMuIFplZHV4IGRvZXNuJ3QgdW53cmFwIHRoZSBhY3Rpb24gYmVjYXVzZSBzb21ldGltZXMgeW91IHdpbGwgbmVlZCB0byBvYnNlcnZlIHRoZSBtZXRhZGF0YSB0aGUgYWN0aW9uIGlzIHdyYXBwZWQgaW4uYH08L3A+XG4gICAgPHA+e2BJZiB5b3UgZG9uJ3QgY2FyZSBhYm91dCB0aGUgbWV0YWRhdGEsIHlvdSBjYW4gZ2V0IHRoZSB3cmFwcGVkIGFjdGlvbiB3aXRoIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCIvbm90LWRvbmVcIlxuICAgICAgfX0+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImFcIj57YHJlbW92ZUFsbE1ldGFgfTwvaW5saW5lQ29kZT48L2E+PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2BpbXBvcnQgeyByZW1vdmVBbGxNZXRhLCB3aGVuIH0gZnJvbSAnQHplZHV4L3JlYWN0J1xuXG5zdG9yZS5zdWJzY3JpYmUoKG5ld1N0YXRlLCBvbGRTdGF0ZSwgYWN0aW9uQ2hhaW4pID0+IHtcbiAgY29uc3QgYWN0aW9uID0gcmVtb3ZlQWxsTWV0YShhY3Rpb25DaGFpbilcbn0pXG5gfTwvY29kZT48L3ByZT5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJvYnNlcnZhYmxlc1wiXG4gICAgfX0+e2BPYnNlcnZhYmxlc2B9PC9oMj5cbiAgICA8cD57YFplZHV4IHN0b3JlcyBhcmUgYSB0eXBlIG9mIG9ic2VydmFibGUuIFRoZXkgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSB0byBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzXCJcbiAgICAgIH19PntgUnhKU2B9PC9hPntgJ3MgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgZnJvbSgpYH08L2lubGluZUNvZGU+e2AgdG8gY3JlYXRlIGZ1bGwtZmxlZGdlZCBzdHJlYW1zIG9mIHN0YXRlOmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2Bjb25zdCBmaWx0ZXJVc2Vyc0F0b20gPSBhdG9tKCdmaWx0ZXJVc2VycycsICdVc2VyIEpvZScpXG5cbmNvbnN0IGluc3RhbmNlID0gZWNvc3lzdGVtLmdldEluc3RhbmNlKGZpbHRlclVzZXJzQXRvbSlcbmNvbnN0IHN0YXRlJCA9IGZyb20oaW5zdGFuY2Uuc3RvcmUpXG5cbmNvbnN0IHN1YnNjcmlwdGlvbiA9IHN0YXRlJFxuICAucGlwZShmaWx0ZXIoc3RhdGUgPT4gc3RhdGUubGVuZ3RoID49IDMpKVxuICAuc3Vic2NyaWJlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgZmV0Y2hVc2Vycyh7IGZpbHRlcjogY3VycmVudFN0YXRlIH0pXG4gIH0pXG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFlvdSdsbCBvZnRlbiB3YW50IHRoZSBmaXJzdCBlbWlzc2lvbiB0byBiZSB0aGUgY3VycmVudCBzdGF0ZS4gRm9yIHRoYXQsIHRoZSBmb2xsb3dpbmcgcGF0dGVybiBjYW4gYmUgaGVscGZ1bDpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgaW1wb3J0IHsgZGVmZXIsIGZyb20sIG1lcmdlLCBvZiB9IGZyb20gJ3J4anMnXG5cbmV4cG9ydCBjb25zdCBnZXRTdGF0ZSQgPSA8VD4oc3RvcmU6IFN0b3JlPFQ+KSA9PlxuICBkZWZlcigoKSA9PiBtZXJnZShvZihzdG9yZS5nZXRTdGF0ZSgpKSwgZnJvbShzdG9yZSkpKVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BUaGVyZSBhcmUgbWFueSB3YXlzIHRoYXQgdGhlIGV4dHJlbWUgZmxleGliaWxpdHkgb2YgUnhKUyBhbmQgWmVkdXggd29yayB0b2dldGhlciBiZWF1dGlmdWxseS4gRm9yIGV4YW1wbGUsIGFueSBhdG9tJ3MgdmFsdWUgY2FuIGJlIGFuIG9ic2VydmFibGU6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGltcG9ydCB7IGF0b20gfSBmcm9tICdAemVkdXgvcmVhY3QnXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnXG5cbmNvbnN0IG9ic2VydmFibGVWYWx1ZSA9IGF0b20oJ29ic2VydmFibGVWYWx1ZScsIG9mKCdoZWxsbywgd29ybGQnKSlcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgVGhpcyBjYW4gYmUgdXNlZnVsIGZvciB0YWtpbmcgYWR2YW50YWdlIG9mIFplZHV4JyBjYWNoaW5nIGFiaWxpdGllcyB0byBzaGFyZSBvYnNlcnZhYmxlIHJlZmVyZW5jZXMuYH08L3A+XG4gICAgPHA+e2BZb3UgY2FuIGFsc28gZXhwb3J0IGFuIG9ic2VydmFibGUgZnJvbSBhbnkgYXRvbTpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgaW1wb3J0IHsgYXBpLCBhdG9tLCBpbmplY3RNZW1vIH0gZnJvbSAnQHplZHV4L3JlYWN0J1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJ3J4anMnXG5cbmNvbnN0IHVzZXJzU3RyZWFtQXRvbSA9IGF0b20oJ3VzZXJzU3RyZWFtJywgKCkgPT4ge1xuICBjb25zdCB1c2VycyQgPSBpbmplY3RNZW1vKCgpID0+IGZyb20oc3RyZWFtVXNlcnMoKSksIFtdKVxuXG4gIHJldHVybiBhcGkoKS5zZXRFeHBvcnRzKHtcbiAgICB1c2VycyQsXG4gIH0pXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BIYW5kbGluZyBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbnMgaXMgZWFzeSB3aXRoIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGluamVjdEVmZmVjdCgpYH08L2lubGluZUNvZGU+e2A6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGltcG9ydCB7IGF0b20sIGluamVjdEF0b21WYWx1ZSwgaW5qZWN0RWZmZWN0LCBpbmplY3RTdG9yZSB9IGZyb20gJ0B6ZWR1eC9yZWFjdCdcblxuY29uc3QgdXNlckF0b20gPSBhdG9tKCd1c2VyJywgKCkgPT4ge1xuICBjb25zdCB1c2VyJCA9IGluamVjdEF0b21WYWx1ZSh1c2VyU3RyZWFtQXRvbSlcbiAgY29uc3Qgc3RvcmUgPSBpbmplY3RTdG9yZShudWxsKVxuXG4gIGluamVjdEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdXNlciQuc3Vic2NyaWJlKHZhbCA9PiBzdG9yZS5zZXRTdGF0ZSh2YWwpKVxuXG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gIH0sIFt1c2VyJF0pXG5cbiAgcmV0dXJuIHN0b3JlXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiYWN0aW9uLXN0cmVhbXNcIlxuICAgIH19PntgQWN0aW9uIFN0cmVhbXNgfTwvaDI+XG4gICAgPHA+e2BPbmUgb2YgdGhlIHN1cGVycG93ZXJzIG9mIFplZHV4IHN0b3JlcyBpcyB0aGF0IHRoZXkgY2FuIGJlIGNvbnN1bWVkIGFzIHN0cmVhbXMgb2YgYWN0aW9ucy4gQ2FsbCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BzdG9yZS5hY3Rpb25TdHJlYW0oKWB9PC9pbmxpbmVDb2RlPntgIHRvIGdldCBhbiBcIm9ic2VydmFibGVcIi1saWtlIG9iamVjdCB0aGF0IHlvdSBjYW4gc3Vic2NyaWJlIHRvIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBmb3IgZXZlcnkgYWN0aW9uIGRpc3BhdGNoZWQgdG8gdGhlIHN0b3JlLmB9PC9wPlxuICAgIDxwPntgVGhpcyBvYnNlcnZhYmxlLWxpa2Ugb2JqZWN0IGlzIGNvbXBhdGlibGUgd2l0aCBSeEpTJyBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2Bmcm9tKClgfTwvaW5saW5lQ29kZT57YDpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzeFwiXG4gICAgICB9fT57YGltcG9ydCB7IGZyb20gfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXG5pbXBvcnQgeyBhdG9tLCBhY3Rpb25GYWN0b3J5IH0gZnJvbSAnQHplZHV4L3JlYWN0J1xuXG5jb25zdCB1cGRhdGVSb3cgPSBhY3Rpb25GYWN0b3J5PFJvd1VwZGF0ZUV2ZW50PigndXBkYXRlUm93JylcbmNvbnN0IG1lc3NhZ2VCdXNBdG9tID0gYXRvbSgnbWVzc2FnZUJ1cycsIG51bGwpXG5cbmZ1bmN0aW9uIEJpZ0dyaWQoKSB7XG4gIGNvbnN0IGJ1c0luc3RhbmNlID0gdXNlQXRvbUluc3RhbmNlKG1lc3NhZ2VCdXNBdG9tKVxuICBjb25zdCBncmlkUmVmID0gdXNlUmVmKClcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIGhpZ2hsaWdodC1uZXh0LWxpbmVcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBmcm9tKGJ1c0luc3RhbmNlLnN0b3JlLmFjdGlvblN0cmVhbSgpKVxuICAgICAgLnBpcGUoZmlsdGVyKGFjdGlvbiA9PiBhY3Rpb24udHlwZSA9PT0gdXBkYXRlUm93LnR5cGUpKVxuICAgICAgLnN1YnNjcmliZShhY3Rpb24gPT5cbiAgICAgICAgZ3JpZFJlZi5jdXJyZW50LnVwZGF0ZVJvdyhhY3Rpb24ucGF5bG9hZC5yb3dJZCwgYWN0aW9uLnBheWxvYWQpXG4gICAgICApXG5cbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIDxUaGlyZFBhcnR5R3JpZENvbXBvbmVudCByZWY9e2dyaWRSZWZ9IC8+XG59XG5gfTwvY29kZT48L3ByZT5cbiAgICA8aDIgey4uLntcbiAgICAgIFwiaWRcIjogXCJyZWNhcFwiXG4gICAgfX0+e2BSZWNhcGB9PC9oMj5cbiAgICA8dWw+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImxpXCI+e2BpbmplY3RFZmZlY3QoKWB9PC9pbmxpbmVDb2RlPntgIGlzIGEgc2ltcGxlIHRvb2wgZm9yIHJ1bm5pbmcgc2lkZSBlZmZlY3RzIG9uIGNoYW5nZXMgdGhhdCB0cmlnZ2VyIGF0b20gcmVldmFsdWF0aW9uLiBJdCdzIGFsc28gZ29vZCBmb3IgbWFuYWdpbmcgY2xlYW51cC5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BCVVQgeW91IG1heSBub3QgbmVlZCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJsaVwiPntgaW5qZWN0RWZmZWN0KClgfTwvaW5saW5lQ29kZT57YC5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImxpXCI+e2BpbmplY3RXaHkoKWB9PC9pbmxpbmVDb2RlPntgIGNhbiBoZWxwIHJlZHVjZSBzaWRlIGVmZmVjdHMuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgU3RvcmVzIGNhbiBiZSBjb25zdW1lZCBkaXJlY3RseSBhcyBzdHJlYW1zIG9mIHN0YXRlIG9yIGFzIHN0cmVhbXMgb2YgYWN0aW9ucyB2aWEgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwibGlcIj57YHN0b3JlLmFjdGlvblN0cmVhbSgpYH08L2lubGluZUNvZGU+e2AuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPntgWmVkdXggY2FuIGhhbmRsZSBldmVyeSBwb3NzaWJsZSBhc3luY2hyb25vdXMgZmxvdywgZS5nLiBSeEpTIHN0cmVhbXMsIGdlbmVyYXRvcnMsIHByb21pc2VzLCBzb2NrZXRzLCBldGMuYH08L2xpPlxuICAgIDwvdWw+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwibmV4dC1zdGVwc1wiXG4gICAgfX0+e2BOZXh0IFN0ZXBzYH08L2gyPlxuICAgIDxwPntgTGV0J3MgdGFrZSBhIGNsb3NlciBsb29rIGF0IHVzaW5nIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCJjdXN0b20taW5qZWN0b3JzXCJcbiAgICAgIH19PntgY3VzdG9tIGluamVjdG9yc2B9PC9hPntgIHRvIHNpbXBsaWZ5IG1hbmFnaW5nIHNpZGUgZWZmZWN0cy5gfTwvcD5cbiAgICA8L01EWExheW91dD47XG59XG47XG5NRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIm1keCIsImZyb250TWF0dGVyIiwiaWQiLCJ0aXRsZSIsImNvbnRlbnRUaXRsZSIsInVuZGVmaW5lZCIsIm1ldGFkYXRhIiwiYXNzZXRzIiwidG9jIiwidmFsdWUiLCJsZXZlbCIsImxheW91dFByb3BzIiwiTURYTGF5b3V0IiwiTURYQ29udGVudCIsImNvbXBvbmVudHMiLCJwcm9wcyIsImlzTURYQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n')}}]);