"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[8274],{4224:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var a=r(3117),n=r(102),i=(r(7294),r(3905)),o=["components"],c={id:"createStore",title:"createStore"},s=void 0,l={unversionedId:"api/factories/createStore",id:"api/factories/createStore",isDocsHomePage:!1,title:"createStore",description:"Creates a Zedux store.",source:"@site/docs/api/factories/createStore.mdx",sourceDirName:"api/factories",slug:"/api/factories/createStore",permalink:"/zedux/docs/api/factories/createStore",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/factories/createStore.mdx",tags:[],version:"current",frontMatter:{id:"createStore",title:"createStore"},sidebar:"react",previous:{title:"createReducer",permalink:"/zedux/docs/api/factories/createReducer"},next:{title:"ecosystem",permalink:"/zedux/docs/api/factories/ecosystem"}},d=[{value:"Examples",id:"examples",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"<code>initialHierarchy</code>",id:"initialhierarchy",children:[],level:3},{value:"<code>initialState</code>",id:"initialstate",children:[],level:3}],level:2}],u={toc:d};function p(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@zedux/react'\n")),(0,i.kt)("p",null,"Creates a ",(0,i.kt)("a",{parentName:"p",href:"../classes/Store"},"Zedux store"),"."),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@zedux/react'\n\nconst zeroConfigStore = createStore()\nzeroConfigStore.setState('initial state')\n\nconst zeroConfigStoreWithInitialState = createStore(null, 'initial state')\nzeroConfigStoreWithInitialState.setState('new state')\n\nconst reducerStore = createStore(rootReducer)\nreducerStore.dispatch(myActor())\n\nconst machineStore = createStore(stateMachine)\nmachineStore.dispatch(myActor())\n\nconst composedStore = createStore({\n  zeroConfig: zeroConfigStore,\n  reducerStore: reducerStore,\n  machineStore: machineStore,\n})\n\nconst bigComposedStore = createStore({\n  a: storeA,\n  b: reducerB,\n  c: {\n    d: reducerD,\n    e: storeE,\n    f: {\n      g: storeG,\n    },\n  },\n})\n")),(0,i.kt)("h2",{id:"signature"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"createStore(initialHierarchy?, initialState?) => Store\n")),(0,i.kt)("h3",{id:"initialhierarchy"},(0,i.kt)("inlineCode",{parentName:"h3"},"initialHierarchy")),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"../types/HierarchyDescriptor"},"HierarchyDescriptor")," that defines the shape of the store. The descriptor can be another store, a ",(0,i.kt)("a",{parentName:"p",href:"../types/Reducer"},"reducer"),", or an object containing stores and/or reducers, nested indefinitely."),(0,i.kt)("p",null,"If an object is passed, Zedux will spider through it and create a reducer hierarchy. Zedux will then call the generated root reducer to get the initial state of the store."),(0,i.kt)("p",null,"If an initialState is also passed, Zedux will set that as the state before calling the root reducer."),(0,i.kt)("h3",{id:"initialstate"},(0,i.kt)("inlineCode",{parentName:"h3"},"initialState")),(0,i.kt)("p",null,"The initial state of the store. Stores can hold anything. If using the ",(0,i.kt)("a",{parentName:"p",href:"../../walkthrough/stores#zero-config"},"zero-config pattern"),", pass ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," as the initialHierarchy."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const zeroConfigStore = createStore(null, 'initial state')\n")))}p.isMDXComponent=!0}}]);