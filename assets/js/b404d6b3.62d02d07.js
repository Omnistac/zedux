"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[6509,624],{4266:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\n/* harmony import */ var _site_src_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9441);\n/* harmony import */ var _injectors_injectAtomSelector_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3992);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'useAtomSelector\',title:\'useAtomSelector\'};var contentTitle=undefined;var metadata={"unversionedId":"api/hooks/useAtomSelector","id":"api/hooks/useAtomSelector","title":"useAtomSelector","description":"A React hook that accepts an AtomSelector and registers a dynamic graph dependency on the selector\'s cache.","source":"@site/docs/api/hooks/useAtomSelector.mdx","sourceDirName":"api/hooks","slug":"/api/hooks/useAtomSelector","permalink":"/zedux/docs/api/hooks/useAtomSelector","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/api/hooks/useAtomSelector.mdx","tags":[],"version":"current","frontMatter":{"id":"useAtomSelector","title":"useAtomSelector"},"sidebar":"react","previous":{"title":"useAtomInstance","permalink":"/zedux/docs/api/hooks/useAtomInstance"},"next":{"title":"useAtomState","permalink":"/zedux/docs/api/hooks/useAtomState"}};var assets={};var toc=[{value:\'Example\',id:\'example\',level:2},{value:\'Signature\',id:\'signature\',level:2},{value:\'See Also\',id:\'see-also\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { useAtomSelector } from \'@zedux/react\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A React hook that accepts an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../types/AtomSelector"},"AtomSelector")," and registers a dynamic graph dependency on the selector\'s cache."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The selector will rerun every time any of its own dynamic dependencies update. The React component that uses this injector will only rerender when the selector result changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Caches the selector\'s result in the ecosystem\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../classes/SelectorCache"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},".selectorCache"))," if it hasn\'t been cached yet. If this selector has been cached before with the same arguments, the selector doesn\'t run, and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomSelector()")," returns the cached result."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Unlike all other atom selection APIs (",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../injectors/injectAtomSelector"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectAtomSelector()"))," and the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../types/AtomGetters#select"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"select")," AtomGetter"),"), ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomSelector()")," actually respects the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../types/AtomSelectorConfig#argscomparator"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"argsComparator")," AtomSelectorConfig option"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"example"},"Example"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=useAtomSelector/example resultVar=Counters","live":true,"ecosystemId":"useAtomSelector/example","resultVar":"Counters"},"const countersAtom = atom(\'counters\', () => {\\n  const store = injectStore({ counterA: 1, counterB: 1 })\\n\\n  return store\\n})\\n\\nfunction Counters() {\\n  const counterA = useAtomSelector(({ get }) => get(countersAtom).counterA)\\n  const instance = useAtomInstance(countersAtom)\\n  const { setState } = instance\\n  const rendersRef = useRef(0)\\n  rendersRef.current++\\n\\n  return (\\n    <>\\n      <div>Number of renders: {rendersRef.current}</div>\\n      <div>Counter A (dynamic): {counterA}</div>\\n      <button\\n        onClick={() =>\\n          setState(state => ({ ...state, counterA: state.counterA + 1 }))\\n        }\\n      >\\n        Increment Counter A\\n      </button>\\n      <div>Counter B (static): {instance.getState().counterB}</div>\\n      <button\\n        onClick={() =>\\n          setState(state => ({ ...state, counterB: state.counterB + 1 }))\\n        }\\n      >\\n        Increment Counter B\\n      </button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Miscellaneous:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// only rerender when `someField` changes:\\nconst selectedVal = useAtomSelector(({ get }) => get(myAtom).someField)\\n\\nconst withParams = useAtomSelector(\\n  ({ get }) => get(myAtom, [\'a param\']).someField\\n)\\n\\nconst selectorComposition = useAtomSelector(\\n  ({ select }) => `${select(helloSelector)}, ${select(worldSelector)}!`\\n)\\n\\nconst staticVal = useAtomSelector(\\n  ({ getInstance }) => getInstance(myAtom).getState().someField\\n)\\n\\nconst staticValUsingEcosystem = useAtomSelector(\\n  ({ ecosystem }) => ecosystem.get(myAtom).someField\\n)\\n\\n// passing a selector cache directly:\\nconst cache = ecosystem.selectorCache.getCache(mySelector) // doesn\'t subscribe\\nconst value = useAtomSelector(cache) // subscribes\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"signature"},"Signature"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Tabs */ .mQ,{mdxType:"Tabs"},(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab1 */ .x_)("useAtomSelector = (selectable, ...args?) => result"),(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab2 */ .s2)("declare const useAtomSelector: <T, Args extends any[]>(selectable: Selectable<T, Args>, ...args: Args) => T")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_injectors_injectAtomSelector_mdx__WEBPACK_IMPORTED_MODULE_3__.InjectAtomSelectorLegend,{name:"useAtomSelector",type:"hook",mdxType:"InjectAtomSelectorLegend"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"see-also"},"See Also"));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4266\n')},3992:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "InjectAtomSelectorLegend": function() { return /* binding */ InjectAtomSelectorLegend; },\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\n/* harmony import */ var _site_src_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9441);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'injectAtomSelector\',title:\'injectAtomSelector\'};var contentTitle=undefined;var metadata={"unversionedId":"api/injectors/injectAtomSelector","id":"api/injectors/injectAtomSelector","title":"injectAtomSelector","description":"An injector that accepts an AtomSelector and registers a dynamic graph dependency on the selector\'s cache.","source":"@site/docs/api/injectors/injectAtomSelector.mdx","sourceDirName":"api/injectors","slug":"/api/injectors/injectAtomSelector","permalink":"/zedux/docs/api/injectors/injectAtomSelector","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectAtomSelector.mdx","tags":[],"version":"current","frontMatter":{"id":"injectAtomSelector","title":"injectAtomSelector"},"sidebar":"react","previous":{"title":"injectAtomInstance","permalink":"/zedux/docs/api/injectors/injectAtomInstance"},"next":{"title":"injectAtomState","permalink":"/zedux/docs/api/injectors/injectAtomState"}};var assets={};var toc=[{value:\'Example\',id:\'example\',level:2},{value:\'Signature\',id:\'signature\',level:2},{value:\'See Also\',id:\'see-also\',level:2}];var InjectAtomSelectorLegend=function InjectAtomSelectorLegend(_ref){var _ref$name=_ref.name,name=_ref$name===void 0?\'injectAtomSelector\':_ref$name,_ref$type=_ref.type,type=_ref$type===void 0?\'injector\':_ref$type;return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Legend */ .De,{mdxType:"Legend"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"selectable",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Required. An ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../types/AtomSelector",mdxType:"Link"},"AtomSelector"),",",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../types/AtomSelectorConfig",mdxType:"Link"},"AtomSelectorConfig")," object, or a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../classes/SelectorCacheItem",mdxType:"Link"},"SelectorCacheItem"),\' \',"instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It\'s recommended to pass a stable function/object reference whenever possible for best performance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If an AtomSelector or AtomSelectorConfig object is passed,",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," runs the selector and caches the value if it hasn\'t been cached yet. If the selector has been cached before with the exact params (deep equality), Zedux doesn\'t run the selector and returns the cached value."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If an SelectorCacheItem is passed, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," simply returns the cached value."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In all cases, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," registers a dynamic dependency on the resolved selector cache - the current",\' \',type===\'hook\'?\'React component\':\'atom instance\'," will reevaluate whenever the selector result changes")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"args",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Required if the selector takes arguments. Must not be passed otherwise."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Selector arguments should always be serializable values (no functions). You can remove this requirement via the",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../types/EcosystemConfig#complexparams",mdxType:"Link"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"complexParams")),\' \',"ecosystem config option (not recommended).")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"Returns",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The result of running the selector. If the given selector + args combo has been cached before, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," returns the cached value.")));};var layoutProps={toc:toc,InjectAtomSelectorLegend:InjectAtomSelectorLegend};var MDXLayout="wrapper";function MDXContent(_ref2){var components=_ref2.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_ref2,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { injectAtomSelector } from \'@zedux/react\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../glossary#injector"},"injector")," that accepts an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../types/AtomSelector"},"AtomSelector")," and registers a dynamic graph dependency on the selector\'s cache."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The selector will rerun every time any of its own dynamic dependencies update. The atom instance that uses this injector will only reevaluate when the selector result changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Caches the selector\'s result in the ecosystem\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../classes/SelectorCache"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},".selectorCache"))," if it hasn\'t been cached yet. If this selector has been cached before with the exact same arguments, the selector doesn\'t run, and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomSelector()")," returns the cached result."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"example"},"Example"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=injectAtomSelector/example resultVar=Counters","live":true,"ecosystemId":"injectAtomSelector/example","resultVar":"Counters"},"const countersAtom = atom(\'counters\', () => {\\n  return injectStore({ counterA: 1, counterB: 1 })\\n})\\n\\nconst wrapperAtom = atom(\'wrapper\', () => {\\n  const counterA = injectAtomSelector(({ get }) => get(countersAtom).counterA)\\n  const instance = injectAtomInstance(countersAtom)\\n  const { setState } = instance\\n\\n  return api({\\n    counterA,\\n    counterB: instance.getState().counterB,\\n  }).setExports({\\n    incrementA: () =>\\n      setState(state => ({ ...state, counterA: state.counterA + 1 })),\\n    incrementB: () =>\\n      setState(state => ({ ...state, counterB: state.counterB + 1 })),\\n  })\\n})\\n\\nfunction Counters() {\\n  const { counterA, counterB } = useAtomValue(wrapperAtom)\\n  const { incrementA, incrementB } = useAtomInstance(wrapperAtom).exports\\n  const rendersRef = useRef(0)\\n  rendersRef.current++\\n\\n  return (\\n    <>\\n      <div>Number of renders: {rendersRef.current}</div>\\n      <div>Counter A (dynamic): {counterA}</div>\\n      <button onClick={incrementA}>Increment Counter A</button>\\n      <div>Counter B (static): {counterB}</div>\\n      <button onClick={incrementB}>Increment Counter B</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Miscellaneous:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// only reevaluate when `someField` changes:\\nconst selectedVal = injectAtomSelector(({ get }) => get(myAtom).someField)\\n\\nconst withParams = injectAtomSelector(\\n  ({ get }) => get(myAtom, [\'a param\']).someField\\n)\\n\\nconst selectorComposition = injectAtomSelector(\\n  ({ select }) => `${select(helloSelector)}, ${select(worldSelector)}!`\\n)\\n\\nconst staticVal = injectAtomSelector(\\n  ({ getInstance }) => getInstance(myAtom).getState().someField\\n)\\n\\nconst staticValUsingEcosystem = injectAtomSelector(\\n  ({ ecosystem }) => ecosystem.get(myAtom).someField\\n)\\n\\n// passing a selector cache directly:\\nconst cache = ecosystem.selectorCache.getCache(mySelector) // doesn\'t subscribe\\nconst value = injectAtomSelector(cache) // subscribes\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"signature"},"Signature"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Tabs */ .mQ,{mdxType:"Tabs"},(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab1 */ .x_)("injectAtomSelector = (selectable, ...args) => result"),(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab2 */ .s2)("declare const injectAtomSelector: <T, Args extends any[]>(selectable: Selectable<T, Args>, ...args: Args) => T")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(InjectAtomSelectorLegend,{mdxType:"InjectAtomSelectorLegend"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"see-also"},"See Also"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../../walkthrough/selectors"},"The Selectors walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../hooks/useAtomSelector"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomSelector()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../types/AtomGetters#select"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"select")," AtomGetter"))));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3992\n')}}]);