"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4929],{6267:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "InjectAtomInstanceLegend": function() { return /* binding */ InjectAtomInstanceLegend; },\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\n/* harmony import */ var _site_src_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9441);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'injectAtomInstance\',title:\'injectAtomInstance\'};var contentTitle=undefined;var metadata={"unversionedId":"api/injectors/injectAtomInstance","id":"api/injectors/injectAtomInstance","title":"injectAtomInstance","description":"An injector that accepts an atom template and its params and registers a static graph dependency on the resolved atom instance. Returns the resolved atom instance object.","source":"@site/docs/api/injectors/injectAtomInstance.mdx","sourceDirName":"api/injectors","slug":"/api/injectors/injectAtomInstance","permalink":"/zedux/docs/api/injectors/injectAtomInstance","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectAtomInstance.mdx","tags":[],"version":"current","frontMatter":{"id":"injectAtomInstance","title":"injectAtomInstance"},"sidebar":"react","previous":{"title":"injectAtomGetters","permalink":"/zedux/docs/api/injectors/injectAtomGetters"},"next":{"title":"injectAtomSelector","permalink":"/zedux/docs/api/injectors/injectAtomSelector"}};var assets={};var toc=[{value:\'Examples\',id:\'examples\',level:2},{value:\'Signature\',id:\'signature\',level:2},{value:\'See Also\',id:\'see-also\',level:2}];var InjectAtomInstanceLegend=function InjectAtomInstanceLegend(_ref){var _ref$name=_ref.name,name=_ref$name===void 0?\'injectAtomInstance\':_ref$name,_ref$extraConfig=_ref.extraConfig,extraConfig=_ref$extraConfig===void 0?null:_ref$extraConfig,_ref$extraConfigDef=_ref.extraConfigDef,extraConfigDef=_ref$extraConfigDef===void 0?\'\':_ref$extraConfigDef;return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Legend */ .De,{mdxType:"Legend"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"atom",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Required. An ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../classes/AtomTemplate",mdxType:"Link"},"atom template")," or",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../classes/AtomInstance",mdxType:"Link"},"atom instance"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If an atom template is passed, you must also pass any required params of the atom."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If an atom instance is passed, the params are ignored. In this case,",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," returns the passed instance as-is."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In all cases, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," registers a static dependency on the resolved instance.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"params",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Required if the passed atom template takes required params. Optional if not."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Don\'t pass this or pass an empty array if the atom does not take params or if passing an atom instance.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"config",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Optional. An object containing the following optional properties:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__.Ts,{mdxType:"Ts"},"{ operation, subscribe"+extraConfigDef+" }"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Legend */ .De,{mdxType:"Legend"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"operation",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A string. Default ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"\'",name,"\'"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You usually won\'t need to worry about this. But passing an operation string can help with debugging e.g. if the instance throws an error.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"subscribe",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A boolean. Default ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"false"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Whether to subscribe to state updates in the resolved atom instance, triggering a",\' \',name.startsWith(\'use\')?\'rerender of the current component\':\'reevaluation of the current atom instance\',\' \',"every time the resolved atom instance\'s state changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,name,"()")," is \\"static\\" by default, meaning it won\'t subscribe to updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__.Ts,{mdxType:"Ts"},"const val = "+name+"(\\n  myAtom,\\n  [],\\n  { subscribe: true }\\n).getState()\\n\\n// the above is equivalent to:\\nconst val = "+(name.startsWith(\'inject\')?\'inject\':\'use\')+"AtomValue(myAtom)")),extraConfig)),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"Returns",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The resolved atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Uses the passed atom template + params combo to find an existing atom instance. If no instance is found, creates one using the template and params and returns it.")));};var layoutProps={toc:toc,InjectAtomInstanceLegend:InjectAtomInstanceLegend};var MDXLayout="wrapper";function MDXContent(_ref2){var components=_ref2.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_ref2,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { injectAtomInstance } from \'@zedux/react\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../glossary#injector"},"injector")," that accepts an atom template and its params and registers a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../glossary#static-graph-dependency"},"static graph dependency")," on the resolved atom instance. Returns the resolved ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../classes/AtomInstance"},"atom instance object"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since the dependency is static, the atom instance that uses this injector will not reevaluate when the resolved atom instance\'s state changes. However, it will reevaluate when the atom instance\'s promise changes or when the atom instance is destroyed."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can also pass an atom instance directly to register a static graph dependency on instances received from other sources, e.g. an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../classes/AtomInstance#params"},"atom instance param"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"examples"},"Examples"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=injectAtomInstance/example resultVar=Seconds","live":true,"ecosystemId":"injectAtomInstance/example","resultVar":"Seconds"},"const shouldCountAtom = atom(\'shouldCount\', true)\\n\\nconst secondsAtom = atom(\'seconds\', () => {\\n  const shouldCountInstance = injectAtomInstance(shouldCountAtom)\\n  const store = injectStore(0)\\n\\n  injectEffect(() => {\\n    const intervalId = setInterval(() => {\\n      const shouldCount = shouldCountInstance.getState()\\n      if (!shouldCount) return\\n\\n      store.setState(val => val + 1)\\n    }, 1000)\\n\\n    return () => clearInterval(intervalId)\\n  }, [shouldCountInstance]) // instances are technically unstable references\\n\\n  return store\\n})\\n\\nfunction Seconds() {\\n  const [shouldCount, setShouldCount] = useAtomState(shouldCountAtom)\\n  const state = useAtomValue(secondsAtom)\\n\\n  return (\\n    <>\\n      <div>Seconds: {state}</div>\\n      <button onClick={() => setShouldCount(val => !val)}>\\n        {shouldCount ? \'Pause\' : \'Resume\'} Counter\\n      </button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Miscellaneous:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = injectAtomInstance(myAtom)\\nconst withParams = injectAtomInstance(myAtom, [\'param 1\', \'param 2\'])\\n\\n// passing an operation helps with debugging:\\nconst injectCustomStuff = () => {\\n  const instance = injectAtomInstance(myAtom, [], \'injectCustomStuff\')\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"signature"},"Signature"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Tabs */ .mQ,{mdxType:"Tabs"},(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab1 */ .x_)("injectAtomInstance = (atom, params?, operation?) => instance"),(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab2 */ .s2)("declare const injectAtomInstance: {\\n  <A extends ParamlessTemplate>(template: A): AtomInstanceType<A>\\n  <A extends AnyAtomTemplate>(\\n    template: A,\\n    params: AtomParamsType<A>,\\n    config?: InjectAtomInstanceConfig\\n  ): AtomInstanceType<A>\\n  <I extends AnyAtomInstance>(\\n    instance: I,\\n    params?: [],\\n    config?: InjectAtomInstanceConfig\\n  ): I\\n}")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(InjectAtomInstanceLegend,{mdxType:"InjectAtomInstanceLegend"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"see-also"},"See Also"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../../walkthrough/atom-instances"},"The Atom Instances walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../hooks/useAtomInstance"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomInstance()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../types/AtomGetters#getinstance"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"getInstance()")," AtomGetter"))));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6267\n')}}]);