"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[8490],{2737:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'atom-getters\',title:\'Atom Getters\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/atom-getters","id":"walkthrough/atom-getters","title":"Atom Getters","description":"We\'ve learned several hooks and injectors that we can use to get atoms and their values while updating the dependency graph. These are easy enough. But it gets even easier.","source":"@site/docs/walkthrough/atom-getters.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/atom-getters","permalink":"/zedux/docs/walkthrough/atom-getters","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/atom-getters.mdx","tags":[],"version":"current","frontMatter":{"id":"atom-getters","title":"Atom Getters"},"sidebar":"react","previous":{"title":"Configuring Atoms","permalink":"/zedux/docs/walkthrough/configuring-atoms"},"next":{"title":"Selectors","permalink":"/zedux/docs/walkthrough/selectors"}};var assets={};var toc=[{value:\'The Atom Getters\',id:\'the-atom-getters\',level:2},{value:\'<code>get</code>\',id:\'get\',level:3},{value:\'<code>getInstance</code>\',id:\'getinstance\',level:3},{value:\'<code>select</code>\',id:\'select\',level:3},{value:\'Atom Getter Habitats\',id:\'atom-getter-habitats\',level:2},{value:\'Ecosystems\',id:\'ecosystems\',level:3},{value:\'<code>injectAtomGetters</code>\',id:\'injectatomgetters\',level:3},{value:\'Atom Selectors\',id:\'atom-selectors\',level:3},{value:\'Ions\',id:\'ions\',level:3},{value:\'Registering Dependencies\',id:\'registering-dependencies\',level:2},{value:\'Static Evaluation\',id:\'static-evaluation\',level:3},{value:\'Cheatsheet\',id:\'cheatsheet\',level:3},{value:\'Buffered Updates\',id:\'buffered-updates\',level:2},{value:\'Conditional Injectors\',id:\'conditional-injectors\',level:2},{value:\'Weak Getters\',id:\'weak-getters\',level:2},{value:\'<code>weakGet</code>\',id:\'weakget\',level:3},{value:\'<code>weakGetInstance</code>\',id:\'weakgetinstance\',level:3},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ve learned several hooks and injectors that we can use to get atoms and their values while updating the dependency graph. These are easy enough. But it gets even easier."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"How to use Atom Getters to dynamically and efficiently update the graph.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"the-atom-getters"},"The Atom Getters"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For your convenience when working with atoms, Zedux provides a single, uniform object structure in many places. Objects with this shape are called ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/AtomGetters"},"Atom Getters objects"),". Every Atom Getters object has the following 3 \\"Atom Getters\\":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"get")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"getInstance")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"select"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Most Atom Getters objects also have a fourth property:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem")," - a reference to the current ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"ecosystems"},"ecosystem"),".")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atom Getters behave differently depending on how and when they\'re used. Mastering these hows and whens will make Zedux an extremely efficient tool for you."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Let\'s take a quick look at each Atom Getter."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"get"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"get")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns the current value of an atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const value = get(myAtom)\\n// or, if the atom takes params:\\nget(myAtom, [\'param 1\', \'param 2\'])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"getinstance"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"getInstance")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns an atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = getInstance(myAtom)\\n// or, if the atom takes params:\\ngetInstance(myAtom, [\'param 1\', \'param 2\'])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"select"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"select")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Runs an Atom Selector (we\'ll learn about these in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"selectors"},"the selectors walkthrough"),")."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const selectorResult = select(myAtomSelector)\\n// or, if the Atom Selector takes params:\\nselect(myAtomSelector, \'param 1\', \'param 2\') // note params isn\'t an array here\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-getter-habitats"},"Atom Getter Habitats"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Where exactly might one encounter Atom Getters in the wild?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ecosystems"},"Ecosystems"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"That\'s right, every ecosystem ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"is")," an Atom Getters object."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const ecosystem = useEcosystem()\\n\\nconst instanceValue = ecosystem.get(myAtom, [\'param 1\', \'param 2\'])\\nconst instance = ecosystem.getInstance(myAtom, [\'param 1\', \'param 2\'])\\nconst selectorResult = ecosystem.select(myAtomSelector)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ecosystems are the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"only")," Atom Getters objects that don\'t have an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem")," field (how redundant would that be). The ecosystem\'s Atom Getters are also unique in that they never register graph dependencies. More on this ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"#registering-dependencies"},"shortly"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injectatomgetters"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectAtomGetters")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can inject an Atom Getters object in any atom using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomGetters"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', () => {\\n  const { ecosystem, get, getInstance, select } = injectAtomGetters()\\n  ...\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"atom-selectors"},"Atom Selectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The first argument passed to Atom Selectors is an Atom Getters object:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"function myAtomSelector({ ecosystem, get, getInstance, select }: AtomGetters) {\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(More on these in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"selectors"},"the selectors walkthrough"),")."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ions"},"Ions"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The first argument passed to the state factory of Ions is an Atom Getters object:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleIon = ion(\\n  \'example\',\\n  ({ ecosystem, get, getInstance, select }) => {}\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(We\'ll learn about these in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"selectors"},"the selectors walkthrough")," too)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"registering-dependencies"},"Registering Dependencies"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"getInstance"),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"select")," are called ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"synchronously")," during atom instance evaluation or Atom Selector evaluation, they register graph dependencies."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"get")," registers dynamic dependencies"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"getInstance")," registers static dependencies"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"select")," registers dynamic and static dependencies depending on what the Atom Selector does. Dynamic dependencies created by the selector only cause an update if the selector result changes.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atom Getters ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"never")," register graph dependencies when called after evaluation ends. Also, importantly, the Atom Getters on the ecosystem ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"never")," register graph dependencies."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can use this to purposefully prevent dependencies from being registered:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// toggling this atom\'s value changes maybeDynamicAtom\'s dynamicity!\\nconst subscribeAtom = atom(\'subscribe\', true)\\n\\nconst maybeDynamicAtom = ion(\'maybeDynamic\', ({ ecosystem, get, select }) => {\\n  const subscribe = get(subscribeAtom)\\n\\n  const val = subscribe\\n    ? select(myAtomSelector) // dynamic\\n    : ecosystem.select(myAtomSelector) // static\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"static-evaluation"},"Static Evaluation"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since the ecosystem\'s Atom Getters never register graph dependencies, they can be used to statically create, evaluate, and analyze atom instances and Atom Selectors outside React (i.e. anywhere)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// create an atom instance outside React or atoms or anything:\\nconst instance = ecosystem.getInstance(myAtom)\\n\\n// run myAtomSelector anywhere\\nconst val = ecosystem.select(myAtomSelector)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"The ecosystem\'s Atom Getters make it easy to test atoms and Atom Selectors!")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"cheatsheet"},"Cheatsheet"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s a Little Ultimate Atom Getters Cheatsheet of Which Atom Getters Register Dependencies When:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', () => {\\n  const { ecosystem, get, getInstance, select } = injectAtomGetters()\\n\\n  // registers a dynamic graph dependency:\\n  get(myAtom) // essentially an alias of injectAtomValue\\n\\n  // registers a static graph dependency:\\n  getInstance(myOtherAtom) // essentially an alias of injectAtomInstance\\n\\n  // registers graph dependencies depending on myAtomSelector\'s implementation:\\n  select(myAtomSelector) // essentially an alias of injectAtomSelector\\n\\n  // doesn\'t update the graph; just returns the current value:\\n  ecosystem.get(myAtom)\\n\\n  // doesn\'t update the graph; just returns the current atom instance:\\n  ecosystem.getInstance(myOtherAtom)\\n\\n  // doesn\'t update the graph; just returns the selector result:\\n  ecosystem.select(myAtomSelector)\\n\\n  // effects always run later (after evaluation)\\n  injectEffect(() => {\\n    // doesn\'t update the graph; essentially an alias of ecosystem.get\\n    get(myAtom)\\n\\n    // doesn\'t update the graph; essentially an alias of ecosystem.getInstance\\n    getInstance(myOtherAtom)\\n\\n    // doesn\'t update the graph; essentially an alias of ecosystem.select\\n    select(myAtomSelector)\\n  }, []) // AtomGetters are stable references - no need to pass them here\\n\\n  // callbacks are usually called after evaluation, but *it depends!*\\n  const myCallback = injectCallback(() => {\\n    get(myAtom)\\n    getInstance(myOtherAtom)\\n    select(myAtomSelector)\\n  }, [])\\n\\n  // calling the callback here makes all its Atom Getter calls register deps:\\n  myCallback()\\n\\n  return api().setExports({\\n    myCallback, // dependents that call this callback will *not* register deps\\n  })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.get"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.getInstance"),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.select")," to purposefully avoid creating dependencies during evaluation.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"buffered-updates"},"Buffered Updates"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"While an atom instance or Atom Selector is evaluating, Zedux buffers graph updates caused by Atom Getters and flushes the buffer once evaluation is over. This has a few implications:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ol",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ol"},"It means that you won\'t actually see graph updates happen immediately:")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// bad:\\nconst exampleAtom = atom(\'example\', () => {\\n  const { ecosystem, get } = injectAtomGetters()\\n\\n  const otherVal = get(myOtherAtom)\\n\\n  ecosystem.viewGraph() // the dep won\'t be there (it doesn\'t exist yet!)\\n})\\n\\n// good:\\nconst exampleAtom = atom(\'example\', () => {\\n  const { ecosystem, get } = injectAtomGetters()\\n\\n  const otherVal = get(myOtherAtom)\\n\\n  injectEffect(() => {\\n    ecosystem.viewGraph() // effects are deferred; the dep exists now!\\n  }, [])\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ol",{"start":2},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ol"},"It allows Zedux to be highly efficient with its graph updates:")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', () => {\\n  const { get, getInstance } = injectAtomGetters()\\n\\n  // registers a dynamic graph dependency on myAtom:\\n  const someField = get(myAtom).someField\\n\\n  // doesn\'t register anything! (We\'ve already registered this dep):\\n  const anotherField = get(myAtom).anotherField\\n\\n  // also registers nothing (can\'t downgrade an edge from dynamic to static):\\n  const instance = getInstance(myAtom)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"conditional-injectors"},"Conditional Injectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Remember how injectors are like hooks? As such, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomValue"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomInstance"),", etc. can\'t be used in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"if")," statements or loops. Atom Getters, however, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"are not injectors"),". This means they ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"can")," be used conditionally!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=atom-getters/conditional-injectors resultVar=CounterList","live":true,"ecosystemId":"atom-getters/conditional-injectors","resultVar":"CounterList"},"// Let\'s do a bigger example. This is a good opportunity to review what\\n// we\'ve covered in the walkthrough so far!\\nconst counterAtom = atom(\'counter\', (id: number) => 0)\\n\\nconst counterIdsAtom = atom(\'counterIds\', () => {\\n  const store = injectStore([0, 1])\\n\\n  const addCounter = () => store.setState(state => [...state, state.length])\\n\\n  return api(store).setExports({ addCounter })\\n})\\n\\nconst countersSumAtom = atom(\'countersSum\', () => {\\n  const { get, getInstance } = injectAtomGetters()\\n  const counterIds = get(counterIdsAtom)\\n\\n  let sum = 0\\n  for (let counterId of counterIds) {\\n    sum += get(counterAtom, [counterId]) // loops are fine!\\n  }\\n\\n  return sum\\n})\\n\\nfunction Counter({ id }: { id: number }) {\\n  const counterInstance = useAtomInstance(counterAtom, [id])\\n  const [state, setState] = useAtomState(counterInstance) // dynamicize the dep!\\n\\n  return (\\n    <div>\\n      <span>\\n        Counter #{counterInstance.params[0]}: {state}{\' \'}\\n      </span>\\n      <button onClick={() => setState(state => state + 1)}>Increment</button>\\n      <button onClick={() => setState(state => state - 1)}>Decrement</button>\\n    </div>\\n  )\\n}\\n\\nfunction CounterList() {\\n  const sum = useAtomValue(countersSumAtom)\\n  const counterIdsInstance = useAtomInstance(counterIdsAtom)\\n  const [ids, setIds] = useAtomState(counterIdsInstance) // dynamicize the dep!\\n  const { addCounter } = counterIdsInstance.exports\\n\\n  return (\\n    <>\\n      {ids.map(id => (\\n        <Counter id={id} key={id} />\\n      ))}\\n      <div>Sum: {sum}</div>\\n      <button onClick={addCounter}>Add Counter</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"weak-getters"},"Weak Getters"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Just like hooks and injectors, the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"getInstance")," Atom Getters create the atom instance if it doesn\'t exist yet. This is almost always what you want. But in rare cases, you may want to see if the atom instance exists before creating it. Or you may not need the atom instance at all if it hasn\'t been created somewhere else."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For these use cases, ecosystems (and only ecosystems) have 2 \\"Weak Getters\\":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"weakget"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"weakGet")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns an atom instance\'s value ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"if the atom instance exists"),". Otherwise returns undefined."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const val = ecosystem.weakGet(myAtom)\\nconst paramsExample = ecosystem.weakGet(myAtom, [\'param 1\', \'param 2\'])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"weakgetinstance"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"weakGetInstance")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns an atom instance ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"if the atom instance already exists"),". Otherwise returns undefined."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = ecosystem.weakGetInstance(myAtom)\\nconst paramsExample = ecosystem.weakGetInstance(myAtom, [\'param 1\', \'param 2\'])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"There is no ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"weakSelect")," - ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.select")," never caches anything, but it will return the cached selector result if the passed Atom Selector has been cached before.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"get")," returns an atom instance\'s value. It registers dynamic graph dependencies when called synchronously during evaluation."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"getInstance")," returns an atom instance. It registers static graph dependencies when called synchronously during evaluation."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"select")," returns an Atom Selector\'s result. It registers dependencies dynamically depending on the Atom Selector."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Zedux passes an Atom Getters object to Atom Selectors and Ions. Get them manually with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectAtomGetters"),". Every ecosystem is also an Atom Getters object."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"The ecosystem\'s Atom Getters never register graph dependencies - and thus are your static analysis and testing friends."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"When called after evaluation, Atom Getters do not register graph dependencies."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom Getters can be safely used in loops and conditional statements."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"The Weak Getters (",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"weakGet")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"weakGetInstance"),") return undefined if no atom instance exists yet rather than automatically creating it.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright, alright, we keep hearing about these Atom Selector things. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"selectors"},"Let\'s learn all about them"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2737\n')}}]);