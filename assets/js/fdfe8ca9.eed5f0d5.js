"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[1797],{1058:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'configuring-atoms\',title:\'Configuring Atoms\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/configuring-atoms","id":"walkthrough/configuring-atoms","title":"Configuring Atoms","description":"The Atom APIs walkthrough showed how to configure an atom instance\'s promise and exports. But there are a few more configuration options we haven\'t covered.","source":"@site/docs/walkthrough/configuring-atoms.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/configuring-atoms","permalink":"/zedux/docs/walkthrough/configuring-atoms","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/configuring-atoms.mdx","tags":[],"version":"current","frontMatter":{"id":"configuring-atoms","title":"Configuring Atoms"},"sidebar":"react","previous":{"title":"Overrides","permalink":"/zedux/docs/walkthrough/overrides"},"next":{"title":"Atom Getters","permalink":"/zedux/docs/walkthrough/atom-getters"}};var assets={};var toc=[{value:\'Config Objects\',id:\'config-objects\',level:2},{value:\'<code>ttl</code>\',id:\'ttl\',level:3},{value:\'<code>flags</code>\',id:\'flags\',level:3},{value:\'<code>api.setTtl()</code>\',id:\'apisetttl\',level:2},{value:\'Default TTL\',id:\'default-ttl\',level:2},{value:\'Config Priority\',id:\'config-priority\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"Atom APIs walkthrough")," showed how to configure an atom instance\'s promise and exports. But there are a few more configuration options we haven\'t covered."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to give an atom instance a Time To Live (",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ttl"),")."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to use flags to mark atoms that need to be overridden."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"config-objects"},"Config Objects"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/factories/api"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"atom()"))," factory takes a config object as its optional 3rd parameter."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"atom(key, stateOrStateFactory, config)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Some config options are simple enough, they don\'t need the flexibility of an Atom API. We\'ll look at some of these now."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ttl"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"ttl")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an atom instance is no longer used, you may want to destroy it - allowing its data to be garbage collected."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"By default, all atoms live forever. But they can be given a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," to configure how long instances should stick around when they\'re no longer in use."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const zombieAtom = atom(\'zombie\', null, {\\n  // keep stale zombieAtom instances in memory for 10 minutes:\\n  ttl: 1000 * 60 * 10,\\n})\\n// if anyone uses the instance within 10 minutes, cleanup is cancelled\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," is a number in milliseconds. Zedux sets a timeout for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," milliseconds when the atom instance goes \\"stale\\". If the atom instance is still stale when the timeout ends, Zedux destroys it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," can be set to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"0")," to clean up stale atom instances immediately, without a timeout. This is very common.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll learn more about stale atom instances in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"destruction"},"the destruction walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"flags"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"flags")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Any atom can be given an array of string flags."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const scrollListenerAtom = atom(\\n  \'scrollListener\',\\n  () => {\\n    injectEffect(() => {\\n      window.addEventListener(\'scroll\', myScrollHandler)\\n\\n      return () => window.removeEventListener(\'scroll\', myScrollHandler)\\n    }, [])\\n\\n    return null\\n  },\\n  {\\n    flags: [\'browser-only\'],\\n  }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"scrollListenerAtom")," uses the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"window")," object without checking that it exists. This would throw an error if it was run, e.g., in a Node environment, so we gave it a flag to indicate this - ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'browser-only\'"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"The flags can be any strings; you decide what they are.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"One purpose of flags is to tell Zedux to log a warning when an atom is used in an unsafe environment. To tell Zedux which flags are safe, use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"flags")," ecosystem config option:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"return (\\n  <EcosystemProvider flags={[\'browser-only\']} id=\\"root\\">\\n    <Child />\\n  </EcosystemProvider>\\n)\\n\\n// or\\n\\nconst rootEcosystem = createEcosystem({\\n  flags: [\'browser-only\'],\\n  id: \'root\',\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This tells Zedux that atoms with the flag ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'browser-only\'")," are safe in this ecosystem. That includes the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"scrollListenerAtom")," from above."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now what if you want to run this code in Node (e.g. for SSR). You can tell Zedux that atoms with the flag ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'browser-only\'")," are not safe by ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"not")," including it in the ecosystem\'s list of flags:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"return (\\n  <EcosystemProvider flags={[]} id=\\"root\\">\\n    <Child />\\n  </EcosystemProvider>\\n)\\n\\n// or\\n\\nconst rootEcosystem = createEcosystem({\\n  flags: [],\\n  id: \'root\',\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now if you try to use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"scrollListenerAtom")," in this ecosystem, Zedux will log a warning."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=flags-example noProvide=true resultVar=Parent","live":true,"ecosystemId":"flags-example","noProvide":"true","resultVar":"Parent"},"const scrollListenerAtom = atom(\\n  \'scrollListener\',\\n  () => {\\n    const store = injectStore(window.scrollY)\\n\\n    injectEffect(() => {\\n      const myScrollHandler = () => store.setState(window.scrollY)\\n\\n      window.addEventListener(\'scroll\', myScrollHandler)\\n\\n      return () => window.removeEventListener(\'scroll\', myScrollHandler)\\n    }, [])\\n\\n    return store\\n  },\\n  {\\n    flags: [\'browser-only\'],\\n  }\\n)\\n\\nfunction Child() {\\n  const scrollY = useAtomValue(scrollListenerAtom)\\n\\n  return <div>Scroll Y: {scrollY}</div>\\n}\\n\\nfunction Parent() {\\n  return (\\n    <EcosystemProvider flags={[]} id=\\"flags-example\\">\\n      <Child />\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Open your browser console and reset the above sandbox to see Zedux log a warning. This warning tells you that you should ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"overrides"},"override")," the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"scrollListener")," atom in the current ecosystem."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To turn off flag warnings, just don\'t set ecosystem ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"flags"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"createEcosystem({ flags: [] }) // warns on every flag\\ncreateEcosystem({}) // never warns\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"apisetttl"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"api.setTtl()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atom config objects are for simple config. But sometimes you want more than just a number timeout. You can also configure an atom instance\'s ttl with an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"Atom API"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"api().setTtl(10000) // set ttl to 10 seconds\\napi().setTtl(myPromise) // wait until myPromise resolves before destroying\\napi().setTtl(myObservable) // wait until myObservable emits before destroying\\n\\n// function overload to defer creating the promise until the instance goes stale\\napi().setTtl(() => createPromise())\\napi().setTtl(() => createObservable()) // same thing for observables\\n\\n// number also allowed, e.g. for reading dynamically from config\\napi().setTtl(() => 10000)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As you can imagine, this is extremely powerful. Some ideas for how to use this:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Configure a global killswitch to clean up atom instances on-demand."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../advanced/plugins"},"plugin")," that implements a FIFO queue to clean up the oldest instances when the cache reaches a certain size.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"default-ttl"},"Default TTL"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"By default, all atom instances live forever. This default is fine for most apps. But in some cases, a default ttl of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"0")," or a short timeout might make more sense. Ecosystems have a config option for this, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"defaultTtl"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=defaultTtl-example noProvide=true resultVar=Parent","live":true,"ecosystemId":"defaultTtl-example","noProvide":"true","resultVar":"Parent"},"const ttlTestAtom = atom(\'ttlTest\', () => {\\n  injectEffect(() => {\\n    // use the effect cleanup function to detect when this atom instance dies\\n    return () => {\\n      alert(\'destroying atom instance!\')\\n    }\\n  }, []) // no params = effect cleanup can only run on destruction\\n\\n  return null\\n}) // no ttl = use the ecosystem default\\n\\nfunction Child() {\\n  useAtomInstance(ttlTestAtom)\\n\\n  return null\\n}\\n\\nfunction Parent() {\\n  const [isShowing, setIsShowing] = useState(false)\\n\\n  return (\\n    <EcosystemProvider defaultTtl={0} id=\\"defaultTtl-example\\">\\n      <button onClick={() => setIsShowing(state => !state)}>\\n        {isShowing ? \'destroy\' : \'create\'}\\n      </button>\\n      {isShowing ? <Child /> : null}\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"defaultTtl")," is a number in milliseconds."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"config-priority"},"Config Priority"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ecosystems have a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"defaultTtl"),", atoms have a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," config option, and Atom APIs have a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"setTtl")," function. If you set ttl in multiple places, the \\"most specific\\" will take priority. Here\'s a little visual:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("img",{alt:"ecosystems -&gt; atoms -&gt; atom instances",src:(__webpack_require__(9559)/* ["default"] */ .Z),width:"1700",height:"1160"})),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ecosystem config is the most general, atom template config is more specific, and atom instance config is the most specific. Thus for TTL, the \\"specificity order\\" is (from most to least specific):"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre"},"api().setTtl() -> ttl -> defaultTtl\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Set TTL using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},".setTtl()")," on an Atom API returned from a state factory, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ttl")," on an atom config object, or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"defaultTtl")," in an ecosystem\'s config."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Set an atom\'s flags using the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"flags")," property on an atom config object."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Configure the currently-allowed flags with the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"flags")," property of an ecosystem\'s config.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You now know all the basics of creating and using atoms. It\'s time to learn some of the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-getters"},"convenient tools")," that Zedux provides to make creating and using atoms even easier."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1058\n')},9559:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony default export */ __webpack_exports__["Z"] = (__webpack_require__.p + "assets/images/config-specificity-d99b8f95cbe09158af60b16e5df8fd46.png");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU1OS5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5REFBZSxxQkFBdUIsMEVBQTBFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL3N0YXRpYy9pbWcvZGlhZ3JhbXMvY29uZmlnLXNwZWNpZmljaXR5LnBuZz9kYmFjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvaW1hZ2VzL2NvbmZpZy1zcGVjaWZpY2l0eS1kOTliOGY5NWNiZTA5MTU4YWY2MGIxNmU1ZGY4ZmQ0Ni5wbmdcIjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9559\n')}}]);