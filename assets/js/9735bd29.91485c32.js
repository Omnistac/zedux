"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[862],{3905:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Zo": function() { return /* binding */ MDXProvider; },\n/* harmony export */   "kt": function() { return /* binding */ createElement; }\n/* harmony export */ });\n/* unused harmony exports MDXContext, useMDXComponents, withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === \'function\';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = \'mdxType\';\nvar DEFAULTS = {\n  inlineCode: \'code\',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components["".concat(parentName, ".").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = \'MDXCreateElement\';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === \'string\' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === \'string\' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, args);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3905\n')},7133:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'advanced-patterns\',title:\'Advanced Patterns\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/advanced-patterns","id":"walkthrough/advanced-patterns","title":"Advanced Patterns","description":"Circular Dependencies","source":"@site/docs/walkthrough/advanced-patterns.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/advanced-patterns","permalink":"/zedux/docs/walkthrough/advanced-patterns","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/advanced-patterns.mdx","tags":[],"version":"current","frontMatter":{"id":"advanced-patterns","title":"Advanced Patterns"}};var assets={};var toc=[{value:\'Circular Dependencies\',id:\'circular-dependencies\',level:2},{value:\'Workaround 1\',id:\'workaround-1\',level:3},{value:\'Workaround 2\',id:\'workaround-2\',level:3},{value:\'Atom Instance Factories\',id:\'atom-instance-factories\',level:2},{value:\'Params Are Constant\',id:\'params-are-constant\',level:2},{value:\'Updating other atoms during evaluation\',id:\'updating-other-atoms-during-evaluation\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"circular-dependencies"},"Circular Dependencies"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It is always possible to design an atom graph without any circular dependencies. That said, sometimes it can be very hard to do so - requirements change, the new guy comes in, or sometimes the state is just very complex."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux\' atomic model can\'t support circular dependencies ... or can it?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright, strictly speaking, direct circular dependencies are not allowed:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const atomA = atom(\'a\', () => {\\n  injectAtomValue(atomB)\\n})\\n\\nconst atomB = atom(\'b\', () => {\\n  injectAtomValue(atomA) // <- circular dep! This will always break everything\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But there are a couple workarounds. The basic idea for all of them is: Create one of the dependencies asynchronously"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"workaround-1"},"Workaround 1"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Only make one dependency, e.g. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"a -> b")," (a depends on b). Load the other atom when needed, e.g. (in b) ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get(atomA)"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import {\\n  api,\\n  atom,\\n  injectAtomGetters,\\n  injectAtomInstance,\\n  injectStore,\\n} from \'@zedux/react\'\\n\\nconst connectionAtom = atom(\'connection\', () => {\\n  const { getInstance } = injectAtomGetters()\\n\\n  // instead of calling getInstance during atom evaluation like this:\\n  // const login = getInstance(loginAtom)\\n  // we call it only when we need to (inside an exported callback):\\n  // highlight-next-line\\n  const logout = () => getInstance(loginAtom).exports.reset()\\n\\n  const post = (url: string, data: any) =>\\n    fetch(url, { body: JSON.stringify(data), method: \'POST\' }).then(data =>\\n      data.json()\\n    )\\n\\n  return api().setExports({ logout, post })\\n})\\n\\nconst loginAtom = atom(\'login\', () => {\\n  // highlight-next-line\\n  const { post } = injectAtomInstance(connectionAtom).exports\\n  const store = injectStore({ email: \'\', password: \'\' })\\n\\n  const reset = () => store.setState({ email: \'\', password: \'\' })\\n  const setEmail = (email: string) => store.setStateDeep({ email })\\n  const setPassword = (password: string) => store.setStateDeep({ password })\\n  const submit = () => post(\'/login\', store.getState())\\n\\n  return api(store).setExports({ reset, setEmail, setPassword, submit })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(Note that the better solution is to move the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"logout")," function somewhere else - e.g. inside ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"loginAtom")," - completely avoiding the circular dependency in the first place)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"workaround-2"},"Workaround 2"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"destruction#manual-graphing"},"manual graphing")," to add a dependency later."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const atomA = atom(\'a\', () => {\\n  const b = injectAtomValue(atomB)\\n\\n  return \'a\' + b\\n})\\n\\nconst atomB = atom(\'b\', () => {\\n  const { getInstance } = injectAtomGetters\\n  const store = injectStore(\'b\')\\n\\n  injectEffect(() => {\\n    const a = getInstance(atomA)\\n    const cleanup = a.addDependent()\\n    store.setState(a)\\n\\n    return cleanup\\n  }, [])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In this case, these two atoms have real dependencies on each other. As such, they prevent each other from being cleaned up. You\'ll need to account for that by destroying the manually created edge or force destroying if destruction is needed."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-instance-factories"},"Atom Instance Factories"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux creates atom instances dynamically whenever they\'re first used. This is very convenient but takes some control out of your hands. Pro Tip: You can use Atom Selectors to get that control back."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Remember that Atom Selectors can return absolutely anything. Well, that means they can also return atom instances. Also remember that atoms can export anything. Well, that means they can also export something that indicates if the atom instance was just created or is missing some ref value or ... anything!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const formFieldAtom = atom(\'formField\', (fieldName: string) => {\\n  const store = injectStore(\'\')\\n  const isValidRef = injectRef()\\n\\n  return api(store).setExports({ isValidRef })\\n})\\n\\nconst getFormFieldInstance = (\\n  { getInstance }: AtomGetters,\\n  fieldName: string,\\n  isValid: (val: string) => boolean\\n) => {\\n  const instance = getInstance(formFieldAtom, [fieldName])\\n\\n  // if the formField doesn\'t have its validator set yet, set it\\n  if (!instance.exports.isValidRef) {\\n    instance.exports.isValidRef.current = isValid\\n  }\\n\\n  return instance\\n}\\n\\nfunction Form() {\\n  // now instead of `useAtomInstance(formFieldAtom, \'email\')`, do:\\n  const emailFieldInstance = useAtomSelector(\\n    getFormFieldInstance,\\n    \'email\',\\n    isValidEmail\\n  )\\n\\n  // and instead of `useAtomInstance(formFieldAtom, \'password\')`, do:\\n  const passwordFieldInstance = useAtomSelector(\\n    getFormFieldInstance,\\n    \'password\',\\n    isValidPassword\\n  )\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(Note that this is a contrived example. There may be better ways to do per-field form validation)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"params-are-constant"},"Params Are Constant"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since Zedux creates a different atom instance if it detects different atom params, params are essentially constant; the params received by an atom instance can never change for the entire lifetime of that instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This means you ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"can")," conditionally add/remove injectors based on params. We definitely don\'t recommend doing this, especially if you\'re new to Zedux. But we have found some situations where it\'s convenient."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It also means that you don\'t need to pass params as deps to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMemo"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectCallback"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise"),", and similar injectors."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const requestAtom = atom(\'request\', (endpoint: string) => {\\n  let prefix = \'\'\\n\\n  if (!endpoint.startsWith(\'http\')) {\\n    prefix = injectAtomValue(protocolAtom) // not recommended...\\n  }\\n\\n  injectEffect(() => {\\n    fetch(`${prefix}${endpoint}`).then(...)\\n  }, []) // <- don\'t need to pass endpoint or prefix\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"updating-other-atoms-during-evaluation"},"Updating other atoms during evaluation"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There shouldn\'t be a need for this, but it is actually fine to update other atom instances during atom evaluation ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"if")," this is not the first evaluation:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const rogueAtom = atom(\'rogue\', () => {\\n  const reasons = injectWhy()\\n  const victimInstance = injectAtomInstance(victimAtom)\\n\\n  victimInstance.setState(\'sadness\') // <- Bad! Don\'t do this\\n\\n  // use injectWhy to determine if this is the initial evaluation (reasons is\\n  // empty if it is):\\n  if (reasons.length) {\\n    victimInstance.setState(\'mwahahaha\') // <- fine... but still probably don\'t\\n  }\\n  ...\\n})\\n")));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEzMy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OzZCQUVBLDBCQUNBLGVBQ0EsNkJBTU8sR0FBTUUsWUFBVyxDQUFHLENBQzFCQyxFQUFFLENBQUUsbUJBQW1CLENBQ3ZCQyxLQUFLLENBQUUsbUJBQ1IsQ0FBQyxDQUNNLEdBQU1DLGFBQVksQ0FBR0MsU0FBUyxDQUM5QixHQUFNQyxTQUFRLENBQUcsQ0FDdEIsZUFBZSxDQUFFLCtCQUErQixDQUNoRCxJQUFJLENBQUUsK0JBQStCLENBQ3JDLE9BQU8sQ0FBRSxtQkFBbUIsQ0FDNUIsYUFBYSxDQUFFLHVCQUF1QixDQUN0QyxRQUFRLENBQUUsOENBQThDLENBQ3hELGVBQWUsQ0FBRSxhQUFhLENBQzlCLE1BQU0sQ0FBRSxnQ0FBZ0MsQ0FDeEMsV0FBVyxDQUFFLDJDQUEyQyxDQUN4RCxPQUFPLENBQUUsS0FBSyxDQUNkLFNBQVMsQ0FBRSxzRkFBc0YsQ0FDakcsTUFBTSxDQUFFLEVBQUUsQ0FDVixTQUFTLENBQUUsU0FBUyxDQUNwQixhQUFhLENBQUUsQ0FDYixJQUFJLENBQUUsbUJBQW1CLENBQ3pCLE9BQU8sQ0FBRSxtQkFDWCxDQUNGLENBQUMsQ0FDTSxHQUFNQyxPQUFNLENBQUcsQ0FFdEIsQ0FBQyxDQUdNLEdBQU1DLElBQUcsQ0FBRyxDQUFDLENBQ2xCQyxLQUFLLENBQUUsdUJBQXVCLENBQzlCUCxFQUFFLENBQUUsdUJBQXVCLENBQzNCUSxLQUFLLENBQUUsQ0FDVCxDQUFDLENBQUUsQ0FDREQsS0FBSyxDQUFFLGNBQWMsQ0FDckJQLEVBQUUsQ0FBRSxjQUFjLENBQ2xCUSxLQUFLLENBQUUsQ0FDVCxDQUFDLENBQUUsQ0FDREQsS0FBSyxDQUFFLGNBQWMsQ0FDckJQLEVBQUUsQ0FBRSxjQUFjLENBQ2xCUSxLQUFLLENBQUUsQ0FDVCxDQUFDLENBQUUsQ0FDREQsS0FBSyxDQUFFLHlCQUF5QixDQUNoQ1AsRUFBRSxDQUFFLHlCQUF5QixDQUM3QlEsS0FBSyxDQUFFLENBQ1QsQ0FBQyxDQUFFLENBQ0RELEtBQUssQ0FBRSxxQkFBcUIsQ0FDNUJQLEVBQUUsQ0FBRSxxQkFBcUIsQ0FDekJRLEtBQUssQ0FBRSxDQUNULENBQUMsQ0FBRSxDQUNERCxLQUFLLENBQUUsd0NBQXdDLENBQy9DUCxFQUFFLENBQUUsd0NBQXdDLENBQzVDUSxLQUFLLENBQUUsQ0FDVCxDQUFDLENBQUMsQ0FFRixHQUFNQyxZQUFXLENBQUcsQ0FDbEJILEdBQUcsQ0FBSEEsR0FDRixDQUFDLENBQ0QsR0FBTUksVUFBUyxDQUFHLFNBQVMsQ0FDWixRQUFTQyxXQUFVLE1BRy9CLElBRkRDLFdBQVUsTUFBVkEsVUFBVSxDQUNQQyxLQUFLLHNMQUVSLE1BQU8sOERBQUMsU0FBUyxvSkFBS0osV0FBVyxDQUFNSSxLQUFLLEVBQUUsVUFBVSxDQUFFRCxVQUFXLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FFdkYsbUVBQ0UsSUFBSSxDQUFFLHVCQUF1QiwwQkFDRSxDQUNqQyxxU0FBdU8sQ0FDdk8sK0lBQWlGLENBQ2pGLGtKQUFvRixDQUNwRix3RUFBSyxxRUFBTSxVQUFVLENBQUMsS0FBSyxDQUN2QixXQUFXLENBQUUsYUFBYSwyTEFRekIsQ0FBTSxDQUNYLDZMQUErSCxDQUMvSCxtRUFDRSxJQUFJLENBQUUsY0FBYyxpQkFDRSxDQUN4Qix3R0FBc0MsMkVBQVksVUFBVSxDQUFDLEdBQUcsV0FBd0Isb0VBQW9FLDJFQUFZLFVBQVUsQ0FBQyxHQUFHLGVBQTRCLEtBQVMsQ0FDM04sd0VBQUsscUVBQU0sVUFBVSxDQUFDLEtBQUssQ0FDdkIsV0FBVyxDQUFFLGFBQWEsaXRDQXNDekIsQ0FBTSxDQUNYLHVIQUFxRCwyRUFBWSxVQUFVLENBQUMsR0FBRyxXQUF3QiwyQ0FBMkMsMkVBQVksVUFBVSxDQUFDLEdBQUcsY0FBMkIsdUVBQTJFLENBQ2xSLG1FQUNFLElBQUksQ0FBRSxjQUFjLGlCQUNFLENBQ3hCLDZFQUFXLGtFQUFHLFVBQVUsQ0FBQyxHQUFHLENBQ3hCLE1BQU0sQ0FBRSw2QkFBNkIsb0JBQ2IsK0JBQW1DLENBQy9ELHdFQUFLLHFFQUFNLFVBQVUsQ0FBQyxLQUFLLENBQ3ZCLFdBQVcsQ0FBRSxhQUFhLG1ZQXFCekIsQ0FBTSxDQUNYLDBUQUE0UCxDQUM1UCxtRUFDRSxJQUFJLENBQUUseUJBQXlCLDRCQUNFLENBQ25DLDhRQUFnTixDQUNoTiw0WEFBOFQsQ0FDOVQsd0VBQUsscUVBQU0sVUFBVSxDQUFDLEtBQUssQ0FDdkIsV0FBVyxDQUFFLGFBQWEsZzlCQXVDekIsQ0FBTSxDQUNYLDJLQUE2RyxDQUM3RyxtRUFDRSxJQUFJLENBQUUscUJBQXFCLHdCQUNFLENBQy9CLCtSQUFpTyxDQUNqTyx3RkFBc0IsbUVBQUksVUFBVSxDQUFDLEdBQUcsUUFBYSw4TEFBa00sQ0FDdlAscUlBQW1FLDJFQUFZLFVBQVUsQ0FBQyxHQUFHLGVBQTRCLE1BQU0sMkVBQVksVUFBVSxDQUFDLEdBQUcsaUJBQThCLE1BQU0sMkVBQVksVUFBVSxDQUFDLEdBQUcsbUJBQWdDLE1BQU0sMkVBQVksVUFBVSxDQUFDLEdBQUcsa0JBQStCLDRCQUFnQyxDQUN0Vix3RUFBSyxxRUFBTSxVQUFVLENBQUMsS0FBSyxDQUN2QixXQUFXLENBQUUsYUFBYSxzVUFZekIsQ0FBTSxDQUNYLG1FQUNFLElBQUksQ0FBRSx3Q0FBd0MsMkNBQ0UsQ0FDbEQsMkxBQXlILHVFQUFRLFVBQVUsQ0FBQyxHQUFHLE9BQWdCLHNDQUEwQyxDQUN6TSx3RUFBSyxxRUFBTSxVQUFVLENBQUMsS0FBSyxDQUN2QixXQUFXLENBQUUsYUFBYSx5YUFjekIsQ0FBTSxDQUNDLENBQ2hCLENBQ0EsQ0FDQUQsVUFBVSxDQUFDRyxjQUFjLENBQUcsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9kb2NzL3dhbGt0aHJvdWdoL2FkdmFuY2VkLXBhdHRlcm5zLm1keD9mYzExIl0sInNvdXJjZXNDb250ZW50IjpbIlxuXG4vKiBAanN4UnVudGltZSBjbGFzc2ljICovXG4vKiBAanN4IG1keCAqL1xuLyogQGpzeEZyYWcgUmVhY3QuRnJhZ21lbnQgKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnO1xuXG5cbmV4cG9ydCBjb25zdCBmcm9udE1hdHRlciA9IHtcblx0aWQ6ICdhZHZhbmNlZC1wYXR0ZXJucycsXG5cdHRpdGxlOiAnQWR2YW5jZWQgUGF0dGVybnMnXG59O1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUaXRsZSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBjb25zdCBtZXRhZGF0YSA9IHtcbiAgXCJ1bnZlcnNpb25lZElkXCI6IFwid2Fsa3Rocm91Z2gvYWR2YW5jZWQtcGF0dGVybnNcIixcbiAgXCJpZFwiOiBcIndhbGt0aHJvdWdoL2FkdmFuY2VkLXBhdHRlcm5zXCIsXG4gIFwidGl0bGVcIjogXCJBZHZhbmNlZCBQYXR0ZXJuc1wiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiQ2lyY3VsYXIgRGVwZW5kZW5jaWVzXCIsXG4gIFwic291cmNlXCI6IFwiQHNpdGUvZG9jcy93YWxrdGhyb3VnaC9hZHZhbmNlZC1wYXR0ZXJucy5tZHhcIixcbiAgXCJzb3VyY2VEaXJOYW1lXCI6IFwid2Fsa3Rocm91Z2hcIixcbiAgXCJzbHVnXCI6IFwiL3dhbGt0aHJvdWdoL2FkdmFuY2VkLXBhdHRlcm5zXCIsXG4gIFwicGVybWFsaW5rXCI6IFwiL3plZHV4L2RvY3Mvd2Fsa3Rocm91Z2gvYWR2YW5jZWQtcGF0dGVybnNcIixcbiAgXCJkcmFmdFwiOiBmYWxzZSxcbiAgXCJlZGl0VXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL09tbmlzdGFjL3plZHV4L3RyZWUvbWFzdGVyL2RvY3Mvd2Fsa3Rocm91Z2gvYWR2YW5jZWQtcGF0dGVybnMubWR4XCIsXG4gIFwidGFnc1wiOiBbXSxcbiAgXCJ2ZXJzaW9uXCI6IFwiY3VycmVudFwiLFxuICBcImZyb250TWF0dGVyXCI6IHtcbiAgICBcImlkXCI6IFwiYWR2YW5jZWQtcGF0dGVybnNcIixcbiAgICBcInRpdGxlXCI6IFwiQWR2YW5jZWQgUGF0dGVybnNcIlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGFzc2V0cyA9IHtcblxufTtcblxuXG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgdmFsdWU6ICdDaXJjdWxhciBEZXBlbmRlbmNpZXMnLFxuICBpZDogJ2NpcmN1bGFyLWRlcGVuZGVuY2llcycsXG4gIGxldmVsOiAyXG59LCB7XG4gIHZhbHVlOiAnV29ya2Fyb3VuZCAxJyxcbiAgaWQ6ICd3b3JrYXJvdW5kLTEnLFxuICBsZXZlbDogM1xufSwge1xuICB2YWx1ZTogJ1dvcmthcm91bmQgMicsXG4gIGlkOiAnd29ya2Fyb3VuZC0yJyxcbiAgbGV2ZWw6IDNcbn0sIHtcbiAgdmFsdWU6ICdBdG9tIEluc3RhbmNlIEZhY3RvcmllcycsXG4gIGlkOiAnYXRvbS1pbnN0YW5jZS1mYWN0b3JpZXMnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJ1BhcmFtcyBBcmUgQ29uc3RhbnQnLFxuICBpZDogJ3BhcmFtcy1hcmUtY29uc3RhbnQnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJ1VwZGF0aW5nIG90aGVyIGF0b21zIGR1cmluZyBldmFsdWF0aW9uJyxcbiAgaWQ6ICd1cGRhdGluZy1vdGhlci1hdG9tcy1kdXJpbmctZXZhbHVhdGlvbicsXG4gIGxldmVsOiAyXG59XTtcblxuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIHRvY1xufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcImNpcmN1bGFyLWRlcGVuZGVuY2llc1wiXG4gICAgfX0+e2BDaXJjdWxhciBEZXBlbmRlbmNpZXNgfTwvaDI+XG4gICAgPHA+e2BJdCBpcyBhbHdheXMgcG9zc2libGUgdG8gZGVzaWduIGFuIGF0b20gZ3JhcGggd2l0aG91dCBhbnkgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLiBUaGF0IHNhaWQsIHNvbWV0aW1lcyBpdCBjYW4gYmUgdmVyeSBoYXJkIHRvIGRvIHNvIC0gcmVxdWlyZW1lbnRzIGNoYW5nZSwgdGhlIG5ldyBndXkgY29tZXMgaW4sIG9yIHNvbWV0aW1lcyB0aGUgc3RhdGUgaXMganVzdCB2ZXJ5IGNvbXBsZXguYH08L3A+XG4gICAgPHA+e2BaZWR1eCcgYXRvbWljIG1vZGVsIGNhbid0IHN1cHBvcnQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIC4uLiBvciBjYW4gaXQ/YH08L3A+XG4gICAgPHA+e2BBbHJpZ2h0LCBzdHJpY3RseSBzcGVha2luZywgZGlyZWN0IGNpcmN1bGFyIGRlcGVuZGVuY2llcyBhcmUgbm90IGFsbG93ZWQ6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGNvbnN0IGF0b21BID0gYXRvbSgnYScsICgpID0+IHtcbiAgaW5qZWN0QXRvbVZhbHVlKGF0b21CKVxufSlcblxuY29uc3QgYXRvbUIgPSBhdG9tKCdiJywgKCkgPT4ge1xuICBpbmplY3RBdG9tVmFsdWUoYXRvbUEpIC8vIDwtIGNpcmN1bGFyIGRlcCEgVGhpcyB3aWxsIGFsd2F5cyBicmVhayBldmVyeXRoaW5nXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BCdXQgdGhlcmUgYXJlIGEgY291cGxlIHdvcmthcm91bmRzLiBUaGUgYmFzaWMgaWRlYSBmb3IgYWxsIG9mIHRoZW0gaXM6IENyZWF0ZSBvbmUgb2YgdGhlIGRlcGVuZGVuY2llcyBhc3luY2hyb25vdXNseWB9PC9wPlxuICAgIDxoMyB7Li4ue1xuICAgICAgXCJpZFwiOiBcIndvcmthcm91bmQtMVwiXG4gICAgfX0+e2BXb3JrYXJvdW5kIDFgfTwvaDM+XG4gICAgPHA+e2BPbmx5IG1ha2Ugb25lIGRlcGVuZGVuY3ksIGUuZy4gYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgYSAtPiBiYH08L2lubGluZUNvZGU+e2AgKGEgZGVwZW5kcyBvbiBiKS4gTG9hZCB0aGUgb3RoZXIgYXRvbSB3aGVuIG5lZWRlZCwgZS5nLiAoaW4gYikgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgZ2V0KGF0b21BKWB9PC9pbmxpbmVDb2RlPntgLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2BpbXBvcnQge1xuICBhcGksXG4gIGF0b20sXG4gIGluamVjdEF0b21HZXR0ZXJzLFxuICBpbmplY3RBdG9tSW5zdGFuY2UsXG4gIGluamVjdFN0b3JlLFxufSBmcm9tICdAemVkdXgvcmVhY3QnXG5cbmNvbnN0IGNvbm5lY3Rpb25BdG9tID0gYXRvbSgnY29ubmVjdGlvbicsICgpID0+IHtcbiAgY29uc3QgeyBnZXRJbnN0YW5jZSB9ID0gaW5qZWN0QXRvbUdldHRlcnMoKVxuXG4gIC8vIGluc3RlYWQgb2YgY2FsbGluZyBnZXRJbnN0YW5jZSBkdXJpbmcgYXRvbSBldmFsdWF0aW9uIGxpa2UgdGhpczpcbiAgLy8gY29uc3QgbG9naW4gPSBnZXRJbnN0YW5jZShsb2dpbkF0b20pXG4gIC8vIHdlIGNhbGwgaXQgb25seSB3aGVuIHdlIG5lZWQgdG8gKGluc2lkZSBhbiBleHBvcnRlZCBjYWxsYmFjayk6XG4gIC8vIGhpZ2hsaWdodC1uZXh0LWxpbmVcbiAgY29uc3QgbG9nb3V0ID0gKCkgPT4gZ2V0SW5zdGFuY2UobG9naW5BdG9tKS5leHBvcnRzLnJlc2V0KClcblxuICBjb25zdCBwb3N0ID0gKHVybDogc3RyaW5nLCBkYXRhOiBhbnkpID0+XG4gICAgZmV0Y2godXJsLCB7IGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLCBtZXRob2Q6ICdQT1NUJyB9KS50aGVuKGRhdGEgPT5cbiAgICAgIGRhdGEuanNvbigpXG4gICAgKVxuXG4gIHJldHVybiBhcGkoKS5zZXRFeHBvcnRzKHsgbG9nb3V0LCBwb3N0IH0pXG59KVxuXG5jb25zdCBsb2dpbkF0b20gPSBhdG9tKCdsb2dpbicsICgpID0+IHtcbiAgLy8gaGlnaGxpZ2h0LW5leHQtbGluZVxuICBjb25zdCB7IHBvc3QgfSA9IGluamVjdEF0b21JbnN0YW5jZShjb25uZWN0aW9uQXRvbSkuZXhwb3J0c1xuICBjb25zdCBzdG9yZSA9IGluamVjdFN0b3JlKHsgZW1haWw6ICcnLCBwYXNzd29yZDogJycgfSlcblxuICBjb25zdCByZXNldCA9ICgpID0+IHN0b3JlLnNldFN0YXRlKHsgZW1haWw6ICcnLCBwYXNzd29yZDogJycgfSlcbiAgY29uc3Qgc2V0RW1haWwgPSAoZW1haWw6IHN0cmluZykgPT4gc3RvcmUuc2V0U3RhdGVEZWVwKHsgZW1haWwgfSlcbiAgY29uc3Qgc2V0UGFzc3dvcmQgPSAocGFzc3dvcmQ6IHN0cmluZykgPT4gc3RvcmUuc2V0U3RhdGVEZWVwKHsgcGFzc3dvcmQgfSlcbiAgY29uc3Qgc3VibWl0ID0gKCkgPT4gcG9zdCgnL2xvZ2luJywgc3RvcmUuZ2V0U3RhdGUoKSlcblxuICByZXR1cm4gYXBpKHN0b3JlKS5zZXRFeHBvcnRzKHsgcmVzZXQsIHNldEVtYWlsLCBzZXRQYXNzd29yZCwgc3VibWl0IH0pXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2AoTm90ZSB0aGF0IHRoZSBiZXR0ZXIgc29sdXRpb24gaXMgdG8gbW92ZSB0aGUgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgbG9nb3V0YH08L2lubGluZUNvZGU+e2AgZnVuY3Rpb24gc29tZXdoZXJlIGVsc2UgLSBlLmcuIGluc2lkZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2Bsb2dpbkF0b21gfTwvaW5saW5lQ29kZT57YCAtIGNvbXBsZXRlbHkgYXZvaWRpbmcgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kgaW4gdGhlIGZpcnN0IHBsYWNlKS5gfTwvcD5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJ3b3JrYXJvdW5kLTJcIlxuICAgIH19PntgV29ya2Fyb3VuZCAyYH08L2gzPlxuICAgIDxwPntgVXNlIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCJkZXN0cnVjdGlvbiNtYW51YWwtZ3JhcGhpbmdcIlxuICAgICAgfX0+e2BtYW51YWwgZ3JhcGhpbmdgfTwvYT57YCB0byBhZGQgYSBkZXBlbmRlbmN5IGxhdGVyLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2Bjb25zdCBhdG9tQSA9IGF0b20oJ2EnLCAoKSA9PiB7XG4gIGNvbnN0IGIgPSBpbmplY3RBdG9tVmFsdWUoYXRvbUIpXG5cbiAgcmV0dXJuICdhJyArIGJcbn0pXG5cbmNvbnN0IGF0b21CID0gYXRvbSgnYicsICgpID0+IHtcbiAgY29uc3QgeyBnZXRJbnN0YW5jZSB9ID0gaW5qZWN0QXRvbUdldHRlcnNcbiAgY29uc3Qgc3RvcmUgPSBpbmplY3RTdG9yZSgnYicpXG5cbiAgaW5qZWN0RWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBhID0gZ2V0SW5zdGFuY2UoYXRvbUEpXG4gICAgY29uc3QgY2xlYW51cCA9IGEuYWRkRGVwZW5kZW50KClcbiAgICBzdG9yZS5zZXRTdGF0ZShhKVxuXG4gICAgcmV0dXJuIGNsZWFudXBcbiAgfSwgW10pXG5cbiAgcmV0dXJuIHN0b3JlXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BJbiB0aGlzIGNhc2UsIHRoZXNlIHR3byBhdG9tcyBoYXZlIHJlYWwgZGVwZW5kZW5jaWVzIG9uIGVhY2ggb3RoZXIuIEFzIHN1Y2gsIHRoZXkgcHJldmVudCBlYWNoIG90aGVyIGZyb20gYmVpbmcgY2xlYW5lZCB1cC4gWW91J2xsIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhhdCBieSBkZXN0cm95aW5nIHRoZSBtYW51YWxseSBjcmVhdGVkIGVkZ2Ugb3IgZm9yY2UgZGVzdHJveWluZyBpZiBkZXN0cnVjdGlvbiBpcyBuZWVkZWQuYH08L3A+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiYXRvbS1pbnN0YW5jZS1mYWN0b3JpZXNcIlxuICAgIH19PntgQXRvbSBJbnN0YW5jZSBGYWN0b3JpZXNgfTwvaDI+XG4gICAgPHA+e2BaZWR1eCBjcmVhdGVzIGF0b20gaW5zdGFuY2VzIGR5bmFtaWNhbGx5IHdoZW5ldmVyIHRoZXkncmUgZmlyc3QgdXNlZC4gVGhpcyBpcyB2ZXJ5IGNvbnZlbmllbnQgYnV0IHRha2VzIHNvbWUgY29udHJvbCBvdXQgb2YgeW91ciBoYW5kcy4gUHJvIFRpcDogWW91IGNhbiB1c2UgQXRvbSBTZWxlY3RvcnMgdG8gZ2V0IHRoYXQgY29udHJvbCBiYWNrLmB9PC9wPlxuICAgIDxwPntgUmVtZW1iZXIgdGhhdCBBdG9tIFNlbGVjdG9ycyBjYW4gcmV0dXJuIGFic29sdXRlbHkgYW55dGhpbmcuIFdlbGwsIHRoYXQgbWVhbnMgdGhleSBjYW4gYWxzbyByZXR1cm4gYXRvbSBpbnN0YW5jZXMuIEFsc28gcmVtZW1iZXIgdGhhdCBhdG9tcyBjYW4gZXhwb3J0IGFueXRoaW5nLiBXZWxsLCB0aGF0IG1lYW5zIHRoZXkgY2FuIGFsc28gZXhwb3J0IHNvbWV0aGluZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgYXRvbSBpbnN0YW5jZSB3YXMganVzdCBjcmVhdGVkIG9yIGlzIG1pc3Npbmcgc29tZSByZWYgdmFsdWUgb3IgLi4uIGFueXRoaW5nIWB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2Bjb25zdCBmb3JtRmllbGRBdG9tID0gYXRvbSgnZm9ybUZpZWxkJywgKGZpZWxkTmFtZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gaW5qZWN0U3RvcmUoJycpXG4gIGNvbnN0IGlzVmFsaWRSZWYgPSBpbmplY3RSZWYoKVxuXG4gIHJldHVybiBhcGkoc3RvcmUpLnNldEV4cG9ydHMoeyBpc1ZhbGlkUmVmIH0pXG59KVxuXG5jb25zdCBnZXRGb3JtRmllbGRJbnN0YW5jZSA9IChcbiAgeyBnZXRJbnN0YW5jZSB9OiBBdG9tR2V0dGVycyxcbiAgZmllbGROYW1lOiBzdHJpbmcsXG4gIGlzVmFsaWQ6ICh2YWw6IHN0cmluZykgPT4gYm9vbGVhblxuKSA9PiB7XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0SW5zdGFuY2UoZm9ybUZpZWxkQXRvbSwgW2ZpZWxkTmFtZV0pXG5cbiAgLy8gaWYgdGhlIGZvcm1GaWVsZCBkb2Vzbid0IGhhdmUgaXRzIHZhbGlkYXRvciBzZXQgeWV0LCBzZXQgaXRcbiAgaWYgKCFpbnN0YW5jZS5leHBvcnRzLmlzVmFsaWRSZWYpIHtcbiAgICBpbnN0YW5jZS5leHBvcnRzLmlzVmFsaWRSZWYuY3VycmVudCA9IGlzVmFsaWRcbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZVxufVxuXG5mdW5jdGlvbiBGb3JtKCkge1xuICAvLyBub3cgaW5zdGVhZCBvZiBcXGB1c2VBdG9tSW5zdGFuY2UoZm9ybUZpZWxkQXRvbSwgJ2VtYWlsJylcXGAsIGRvOlxuICBjb25zdCBlbWFpbEZpZWxkSW5zdGFuY2UgPSB1c2VBdG9tU2VsZWN0b3IoXG4gICAgZ2V0Rm9ybUZpZWxkSW5zdGFuY2UsXG4gICAgJ2VtYWlsJyxcbiAgICBpc1ZhbGlkRW1haWxcbiAgKVxuXG4gIC8vIGFuZCBpbnN0ZWFkIG9mIFxcYHVzZUF0b21JbnN0YW5jZShmb3JtRmllbGRBdG9tLCAncGFzc3dvcmQnKVxcYCwgZG86XG4gIGNvbnN0IHBhc3N3b3JkRmllbGRJbnN0YW5jZSA9IHVzZUF0b21TZWxlY3RvcihcbiAgICBnZXRGb3JtRmllbGRJbnN0YW5jZSxcbiAgICAncGFzc3dvcmQnLFxuICAgIGlzVmFsaWRQYXNzd29yZFxuICApXG4gIC4uLlxufVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2AoTm90ZSB0aGF0IHRoaXMgaXMgYSBjb250cml2ZWQgZXhhbXBsZS4gVGhlcmUgbWF5IGJlIGJldHRlciB3YXlzIHRvIGRvIHBlci1maWVsZCBmb3JtIHZhbGlkYXRpb24pLmB9PC9wPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInBhcmFtcy1hcmUtY29uc3RhbnRcIlxuICAgIH19PntgUGFyYW1zIEFyZSBDb25zdGFudGB9PC9oMj5cbiAgICA8cD57YFNpbmNlIFplZHV4IGNyZWF0ZXMgYSBkaWZmZXJlbnQgYXRvbSBpbnN0YW5jZSBpZiBpdCBkZXRlY3RzIGRpZmZlcmVudCBhdG9tIHBhcmFtcywgcGFyYW1zIGFyZSBlc3NlbnRpYWxseSBjb25zdGFudDsgdGhlIHBhcmFtcyByZWNlaXZlZCBieSBhbiBhdG9tIGluc3RhbmNlIGNhbiBuZXZlciBjaGFuZ2UgZm9yIHRoZSBlbnRpcmUgbGlmZXRpbWUgb2YgdGhhdCBpbnN0YW5jZS5gfTwvcD5cbiAgICA8cD57YFRoaXMgbWVhbnMgeW91IGB9PGVtIHBhcmVudE5hbWU9XCJwXCI+e2BjYW5gfTwvZW0+e2AgY29uZGl0aW9uYWxseSBhZGQvcmVtb3ZlIGluamVjdG9ycyBiYXNlZCBvbiBwYXJhbXMuIFdlIGRlZmluaXRlbHkgZG9uJ3QgcmVjb21tZW5kIGRvaW5nIHRoaXMsIGVzcGVjaWFsbHkgaWYgeW91J3JlIG5ldyB0byBaZWR1eC4gQnV0IHdlIGhhdmUgZm91bmQgc29tZSBzaXR1YXRpb25zIHdoZXJlIGl0J3MgY29udmVuaWVudC5gfTwvcD5cbiAgICA8cD57YEl0IGFsc28gbWVhbnMgdGhhdCB5b3UgZG9uJ3QgbmVlZCB0byBwYXNzIHBhcmFtcyBhcyBkZXBzIHRvIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGluamVjdE1lbW9gfTwvaW5saW5lQ29kZT57YCwgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5qZWN0RWZmZWN0YH08L2lubGluZUNvZGU+e2AsIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGluamVjdENhbGxiYWNrYH08L2lubGluZUNvZGU+e2AsIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YGluamVjdFByb21pc2VgfTwvaW5saW5lQ29kZT57YCwgYW5kIHNpbWlsYXIgaW5qZWN0b3JzLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2Bjb25zdCByZXF1ZXN0QXRvbSA9IGF0b20oJ3JlcXVlc3QnLCAoZW5kcG9pbnQ6IHN0cmluZykgPT4ge1xuICBsZXQgcHJlZml4ID0gJydcblxuICBpZiAoIWVuZHBvaW50LnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgIHByZWZpeCA9IGluamVjdEF0b21WYWx1ZShwcm90b2NvbEF0b20pIC8vIG5vdCByZWNvbW1lbmRlZC4uLlxuICB9XG5cbiAgaW5qZWN0RWZmZWN0KCgpID0+IHtcbiAgICBmZXRjaChcXGBcXCR7cHJlZml4fVxcJHtlbmRwb2ludH1cXGApLnRoZW4oLi4uKVxuICB9LCBbXSkgLy8gPC0gZG9uJ3QgbmVlZCB0byBwYXNzIGVuZHBvaW50IG9yIHByZWZpeFxufSlcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInVwZGF0aW5nLW90aGVyLWF0b21zLWR1cmluZy1ldmFsdWF0aW9uXCJcbiAgICB9fT57YFVwZGF0aW5nIG90aGVyIGF0b21zIGR1cmluZyBldmFsdWF0aW9uYH08L2gyPlxuICAgIDxwPntgVGhlcmUgc2hvdWxkbid0IGJlIGEgbmVlZCBmb3IgdGhpcywgYnV0IGl0IGlzIGFjdHVhbGx5IGZpbmUgdG8gdXBkYXRlIG90aGVyIGF0b20gaW5zdGFuY2VzIGR1cmluZyBhdG9tIGV2YWx1YXRpb24gYH08c3Ryb25nIHBhcmVudE5hbWU9XCJwXCI+e2BpZmB9PC9zdHJvbmc+e2AgdGhpcyBpcyBub3QgdGhlIGZpcnN0IGV2YWx1YXRpb246YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGNvbnN0IHJvZ3VlQXRvbSA9IGF0b20oJ3JvZ3VlJywgKCkgPT4ge1xuICBjb25zdCByZWFzb25zID0gaW5qZWN0V2h5KClcbiAgY29uc3QgdmljdGltSW5zdGFuY2UgPSBpbmplY3RBdG9tSW5zdGFuY2UodmljdGltQXRvbSlcblxuICB2aWN0aW1JbnN0YW5jZS5zZXRTdGF0ZSgnc2FkbmVzcycpIC8vIDwtIEJhZCEgRG9uJ3QgZG8gdGhpc1xuXG4gIC8vIHVzZSBpbmplY3RXaHkgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgaXMgdGhlIGluaXRpYWwgZXZhbHVhdGlvbiAocmVhc29ucyBpc1xuICAvLyBlbXB0eSBpZiBpdCBpcyk6XG4gIGlmIChyZWFzb25zLmxlbmd0aCkge1xuICAgIHZpY3RpbUluc3RhbmNlLnNldFN0YXRlKCdtd2FoYWhhaGEnKSAvLyA8LSBmaW5lLi4uIGJ1dCBzdGlsbCBwcm9iYWJseSBkb24ndFxuICB9XG4gIC4uLlxufSlcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDwvTURYTGF5b3V0Pjtcbn1cbjtcbk1EWENvbnRlbnQuaXNNRFhDb21wb25lbnQgPSB0cnVlO1xuIl0sIm5hbWVzIjpbIlJlYWN0IiwibWR4IiwiZnJvbnRNYXR0ZXIiLCJpZCIsInRpdGxlIiwiY29udGVudFRpdGxlIiwidW5kZWZpbmVkIiwibWV0YWRhdGEiLCJhc3NldHMiLCJ0b2MiLCJ2YWx1ZSIsImxldmVsIiwibGF5b3V0UHJvcHMiLCJNRFhMYXlvdXQiLCJNRFhDb250ZW50IiwiY29tcG9uZW50cyIsInByb3BzIiwiaXNNRFhDb21wb25lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7133\n')}}]);