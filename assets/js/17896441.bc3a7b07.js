"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[7918],{8794:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": function() { return /* binding */ theme_CodeBlock; }\n});\n\n// NAMESPACE OBJECT: ../packages/react/src/index.ts\nvar react_src_namespaceObject = {};\n__webpack_require__.r(react_src_namespaceObject);\n__webpack_require__.d(react_src_namespaceObject, {\n  \"Atom\": function() { return Atom/* Atom */.h; },\n  \"AtomApi\": function() { return AtomApi/* AtomApi */.u; },\n  \"AtomBase\": function() { return AtomBase/* AtomBase */.H; },\n  \"AtomInstance\": function() { return AtomInstance/* AtomInstance */.p; },\n  \"AtomInstanceBase\": function() { return AtomInstanceBase/* AtomInstanceBase */.T; },\n  \"AtomInstanceProvider\": function() { return AtomInstanceProvider; },\n  \"Ecosystem\": function() { return Ecosystem/* Ecosystem */.q; },\n  \"EcosystemProvider\": function() { return EcosystemProvider; },\n  \"EdgeFlag\": function() { return types/* EdgeFlag */.d; },\n  \"Ion\": function() { return Ion; },\n  \"MachineStore\": function() { return MachineStore; },\n  \"StandardAtomBase\": function() { return StandardAtomBase/* StandardAtomBase */.a; },\n  \"Store\": function() { return createStore/* Store */.y; },\n  \"ZeduxPlugin\": function() { return ZeduxPlugin; },\n  \"actionFactory\": function() { return actionFactory/* actionFactory */.B; },\n  \"actionTypes\": function() { return constants/* actionTypes */.H; },\n  \"addMeta\": function() { return meta/* addMeta */.k; },\n  \"api\": function() { return api/* api */.h; },\n  \"atom\": function() { return atom/* atom */.c; },\n  \"createEcosystem\": function() { return createEcosystem/* createEcosystem */.q; },\n  \"createReducer\": function() { return createReducer/* createReducer */.L; },\n  \"createStore\": function() { return createStore/* createStore */.M; },\n  \"ecosystemContext\": function() { return Ecosystem/* ecosystemContext */.z; },\n  \"getEcosystem\": function() { return public_api/* getEcosystem */.$$; },\n  \"getMetaData\": function() { return meta/* getMetaData */.g2; },\n  \"hasMeta\": function() { return meta/* hasMeta */.yF; },\n  \"injectAtomGetters\": function() { return injectAtomGetters; },\n  \"injectAtomInstance\": function() { return injectAtomInstance; },\n  \"injectAtomInstanceDynamic\": function() { return injectAtomInstanceDynamic; },\n  \"injectAtomSelector\": function() { return injectAtomSelector; },\n  \"injectAtomState\": function() { return injectAtomState; },\n  \"injectAtomValue\": function() { return injectAtomValue; },\n  \"injectCallback\": function() { return injectCallback; },\n  \"injectEffect\": function() { return injectEffect/* injectEffect */.o; },\n  \"injectInvalidate\": function() { return injectInvalidate; },\n  \"injectMachineStore\": function() { return injectMachineStore; },\n  \"injectMemo\": function() { return injectMemo; },\n  \"injectPromise\": function() { return injectPromise; },\n  \"injectRef\": function() { return injectRef/* injectRef */.i; },\n  \"injectStore\": function() { return injectStore/* injectStore */.n; },\n  \"injectWhy\": function() { return injectWhy; },\n  \"ion\": function() { return ion; },\n  \"isZeduxStore\": function() { return general/* isZeduxStore */.z2; },\n  \"metaTypes\": function() { return constants/* metaTypes */.u; },\n  \"removeAllMeta\": function() { return meta/* removeAllMeta */.vU; },\n  \"removeMeta\": function() { return meta/* removeMeta */.hM; },\n  \"useAtomConsumer\": function() { return useAtomConsumer; },\n  \"useAtomInstance\": function() { return useAtomInstance/* useAtomInstance */.Q; },\n  \"useAtomInstanceDynamic\": function() { return useAtomInstanceDynamic; },\n  \"useAtomSelector\": function() { return useAtomSelector; },\n  \"useAtomState\": function() { return useAtomState; },\n  \"useAtomValue\": function() { return useAtomValue; },\n  \"useEcosystem\": function() { return useEcosystem/* useEcosystem */.l; },\n  \"when\": function() { return when; },\n  \"wipe\": function() { return public_api/* wipe */.Ej; },\n  \"zeduxGlobalStore\": function() { return public_api/* zeduxGlobalStore */.Wg; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js + 17 modules\nvar CodeBlock = __webpack_require__(6823);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(7462);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4578);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js + 1 modules\nvar construct = __webpack_require__(8852);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js + 2 modules\nvar createForOfIteratorHelperLoose = __webpack_require__(7855);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/hooks/usePrismTheme.js\nvar usePrismTheme = __webpack_require__(6412);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/useDocusaurusContext.js\nvar useDocusaurusContext = __webpack_require__(2263);\n// EXTERNAL MODULE: ./node_modules/prismjs/prism.js\nvar prism = __webpack_require__(5660);\nvar prism_default = /*#__PURE__*/__webpack_require__.n(prism);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-jsx.js\nvar prism_jsx = __webpack_require__(2356);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-typescript.js\nvar prism_typescript = __webpack_require__(6836);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-tsx.js\nvar prism_tsx = __webpack_require__(1029);\n// EXTERNAL MODULE: ./node_modules/slate/dist/index.es.js + 1 modules\nvar index_es = __webpack_require__(7946);\n// EXTERNAL MODULE: ./node_modules/slate-history/dist/index.es.js\nvar dist_index_es = __webpack_require__(7645);\n// EXTERNAL MODULE: ./node_modules/slate-react/dist/index.es.js + 2 modules\nvar slate_react_dist_index_es = __webpack_require__(9251);\n// EXTERNAL MODULE: ../packages/core/src/api/constants.ts\nvar constants = __webpack_require__(3064);\n// EXTERNAL MODULE: ../packages/core/src/api/actionFactory.ts\nvar actionFactory = __webpack_require__(2808);\n// EXTERNAL MODULE: ../packages/core/src/api/createReducer.ts\nvar createReducer = __webpack_require__(6967);\n// EXTERNAL MODULE: ../packages/core/src/api/createStore.ts + 4 modules\nvar createStore = __webpack_require__(1694);\n;// CONCATENATED MODULE: ../packages/core/src/api/MachineStore.ts\n/**\n * An extremely low-level Store class that represents a state machine. Don't\n * create this class yourself, use a helper such as @zedux/react's\n * `injectMachineStore()`\n */var MachineStore=/*#__PURE__*/function(_Store){(0,inheritsLoose/* default */.Z)(MachineStore,_Store);function MachineStore(initialState,states,initialContext,guard){var _this;_this=_Store.call(this,null,{context:initialContext,value:initialState})||this;_this.getContext=function(){return _this.getState().context;};_this.getValue=function(){return _this.getState().value;};_this.is=function(stateName){return _this.getState().value===stateName;};_this.send=function(eventName){_this.setState(function(currentState){var nextValue=_this.states[currentState.value][eventName];if(!nextValue||nextValue!=null&&nextValue.guard&&!nextValue.guard(currentState.context)||_this.guard&&!_this.guard(currentState,nextValue.name)){return currentState;}return{context:currentState.context,value:nextValue.name};});};_this.setContext=function(context){return _this.setState(function(state){return{context:typeof context==='function'?context(state.context):context,value:state.value};});};_this.setContextDeep=function(partialContext){return _this.setStateDeep(function(state){return{context:typeof partialContext==='function'?partialContext(state.context):partialContext};});};_this.states=states;_this.guard=guard;return _this;}return MachineStore;}(createStore/* Store */.y);\n// EXTERNAL MODULE: ../packages/core/src/api/meta.ts\nvar meta = __webpack_require__(7159);\n// EXTERNAL MODULE: ../packages/core/src/utils/actions.ts\nvar actions = __webpack_require__(8319);\n;// CONCATENATED MODULE: ../packages/core/src/utils/errors.ts\nvar assertAreFunctions= true?function(args,method){for(var _iterator=(0,createForOfIteratorHelperLoose/* default */.Z)(args),_step;!(_step=_iterator()).done;){var arg=_step.value;if(typeof arg!=='function'){throw new TypeError(\"Zedux: \"+method+\" - Expected argument to be a function. Received \"+typeof arg);}}}:0;\n;// CONCATENATED MODULE: ../packages/core/src/api/when.ts\nvar when=function when(store){var actionHandlers={};var anyActionHandlers=[];var enterHooks={};var leaveHooks={};var stateChangeHandlers=[];var stateMatchHandlers=[];var effectsSubscriber=function effectsSubscriber(storeEffect){if(storeEffect.action){runActionHandlers(storeEffect);}if(storeEffect.newState===storeEffect.oldState)return;runMachineHandlers(storeEffect);runStateChangeHandlers(storeEffect);};var runActionHandlers=function runActionHandlers(storeEffect){if(!storeEffect.action)return;anyActionHandlers.forEach(function(handler){return handler(storeEffect);});var unwrappedAction=(0,meta/* removeAllMeta */.vU)(storeEffect.action);var handlers=actionHandlers[unwrappedAction.type];handlers==null?void 0:handlers.forEach(function(handler){return handler(storeEffect);});};var runMachineHandlers=function runMachineHandlers(storeEffect){var oldState=storeEffect.oldState!=null&&storeEffect.oldState.value;var newState=storeEffect.newState.value;if(newState===oldState)return;var currentLeaveHooks=typeof oldState==='string'?leaveHooks[oldState]:null;var currentEnterHooks=enterHooks[newState];currentLeaveHooks==null?void 0:currentLeaveHooks.forEach(function(hook){return hook(storeEffect);});currentEnterHooks==null?void 0:currentEnterHooks.forEach(function(hook){return hook(storeEffect);});};var runStateChangeHandlers=function runStateChangeHandlers(storeEffect){stateChangeHandlers.forEach(function(handler){return handler(storeEffect);});stateMatchHandlers.forEach(function(_ref){var predicate=_ref.predicate,sideEffect=_ref.sideEffect;var oldPredicate=predicate(storeEffect.oldState);var newPredicate=predicate(storeEffect.newState);// We only run stateMatch handlers when state changes and now matches but didn't before\nif(!newPredicate||oldPredicate===newPredicate)return;sideEffect(storeEffect);});};// Exposed methods\nvar enters=function enters(state,sideEffect){var states=Array.isArray(state)?state:[state];states.forEach(function(stateName){if(!enterHooks[stateName]){enterHooks[stateName]=[];}enterHooks[stateName].push(sideEffect);});return whenBuilder;};var leaves=function leaves(state,sideEffect){var states=Array.isArray(state)?state:[state];states.forEach(function(stateName){if(!leaveHooks[stateName]){leaveHooks[stateName]=[];}leaveHooks[stateName].push(sideEffect);});return whenBuilder;};var receivesAction=function receivesAction(reactableOrEffectHandler,sideEffect){if(typeof sideEffect==='undefined'){assertAreFunctions([reactableOrEffectHandler],'whenBuilder.receivesAction()');anyActionHandlers.push(reactableOrEffectHandler);return whenBuilder;}if(true){assertAreFunctions([sideEffect],'whenBuilder.receivesEffect()');}var reactable=reactableOrEffectHandler;var actionType=(0,actions/* extractActionType */.h)(reactable,'whenBuilder.receivesAction()');if(!actionHandlers[actionType]){actionHandlers[actionType]=[];}actionHandlers[actionType].push(sideEffect);return whenBuilder;};var stateChanges=function stateChanges(sideEffect){stateChangeHandlers.push(sideEffect);return whenBuilder;};var stateMatches=function stateMatches(predicate,sideEffect){if(true){assertAreFunctions([predicate,sideEffect],'whenBuilder.stateMatches()');}stateMatchHandlers.push({predicate:predicate,sideEffect:sideEffect});return whenBuilder;};var subscription=store.subscribe({effects:effectsSubscriber});var whenBuilder={enters:enters,leaves:leaves,receivesAction:receivesAction,stateChanges:stateChanges,stateMatches:stateMatches,subscription:subscription};return whenBuilder;};\n// EXTERNAL MODULE: ../packages/core/src/utils/general.ts\nvar general = __webpack_require__(8487);\n;// CONCATENATED MODULE: ../packages/core/src/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/classes/atoms/StandardAtomBase.ts\nvar StandardAtomBase = __webpack_require__(6892);\n// EXTERNAL MODULE: ../packages/react/src/factories/api.ts\nvar api = __webpack_require__(552);\n;// CONCATENATED MODULE: ../packages/react/src/factories/ion.ts\nvar ion=function ion(key,get,setIn,configIn){var set=typeof setIn==='function'?setIn:undefined;var config=set?configIn:setIn;return new Ion(key,get,set,config);};\n// EXTERNAL MODULE: ../packages/react/src/classes/EvaluationStack.ts\nvar EvaluationStack = __webpack_require__(2633);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomGetters.ts\n/**\n * injectAtomGetters\n *\n * An injector that returns an AtomGetters object. The returned AtomGetters\n * dynamically register dependencies for the current atom instance when called\n * synchronously during atom evaluation.\n *\n * ```ts\n * const exampleAtom = atom('example', () => {\n *   const {\xa0ecosystem, get, getInstance } = injectAtomGetters()\n *   const dynamicVal = get(myAtom) // registers a dynamic graph edge\n *   const instance = getInstance(myAtom) // registers a static graph edge\n *   const fromEcosystem = ecosystem.get(myAtom) // doesn't register anything\n *\n *   injectEffect(() => {\n *     const dynamicVal2 = get(myAtom) // doesn't register anything\n *     const instance2 = getInstance(myAtom) // doesn't register anything\n *     const fromEcosystem2 = ecosystem.get(myAtom) // doesn't register anything\n *   }, []) // no need to pass AtomGetters as deps; they're stable references\n * })\n * ```\n *\n * @see AtomGetters\n */var injectAtomGetters=function injectAtomGetters(){var instance=(0,EvaluationStack/* readInstance */.i)();return instance.ecosystem._evaluationStack.atomGetters;};\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstance.ts\nvar AtomInstance = __webpack_require__(3096);\n;// CONCATENATED MODULE: ../packages/react/src/classes/atoms/Ion.ts\nvar Ion=/*#__PURE__*/function(_StandardAtomBase){(0,inheritsLoose/* default */.Z)(Ion,_StandardAtomBase);function Ion(key,get,set,config){var _this;var value=function value(){var atomGetters=injectAtomGetters();var instance=(0,EvaluationStack/* readInstance */.i)();for(var _len=arguments.length,params=new Array(_len),_key=0;_key<_len;_key++){params[_key]=arguments[_key];}var val=get.apply(void 0,[atomGetters].concat(params));var ionApi=(0,api/* api */.h)(val);if(set){ionApi.addSetStateInterceptor(function(settable){var innerSet=function innerSet(atom,paramsIn,settableIn){// TODO: Better error reporting for bad parameters passed here\nvar params=settableIn?paramsIn:[];var settable=settableIn||paramsIn;atomGetters.ecosystem.getInstance(atom,params).setState(settable);};var result=set(Object.assign({},atomGetters,{instance:instance,set:innerSet}),settable);return typeof result==='undefined'?instance.store.getState():result;});}return ionApi;};_this=_StandardAtomBase.call(this,key,value,config)||this;_this._get=get;_this._set=set;return _this;}var _proto=Ion.prototype;_proto._createInstance=function _createInstance(ecosystem,keyHash,params){return new AtomInstance/* AtomInstance */.p(ecosystem,this,keyHash,params);};_proto.getKeyHash=function getKeyHash(ecosystem,params){var base=this.key;if(!(params!=null&&params.length))return base;return base+\"-\"+ecosystem._idGenerator.hashParams(params,ecosystem.complexAtomParams);};_proto.override=function override(newGet,newSet){return ion(this.key,newGet||this._get,newSet||this._set,{flags:this.flags});};return Ion;}(StandardAtomBase/* StandardAtomBase */.a);\n// EXTERNAL MODULE: ../packages/react/src/classes/atoms/Atom.ts\nvar Atom = __webpack_require__(1968);\n// EXTERNAL MODULE: ../packages/react/src/classes/atoms/AtomBase.ts\nvar AtomBase = __webpack_require__(3789);\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstanceBase.ts\nvar AtomInstanceBase = __webpack_require__(4987);\n// EXTERNAL MODULE: ../packages/react/src/classes/AtomApi.ts\nvar AtomApi = __webpack_require__(2448);\n// EXTERNAL MODULE: ../packages/react/src/classes/Ecosystem.ts + 4 modules\nvar Ecosystem = __webpack_require__(5092);\n// EXTERNAL MODULE: ../packages/react/src/utils/plugin-actions.ts\nvar plugin_actions = __webpack_require__(3299);\n;// CONCATENATED MODULE: ../packages/react/src/classes/ZeduxPlugin.ts\nvar ZeduxPlugin=/**\n   * These actions should only be dispatched to an ecosystem's modBus\n   * store, so they don't need prefixes\n   */function ZeduxPlugin(_temp){var _ref=_temp===void 0?{}:_temp,_ref$initialMods=_ref.initialMods,initialMods=_ref$initialMods===void 0?[]:_ref$initialMods,registerEcosystem=_ref.registerEcosystem;this.modsStore=(0,createStore/* createStore */.M)(null,initialMods.reduce(function(hash,mod){hash[mod]=true;return hash;},{}));this.registerEcosystem=registerEcosystem||function(){};};ZeduxPlugin.actions=plugin_actions/* pluginActions */.V;\n;// CONCATENATED MODULE: ../packages/react/src/classes/index.ts\n// this .. has to be imported before Atom or the build breaks :exploding_head:\n\n// EXTERNAL MODULE: ../packages/react/src/hooks/useEcosystem.ts\nvar useEcosystem = __webpack_require__(6215);\n;// CONCATENATED MODULE: ../packages/react/src/components/AtomInstanceProvider.tsx\nvar AtomInstanceProvider=function AtomInstanceProvider(_ref){var children=_ref.children,instance=_ref.instance,instances=_ref.instances;var ecosystem=(0,useEcosystem/* useEcosystem */.l)();if( true&&!instance&&!instances){throw new Error('Zedux: AtomInstanceProvider requires either an `instance` or `instances` prop');}var allInstances=instances||[instance];if(allInstances.length===1){var _context=ecosystem._getReactContext(allInstances[0].atom);return/*#__PURE__*/react.createElement(_context.Provider,{value:allInstances[0]},children);}var parentInstance=allInstances[0],childInstances=allInstances.slice(1);var context=ecosystem._getReactContext(parentInstance.atom);return/*#__PURE__*/react.createElement(context.Provider,{value:parentInstance},/*#__PURE__*/react.createElement(AtomInstanceProvider,{instances:childInstances},children));};\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(3366);\n// EXTERNAL MODULE: ../packages/react/src/factories/createEcosystem.ts\nvar createEcosystem = __webpack_require__(2662);\n;// CONCATENATED MODULE: ../packages/react/src/components/EcosystemProvider.tsx\nvar _excluded=[\"children\",\"ecosystem\"];/**\n * EcosystemProvider\n *\n * Creates an atom ecosystem. The behavior of atoms inside this EcosystemProvider can\n * be configured with props passed here.\n */var EcosystemProvider=function EcosystemProvider(_ref){var children=_ref.children,passedEcosystem=_ref.ecosystem,ecosystemConfig=(0,objectWithoutPropertiesLoose/* default */.Z)(_ref,_excluded);var _useMemo=(0,react.useMemo)(function(){var resolvedEcosystem=passedEcosystem||(0,createEcosystem/* createEcosystem */.q)(Object.assign({destroyOnUnmount:true},ecosystemConfig));return[function(){resolvedEcosystem._incrementRefCount();return function(){return resolvedEcosystem._decrementRefCount();};},function(){return resolvedEcosystem;}];},[ecosystemConfig.id,passedEcosystem]),subscribe=_useMemo[0],getSnapshot=_useMemo[1];// don't pass other vals; just get snapshot when these change\nvar ecosystem=(0,react.useSyncExternalStore)(subscribe,getSnapshot,getSnapshot);return/*#__PURE__*/react.createElement(Ecosystem/* ecosystemContext.Provider */.z.Provider,{value:ecosystem.ecosystemId},children);};\n;// CONCATENATED MODULE: ../packages/react/src/components/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/factories/atom.ts\nvar atom = __webpack_require__(5965);\n;// CONCATENATED MODULE: ../packages/react/src/factories/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/utils/general.ts\nvar utils_general = __webpack_require__(395);\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomConsumer.ts\nvar useAtomConsumer=function useAtomConsumer(atom,defaultParams){var ecosystem=(0,useEcosystem/* useEcosystem */.l)();var instance=(0,react.useContext)(ecosystem._getReactContext(atom));if(!defaultParams||(0,utils_general.is)(instance,AtomInstanceBase/* AtomInstanceBase */.T)){if( true&&instance.activeState==='Destroyed'){throw new Error(\"Zedux: useAtomConsumer - A destroyed atom instance was provided with key \\\"\"+instance.keyHash+\"\\\". This is not supported. Provide an active atom instance instead.\");}return instance;}if(typeof defaultParams==='boolean'){if(true){throw new ReferenceError(\"Zedux: useAtomConsumer - No atom instance was provided for atom \\\"\"+atom.key+\"\\\".\");}else{}}return ecosystem.getInstance(atom,defaultParams);};\n// EXTERNAL MODULE: ../packages/react/src/hooks/useAtomInstance.ts\nvar useAtomInstance = __webpack_require__(4538);\n// EXTERNAL MODULE: ../packages/react/src/types.ts\nvar types = __webpack_require__(6511);\n// EXTERNAL MODULE: ../packages/react/src/hooks/useReactComponentId.ts\nvar useReactComponentId = __webpack_require__(6559);\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomInstanceDynamic.ts\nvar OPERATION='useAtomInstanceDynamic';/**\n * useAtomInstanceDynamic\n *\n * Creates an atom instance for the passed atom based on the passed params. If\n * an instance has already been created for the passed params, reuses the\n * existing instance.\n *\n * Creates a dynamic graph edge that receives updates when the atom instance's\n * state changes\n *\n * This is a low-level hook that probably shouldn't be used directly. Use\n * higher-level hooks like useAtomValue, useAtomState, and useAtomSelector\n *\n * ```ts\n * const [state, setState] = useAtomState(myAtom)\n * ```\n *\n * @param atom The atom to instantiate or reuse an instantiation of.\n * @param params The params for generating the instance's key.\n */var useAtomInstanceDynamic=function useAtomInstanceDynamic(atom,params,_temp){var _ref=_temp===void 0?{operation:OPERATION}:_temp,_ref$operation=_ref.operation,operation=_ref$operation===void 0?OPERATION:_ref$operation,suspend=_ref.suspend;var ecosystem=(0,useEcosystem/* useEcosystem */.l)();var dependentKey=(0,useReactComponentId/* useReactComponentId */.$)();// it should be fine for this to run every render. It's possible to change\n// approaches if it is too heavy sometimes. But don't memoize this call:\nvar instance=ecosystem.getInstance(atom,params);var _useMemo=(0,react.useMemo)(function(){var val=[instance.store.getState(),instance];return[function(onStoreChange){var _ecosystem$_graph$nod;// this function must be idempotent\nif(!((_ecosystem$_graph$nod=ecosystem._graph.nodes[instance.keyHash])!=null&&_ecosystem$_graph$nod.dependents[dependentKey])){// React can unmount other components before calling this subscribe\n// function but after we got the instance above. Re-get the instance\n// if such unmountings destroyed it in the meantime:\nif(instance.activeState==='Destroyed'){val=undefined;onStoreChange();return function(){};// let the next render register the graph edge\n}ecosystem._graph.addEdge(dependentKey,instance.keyHash,operation,types/* EdgeFlag.External */.d.External,function(signal){if(signal==='Destroyed'){// returning undefined from `getSnapshot` after we call\n// `onStoreChange` causes the component to rerender. On\n// rerender, we'll set val to an array again, so\n// `useSyncExternalStore` will never actually return undefined.\nval=undefined;}onStoreChange();});}return function(){ecosystem._graph.removeEdge(dependentKey,instance.keyHash);};},// this getSnapshot has to return a different val if either the instance\n// or the state change (since in the case of primitive values, the new\n// instance's state could be exactly the same (===) as the previous\n// instance's value)\nfunction(){if(!val)return undefined;// hack React like dat boi\n// Suspense!\nif(suspend!==false){if(val[1]._promiseStatus==='loading'){throw val[1].promise;}else if(val[1]._promiseStatus==='error'){throw val[1]._promiseError;}}var state=val[1].store.getState();if(state===val[0])return val;val=[state,val[1]];return val;}];},[ecosystem,instance,suspend]),subscribe=_useMemo[0],getSnapshot=_useMemo[1];return (0,react.useSyncExternalStore)(subscribe,getSnapshot,getSnapshot);};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomSelector.ts\nvar glob=typeof globalThis!=='undefined'&&globalThis||{};var INVALIDATE_REACT=\"INVALIDATE_REACT_\"+Math.random();var useAtomSelector_OPERATION='useAtomSelector';/**\n * If we detect an inline selector using these not-exactly-cheap checks, we can\n * prevent the graph from changing by swapping out its reference and\n * invalidating the cache. It's unfortunately probably not a good trade-off\n * performance-wise, but it's necessary to prevent React's render-loop-of-death\n * in `useSyncExternalStore` when both the subscribe reference and the selector\n * result change every render. Simple reproduction:\n *\n * ```tsx\n * // subscribe ref and getSnapshot result ref change every render = death\n * useSyncExternalStore(() => () => {}, () => ({}))\n * ```\n *\n * It's also better dev-X when the graph doesn't change unnecessarily.\n *\n * Inline selectors that haven't _actually_ changed must be exactly the same,\n * stringified. The stringified `resultsComparator` must also be exactly the\n * same. `argsComparator` doesn't matter since it only runs at the hook level.\n *\n * Importantly, an inline selector's graph node must have exactly one dependent\n * too - the React component that called `useAtomSelector(inlineSelector)`.\n */var isRefDifferent=function isRefDifferent(ecosystem,newSelector,cacheRef){var _ecosystem$_graph$nod;if(!cacheRef.current)return true;var oldSelector=cacheRef.current.selectorRef;if(newSelector===oldSelector)return false;var dependents=(_ecosystem$_graph$nod=ecosystem._graph.nodes[cacheRef.current.cacheKey])==null?void 0:_ecosystem$_graph$nod.dependents;if(dependents&&Object.keys(dependents).length!==1)return true;var newIsFunction=typeof newSelector==='function';var oldIsFunction=typeof oldSelector==='function';if(newIsFunction!==oldIsFunction)return true;var newKey=ecosystem.selectorCache.getIdealCacheKey(newSelector);var oldKey=ecosystem.selectorCache.getIdealCacheKey(oldSelector);if(newKey!==oldKey)return true;if(!newIsFunction&&!oldIsFunction&&newSelector.resultsComparator!==oldSelector.resultsComparator){var _newSelector$resultsC,_oldSelector$resultsC;var newResultsComparatorStr=((_newSelector$resultsC=newSelector.resultsComparator)==null?void 0:_newSelector$resultsC.toString())||'';var oldResultsComparatorStr=((_oldSelector$resultsC=oldSelector.resultsComparator)==null?void 0:_oldSelector$resultsC.toString())||'';if(newResultsComparatorStr!==oldResultsComparatorStr)return true;}// last thing to compare is the selectors themselves\nif(newIsFunction&&oldIsFunction){return newSelector.toString()!==oldSelector.toString();}// we know they're both objects at this point\nif(newSelector.selector===oldSelector.selector){return false;}var newRefStr=newSelector.selector.toString();var oldRefStr=oldSelector.selector.toString();return newRefStr!==oldRefStr;};/**\n * Get the result of running an AtomSelector in the current ecosystem.\n *\n * If the exact selector function (or object if it's an AtomSelectorConfig\n * object) reference + params combo has been used in this ecosystem before,\n * return the cached result.\n *\n * Register a dynamic graph dependency between this React component (as a new\n * external node) and the AtomSelector.\n */var useAtomSelector=function useAtomSelector(selectorOrConfig){var _cacheRef$current,_cacheRef$current2,_cacheRef$current3,_cacheRef$current4;var ecosystem=(0,useEcosystem/* useEcosystem */.l)();var dependentKey=(0,useReactComponentId/* useReactComponentId */.$)();var cacheRef=(0,react.useRef)();var isConfig=typeof selectorOrConfig!=='function';for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argsChanged=isConfig&&selectorOrConfig.argsComparator&&(_cacheRef$current=cacheRef.current)!=null&&_cacheRef$current.args?selectorOrConfig.argsComparator(args,cacheRef.current.args):(0,utils_general/* haveDepsChanged */.EM)((_cacheRef$current2=cacheRef.current)==null?void 0:_cacheRef$current2.args,args);var resolvedArgs=argsChanged?args:((_cacheRef$current3=cacheRef.current)==null?void 0:_cacheRef$current3.args)||[];var hasRefChanged=selectorOrConfig!==((_cacheRef$current4=cacheRef.current)==null?void 0:_cacheRef$current4.selectorRef);var isDifferent=argsChanged||isRefDifferent(ecosystem,selectorOrConfig,cacheRef);if(isDifferent||!cacheRef.current){// yes, this mutation is fine\ncacheRef.current=ecosystem.selectorCache.getCache(selectorOrConfig,resolvedArgs);}var cache=cacheRef.current;var _useMemo=(0,react.useMemo)(function(){var isInvalidated=false;return[function(onStoreChange){var _ecosystem$_graph$nod2;// we have to fire an extra update on subscribe in test envs because\n// there's a bug in React (but only in test environments) where\n// useEffects in child components run before useSyncExternalStore\n// subscribe is called in the parent component.\nif(glob.IS_REACT_ACT_ENVIRONMENT)onStoreChange();// this function must be idempotent\nif(!((_ecosystem$_graph$nod2=ecosystem._graph.nodes[cache.cacheKey])!=null&&_ecosystem$_graph$nod2.dependents[dependentKey])){// React can unmount other components before calling this subscribe\n// function but after we got the cache above. Re-get the cache\n// if such unmountings destroyed it in the meantime:\nif(cache.isDestroyed){cacheRef.current=undefined;isInvalidated=true;onStoreChange();return function(){};// let the next render register the graph edge\n}ecosystem._graph.addEdge(dependentKey,cache.cacheKey,useAtomSelector_OPERATION,types/* EdgeFlag.External */.d.External,function(signal){if(signal==='Destroyed'){// see comment in useAtomInstanceDynamic about why returning\n// a nonsense value from `getSnapshot` works\ncacheRef.current=undefined;isInvalidated=true;}onStoreChange();});}return function(){// I don't think we need to unset any of the cache refs here\necosystem._graph.removeEdge(dependentKey,cache.cacheKey);};},function(){return isInvalidated?INVALIDATE_REACT:cache.result;}];},[ecosystem,cache]),subscribe=_useMemo[0],getSnapshot=_useMemo[1];// if ref changed but is clearly the \"same\" selector, swap out the ref and\n// invalidate the cache\nif(hasRefChanged&&!isDifferent){ecosystem.selectorCache._swapRefs(cache.selectorRef,selectorOrConfig,resolvedArgs);}return (0,react.useSyncExternalStore)(subscribe,getSnapshot,getSnapshot);};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomState.ts\nvar useAtomState=function useAtomState(atom,params,config){if(config===void 0){config={operation:'useAtomState'};}var _useAtomInstanceDynam=useAtomInstanceDynamic(atom,params,config),state=_useAtomInstanceDynam[0],instance=_useAtomInstanceDynam[1];var setState=function setState(settable,meta){return instance.setState(settable,meta);};Object.assign(setState,instance.exports);return[state,setState];};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomValue.ts\nvar useAtomValue=function useAtomValue(atom,params,config){if(config===void 0){config={operation:'useAtomValue'};}var _useAtomInstanceDynam=useAtomInstanceDynamic(atom,params,config),state=_useAtomInstanceDynam[0];return state;};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/utils/types.ts\nvar utils_types = __webpack_require__(2314);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomInstance.ts\n/**\n * injectAtomInstance\n *\n * Creates an atom instance for the passed atom based on the passed params. If\n * an instance has already been created for the passed params, reuses the\n * existing instance.\n *\n * Registers a static graph dependency on the atom instance. This means atoms\n * that use this injector will *not* reevaluate when this atom instance's state\n * changes.\n *\n * Pass false as the 4th param to prevent this graph dependency from being\n * registered. Useful when you need to control the graph dependency manually.\n * `injectAtomSelector` does this internally.\n *\n * @param atom The atom to instantiate or reuse an instantiation of.\n * @param params The params for generating the instance's key.\n * @param operation The operation name (e.g. name of the injector function)\n * that's triggering this graph dependency. If you're using this injector\n * directly in an atom, it's fine to omit this parameter.\n * @returns An atom instance, keyed based on the passed params.\n */var injectAtomInstance=function injectAtomInstance(atom,params,operation){if(operation===void 0){operation='injectAtomInstance';}var _injectAtomGetters=injectAtomGetters(),getInstance=_injectAtomGetters.getInstance;var _split=(0,utils_general/* split */.Vl)('injectAtomInstance',utils_types/* InjectorType.Atom */.R.Atom,function(){var instance=getInstance(atom,params,[types/* EdgeFlag.Static */.d.Static,operation]);return{instance:instance,type:utils_types/* InjectorType.Atom */.R.Atom};},function(prevDescriptor){var resolvedAtom=(0,utils_general.is)(atom,AtomInstanceBase/* AtomInstanceBase */.T)?atom.atom:atom;var atomHasChanged=resolvedAtom!==prevDescriptor.instance.atom;var paramsHaveChanged=(0,utils_general/* haveDepsChanged */.EM)(prevDescriptor.instance.params,params,true);if(!atomHasChanged&&!paramsHaveChanged){// make sure the dependency gets registered for this evaluation\ngetInstance(atom,params);return prevDescriptor;}var instance=getInstance(atom,params,[types/* EdgeFlag.Static */.d.Static,operation]);prevDescriptor.instance=instance;return prevDescriptor;}),instance=_split.instance;return instance;};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomInstanceDynamic.ts\nvar defaultOperation='injectAtomInstanceDynamic';/**\n * injectAtomInstanceDynamic\n *\n * Creates an atom instance for the passed atom based on the passed params. If\n * an instance has already been created in this ecosystem for the passed params,\n * reuses the existing instance.\n *\n * Registers a dynamic graph dependency on the atom instance. This means atoms\n * that use this injector *will* reevaluate when this atom instance's state\n * changes.\n *\n * This is a low-level injector that probably shouldn't be used directly. Use\n * higher-level injectors like injectAtomValue, injectAtomState, and\n * injectAtomSelector\n *\n * ```ts\n * const [state, setState] = injectAtomState(myAtom)\n * ```\n *\n * @param atom The atom to instantiate or reuse an instantiation of.\n * @param params The params for generating the instance's key.\n * @param operation The operation name (e.g. name of the injector function)\n * that's triggering this graph dependency. If you're using this injector\n * directly in an atom, it's fine to omit this parameter.\n * @returns An atom instance, keyed based on the passed params.\n */var injectAtomInstanceDynamic=function injectAtomInstanceDynamic(atom,params,operation){if(operation===void 0){operation=defaultOperation;}var _injectAtomGetters=injectAtomGetters(),getInstance=_injectAtomGetters.getInstance;var _split=(0,utils_general/* split */.Vl)(defaultOperation,// yeah, not the passed operation\nutils_types/* InjectorType.AtomDynamic */.R.AtomDynamic,function(){var instance=getInstance(atom,params,[0,operation]);return{instance:instance,type:utils_types/* InjectorType.AtomDynamic */.R.AtomDynamic};},function(prevDescriptor){var resolvedAtom=(0,utils_general.is)(atom,AtomInstanceBase/* AtomInstanceBase */.T)?atom.atom:atom;var atomHasChanged=resolvedAtom!==prevDescriptor.instance.atom;var paramsHaveChanged=(0,utils_general/* haveDepsChanged */.EM)(prevDescriptor.instance.params,params,true);// make sure the dependency gets registered for this evaluation\nvar instance=getInstance(atom,params,[0,operation]);if(!atomHasChanged&&!paramsHaveChanged){return prevDescriptor;}prevDescriptor.instance=instance;return prevDescriptor;}),instance=_split.instance;return instance;};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomSelector.ts\nvar injectAtomSelector=function injectAtomSelector(selectable){var _instance$ecosystem$_;var instance=(0,EvaluationStack/* readInstance */.i)();for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}return(_instance$ecosystem$_=instance.ecosystem._evaluationStack.atomGetters).select.apply(_instance$ecosystem$_,[selectable].concat(args));};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomState.ts\nvar injectAtomState=function injectAtomState(atom,params){var instance=injectAtomInstanceDynamic(atom,params,'injectAtomState');var setState=function setState(settable,meta){return instance.setState(settable,meta);};Object.assign(setState,instance.exports);return[instance.store.getState(),setState];};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomValue.ts\nvar injectAtomValue=function injectAtomValue(atom,params){var instance=injectAtomInstanceDynamic(atom,params,'injectAtomValue');return instance.store.getState();};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectMemo.ts\nvar injectMemo=function injectMemo(valueFactory,deps){var _split=(0,utils_general/* split */.Vl)('injectMemo',utils_types/* InjectorType.Memo */.R.Memo,function(){return{type:utils_types/* InjectorType.Memo */.R.Memo,deps:deps,memoizedVal:valueFactory()};},function(prevDescriptor){var depsHaveChanged=(0,utils_general/* haveDepsChanged */.EM)(prevDescriptor.deps,deps);var memoizedVal=depsHaveChanged?valueFactory():prevDescriptor.memoizedVal;prevDescriptor.deps=deps;prevDescriptor.memoizedVal=memoizedVal;return prevDescriptor;}),memoizedVal=_split.memoizedVal;return memoizedVal;};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectCallback.ts\nvar injectCallback=function injectCallback(callback,deps){return injectMemo(function(){return callback;},deps);};\n// EXTERNAL MODULE: ../packages/react/src/injectors/injectEffect.ts\nvar injectEffect = __webpack_require__(8723);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectInvalidate.ts\nvar injectInvalidate=function injectInvalidate(){var instance=(0,EvaluationStack/* readInstance */.i)();return function(){return instance.invalidate('injectInvalidate','Injector');};};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectMachineStore.ts\n/**\n * Create a MachineStore. Pass a statesFactory\n *\n * The first state in the state list returned from your statesFactory will\n * become the initial state (`.value`) of the store.\n *\n * Registers an effect that listens to all store changes and calls the\n * configured listeners appropriately.\n *\n * ```ts\n * const store = injectMachineStore(state => [\n *   state('a')\n *     .on('next', 'b', localGuard)\n *     .onEnter(enterListener)\n *     .onLeave(leaveListener),\n *   state('b').on('next', 'a')\n * ], initialContext, { guard, onTransition })\n * ```\n *\n * Set a universal transition guard via the 3rd `config` object param. This\n * guard will be called every time a valid transition is about to occur. It will\n * be called with the current `.context` value and should return a boolean.\n * Return true to allow the transition, or any falsy value to deny it.\n *\n * Set a universal `onTransition` listener via the 3rd `config` object param.\n * This listener will be called every time the machine transitions to a new\n * state (after the state is updated). It will be called with 2 params: The\n * current MachineStore and the storeEffect of the action that transitioned the\n * store. For example, use `storeEffect.oldState.value` to see what state the\n * machine just transitioned from.\n *\n * @param statesFactory Required. A function. Use the received state factory to\n * create a list of states for the machine and specify their transitions,\n * guards, and listeners.\n * @param initialContext Optional. An object or undefined. Will be set as the\n * initial `.context` value of the machine store's state.\n * @param config Optional. An object with 2 additional properties: `guard` and\n * `onTransition`.\n */var injectMachineStore=function injectMachineStore(){var _instance$_nextInject;for(var _len=arguments.length,_ref=new Array(_len),_key=0;_key<_len;_key++){_ref[_key]=arguments[_key];}var statesFactory=_ref[0],initialContext=_ref[1],config=_ref[2];var instance=(0,EvaluationStack/* readInstance */.i)();if(instance.activeState!=='Initializing'){return (0,utils_general/* getPrevInjector */.H5)('injectMachineStore',utils_types/* InjectorType.MachineStore */.R.MachineStore,instance).store;}var enterHooks={};var leaveHooks={};var states={};var createState=function createState(stateName){var state={on:function on(eventName,nextState,guard){if(!states[stateName]){states[stateName]={};}if(!states[nextState]){states[nextState]={};}states[stateName][eventName]={name:nextState,guard:guard};return state;},onEnter:function onEnter(callback){if(!enterHooks[stateName]){enterHooks[stateName]=[];}enterHooks[stateName].push(callback);return state;},onLeave:function onLeave(callback){if(!leaveHooks[stateName]){leaveHooks[stateName]=[];}leaveHooks[stateName].push(callback);return state;},stateName:stateName};return state;};var _statesFactory=statesFactory(createState),initialState=_statesFactory[0];var store=new MachineStore(initialState.stateName,states,initialContext,config==null?void 0:config.guard);var subscription=store.subscribe({effects:function effects(storeEffect){var newState=storeEffect.newState,oldState=storeEffect.oldState;if(newState.value===(oldState==null?void 0:oldState.value))return;if(oldState&&leaveHooks[oldState.value]){leaveHooks[oldState.value].forEach(function(callback){return callback(store,storeEffect);});}if(enterHooks[newState.value]){enterHooks[newState.value].forEach(function(callback){return callback(store,storeEffect);});}if(config!=null&&config.onTransition){config.onTransition(store,storeEffect);}}});var currentState=store.getState();if(enterHooks[currentState.value]){enterHooks[currentState.value].forEach(function(callback){return callback(store,{newState:currentState,store:store});});}var descriptor={cleanup:function cleanup(){return subscription.unsubscribe();},store:store,type:utils_types/* InjectorType.MachineStore */.R.MachineStore};(_instance$_nextInject=instance._nextInjectors)==null?void 0:_instance$_nextInject.push(descriptor);return store;};\n// EXTERNAL MODULE: ../packages/react/src/utils/promiseUtils.ts\nvar promiseUtils = __webpack_require__(1881);\n// EXTERNAL MODULE: ../packages/react/src/injectors/injectStore.ts\nvar injectStore = __webpack_require__(5684);\n// EXTERNAL MODULE: ../packages/react/src/injectors/injectRef.ts\nvar injectRef = __webpack_require__(7361);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectPromise.ts\nvar injectPromise_excluded=[\"dataOnly\",\"initialState\"];/**\n * Create a memoized promise reference. Kicks off the promise immediately\n * (unlike injectEffect which waits a tick). Creates a store to track promise\n * state. This store's state shape is based off React Query:\n *\n * ```ts\n * {\n *   data?: <promise result type>\n *   error?: Error\n *   isError: boolean\n *   isLoading: boolean\n *   isSuccess: boolean\n *   status: 'error' | 'loading' | 'success'\n * }\n * ```\n *\n * Returns an Atom API with `.store` and `.promise` set.\n *\n * The 2nd `deps` param is just like `injectMemo` - these deps determine when\n * the promise's reference should change.\n *\n * The 3rd `config` param can take the following options:\n *\n * - `dataOnly`: Set this to true to prevent the store from tracking promise\n *   status and make your promise's `data` the entire state.\n *\n * - `initialState`: Set the initial state of the store (e.g. a placeholder\n *   value before the promise resolves)\n *\n * - store config: Any other config options will be passed directly to\n *   `injectStore`'s config. For example, pass `subscribe: false` to\n *   prevent the store from reevaluating the current atom on update.\n *\n * ```ts\n * const promiseApi = injectPromise(async () => {\n *   const response = await fetch(url)\n *   return await response.json()\n * }, [url], {\n *   dataOnly: true,\n *   initialState: '',\n *   subscribe: false\n * })\n * ```\n */var injectPromise=function injectPromise(promiseFactory,deps,_temp){var _ref=_temp===void 0?{}:_temp,dataOnly=_ref.dataOnly,initialState=_ref.initialState,storeConfig=(0,objectWithoutPropertiesLoose/* default */.Z)(_ref,injectPromise_excluded);var controllerRef=(0,injectRef/* injectRef */.i)();var promiseRef=(0,injectRef/* injectRef */.i)();var store=(0,injectStore/* injectStore */.n)(dataOnly?initialState:(0,promiseUtils/* getInitialPromiseState */.KF)(initialState),storeConfig);// setting a ref during evaluation is perfectly fine in Zedux\npromiseRef.current=injectMemo(function(){var prevController=controllerRef.current;var nextController=typeof AbortController!=='undefined'?new AbortController():undefined;controllerRef.current=nextController;var promise=promiseFactory(controllerRef.current);if( true&&typeof(promise==null?void 0:promise.then)!=='function'){throw new TypeError(\"Zedux: injectPromise expected callback to return a promise. Received \"+(0,general/* detailedTypeof */.px)(promise));}if(promise===promiseRef.current)return promiseRef.current;prevController==null?void 0:prevController.abort==null?void 0:prevController.abort('updated');if(!dataOnly){// preserve previous data and error using setStateDeep:\nstore.setStateDeep((0,promiseUtils/* getInitialPromiseState */.KF)());}promise.then(function(data){if(nextController!=null&&nextController.signal.aborted)return;store.setState(dataOnly?data:(0,promiseUtils/* getSuccessPromiseState */.W2)(data));}).catch(function(error){if(dataOnly||nextController!=null&&nextController.signal.aborted)return;// preserve previous data using setStateDeep:\nstore.setStateDeep((0,promiseUtils/* getErrorPromiseState */.bG)(error));});return promise;},deps);(0,injectEffect/* injectEffect */.o)(function(){return function(){var _controllerRef$curren;return(_controllerRef$curren=controllerRef.current)==null?void 0:_controllerRef$curren.abort==null?void 0:_controllerRef$curren.abort('destroyed');};},[]);return (0,api/* api */.h)(store).setPromise(promiseRef.current);};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectWhy.ts\n/**\n * A fake injector (can actually be used in loops and if statements). An alias\n * for:\n *\n * ```ts\n * const { ecosystem } = injectAtomGetters()\n * const reasons = ecosystem.why()\n * ```\n */var injectWhy=function injectWhy(){return (0,EvaluationStack/* readInstance */.i)()._nextEvaluationReasons;};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/store/public-api.ts\nvar public_api = __webpack_require__(9409);\n;// CONCATENATED MODULE: ../packages/react/src/index.ts\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js\nvar taggedTemplateLiteralLoose = __webpack_require__(1880);\n// EXTERNAL MODULE: ./src/ssc/index.tsx\nvar ssc = __webpack_require__(8880);\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/LogActions.tsx\nvar _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;var options={AtomState:'Atom State',SelectorCache:'Selector Cache',Ecosystem:'Ecosystem',Graph:'Graph',ReactScope:'React Scope',ZeduxScope:'Zedux Scope'};var Backdrop=ssc/* default.div */.ZP.div(_templateObject||(_templateObject=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  height: 100%;\\n  left: 0;\\n  position: fixed;\\n  top: 0;\\n  width: 100%;\\n  z-index: 1000000;\\n\"])));var Button=ssc/* default.button */.ZP.button(_templateObject2||(_templateObject2=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: none;\\n  border: none;\\n  color: #fff;\\n  cursor: pointer;\\n\"])));var Dropdown=ssc/* default.button */.ZP.button(_templateObject3||(_templateObject3=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  align-items: center;\\n  background: transparent;\\n  border: none;\\n  color: #fff;\\n  cursor: pointer;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  font-size: inherit;\\n  gap: 0.5rem;\\n\"])));var Option=ssc/* default.span */.ZP.span(_templateObject4||(_templateObject4=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #ffa359;\\n  border-radius: 5px;\\n  box-shadow: 5px 5px 8px #0004;\\n  cursor: pointer;\\n  padding: 0.2rem 1rem;\\n  white-space: nowrap;\\n  transform: scale(1);\\n  transition: transform 0.1s;\\n\\n  &:hover {\\n    transform: scale(1.05);\\n  }\\n\"])));var Options=ssc/* default.span */.ZP.span(_templateObject5||(_templateObject5=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  display: flex;\\n  flex-flow: column nowrap;\\n  gap: 1rem;\\n  left: 50%;\\n  position: absolute;\\n  transform: translateX(-50%);\\n  top: calc(100% + 1rem);\\n  z-index: 1000001;\\n\"])));var Wrapper=ssc/* default.span */.ZP.span(_templateObject6||(_templateObject6=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  border: 1px solid #fff;\\n  border-radius: 3px;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  font-size: 0.8em;\\n  position: relative;\\n\\n  > button {\\n    padding: 2px 0.8rem;\\n\\n    &:hover {\\n      background: #fff4;\\n    }\\n  }\\n\"])));var CaretDownIcon=function CaretDownIcon(){return/*#__PURE__*/react.createElement(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"12\",height:\"8\",viewBox:\"0 0 12 8\"},/*#__PURE__*/react.createElement(\"path\",{fill:\"transparent\",stroke:\"#fff\",d:\"M0 0 L 6 8 L 12 0\"}));};var LogActions=function LogActions(_ref){var ecosystemIdRef=_ref.ecosystemIdRef,Zedux=_ref.Zedux;var _useState=(0,react.useState)(false),isOpen=_useState[0],setIsOpen=_useState[1];var _useState2=(0,react.useState)(),lastSelection=_useState2[0],setLastSelection=_useState2[1];var actions=(0,react.useMemo)(function(){return{AtomState:function AtomState(){console.group('Current state of all atom instances:');console.log(Zedux.getEcosystem(ecosystemIdRef.current).inspectInstanceValues());console.groupEnd();},Ecosystem:function Ecosystem(){console.group('Ecosystem:');console.log(Zedux.getEcosystem(ecosystemIdRef.current));console.groupEnd();},Graph:function Graph(){var ecosystem=Zedux.getEcosystem(ecosystemIdRef.current);console.group('Current graph:');console.log('Flat:',ecosystem.inspectGraph('flat'));console.log('Top-Down:',ecosystem.inspectGraph('top-down'));console.log('Bottom-Up:',ecosystem.inspectGraph('bottom-up'));console.groupEnd();},ReactScope:function ReactScope(){console.group('React exports available in the sandbox:');console.log(react);console.groupEnd();},SelectorCache:function SelectorCache(){console.group('Cached selectors:');console.log(Zedux.getEcosystem(ecosystemIdRef.current).selectorCache.inspectCacheValues());console.groupEnd();},ZeduxScope:function ZeduxScope(){console.group('Zedux exports available in the sandbox:');console.log(Zedux);console.groupEnd();}};},[Zedux]);return/*#__PURE__*/react.createElement(react.Fragment,null,isOpen&&/*#__PURE__*/react.createElement(Backdrop,{onClick:function onClick(){return setIsOpen(false);}}),/*#__PURE__*/react.createElement(Wrapper,null,lastSelection&&/*#__PURE__*/react.createElement(Button,{onClick:function onClick(){return actions[lastSelection]();}},\"Log \",options[lastSelection]),/*#__PURE__*/react.createElement(Dropdown,{onClick:function onClick(){return setIsOpen(true);}},!lastSelection&&/*#__PURE__*/react.createElement(\"span\",null,\"Log\"),/*#__PURE__*/react.createElement(CaretDownIcon,null)),isOpen&&/*#__PURE__*/react.createElement(Options,{onClick:function onClick(){setIsOpen(false);}},Object.keys(options).map(function(option){return/*#__PURE__*/react.createElement(Option,{key:option,onClick:function onClick(){setLastSelection(option);actions[option]();}},options[option]);}))));};\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/editorUtils.ts\nvar openingChars=['{','[','(','<'];var closingChars=['}',']',')','>'];var editorUtils_onKeyDown=function onKeyDown(editor,event){var _lineText$match;if(event.key==='Tab'){event.preventDefault();editor.insertText('  ');return;}if(event.key==='{'){event.preventDefault();editor.insertText('{}');index_es/* Transforms.move */.YR.move(editor,{distance:1,reverse:true,unit:'character'});return;}if(event.key==='['){event.preventDefault();editor.insertText('[]');index_es/* Transforms.move */.YR.move(editor,{distance:1,reverse:true,unit:'character'});return;}if(event.key==='('){event.preventDefault();editor.insertText('()');index_es/* Transforms.move */.YR.move(editor,{distance:1,reverse:true,unit:'character'});return;}var domRange=editor.selection&&slate_react_dist_index_es/* ReactEditor.toDOMRange */.F3.toDOMRange(editor,editor.selection);if(!domRange)return;var line=domRange.startContainer.parentElement;while(line.dataset.slateNode!=='text'){line=line.parentElement;}var lineText=line.innerText;var spaces=((_lineText$match=lineText.match(/^ +/))==null?void 0:_lineText$match[0])||'';var hasSelection=domRange.startOffset!==domRange.endOffset;var endOffset=hasSelection?domRange.endOffset:editor.selection.focus.offset;var startOffset=hasSelection?domRange.startOffset:endOffset;var prevChar=lineText[startOffset-1]||'';var nextChar=lineText[endOffset]||'';if(event.key==='}'&&nextChar==='}'||event.key===']'&&nextChar===']'||event.key===')'&&nextChar===')'||event.key==='\"'&&nextChar==='\"'||event.key===\"'\"&&nextChar===\"'\"||event.key==='`'&&nextChar==='`'){event.preventDefault();index_es/* Transforms.move */.YR.move(editor,{distance:1,unit:'character'});return;}if(event.key==='Enter'){event.preventDefault();editor.insertBreak();if(openingChars.includes(prevChar)){editor.insertText(spaces+\"  \");if(closingChars.includes(nextChar)){editor.insertBreak();editor.insertText(spaces);index_es/* Transforms.move */.YR.move(editor,{distance:spaces.length+1,reverse:true,unit:'character'});}return;}editor.insertText(spaces);return;}};var scrollSelectionIntoView=function scrollSelectionIntoView(editor,domRange){var el=domRange.startContainer.parentElement;var editorEl=domRange.startContainer.parentElement;while(!editorEl.dataset.slateEditor){editorEl=editorEl.parentElement;}var charWidth=el.getBoundingClientRect().width/el.innerText.length;var prevPos=editorEl.scrollLeft;domRange.startContainer.parentElement.scrollIntoView({block:'nearest'});if(!charWidth){// this means the current line is empty - set scrollPos to the far left\neditorEl.scrollLeft=0;return;}var width=editorEl.clientWidth;var charNum=editor.selection.focus.offset;var offset=charNum*charWidth;var BUFFER=24;if(offset+(BUFFER+8)-width>prevPos){// move right\neditorEl.scrollLeft=offset+(BUFFER+8)-width;}else if(offset-(BUFFER-8)<prevPos){// move left\neditorEl.scrollLeft=offset-(BUFFER-8);}else{editorEl.scrollLeft=prevPos;}};\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/styles.ts\nvar styles_templateObject,styles_templateObject2,styles_templateObject3,styles_templateObject4,styles_templateObject5,styles_templateObject6,_templateObject7,_templateObject8,_templateObject9;var EditorWrapper=ssc/* default.div */.ZP.div(styles_templateObject||(styles_templateObject=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  display: flex;\\n  flex-flow: row nowrap;\\n  font-family: 'Source Code Pro', monospace;\\n  font-size: var(--ifm-code-font-size);\\n  letter-spacing: -0.2px;\\n  max-height: 500px;\\n  overflow-y: auto;\\n\"])));var Gutter=ssc/* default.div */.ZP.div(styles_templateObject2||(styles_templateObject2=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  border-bottom-left-radius: 12px;\\n  display: flex;\\n  flex-flow: column nowrap;\\n  height: fit-content;\\n  min-height: 100%;\\n  min-width: 1.7rem;\\n  padding: 0.5rem 5px 1rem;\\n  text-align: right;\\n\\n  > span {\\n    color: #fffb;\\n    transform: scale(0.8);\\n    white-space: nowrap;\\n  }\\n\"])));var Header=ssc/* default.div */.ZP.div(styles_templateObject3||(styles_templateObject3=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  align-items: center;\\n  background: #ffa359;\\n  border-radius: 12px 12px 0 0;\\n  color: #fff;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  gap: 1rem;\\n  grid-column: span 2;\\n  padding: 0.5rem;\\n\\n  > img {\\n    filter: brightness(0) invert(1);\\n    font-size: 0;\\n    height: 1rem;\\n  }\\n\"])));var HeaderActions=ssc/* default.span */.ZP.span(styles_templateObject4||(styles_templateObject4=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  display: flex;\\n  flex-flow: row nowrap;\\n  gap: 1rem;\\n\"])));var HeaderText=ssc/* default.span */.ZP.span(styles_templateObject5||(styles_templateObject5=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  flex: 1;\\n\"])));var ResetButton=ssc/* default.button */.ZP.button(styles_templateObject6||(styles_templateObject6=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #fff;\\n  border: none;\\n  border-radius: 3px;\\n  color: #ff4545;\\n  cursor: pointer;\\n  font-size: 0.8em;\\n  padding: 2px 1rem;\\n\\n  &:hover {\\n    background: #fffb;\\n  }\\n\"])));var Result=ssc/* default.div */.ZP.div(_templateObject7||(_templateObject7=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #fff;\\n  border-bottom-right-radius: 12px;\\n  box-shadow: inset 4px 4px 6px #888;\\n  color: #1c1e21;\\n  color-scheme: light;\\n  max-height: 500px;\\n  overflow: auto;\\n  padding: 0.5rem;\\n  position: relative;\\n\"])));var StyledEditable=(0,ssc/* default */.ZP)(slate_react_dist_index_es/* Editable */.CX)(_templateObject8||(_templateObject8=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #2b313a;\\n  flex: 1;\\n  height: fit-content;\\n  min-height: 100%;\\n  overflow-x: auto;\\n  padding: 0.5rem 0.5rem 1rem;\\n  white-space: pre !important;\\n\\n  > div {\\n    min-width: fit-content;\\n    padding-right: 0.5rem;\\n  }\\n\\n  .token {\\n    color: #d7dfec;\\n\\n    \",\"\\n\\n    &.comment {\\n      font-style: italic;\\n    }\\n\\n    &.keyword {\\n      color: #e08a57;\\n    }\\n  }\\n\"])),function(_ref){var $sscProps=_ref.$sscProps;return $sscProps.styles.map(function(_ref2){var style=_ref2.style,types=_ref2.types;return types.map(function(type){return\"&.\"+type+\" { \"+(0,ssc/* css */.iv)(style/* Prism font-weight type is wrong */)+\" }\";}).join('\\n');}).join('\\n');});var styles_Wrapper=ssc/* default.section */.ZP.section(_templateObject9||(_templateObject9=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #474c54;\\n  border-radius: 12px;\\n  box-shadow: 10px 10px 7px rgba(0, 0, 0, 0.4);\\n  display: grid;\\n  grid-template-columns: minmax(180px, 9fr) minmax(140px, 5fr);\\n  grid-template-rows: auto auto;\\n  line-height: 1.45;\\n  margin: 0 -0.6rem 2em;\\n\\n  @media (min-width: 1600px) {\\n    margin-left: -1.8rem;\\n    margin-right: -1.8rem;\\n  }\\n\"])));\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/Sandbox.tsx\nvar Zedux=Object.assign({},react_src_namespaceObject);// resolves all the getters\nvar scope=Object.assign({},Zedux,react);var scopeKeys=Object.keys(scope);var scopeValues=scopeKeys.map(function(key){return scope[key];});var decorateTokens=function decorateTokens(path,tokens,params,parentType){for(var _iterator=(0,createForOfIteratorHelperLoose/* default */.Z)(tokens),_step;!(_step=_iterator()).done;){var token=_step.value;var end=params.start+token.length;if(typeof token==='string'){if(parentType){params.ranges.push({anchor:{path:path,offset:params.start},focus:{path:path,offset:end},tokenType:parentType});}params.start=end;continue;}if(typeof token.content==='string'||!Array.isArray(token.content)){params.ranges.push({anchor:{path:path,offset:params.start},focus:{path:path,offset:end},tokenType:token.type});params.start=end;continue;}decorateTokens(path,token.content,params,token.type);}return params.ranges;};var decorate=function decorate(_ref){var node=_ref[0],path=_ref[1];if(!index_es/* Text.isText */.xv.isText(node)){return[];}var tokens=prism_default().tokenize(node.text,(prism_default()).languages.tsx);return decorateTokens(path,tokens,{ranges:[],start:0});};var evalCode=function evalCode(code,resultVarName,ecosystemIdRef,extraScope){var resultStr=\"var \"+resultVarName+\"; \"+code+\"; var _$_$res = typeof \"+resultVarName+\" === 'function' ? React.createElement(\"+resultVarName+\") : typeof \"+resultVarName+\" === 'string' ? \"+resultVarName+\" : React.createElement('pre', null, JSON.stringify(\"+resultVarName+\", null, 2));\";var wrapped=resultStr+\" return _$_$res\";var extraScopeKeys=extraScope?[].concat(Object.keys(extraScope)):[];var keys=extraScope?[].concat(scopeKeys,extraScopeKeys):scopeKeys;var vals=extraScope?[].concat(scopeValues,extraScopeKeys.map(function(key){return extraScope[key];})):scopeValues;// eslint-disable-next-line no-new-func\nvar fn=(0,construct/* default */.Z)(Function,['React'].concat(keys,[wrapped]));var ecosystemsBefore=public_api/* zeduxGlobalStore.getState */.Wg.getState().ecosystems;var result=fn.call.apply(fn,[null,react].concat(vals));var ecosystemsAfter=public_api/* zeduxGlobalStore.getState */.Wg.getState().ecosystems;if(!ecosystemIdRef.current){Object.keys(ecosystemsAfter).forEach(function(key){if(!ecosystemsBefore[key])ecosystemIdRef.current=key;});}return result;};var parse=function parse(text){return text.split('\\n').slice(0,-1).map(function(line){return{type:'paragraph',children:[{text:line}]};});};var serialize=function serialize(nodes){return nodes.map(function(node){return node.children.map(function(child){return child.text;}).join('');}).join('\\n');};var ErrorBoundary=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(ErrorBoundary,_React$Component);function ErrorBoundary(props){var _this;_this=_React$Component.call(this,props)||this;_this.state={hasError:false};return _this;}var _proto=ErrorBoundary.prototype;_proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(){this.setState({hasError:false});};ErrorBoundary.getDerivedStateFromError=function getDerivedStateFromError(){return{hasError:true};};_proto.render=function render(){// idk y\nif(this.state.hasError){return/*#__PURE__*/react.createElement(\"span\",null,\"...\");}return this.props.children||/*#__PURE__*/react.createElement(\"span\",null);};return ErrorBoundary;}(react.Component);var Leaf=function Leaf(_ref2){var attributes=_ref2.attributes,children=_ref2.children,leaf=_ref2.leaf;return/*#__PURE__*/react.createElement(\"span\",(0,esm_extends/* default */.Z)({className:\"token \"+(leaf.tokenType||'')},attributes),children);};var Sandbox=function Sandbox(_ref3){var children=_ref3.children,ecosystemId=_ref3.ecosystemId,extraScope=_ref3.extraScope,_ref3$resultVar=_ref3.resultVar,resultVar=_ref3$resultVar===void 0?'Result':_ref3$resultVar;var baseUrl=(0,useDocusaurusContext/* default */.Z)().siteConfig.baseUrl;var editor=(0,react.useMemo)(function(){return (0,dist_index_es/* withHistory */.VC)((0,slate_react_dist_index_es/* withReact */.BU)((0,index_es/* createEditor */.Jh)()));},[]);var initialValue=(0,react.useMemo)(function(){return parse(children);},[]);var _useState=(0,react.useState)(initialValue),value=_useState[0],setValue=_useState[1];var _useState2=(0,react.useState)(''),result=_useState2[0],setResult=_useState2[1];var theme=(0,usePrismTheme/* usePrismTheme */.p)();var ecosystemIdRef=(0,react.useRef)(ecosystemId);var lastLoggedErrorTimeRef=(0,react.useRef)();var isMountedRef=(0,react.useRef)(true);var runCode=(0,react.useCallback)(function(rawVal){var val=serialize(rawVal);try{var _window;var extraScopeStr=typeof extraScope==='string'?extraScope:'';var jsCode=(_window=window)==null?void 0:_window.ts.transpile(extraScopeStr+\"; \"+val,{jsx:'react'});if(!jsCode)return;var ecosystem=Zedux.getEcosystem(ecosystemIdRef.current);if(Object.keys((ecosystem==null?void 0:ecosystem._instances)||{}).length){ecosystem==null?void 0:ecosystem.wipe();ecosystem==null?void 0:ecosystem.setOverrides([]);}var evalResult=evalCode(jsCode,resultVar,ecosystemIdRef,typeof extraScope==='string'?undefined:extraScope);lastLoggedErrorTimeRef.current=undefined;if(isMountedRef.current)setResult(evalResult);}catch(err){if(isMountedRef.current)setResult(err.message);if(lastLoggedErrorTimeRef.current&&Date.now()-lastLoggedErrorTimeRef.current<5000// only log errors once every 5 seconds\n){return;}console.error('Live Sandbox error:',err);lastLoggedErrorTimeRef.current=Date.now();}},[ecosystemId,extraScope,resultVar]);// run initial code on mount (or if runCode changes - shouldn't happen)\n(0,react.useEffect)(function(){runCode(value);},[runCode]);var slate=/*#__PURE__*/react.createElement(slate_react_dist_index_es/* Slate */.mH,{editor:editor,onChange:function onChange(newValue){if(newValue===value)return;setValue(newValue);runCode(newValue);},value:value},/*#__PURE__*/react.createElement(styles_Wrapper,null,/*#__PURE__*/react.createElement(Header,null,/*#__PURE__*/react.createElement(\"img\",{src:baseUrl+\"img/zedux-icon-75x75.png\"}),/*#__PURE__*/react.createElement(HeaderText,null,\"Live Sandbox\"),/*#__PURE__*/react.createElement(HeaderActions,null,/*#__PURE__*/react.createElement(LogActions,{ecosystemIdRef:ecosystemIdRef,Zedux:Zedux}),/*#__PURE__*/react.createElement(ResetButton,{onClick:function onClick(){setValue(initialValue);runCode(initialValue);editor.children=initialValue;}},\"Reset\"))),/*#__PURE__*/react.createElement(EditorWrapper,null,/*#__PURE__*/react.createElement(Gutter,null,value.map(function(_,i){return/*#__PURE__*/react.createElement(\"span\",{key:i},i+1);})),/*#__PURE__*/react.createElement(StyledEditable,{decorate:decorate,onKeyDown:function onKeyDown(event){return editorUtils_onKeyDown(editor,event);},placeholder:\"Write some code...\",renderLeaf:Leaf,scrollSelectionIntoView:scrollSelectionIntoView,$sscProps:theme})),/*#__PURE__*/react.createElement(Result,null,/*#__PURE__*/react.createElement(ErrorBoundary,null,result))));return ecosystemIdRef.current?/*#__PURE__*/react.createElement(Zedux.EcosystemProvider,{id:ecosystemId},slate):slate;};\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/index.tsx\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var withLiveEditor=function withLiveEditor(Component){function WrappedComponent(props){if(props.live){return/*#__PURE__*/react.createElement(Sandbox,props);}return/*#__PURE__*/react.createElement(Component,props);}return WrappedComponent;};/* harmony default export */ var theme_CodeBlock = (withLiveEditor(CodeBlock/* default */.Z));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8794\n")},2808:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B\": function() { return /* binding */ actionFactory; }\n/* harmony export */ });\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\n/**\n  Factory for creating ActionFactory objects.\n\n  ActionFactories are just action creators with an extra `.type` property set to\n  the string passed to `actionFactory()`.\n\n  ActionFactories can be passed directly to a ReducerBuilder's `reduce()`\n  method, thus removing the necessity of string constants.\n*/var actionFactory=function actionFactory(actionType){if( true&&typeof actionType!=='string'){throw new TypeError(\"Zedux: actionFactory() - actionType must be a string. Received \"+(0,_utils_general__WEBPACK_IMPORTED_MODULE_0__/* .detailedTypeof */ .px)(actionType));}// The factory itself just returns a normal action object with the `type` and\n// optional `payload` set.\nvar factory=function factory(payload){var action={type:factory.type};if(typeof payload!=='undefined')action.payload=payload;return action;};// Expose the action `type` for this factory. Read only! There should never be\n// any reason to modify this.\nfactory.type=actionType;return factory;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgwOC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQ08sR0FBTUMsY0FJbUIsQ0FBRyxRQUp0QkEsY0FJbUIsQ0FDOUJDLFVBQWdCLENBQ2IsQ0FDSCxHQUFJQyxLQUFHLEVBQUksTUFBT0QsV0FBVSxHQUFLLFFBQVEsQ0FBRSxDQUN6QyxLQUFNLElBQUlFLFVBQVMsbUVBQ2lESix3RUFBYyxDQUM5RUUsVUFBVSxDQUNYLENBQ0YsQ0FDSCxDQUVBO0FBQ0E7QUFDQSxHQUFNRyxRQUFPLENBQUksUUFBWEEsUUFBTyxDQUFLQyxPQUFpQixDQUFLLENBQ3RDLEdBQU1DLE9BQTZCLENBQUcsQ0FDcENDLElBQUksQ0FBRUgsT0FBTyxDQUFDRyxJQUNoQixDQUFDLENBRUQsR0FBSSxNQUFPRixRQUFPLEdBQUssV0FBVyxDQUFFQyxNQUFNLENBQUNELE9BQU8sQ0FBR0EsT0FBTyxDQUU1RCxNQUFPQyxPQUFNLENBQ2YsQ0FBa0MsQ0FFbEM7QUFDQTtBQUNBRixPQUFPLENBQUNHLElBQUksQ0FBR04sVUFBVSxDQUV6QixNQUFPRyxRQUFPLENBQ2hCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2FwaS9hY3Rpb25GYWN0b3J5LnRzPzNjNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25GYWN0b3J5IH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBkZXRhaWxlZFR5cGVvZiB9IGZyb20gJy4uL3V0aWxzL2dlbmVyYWwnXG5cbi8qKlxuICBGYWN0b3J5IGZvciBjcmVhdGluZyBBY3Rpb25GYWN0b3J5IG9iamVjdHMuXG5cbiAgQWN0aW9uRmFjdG9yaWVzIGFyZSBqdXN0IGFjdGlvbiBjcmVhdG9ycyB3aXRoIGFuIGV4dHJhIGAudHlwZWAgcHJvcGVydHkgc2V0IHRvXG4gIHRoZSBzdHJpbmcgcGFzc2VkIHRvIGBhY3Rpb25GYWN0b3J5KClgLlxuXG4gIEFjdGlvbkZhY3RvcmllcyBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IHRvIGEgUmVkdWNlckJ1aWxkZXIncyBgcmVkdWNlKClgXG4gIG1ldGhvZCwgdGh1cyByZW1vdmluZyB0aGUgbmVjZXNzaXR5IG9mIHN0cmluZyBjb25zdGFudHMuXG4qL1xuZXhwb3J0IGNvbnN0IGFjdGlvbkZhY3Rvcnk6IDxQYXlsb2FkID0gdW5kZWZpbmVkLCBUeXBlIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPihcbiAgYWN0aW9uVHlwZTogVHlwZVxuKSA9PiBQYXlsb2FkIGV4dGVuZHMgdW5kZWZpbmVkXG4gID8gQWN0aW9uRmFjdG9yeTx1bmRlZmluZWQsIFR5cGU+XG4gIDogQWN0aW9uRmFjdG9yeTxQYXlsb2FkLCBUeXBlPiA9IDxQYXlsb2FkLCBUeXBlIGV4dGVuZHMgc3RyaW5nPihcbiAgYWN0aW9uVHlwZTogVHlwZVxuKSA9PiB7XG4gIGlmIChERVYgJiYgdHlwZW9mIGFjdGlvblR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBaZWR1eDogYWN0aW9uRmFjdG9yeSgpIC0gYWN0aW9uVHlwZSBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAke2RldGFpbGVkVHlwZW9mKFxuICAgICAgICBhY3Rpb25UeXBlXG4gICAgICApfWBcbiAgICApXG4gIH1cblxuICAvLyBUaGUgZmFjdG9yeSBpdHNlbGYganVzdCByZXR1cm5zIGEgbm9ybWFsIGFjdGlvbiBvYmplY3Qgd2l0aCB0aGUgYHR5cGVgIGFuZFxuICAvLyBvcHRpb25hbCBgcGF5bG9hZGAgc2V0LlxuICBjb25zdCBmYWN0b3J5ID0gKChwYXlsb2FkPzogUGF5bG9hZCkgPT4ge1xuICAgIGNvbnN0IGFjdGlvbjogQWN0aW9uPFBheWxvYWQsIFR5cGU+ID0ge1xuICAgICAgdHlwZTogZmFjdG9yeS50eXBlLFxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGF5bG9hZCAhPT0gJ3VuZGVmaW5lZCcpIGFjdGlvbi5wYXlsb2FkID0gcGF5bG9hZFxuXG4gICAgcmV0dXJuIGFjdGlvblxuICB9KSBhcyBBY3Rpb25GYWN0b3J5PFBheWxvYWQsIFR5cGU+XG5cbiAgLy8gRXhwb3NlIHRoZSBhY3Rpb24gYHR5cGVgIGZvciB0aGlzIGZhY3RvcnkuIFJlYWQgb25seSEgVGhlcmUgc2hvdWxkIG5ldmVyIGJlXG4gIC8vIGFueSByZWFzb24gdG8gbW9kaWZ5IHRoaXMuXG4gIGZhY3RvcnkudHlwZSA9IGFjdGlvblR5cGVcblxuICByZXR1cm4gZmFjdG9yeSBhcyBhbnlcbn1cbiJdLCJuYW1lcyI6WyJkZXRhaWxlZFR5cGVvZiIsImFjdGlvbkZhY3RvcnkiLCJhY3Rpb25UeXBlIiwiREVWIiwiVHlwZUVycm9yIiwiZmFjdG9yeSIsInBheWxvYWQiLCJhY3Rpb24iLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2808\n")},3064:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "H": function() { return /* binding */ actionTypes; },\n/* harmony export */   "u": function() { return /* binding */ metaTypes; }\n/* harmony export */ });\nvar PREFIX=\'@@zedux/\';var actionTypes={HYDRATE:PREFIX+"hydrate",PARTIAL_HYDRATE:PREFIX+"partialHydrate",RECALCULATE:PREFIX+"recalculate"};var metaTypes={DELEGATE:PREFIX+"delegate",INHERIT:PREFIX+"inherit",// for use with atoms in the @zedux/react package:\nSKIP_EVALUATION:PREFIX+"skipEvaluation"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA2NC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsR0FBTUEsT0FBTSxDQUFHLFVBQVUsQ0FFbEIsR0FBTUMsWUFBVyxDQUFHLENBQ3pCQyxPQUFPLENBQUtGLE1BQU0sVUFBUyxDQUMzQkcsZUFBZSxDQUFLSCxNQUFNLGlCQUFnQixDQUMxQ0ksV0FBVyxDQUFLSixNQUFNLGNBQ3hCLENBQUMsQ0FFTSxHQUFNSyxVQUFTLENBQUcsQ0FDdkJDLFFBQVEsQ0FBS04sTUFBTSxXQUFVLENBQzdCTyxPQUFPLENBQUtQLE1BQU0sVUFBUyxDQUMzQjtBQUNBUSxlQUFlLENBQUtSLE1BQU0saUJBQzVCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2FwaS9jb25zdGFudHMudHM/ZGUwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQUkVGSVggPSAnQEB6ZWR1eC8nXG5cbmV4cG9ydCBjb25zdCBhY3Rpb25UeXBlcyA9IHtcbiAgSFlEUkFURTogYCR7UFJFRklYfWh5ZHJhdGVgLFxuICBQQVJUSUFMX0hZRFJBVEU6IGAke1BSRUZJWH1wYXJ0aWFsSHlkcmF0ZWAsXG4gIFJFQ0FMQ1VMQVRFOiBgJHtQUkVGSVh9cmVjYWxjdWxhdGVgLFxufVxuXG5leHBvcnQgY29uc3QgbWV0YVR5cGVzID0ge1xuICBERUxFR0FURTogYCR7UFJFRklYfWRlbGVnYXRlYCxcbiAgSU5IRVJJVDogYCR7UFJFRklYfWluaGVyaXRgLFxuICAvLyBmb3IgdXNlIHdpdGggYXRvbXMgaW4gdGhlIEB6ZWR1eC9yZWFjdCBwYWNrYWdlOlxuICBTS0lQX0VWQUxVQVRJT046IGAke1BSRUZJWH1za2lwRXZhbHVhdGlvbmAsXG59XG4iXSwibmFtZXMiOlsiUFJFRklYIiwiYWN0aW9uVHlwZXMiLCJIWURSQVRFIiwiUEFSVElBTF9IWURSQVRFIiwiUkVDQUxDVUxBVEUiLCJtZXRhVHlwZXMiLCJERUxFR0FURSIsIklOSEVSSVQiLCJTS0lQX0VWQUxVQVRJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3064\n')},6967:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"L\": function() { return /* binding */ createReducer; }\n/* harmony export */ });\n/* harmony import */ var _utils_actions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8319);\n/**\n  Creates a new ReducerBuilder.\n\n  A ReducerBuilder is just a reducer with a special `.reducer()` method for\n  easily mapping action types to sub-reducers that handle them.\n*/var createReducer=function createReducer(initialState){var actionToReducersMap={};var reducer=function reducer(state,action){if(state===void 0){state=initialState;}var reducers=actionToReducersMap[action.type]||[];return runReducers(reducers,state,action);};reducer.reduce=function(reactable,subReducer){var method='ReducerBuilder.reduce()';var actionTypes=Array.isArray(reactable)?(0,_utils_actions__WEBPACK_IMPORTED_MODULE_0__/* .extractActionTypes */ .r)(reactable,method):[(0,_utils_actions__WEBPACK_IMPORTED_MODULE_0__/* .extractActionType */ .h)(reactable,method)];mapActionTypesToReducer(actionToReducersMap,actionTypes,subReducer);return reducer;};return reducer;};function mapActionTypesToReducer(map,actionTypes,consumer){actionTypes.forEach(function(actionType){if(!map[actionType]){map[actionType]=[];}map[actionType].push(consumer);});}function runReducers(reducers,state,action){return reducers.reduce(function(accumulatedState,reducer){return reducer(accumulatedState,action.payload,action);},state);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjk2Ny5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQ08sR0FBTUUsY0FBYSxDQUFHLFFBQWhCQSxjQUFhLENBQWlCQyxZQUFvQixDQUFLLENBQ2xFLEdBQU1DLG9CQUF1QyxDQUFHLENBQUMsQ0FBQyxDQUVsRCxHQUFNQyxRQUFPLENBQUksUUFBWEEsUUFBTyxDQUFLQyxLQUFZLENBQTBCQyxNQUFjLENBQUssSUFBekRELEtBQVksV0FBWkEsS0FBWSxDQUFHSCxZQUFZLEVBQzNDLEdBQU1LLFNBQVEsQ0FBR0osbUJBQW1CLENBQUNHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLEVBQUksRUFBRSxDQUV2RCxNQUFPQyxZQUFXLENBQUNGLFFBQVEsQ0FBRUYsS0FBSyxDQUFFQyxNQUFNLENBQUMsQ0FDN0MsQ0FBMkIsQ0FFM0JGLE9BQU8sQ0FBQ00sTUFBTSxDQUFHLFNBQ2ZDLFNBQWdFLENBQ2hFQyxVQUFrRCxDQUMvQyxDQUNILEdBQU1DLE9BQU0sQ0FBRyx5QkFBeUIsQ0FDeEMsR0FBTUMsWUFBVyxDQUFHQyxLQUFLLENBQUNDLE9BQU8sQ0FBQ0wsU0FBUyxDQUFDLENBQ3hDWCwyRUFBa0IsQ0FBQ1csU0FBUyxDQUFFRSxNQUFNLENBQUMsQ0FDckMsQ0FBQ2QsMEVBQWlCLENBQUNZLFNBQVMsQ0FBRUUsTUFBTSxDQUFDLENBQUMsQ0FFMUNJLHVCQUF1QixDQUFDZCxtQkFBbUIsQ0FBRVcsV0FBVyxDQUFFRixVQUFVLENBQUMsQ0FFckUsTUFBT1IsUUFBTyxDQUNoQixDQUFDLENBRUQsTUFBT0EsUUFBTyxDQUNoQixDQUFDLENBRUQsUUFBU2Esd0JBQXVCLENBQzlCQyxHQUF1QixDQUN2QkosV0FBcUIsQ0FDckJLLFFBQW9CLENBQ3BCLENBQ0FMLFdBQVcsQ0FBQ00sT0FBTyxDQUFDLFNBQUFDLFVBQVUsQ0FBSSxDQUNoQyxHQUFJLENBQUNILEdBQUcsQ0FBQ0csVUFBVSxDQUFDLENBQUUsQ0FDcEJILEdBQUcsQ0FBQ0csVUFBVSxDQUFDLENBQUcsRUFBRSxDQUN0QixDQUVBSCxHQUFHLENBQUNHLFVBQVUsQ0FBQyxDQUFDQyxJQUFJLENBQUNILFFBQVEsQ0FBQyxDQUNoQyxDQUFDLENBQUMsQ0FDSixDQUVBLFFBQVNWLFlBQVcsQ0FDbEJGLFFBQXNCLENBQ3RCRixLQUFZLENBQ1pDLE1BQWMsQ0FDZCxDQUNBLE1BQU9DLFNBQVEsQ0FBQ0csTUFBTSxDQUNwQixTQUFDYSxnQkFBZ0IsQ0FBRW5CLE9BQU8sUUFDeEJBLFFBQU8sQ0FBQ21CLGdCQUFnQixDQUFFakIsTUFBTSxDQUFDa0IsT0FBTyxDQUFFbEIsTUFBTSxDQUFDLEdBQ25ERCxLQUFLLENBQ04sQ0FDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvY29yZS9zcmMvYXBpL2NyZWF0ZVJlZHVjZXIudHM/Y2VmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb24sIFJlYWN0YWJsZSwgUmVkdWNlckJ1aWxkZXIsIFN1YlJlZHVjZXIgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IGV4dHJhY3RBY3Rpb25UeXBlLCBleHRyYWN0QWN0aW9uVHlwZXMgfSBmcm9tICcuLi91dGlscy9hY3Rpb25zJ1xuXG5pbnRlcmZhY2UgUmVkdWNlcnNNYXA8U3RhdGU+IHtcbiAgW2tleTogc3RyaW5nXTogU3ViUmVkdWNlcjxTdGF0ZT5bXVxufVxuXG4vKipcbiAgQ3JlYXRlcyBhIG5ldyBSZWR1Y2VyQnVpbGRlci5cblxuICBBIFJlZHVjZXJCdWlsZGVyIGlzIGp1c3QgYSByZWR1Y2VyIHdpdGggYSBzcGVjaWFsIGAucmVkdWNlcigpYCBtZXRob2QgZm9yXG4gIGVhc2lseSBtYXBwaW5nIGFjdGlvbiB0eXBlcyB0byBzdWItcmVkdWNlcnMgdGhhdCBoYW5kbGUgdGhlbS5cbiovXG5leHBvcnQgY29uc3QgY3JlYXRlUmVkdWNlciA9IDxTdGF0ZSA9IGFueT4oaW5pdGlhbFN0YXRlPzogU3RhdGUpID0+IHtcbiAgY29uc3QgYWN0aW9uVG9SZWR1Y2Vyc01hcDogUmVkdWNlcnNNYXA8U3RhdGU+ID0ge31cblxuICBjb25zdCByZWR1Y2VyID0gKChzdGF0ZTogU3RhdGUgPSBpbml0aWFsU3RhdGUgYXMgU3RhdGUsIGFjdGlvbjogQWN0aW9uKSA9PiB7XG4gICAgY29uc3QgcmVkdWNlcnMgPSBhY3Rpb25Ub1JlZHVjZXJzTWFwW2FjdGlvbi50eXBlXSB8fCBbXVxuXG4gICAgcmV0dXJuIHJ1blJlZHVjZXJzKHJlZHVjZXJzLCBzdGF0ZSwgYWN0aW9uKVxuICB9KSBhcyBSZWR1Y2VyQnVpbGRlcjxTdGF0ZT5cblxuICByZWR1Y2VyLnJlZHVjZSA9IDxQYXlsb2FkID0gYW55LCBUeXBlIGV4dGVuZHMgc3RyaW5nID0gYW55LCBNZXRhID0gYW55PihcbiAgICByZWFjdGFibGU6IFJlYWN0YWJsZTxQYXlsb2FkLCBUeXBlPiB8IFJlYWN0YWJsZTxQYXlsb2FkLCBUeXBlPltdLFxuICAgIHN1YlJlZHVjZXI6IFN1YlJlZHVjZXI8U3RhdGUsIFBheWxvYWQsIFR5cGUsIE1ldGE+XG4gICkgPT4ge1xuICAgIGNvbnN0IG1ldGhvZCA9ICdSZWR1Y2VyQnVpbGRlci5yZWR1Y2UoKSdcbiAgICBjb25zdCBhY3Rpb25UeXBlcyA9IEFycmF5LmlzQXJyYXkocmVhY3RhYmxlKVxuICAgICAgPyBleHRyYWN0QWN0aW9uVHlwZXMocmVhY3RhYmxlLCBtZXRob2QpXG4gICAgICA6IFtleHRyYWN0QWN0aW9uVHlwZShyZWFjdGFibGUsIG1ldGhvZCldXG5cbiAgICBtYXBBY3Rpb25UeXBlc1RvUmVkdWNlcihhY3Rpb25Ub1JlZHVjZXJzTWFwLCBhY3Rpb25UeXBlcywgc3ViUmVkdWNlcilcblxuICAgIHJldHVybiByZWR1Y2VyXG4gIH1cblxuICByZXR1cm4gcmVkdWNlclxufVxuXG5mdW5jdGlvbiBtYXBBY3Rpb25UeXBlc1RvUmVkdWNlcjxTdGF0ZT4oXG4gIG1hcDogUmVkdWNlcnNNYXA8U3RhdGU+LFxuICBhY3Rpb25UeXBlczogc3RyaW5nW10sXG4gIGNvbnN1bWVyOiBTdWJSZWR1Y2VyXG4pIHtcbiAgYWN0aW9uVHlwZXMuZm9yRWFjaChhY3Rpb25UeXBlID0+IHtcbiAgICBpZiAoIW1hcFthY3Rpb25UeXBlXSkge1xuICAgICAgbWFwW2FjdGlvblR5cGVdID0gW11cbiAgICB9XG5cbiAgICBtYXBbYWN0aW9uVHlwZV0ucHVzaChjb25zdW1lcilcbiAgfSlcbn1cblxuZnVuY3Rpb24gcnVuUmVkdWNlcnM8U3RhdGU+KFxuICByZWR1Y2VyczogU3ViUmVkdWNlcltdLFxuICBzdGF0ZTogU3RhdGUsXG4gIGFjdGlvbjogQWN0aW9uXG4pIHtcbiAgcmV0dXJuIHJlZHVjZXJzLnJlZHVjZShcbiAgICAoYWNjdW11bGF0ZWRTdGF0ZSwgcmVkdWNlcikgPT5cbiAgICAgIHJlZHVjZXIoYWNjdW11bGF0ZWRTdGF0ZSwgYWN0aW9uLnBheWxvYWQsIGFjdGlvbiksXG4gICAgc3RhdGVcbiAgKVxufVxuIl0sIm5hbWVzIjpbImV4dHJhY3RBY3Rpb25UeXBlIiwiZXh0cmFjdEFjdGlvblR5cGVzIiwiY3JlYXRlUmVkdWNlciIsImluaXRpYWxTdGF0ZSIsImFjdGlvblRvUmVkdWNlcnNNYXAiLCJyZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJyZWR1Y2VycyIsInR5cGUiLCJydW5SZWR1Y2VycyIsInJlZHVjZSIsInJlYWN0YWJsZSIsInN1YlJlZHVjZXIiLCJtZXRob2QiLCJhY3Rpb25UeXBlcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcEFjdGlvblR5cGVzVG9SZWR1Y2VyIiwibWFwIiwiY29uc3VtZXIiLCJmb3JFYWNoIiwiYWN0aW9uVHlwZSIsInB1c2giLCJhY2N1bXVsYXRlZFN0YXRlIiwicGF5bG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6967\n")},1694:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"y\": function() { return /* binding */ Store; },\n  \"M\": function() { return /* binding */ createStore; }\n});\n\n// NAMESPACE OBJECT: ../packages/core/src/utils/hierarchyConfig.ts\nvar hierarchyConfig_namespaceObject = {};\n__webpack_require__.r(hierarchyConfig_namespaceObject);\n__webpack_require__.d(hierarchyConfig_namespaceObject, {\n  \"clone\": function() { return clone; },\n  \"create\": function() { return create; },\n  \"get\": function() { return get; },\n  \"isNode\": function() { return isNode; },\n  \"iterate\": function() { return iterate; },\n  \"set\": function() { return set; },\n  \"size\": function() { return size; }\n});\n\n// EXTERNAL MODULE: ../packages/core/src/api/constants.ts\nvar constants = __webpack_require__(3064);\n// EXTERNAL MODULE: ../packages/core/src/api/meta.ts\nvar meta = __webpack_require__(7159);\n// EXTERNAL MODULE: ../packages/core/src/utils/general.ts\nvar general = __webpack_require__(8487);\n;// CONCATENATED MODULE: ../packages/core/src/hierarchy/create.ts\n/**\n  Converts a Branch hierarchy descriptor to a diff node's children\n\n  Really should only be used from `hierarchyDescriptorToDiffTree()`\n*/function branchToDiffNodeChildren(branch,registerSubStore,currentPath){var children={};Object.entries(branch).forEach(function(_ref){var key=_ref[0],val=_ref[1];var newPath=[].concat(currentPath,[key]);children[key]=hierarchyDescriptorToDiffTree(val,registerSubStore,newPath);});return children;}/**\n  Turns a non-branch node from a user-supplied hierarchy descriptor into a\n  DiffNode object\n*/function nonBranchToDiffNode(type,hierarchy,registerSubStore,currentPath){if(type===general/* HierarchyType.Null */._T.Null){return{type:type};}if(type===general/* HierarchyType.Reducer */._T.Reducer){return{type:type,reducer:hierarchy};}// It's a Store hierarchy descriptor\nreturn{type:type,destroy:registerSubStore(currentPath,hierarchy),reducer:wrapStoreInReducer(hierarchy),store:hierarchy};}/**\n  Determines the type of the given hierarchy descriptor.\n\n  Throws a TypeError if the descriptor is invalid.\n*/function getHierarchyType(descriptor){if(typeof descriptor==='function')return general/* HierarchyType.Reducer */._T.Reducer;if(descriptor&&(0,general/* isZeduxStore */.z2)(descriptor))return general/* HierarchyType.Store */._T.Store;if((0,general/* isPlainObject */.PO)(descriptor))return general/* HierarchyType.Branch */._T.Branch;if( true&&descriptor!=null){throw new TypeError(\"Zedux: store.use() - Hierarchy descriptor nodes must be reducers, stores, or plain objects. Received \"+(0,general/* detailedTypeof */.px)(descriptor));}return general/* HierarchyType.Null */._T.Null;}/**\n  Turns a normal, user-supplied hierarchy descriptor into a diff tree for easy\n  reducer hierarchy creating, diffing, merging, and destroying.\n\n  Also figures out the reducer for non-branch nodes.\n*/function hierarchyDescriptorToDiffTree(hierarchy,registerSubStore,currentPath){if(currentPath===void 0){currentPath=[];}var type=getHierarchyType(hierarchy);if(type!==general/* HierarchyType.Branch */._T.Branch){return nonBranchToDiffNode(type,hierarchy,registerSubStore,currentPath);}// It's a Branch; recursively convert the whole tree. We don't need to supply\n// a reducer for this branch 'cause the merge process does that for us\nreturn{type:type,children:branchToDiffNodeChildren(hierarchy,registerSubStore,currentPath)};}/**\n  Creates a reducer that wraps the entry points of the given store.\n\n  This reducer will propagate actions down the child store's reducers.\n\n  Wraps all actions in the special INHERIT meta node to inform the child store's\n  effects subscribers that this action was received from its parent store.\n\n  Since the parent store also registers an effects subscriber on this child\n  store, it will know not to propagate the inherited action from the child\n  store. UPDATE: Actually, it doesn't even need to check - the parent store\n  knows that it _isDispatching and can ignore child store actions while it is.\n*/function wrapStoreInReducer(store){var reducer=function reducer(state,action){// If this is the special hydrate or partial hydrate action, re-create the\n// action's payload using the current state slice\nif(action.type===constants/* actionTypes.HYDRATE */.H.HYDRATE||action.type===constants/* actionTypes.PARTIAL_HYDRATE */.H.PARTIAL_HYDRATE){action={type:constants/* actionTypes.HYDRATE */.H.HYDRATE,payload:state};}// Tell the child store's effect subscribers that this action is inherited\nvar inheritedAction=(0,meta/* addMeta */.k)(action,constants/* metaTypes.INHERIT */.u.INHERIT);return store.dispatch(inheritedAction);};return reducer;}\n;// CONCATENATED MODULE: ../packages/core/src/hierarchy/merge.ts\n/**\n  Turns a diff tree into a single reducer.\n\n  All child diff nodes must have `reducer` props themselves.\n\n  Accepts configuration to create the state representation of this node,\n  to get and set properties on that data type, to determine if the old\n  state is a node, and to find the size of the node.\n*/var createBranchReducer=function createBranchReducer(children,_ref){var create=_ref.create,get=_ref.get,isNode=_ref.isNode,set=_ref.set,size=_ref.size;return function(oldState,action){if(oldState===void 0){oldState=create();}// Make a new node to keep track of the values returned by\n// the child reducers.\nvar newState=create();var hasChanges=false;// Iterate over the child reducers, passing them their state slice\n// and the action and recording their results.\nObject.keys(children).forEach(function(key){var _ref2=children[key],reducer=_ref2.reducer;// we've ensured reducer exists at this point\n// Grab the old state slice\nvar oldStatePiece=isNode(oldState)?get(oldState,key):undefined;// yes, explicitly set it to undefined\n// Calculate the new value\nvar newStatePiece=reducer(oldStatePiece,action);// Record the result\nnewState=set(newState,key,newStatePiece);// Check for changes\nhasChanges||(hasChanges=newStatePiece!==oldStatePiece);});// Handle the case where `children` did not used to be an empty node. This\n// means there were changes, but our change detection failed since we didn't\n// actually iterate over anything.\nhasChanges||(hasChanges=!isNode(oldState)||!Object.keys(children).length&&!!size(oldState));// If nothing changed, discard the accumulated newState\nreturn hasChanges?newState:oldState;};};/**\n  Recursively destroys a tree, preventing memory leaks.\n\n  Currently STORE is the only node type affected by this; stores need to\n  unsubscribe() from their child stores.\n*/function destroyTree(tree){if(!tree)return;var _ref3=tree,children=_ref3.children,destroy=_ref3.destroy;if(destroy)destroy();if(!children)return;// base case; this branch is now destroyed\nObject.values(children).forEach(destroyTree);}/**\n  Merges two diff tree BRANCH nodes together.\n\n  Really should only be used from `mergeDiffTrees()`\n*/function mergeBranches(oldTree,newTree,hierarchyConfig){var mergedChildren=Object.assign({},oldTree.children);// Iterate over the new tree's children\nObject.keys(newTree.children).forEach(function(key){var _children;var newChild=newTree.children[key];var oldChild=(_children=oldTree.children)==null?void 0:_children[key];// Attempt to recursively merge the two children\n// Let `mergeDiffTrees()` handle any destroying\nvar mergedChild=mergeDiffTrees(oldChild,newChild,hierarchyConfig);// If the new node is NULL, kill it.\nif(mergedChild.type===general/* HierarchyType.Null */._T.Null){delete mergedChildren[key];return;}mergedChildren[key]=mergedChild;});return{children:mergedChildren,reducer:createBranchReducer(mergedChildren,hierarchyConfig),type:general/* HierarchyType.Branch */._T.Branch};}/**\n  Merges two diff trees together.\n\n  Uses head recursion to merge the leaf nodes first. This allows this step to\n  also find each node's reducer. (A node's children reducers need to exist\n  before its own reducer can)\n\n  Destroys any no-longer-used resources in the oldTree.\n\n  The resulting tree will always have the type of the newTree.\n\n  Dynamically injects reducers and stores into the hierarchy or replaces the\n  hierarchy altogether.\n\n  There are 4 types of nodes in this hierarchy:\n    - BRANCH - indicates a branch (non-leaf) node\n    - REDUCER - indicates a leaf node handled by this store\n    - STORE - indicates a leaf node handled by another store\n    - NULL - indicates a non-existent node, or node to be deleted\n\n  BRANCH nodes will be deeply merged (recursively).\n\n  All other nodes will be overwritten.\n*/function mergeDiffTrees(oldTree,newTree,hierarchyConfig){if(newTree.type!==general/* HierarchyType.Branch */._T.Branch){destroyTree(oldTree);return newTree;}if(!oldTree||oldTree.type!==general/* HierarchyType.Branch */._T.Branch){destroyTree(oldTree);return mergeBranches({type:general/* HierarchyType.Null */._T.Null},newTree,hierarchyConfig);}// They're both BRANCH nodes; recursively merge them\nreturn mergeBranches(oldTree,newTree,hierarchyConfig);}/**\n  Deeply merges the new state tree into the old one.\n\n  If this hydration contains new state for a child store, this parent store will\n  create the child store's state for it :O\n\n  This means that mixing hierarchyConfigs is not supported, since only the\n  parent's hierarchyConfig will be respected during this merge. The child's\n  state will be full-hydrated with its new state after this merge.\n*/function mergeStateTrees(oldStateTree,newStateTree,hierarchyConfig){if(!hierarchyConfig.isNode(oldStateTree)||!hierarchyConfig.isNode(newStateTree)){return[newStateTree,newStateTree!==oldStateTree];}var hasChanges=false;var mergedTree=hierarchyConfig.clone(oldStateTree);hierarchyConfig.iterate(newStateTree,function(key,newVal){var oldVal=hierarchyConfig.get(mergedTree,key);var _ref4=hierarchyConfig.isNode(newVal)?// Recursively merge the nested nodes.\nmergeStateTrees(oldVal,newVal,hierarchyConfig):// Not a nested node (anymore, at least)\n[newVal,newVal!==oldVal],clonedVal=_ref4[0],childHasChanges=_ref4[1];if(!childHasChanges)return;if(!hasChanges)hasChanges=childHasChanges;hierarchyConfig.set(mergedTree,key,clonedVal);});return[hasChanges?mergedTree:oldStateTree,hasChanges];}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js + 2 modules\nvar createForOfIteratorHelperLoose = __webpack_require__(7855);\n;// CONCATENATED MODULE: ../packages/core/src/hierarchy/traverse.ts\nvar getErrorMessage= true?function(subStorePath){return\"Zedux: store.dispatch() - Invalid Delegation - Current store hierarchy does not contain a sub-store at path: \"+subStorePath.join(' -> ');}:0;/**\n  Finds a node in a diffTree given a node path (array of nodes).\n*/var findChild=function findChild(diffTree,nodePath){for(var _iterator=(0,createForOfIteratorHelperLoose/* default */.Z)(nodePath),_step;!(_step=_iterator()).done;){var node=_step.value;if(diffTree.type!==general/* HierarchyType.Branch */._T.Branch){throw new ReferenceError(getErrorMessage(nodePath));}diffTree=diffTree.children[node];if(!diffTree){throw new ReferenceError(getErrorMessage(nodePath));}}return diffTree;};/**\n  Delegates an action to a child store.\n\n  Does nothing if the special DELEGATE meta node is not present\n  in the action meta chain.\n\n  This expects the `metaData` of the DELEGATE meta node to be\n  an array containing a path of nodes describing the child store's\n  location in the parent store's current hierarchy descriptor.\n\n  Delegated actions will not be handled by the parent store at all.\n*/var delegate=function delegate(diffTree,action){var subStorePath=(0,meta/* getMetaData */.g2)(action,constants/* metaTypes.DELEGATE */.u.DELEGATE);if(!subStorePath||!diffTree)return false;var child=findChild(diffTree,subStorePath);if(child.type!==general/* HierarchyType.Store */._T.Store){throw new TypeError(getErrorMessage(subStorePath));};child.store.dispatch((0,meta/* removeMeta */.hM)(action,constants/* metaTypes.DELEGATE */.u.DELEGATE));};/**\n  Propagates a state change from a child store to a parent.\n\n  Recursively finds the child store's node in the parent store's\n  state tree and re-creates all the nodes down that path.\n\n  #immutability\n*/var propagateChange=function propagateChange(currentState,subStorePath,newSubStoreState,hierarchyConfig){if(!subStorePath.length)return newSubStoreState;// at this point we can assume that currentState is a hierarhical structure\n// these \"currentState as any\" casts should be fine\nvar newNode=hierarchyConfig.clone(currentState);var nextNodeKey=subStorePath[0];return hierarchyConfig.set(newNode,nextNodeKey,propagateChange(hierarchyConfig.get(currentState,nextNodeKey),subStorePath.slice(1),newSubStoreState,hierarchyConfig));};\n;// CONCATENATED MODULE: ../packages/core/src/utils/hierarchyConfig.ts\n/**\n  The default method for cloning state tree nodes\n\n  This does not have to create a deep copy.\n  In fact, it probably shouldn't.\n*/var clone=function clone(node){return Object.assign({},node);};/**\n  The default method for creating state tree nodes\n\n  Should return an empty node.\n*/var create=function create(){return{};};/**\n  The default method for retrieving the value of a property on\n  the state tree.\n*/var get=function get(node,key){return node[key];};/**\n  The default method for determining if something is a state tree node\n*/var isNode=general/* isPlainObject */.PO;/**\n  The default method for iterating over the properties of a state tree\n  node.\n\n  Should call `callback` with each key-value pair.\n*/var iterate=function iterate(node,callback){Object.entries(node).forEach(function(_ref){var key=_ref[0],val=_ref[1];return callback(key,val);});};/**\n  The default method for setting the value of a property on the\n  state tree.\n\n  This can be mutating.\n  Zedux promises to never abuse this power.\n*/var set=function set(node,key,val){node[key]=val;return node;};/**\n  The default method for finding the size of a state tree node.\n*/var size=function size(node){return Object.keys(node).length;};\n;// CONCATENATED MODULE: ../packages/core/src/api/createStore.ts\nvar _Symbol$observable;var RECALCULATE_ACTION={type:constants/* actionTypes.RECALCULATE */.H.RECALCULATE};// When an action is dispatched to a parent store and delegated to a child\n// store, the child store needs to wait until the update propagates everywhere\n// and the parent store finishes its dispatch before notifying its subscribers.\n// This queue is a simple \"scheduler\" of sorts that lets all child stores of the\n// currently-dispatching parent store wait to notify their subscribers until all\n// stores in the hierarchy are done dispatching.\nvar notifyQueue;/**\n  Creates a new Zedux store.\n*/var createStore=function createStore(initialHierarchy,initialState){return new Store(initialHierarchy,initialState);};_Symbol$observable=Symbol.observable;var Store=/*#__PURE__*/function(){/**\n    Used by the store's branch reducers in the generated reducer hierarchy to\n    interact with the hierarchical data type returned by the store's reducers.\n\n    This \"hierarchical data type\" is a plain object by default. But these\n    hierarchy config options can teach Zedux how to use an Immutable `Map` or\n    any recursive, map-like data structure.\n  */function Store(initialHierarchy,initialState){var _this=this;this._subscribers=[];this.dispatch=function(action){return _this._dispatch(action);};this.setState=function(settable,meta){return _this._setState(settable,meta);};this._currentState=initialState;if(initialHierarchy)this.use(initialHierarchy);}var _proto=Store.prototype;_proto.actionStream=function actionStream(){var _this2=this,_ref2;return _ref2={},_ref2[Symbol.observable]=function(){return this;},_ref2['@@observable']=function observable(){return this;},_ref2.subscribe=function subscribe(subscriber){return _this2.subscribe({effects:function effects(_ref){var action=_ref.action,error=_ref.error;if(error&&typeof subscriber!=='function'){subscriber.error==null?void 0:subscriber.error(error);}else if(action){typeof subscriber==='function'?subscriber(action):subscriber.next==null?void 0:subscriber.next(action);}}});},_ref2;}/**\n    Dispatches an action to the store.\n\n    The action will be sent through this store's reducer hierarchy (if any) and\n    passed on to any child stores after being wrapped in INHERIT meta nodes\n\n    The resulting state will be returned synchronously from this call.\n\n    This is a bound function property. Every store recreates this small\n    function. But it's always bound and can be passed around easily.\n  */;/**\n    Returns the current state of the store.\n\n    Do not mutate the returned value.\n  */_proto.getState=function getState(){if( true&&this._isDispatching){throw new Error('Zedux: store.getState() cannot be called in a reducer');}return this._currentState;}/**\n    Applies a full hydration to the store.\n\n    Accepts either the new state or a function that accepts the current state\n    and returns the new state.\n\n    Dispatches the special HYDRATE action to the store's reducers. Effects\n    subscribers can inspect and record this action to implement time travel.\n\n    The HYDRATE action's `payload` property will be set to the new state. The\n    action's `meta` property will be set to the passed meta, if any.\n\n    Throws an error if called from the reducer layer.\n\n    Returns the new state.\n\n    Unlike setStateDeep, setState is a bound function property. Every store\n    recreates this small function. But it's always bound and can be passed\n    around easily.\n  */;/**\n    Applies a partial state update to the store.\n\n    Accepts either a deep partial state object or a function that accepts the\n    current state and returns a deep partial state object.\n\n    Dispatches the special PARTIAL_HYDRATE action to the store's reducers.\n    Effects subscribers can inspect and record this action to implement time\n    travel.\n\n    The PARTIAL_HYDRATE action's `payload` property will be set to the partial\n    state update.\n\n    Note that deep setting cannot remove properties from the state tree. If that\n    functionality is needed, use store.setState() or create a new reducer\n    hierarchy and pass it to store.use().\n\n    Throws an error if called from the reducer layer.\n\n    Returns the new state.\n\n    Unlike setState, setStateDeep is not bound. You must call it with context -\n    e.g. by using dot-notation: `store.setStateDeep(...)`\n  */_proto.setStateDeep=function setStateDeep(settable,meta){return this._setState(settable,meta,true);}/**\n    Registers a subscriber with the store.\n\n    The subscriber will be notified every time the store's state\n    changes.\n\n    Returns a subscription object. Calling `subscription.unsubscribe()`\n    unregisters the subscriber.\n  */;_proto.subscribe=function subscribe(subscriber){var _this3=this;var subscriberObj=typeof subscriber==='function'?{next:subscriber}:subscriber;if(true){if(subscriberObj.next&&typeof subscriberObj.next!=='function'){throw new TypeError(\"Zedux: store.subscribe() expects either a function or an object with a \\\"next\\\" property whose value is a function. Received: \"+(0,general/* detailedTypeof */.px)(subscriberObj.next));}if(subscriberObj.error&&typeof subscriberObj.error!=='function'){throw new TypeError(\"Zedux: store.subscribe() - subscriber.error must be a function. Received: \"+(0,general/* detailedTypeof */.px)(subscriberObj.error));}if(subscriberObj.effects&&typeof subscriberObj.effects!=='function'){throw new TypeError(\"Zedux: store.subscribe() - subscriber.effects must be a function. Received: \"+(0,general/* detailedTypeof */.px)(subscriberObj.effects));}}// as any - this \"id\" field is hidden from the outside world\n// so it doesn't exist on the Subscriber type\nif(subscriberObj.id===general/* INTERNAL_SUBSCRIBER_ID */.RM){this._subscribers.unshift(subscriberObj);}else{this._subscribers.push(subscriberObj);}return{unsubscribe:function unsubscribe(){var index=_this3._subscribers.indexOf(subscriberObj);if(index>-1)_this3._subscribers.splice(index,1);}};}/**\n    Merges a hierarchy descriptor into the existing hierarchy descriptor.\n\n    Intelligently diffs the two hierarchies and only creates/recreates the\n    necessary reducers.\n\n    Dispatches the special RECALCULATE action to the store.\n  */;_proto.use=function use(newHierarchy){var newDiffTree=hierarchyDescriptorToDiffTree(newHierarchy,this._registerChildStore.bind(this));this._currentDiffTree=mergeDiffTrees(this._currentDiffTree,newDiffTree,this.constructor.hierarchyConfig);this._rootReducer=this._currentDiffTree.reducer;if(this._rootReducer){this._dispatchAction(RECALCULATE_ACTION,RECALCULATE_ACTION,this._currentState);}return this;// for chaining\n};_proto[_Symbol$observable]=function(){return this;};_proto['@@observable']=function observable(){return this;};_proto._dispatch=function _dispatch(action){if( true&&typeof action==='function'){throw new TypeError('Zedux: store.dispatch() - Thunks are not currently supported. Only normal action objects can be passed to store.dispatch(). For zero-config stores, you can pass a function to store.setState()');}if( true&&!(0,general/* isPlainObject */.PO)(action)){throw new TypeError(\"Zedux: store.dispatch() - Action must be a plain object. Received \"+(0,general/* detailedTypeof */.px)(action));}var delegateResult=delegate(this._currentDiffTree,action);if(delegateResult!==false){// No need to inform subscribers - this store's effects subscriber\n// on the child store will have already done that by this point\nreturn this._currentState;}return this._routeAction(action);};_proto._dispatchAction=function _dispatchAction(action,unwrappedAction,rootState){if( true&&this._isDispatching){throw new Error('Zedux: dispatch(), setState(), and setStateDeep() cannot be called in a reducer');}this._isDispatching=true;var error;var newState=rootState;var queue;if(!notifyQueue){queue=notifyQueue=[[this,undefined]];}try{if(this._rootReducer){newState=this._rootReducer(rootState,unwrappedAction);}}catch(err){error=err;throw err;}finally{this._isDispatching=false;this._informSubscribers(newState,action,undefined,error,queue);}return newState;}/**\n    \"Hydrates\" the store with the given state.\n\n    Dispatches the special HYDRATE action to the store's inspectors\n    and reducers. The HYDRATE action's `payload` property will be\n    set to the new store state, allowing inspectors to pick up on\n    the changes and implement time travel and whatnot.\n\n    Throws an Error if called from the reducer layer.\n  */;_proto._dispatchHydration=function _dispatchHydration(state,actionType,meta){var newState=actionType===constants/* actionTypes.HYDRATE */.H.HYDRATE?state:mergeStateTrees(this._currentState,state,this.constructor.hierarchyConfig)[0];if(newState===this._currentState){// Nothing to do. TODO: Should this inform effects subscribers?\nreturn this._currentState;}var action={payload:newState,type:actionType};if(meta!=null)action.meta=meta;// Maybe we can provide a utility for setting a description for the\n// hydration. Then wrap the action in an ActionMeta with that description\n// as the metaData.\n// Propagate the change to child stores and allow for effects.\nreturn this._dispatchAction(action,action,newState);};_proto._dispatchStateSetter=function _dispatchStateSetter(getState,meta,deep){var newState;try{newState=getState(this._currentState);}catch(error){this._informSubscribers(this._currentState,{type:constants/* actionTypes.PARTIAL_HYDRATE */.H.PARTIAL_HYDRATE},undefined,error);throw error;}return this._dispatchHydration(newState,deep?constants/* actionTypes.PARTIAL_HYDRATE */.H.PARTIAL_HYDRATE:constants/* actionTypes.HYDRATE */.H.HYDRATE,meta);};_proto._informSubscribers=function _informSubscribers(newState,action,effect,error,queue,oldState){var _this4=this;if(oldState===void 0){oldState=this._currentState;}// Update the stored state\nthis._currentState=newState;// defer this call if a parent store is currently dispatching\nif(notifyQueue){if(queue){// this is the parent store that is now done dispatching\nnotifyQueue=undefined;}else{notifyQueue.unshift([this,function(){// skip informing subscribers if the state has already been changed\n// by a parent store's subscriber (which state change is already\n// propagated to this store's subscribers by this point):\nif(_this4._currentState!==newState)return;_this4._informSubscribers(newState,action,effect,error,undefined,oldState);}]);return;}}var infoObj;// Clone the subscribers in case of mutation mid-iteration\nvar subscribers=[].concat(this._subscribers);for(var i=0;i<subscribers.length;i++){var subscriber=subscribers[i];if(error&&subscriber.error)subscriber.error(error);if(newState!==oldState&&subscriber.next){subscriber.next(newState,oldState,action);}if(!subscriber.effects)continue;if(!infoObj){infoObj={action:action,effect:effect,error:error,newState:newState,oldState:oldState,store:this};}subscriber.effects(infoObj);}if(queue){queue.forEach(function(_ref3){var store=_ref3[0];return store._isIgnoringPropagations=true;});queue.forEach(function(_ref4){var callback=_ref4[1];return callback==null?void 0:callback();});queue.forEach(function(_ref5){var store=_ref5[0];return store._isIgnoringPropagations=false;});}};_proto._registerChildStore=function _registerChildStore(childStorePath,childStore){var _this5=this;var effectsSubscriber=function effectsSubscriber(_ref6){var action=_ref6.action,effect=_ref6.effect,error=_ref6.error,newState=_ref6.newState,oldState=_ref6.oldState;// If this store's reducer layer dispatched this action to this\n// substore in the first place, ignore the propagation; this store\n// will receive it anyway.\n// const isInherited = hasMeta(action, metaTypes.INHERIT)\nif(_this5._isDispatching||_this5._isIgnoringPropagations)return;var newOwnState=newState===oldState?_this5._currentState:propagateChange(_this5._currentState,childStorePath,newState,_this5.constructor.hierarchyConfig);// Tell the subscribers what child store this effect came from.\nvar wrappedEffect=effect&&(0,meta/* addMeta */.k)(effect,constants/* metaTypes.DELEGATE */.u.DELEGATE,childStorePath);// Tell the subscribers what child store this action came from.\n// This store (the parent) can use this info to determine how to\n// recreate this state update.\nvar wrappedAction=action&&(0,meta/* addMeta */.k)(action,constants/* metaTypes.DELEGATE */.u.DELEGATE,childStorePath);_this5._informSubscribers(newOwnState,wrappedAction,wrappedEffect,error);};return childStore.subscribe({effects:effectsSubscriber,id:general/* INTERNAL_SUBSCRIBER_ID */.RM}).unsubscribe;};_proto._routeAction=function _routeAction(action){var unwrappedAction=(0,meta/* removeAllMeta */.vU)(action);if( true&&typeof unwrappedAction.type!=='string'){throw new TypeError(\"Zedux: store.dispatch() - Action must have a string \\\"type\\\" property. Received \"+(0,general/* detailedTypeof */.px)(unwrappedAction.type));}if(unwrappedAction.type===constants/* actionTypes.HYDRATE */.H.HYDRATE||unwrappedAction.type===constants/* actionTypes.PARTIAL_HYDRATE */.H.PARTIAL_HYDRATE){return this._dispatchHydration(unwrappedAction.payload,unwrappedAction.type,unwrappedAction.meta);}return this._dispatchAction(action,unwrappedAction,this._currentState);};_proto._setState=function _setState(settable,meta,deep){if(deep===void 0){deep=false;}if(typeof settable==='function'){return this._dispatchStateSetter(settable,meta,deep);}return this._dispatchHydration(settable,deep?constants/* actionTypes.PARTIAL_HYDRATE */.H.PARTIAL_HYDRATE:constants/* actionTypes.HYDRATE */.H.HYDRATE,meta);};return Store;}();Store.hierarchyConfig=hierarchyConfig_namespaceObject;Store.$$typeof=general/* STORE_IDENTIFIER */.IE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1694\n")},7159:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "g2": function() { return /* binding */ getMetaData; },\n/* harmony export */   "hM": function() { return /* binding */ removeMeta; },\n/* harmony export */   "k": function() { return /* binding */ addMeta; },\n/* harmony export */   "vU": function() { return /* binding */ removeAllMeta; },\n/* harmony export */   "yF": function() { return /* binding */ hasMeta; }\n/* harmony export */ });\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\nvar assertActionExists= true?function(actionOrEffect){if(actionOrEffect)return;throw new Error("Zedux: Invalid meta chain. The last node in the chain must be either a valid action object with a non-empty \\"type\\" property or an effect with a non-empty \\"effectType\\" property. Received "+(0,_utils_general__WEBPACK_IMPORTED_MODULE_0__/* .detailedTypeof */ .px)(actionOrEffect));}:0;var getNewRoot=function getNewRoot(currentNode,prevNode,rootNode){// If the match is at the top layer, just return the next layer\nif(!prevNode||!rootNode)return currentNode.payload;// If the match is at least one layer deep, swap out the target layer\n// and return the new root of the meta chain\nprevNode.payload=currentNode.payload;return rootNode;};/**\n * Adds a meta node of the given metaType and with the given\n * metaData at the beginning of an ActionChain/EffectChain\n */var addMeta=function addMeta(actionOrEffect,metaType,metaData){var wrappedAction={metaType:metaType,payload:actionOrEffect};if(metaData)wrappedAction.metaData=metaData;return wrappedAction;};/**\n * Returns the value of the metaData field of the first ActionMeta\n * or EffectMeta object in the chain with the given metaType.\n */var getMetaData=function getMetaData(actionOrEffect,metaType){while(actionOrEffect.metaType){if(actionOrEffect.metaType===metaType){return actionOrEffect.metaData;}actionOrEffect=actionOrEffect.payload;if(true){assertActionExists(actionOrEffect);}}};/**\n * Returns true if the given ActionChain or EffectChain contains\n * an ActionMeta or EffectMeta node with the given metaType.\n */var hasMeta=function hasMeta(actionOrEffect,metaType){while(actionOrEffect.metaType){if(actionOrEffect.metaType===metaType)return true;actionOrEffect=actionOrEffect.payload;if(true){assertActionExists(actionOrEffect);}}return false;};/**\n * Strips off an ActionChain or EffectChain and returns the wrapped\n * Action or Effect\n */var removeAllMeta=function removeAllMeta(actionOrEffect){while(actionOrEffect.metaType){actionOrEffect=actionOrEffect.payload;if(true){assertActionExists(actionOrEffect);}}return actionOrEffect;};/**\n  Removes the first found meta node with the given metaType in\n  the given meta chain\n\n  The metaType does not have to exist in the meta chain\n  (though this\'ll be pretty inefficient and wasteful if it doesn\'t).\n*/var removeMeta=function removeMeta(actionOrEffect,metaType){var currentNode=actionOrEffect;var prevNode=null;var rootNode=null;while(currentNode.metaType){if(currentNode.metaType===metaType){return getNewRoot(currentNode,prevNode,rootNode);}// Move down the chain\nvar clonedNode=Object.assign({},currentNode);prevNode&&(prevNode.payload=clonedNode);prevNode=clonedNode;currentNode=currentNode.payload;// If this will be the new root, remember it\nrootNode||(rootNode=prevNode);}// No match found; return the original meta chain\nreturn actionOrEffect;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7159\n')},8319:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "h": function() { return /* binding */ extractActionType; },\n/* harmony export */   "r": function() { return /* binding */ extractActionTypes; }\n/* harmony export */ });\n/**\n  Pulls the string action type out of an ActionFactory or returns\n  a given string action type as-is.\n*/var extractActionType=function extractActionType(reactable,method){// The reactable may be a literal action type string\nif(typeof reactable===\'string\')return reactable;if( true&&(typeof reactable!==\'function\'||typeof reactable.type!==\'string\')){var type=typeof reactable===\'function\'?"function with invalid \\"type\\" property - "+typeof reactable.type:typeof reactable;throw new TypeError("Zedux: "+method+" - reactable must be either a string or a function with a \\"type\\" property. Received "+type);}return reactable.type;};/**\n  Pulls the string action types out of a list of (possibly) mixed\n  reactables and string action types.\n*/var extractActionTypes=function extractActionTypes(reactables,method){return reactables.map(function(reactable){return extractActionType(reactable,method);});};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMxOS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFDTyxHQUFNQSxrQkFBaUIsQ0FBRyxRQUFwQkEsa0JBQWlCLENBQUlDLFNBQW9CLENBQUVDLE1BQWMsQ0FBSyxDQUN6RTtBQUNBLEdBQUksTUFBT0QsVUFBUyxHQUFLLFFBQVEsQ0FBRSxNQUFPQSxVQUFTLENBRW5ELEdBQ0VFLEtBQUcsR0FDRixNQUFPRixVQUFTLEdBQUssVUFBVSxFQUFJLE1BQU9BLFVBQVMsQ0FBQ0csSUFBSSxHQUFLLFFBQVEsQ0FBQyxDQUN2RSxDQUNBLEdBQU1BLEtBQUksQ0FDUixNQUFPSCxVQUFTLEdBQUssVUFBVSw4Q0FDZ0IsTUFBT0EsVUFBUyxDQUFDRyxJQUFJLENBQ2hFLE1BQU9ILFVBQVMsQ0FFdEIsS0FBTSxJQUFJSSxVQUFTLFdBQ1BILE1BQU0sMEZBQXVGRSxJQUFJLENBQzVHLENBQ0gsQ0FFQSxNQUFPSCxVQUFTLENBQUNHLElBQUksQ0FDdkIsQ0FBQyxDQUVEO0FBQ0E7QUFDQTtBQUNBLEVBQ08sR0FBTUUsbUJBQWtCLENBQUcsUUFBckJBLG1CQUFrQixDQUFJQyxVQUF1QixDQUFFTCxNQUFjLFFBQ3hFSyxXQUFVLENBQUNDLEdBQUcsQ0FBQyxTQUFBUCxTQUFTLFFBQUlELGtCQUFpQixDQUFDQyxTQUFTLENBQUVDLE1BQU0sQ0FBQyxHQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9jb3JlL3NyYy91dGlscy9hY3Rpb25zLnRzPzBmMDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RhYmxlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbi8qKlxuICBQdWxscyB0aGUgc3RyaW5nIGFjdGlvbiB0eXBlIG91dCBvZiBhbiBBY3Rpb25GYWN0b3J5IG9yIHJldHVybnNcbiAgYSBnaXZlbiBzdHJpbmcgYWN0aW9uIHR5cGUgYXMtaXMuXG4qL1xuZXhwb3J0IGNvbnN0IGV4dHJhY3RBY3Rpb25UeXBlID0gKHJlYWN0YWJsZTogUmVhY3RhYmxlLCBtZXRob2Q6IHN0cmluZykgPT4ge1xuICAvLyBUaGUgcmVhY3RhYmxlIG1heSBiZSBhIGxpdGVyYWwgYWN0aW9uIHR5cGUgc3RyaW5nXG4gIGlmICh0eXBlb2YgcmVhY3RhYmxlID09PSAnc3RyaW5nJykgcmV0dXJuIHJlYWN0YWJsZVxuXG4gIGlmIChcbiAgICBERVYgJiZcbiAgICAodHlwZW9mIHJlYWN0YWJsZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgcmVhY3RhYmxlLnR5cGUgIT09ICdzdHJpbmcnKVxuICApIHtcbiAgICBjb25zdCB0eXBlID1cbiAgICAgIHR5cGVvZiByZWFjdGFibGUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBgZnVuY3Rpb24gd2l0aCBpbnZhbGlkIFwidHlwZVwiIHByb3BlcnR5IC0gJHt0eXBlb2YgcmVhY3RhYmxlLnR5cGV9YFxuICAgICAgICA6IHR5cGVvZiByZWFjdGFibGVcblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgWmVkdXg6ICR7bWV0aG9kfSAtIHJlYWN0YWJsZSBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHdpdGggYSBcInR5cGVcIiBwcm9wZXJ0eS4gUmVjZWl2ZWQgJHt0eXBlfWBcbiAgICApXG4gIH1cblxuICByZXR1cm4gcmVhY3RhYmxlLnR5cGVcbn1cblxuLyoqXG4gIFB1bGxzIHRoZSBzdHJpbmcgYWN0aW9uIHR5cGVzIG91dCBvZiBhIGxpc3Qgb2YgKHBvc3NpYmx5KSBtaXhlZFxuICByZWFjdGFibGVzIGFuZCBzdHJpbmcgYWN0aW9uIHR5cGVzLlxuKi9cbmV4cG9ydCBjb25zdCBleHRyYWN0QWN0aW9uVHlwZXMgPSAocmVhY3RhYmxlczogUmVhY3RhYmxlW10sIG1ldGhvZDogc3RyaW5nKSA9PlxuICByZWFjdGFibGVzLm1hcChyZWFjdGFibGUgPT4gZXh0cmFjdEFjdGlvblR5cGUocmVhY3RhYmxlLCBtZXRob2QpKVxuIl0sIm5hbWVzIjpbImV4dHJhY3RBY3Rpb25UeXBlIiwicmVhY3RhYmxlIiwibWV0aG9kIiwiREVWIiwidHlwZSIsIlR5cGVFcnJvciIsImV4dHJhY3RBY3Rpb25UeXBlcyIsInJlYWN0YWJsZXMiLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8319\n')},8487:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "IE": function() { return /* binding */ STORE_IDENTIFIER; },\n/* harmony export */   "PO": function() { return /* binding */ isPlainObject; },\n/* harmony export */   "RM": function() { return /* binding */ INTERNAL_SUBSCRIBER_ID; },\n/* harmony export */   "_T": function() { return /* binding */ HierarchyType; },\n/* harmony export */   "px": function() { return /* binding */ detailedTypeof; },\n/* harmony export */   "z2": function() { return /* binding */ isZeduxStore; }\n/* harmony export */ });\n/* unused harmony exports ARRAY, COMPLEX_OBJECT, NO_PROTOTYPE, NULL, PLAIN_OBJECT, observableSymbol, noop */\nvar ARRAY=\'array\';var COMPLEX_OBJECT=\'complex object\';var NO_PROTOTYPE=\'prototype-less object\';var NULL=\'null\';var PLAIN_OBJECT=\'object\';/**\n  Determines which kind of object an "object" is.\n\n  Objects can be prototype-less, complex, or plain.\n*/function getDetailedObjectType(value){var prototype=Object.getPrototypeOf(value);if(!prototype)return NO_PROTOTYPE;return Object.getPrototypeOf(prototype)?COMPLEX_OBJECT:PLAIN_OBJECT;}var HierarchyType;(function(HierarchyType){HierarchyType[HierarchyType["Branch"]=0]="Branch";HierarchyType[HierarchyType["Null"]=1]="Null";HierarchyType[HierarchyType["Reducer"]=2]="Reducer";HierarchyType[HierarchyType["Store"]=3]="Store";})(HierarchyType||(HierarchyType={}));var observableSymbol=typeof Symbol===\'function\'&&Symbol.observable||\'@@observable\';// Identifies Zedux subscribers - used when Zedux subscribes\n// to a child store from a parent store\nvar INTERNAL_SUBSCRIBER_ID=Symbol.for(\'zedux.subscriber\');// Used to check if something is a Zedux store\nvar STORE_IDENTIFIER=Symbol.for(\'zedux.store\');/**\n  Returns a more informative description of value\'s type.\n\n  Used to give users helpful error messages that detail exactly why\n  their input was rejected, rather than ux nightmares like:\n\n  "expected a plain object, received object"\n*/function detailedTypeof(value){var valueType=typeof value;if(valueType!==\'object\')return valueType;if(!value)return NULL;if(Array.isArray(value))return ARRAY;return getDetailedObjectType(value);}/**\n  Checks whether value is a plain old object.\n\n  The object may originate from another realm or have its prototype\n  explicitly set to Object.prototype, but it may not have a null\n  prototype or prototype chain more than 1 layer deep.\n*/function isPlainObject(value){if(typeof value!==\'object\'||!value)return false;var prototype=Object.getPrototypeOf(value);if(!prototype)return false;// it was created with Object.create(null)\n// If the prototype chain is exactly 1 layer deep, it\'s likely a normal object\nreturn Object.getPrototypeOf(prototype)===null;}/**\n  Checks whether value is a Zedux store.\n\n  All Zedux stores have a special symbol as their `$$typeof` property.\n*/function isZeduxStore(value){var _value$constructor;return(value==null?void 0:(_value$constructor=value.constructor)==null?void 0:_value$constructor.$$typeof)===STORE_IDENTIFIER;}var noop=function noop(){};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ4Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBTyxHQUFNQSxNQUFLLENBQUcsT0FBTyxDQUNyQixHQUFNQyxlQUFjLENBQUcsZ0JBQWdCLENBQ3ZDLEdBQU1DLGFBQVksQ0FBRyx1QkFBdUIsQ0FDNUMsR0FBTUMsS0FBSSxDQUFHLE1BQU0sQ0FDbkIsR0FBTUMsYUFBWSxDQUFHLFFBQVEsQ0FFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUNBLFFBQVNDLHNCQUFxQixDQUFDQyxLQUFVLENBQUUsQ0FDekMsR0FBTUMsVUFBUyxDQUFHQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0gsS0FBSyxDQUFDLENBRTlDLEdBQUksQ0FBQ0MsU0FBUyxDQUFFLE1BQU9MLGFBQVksQ0FFbkMsTUFBT00sT0FBTSxDQUFDQyxjQUFjLENBQUNGLFNBQVMsQ0FBQyxDQUFHTixjQUFjLENBQUdHLFlBQVksQ0FDekUsQ0FFTyxHQUFLTSxjQUFhLENBS3hCLFVBTFdBLGFBQWEsRUFBYkEsYUFBYSxDQUFiQSxhQUFhLHVCQUFiQSxhQUFhLENBQWJBLGFBQWEsbUJBQWJBLGFBQWEsQ0FBYkEsYUFBYSx5QkFBYkEsYUFBYSxDQUFiQSxhQUFhLHdCQUFiQSxhQUFhLEdBQWJBLGFBQWEsTUFPbEIsR0FBTUMsaUJBQWdCLENBQzFCLE1BQU9DLE9BQU0sR0FBSyxVQUFVLEVBQUtBLE1BQU0sQ0FBU0MsVUFBVSxFQUFLLGNBQWMsQ0FFaEY7QUFDQTtBQUNPLEdBQU1DLHVCQUFzQixDQUFHRixNQUFNLENBQUNHLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUVwRTtBQUNPLEdBQU1DLGlCQUFnQixDQUFHSixNQUFNLENBQUNHLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUNPLFFBQVNFLGVBQWMsQ0FBQ1gsS0FBVSxDQUFFLENBQ3pDLEdBQU1ZLFVBQVMsQ0FBRyxNQUFPWixNQUFLLENBRTlCLEdBQUlZLFNBQVMsR0FBSyxRQUFRLENBQUUsTUFBT0EsVUFBUyxDQUM1QyxHQUFJLENBQUNaLEtBQUssQ0FBRSxNQUFPSCxLQUFJLENBQ3ZCLEdBQUlnQixLQUFLLENBQUNDLE9BQU8sQ0FBQ2QsS0FBSyxDQUFDLENBQUUsTUFBT04sTUFBSyxDQUV0QyxNQUFPSyxzQkFBcUIsQ0FBQ0MsS0FBSyxDQUFDLENBQ3JDLENBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFDTyxRQUFTZSxjQUFhLENBQUNmLEtBQVUsQ0FBRSxDQUN4QyxHQUFJLE1BQU9BLE1BQUssR0FBSyxRQUFRLEVBQUksQ0FBQ0EsS0FBSyxDQUFFLE1BQU8sTUFBSyxDQUVyRCxHQUFNQyxVQUFTLENBQUdDLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDSCxLQUFLLENBQUMsQ0FDOUMsR0FBSSxDQUFDQyxTQUFTLENBQUUsTUFBTyxNQUFLLENBQUM7QUFFN0I7QUFDQSxNQUFPQyxPQUFNLENBQUNDLGNBQWMsQ0FBQ0YsU0FBUyxDQUFDLEdBQUssSUFBSSxDQUNsRCxDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFDTyxRQUFTZSxhQUFZLENBQUNoQixLQUFVLENBQUUsd0JBQ3ZDLE1BQU8sQ0FBQUEsS0FBSyxrQ0FBTEEsS0FBSyxDQUFFaUIsV0FBVyxlQUFsQixtQkFBb0JDLFFBQVEsSUFBS1IsZ0JBQWdCLENBQzFELENBRU8sR0FBTVMsS0FBSSxDQUFHLFFBQVBBLEtBQUksRUFBUyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL2NvcmUvc3JjL3V0aWxzL2dlbmVyYWwudHM/NTEzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgQVJSQVkgPSAnYXJyYXknXG5leHBvcnQgY29uc3QgQ09NUExFWF9PQkpFQ1QgPSAnY29tcGxleCBvYmplY3QnXG5leHBvcnQgY29uc3QgTk9fUFJPVE9UWVBFID0gJ3Byb3RvdHlwZS1sZXNzIG9iamVjdCdcbmV4cG9ydCBjb25zdCBOVUxMID0gJ251bGwnXG5leHBvcnQgY29uc3QgUExBSU5fT0JKRUNUID0gJ29iamVjdCdcblxuLyoqXG4gIERldGVybWluZXMgd2hpY2gga2luZCBvZiBvYmplY3QgYW4gXCJvYmplY3RcIiBpcy5cblxuICBPYmplY3RzIGNhbiBiZSBwcm90b3R5cGUtbGVzcywgY29tcGxleCwgb3IgcGxhaW4uXG4qL1xuZnVuY3Rpb24gZ2V0RGV0YWlsZWRPYmplY3RUeXBlKHZhbHVlOiBhbnkpIHtcbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKVxuXG4gIGlmICghcHJvdG90eXBlKSByZXR1cm4gTk9fUFJPVE9UWVBFXG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID8gQ09NUExFWF9PQkpFQ1QgOiBQTEFJTl9PQkpFQ1Rcbn1cblxuZXhwb3J0IGVudW0gSGllcmFyY2h5VHlwZSB7XG4gIEJyYW5jaCxcbiAgTnVsbCxcbiAgUmVkdWNlcixcbiAgU3RvcmUsXG59XG5cbmV4cG9ydCBjb25zdCBvYnNlcnZhYmxlU3ltYm9sID1cbiAgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgKFN5bWJvbCBhcyBhbnkpLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnXG5cbi8vIElkZW50aWZpZXMgWmVkdXggc3Vic2NyaWJlcnMgLSB1c2VkIHdoZW4gWmVkdXggc3Vic2NyaWJlc1xuLy8gdG8gYSBjaGlsZCBzdG9yZSBmcm9tIGEgcGFyZW50IHN0b3JlXG5leHBvcnQgY29uc3QgSU5URVJOQUxfU1VCU0NSSUJFUl9JRCA9IFN5bWJvbC5mb3IoJ3plZHV4LnN1YnNjcmliZXInKVxuXG4vLyBVc2VkIHRvIGNoZWNrIGlmIHNvbWV0aGluZyBpcyBhIFplZHV4IHN0b3JlXG5leHBvcnQgY29uc3QgU1RPUkVfSURFTlRJRklFUiA9IFN5bWJvbC5mb3IoJ3plZHV4LnN0b3JlJylcblxuLyoqXG4gIFJldHVybnMgYSBtb3JlIGluZm9ybWF0aXZlIGRlc2NyaXB0aW9uIG9mIHZhbHVlJ3MgdHlwZS5cblxuICBVc2VkIHRvIGdpdmUgdXNlcnMgaGVscGZ1bCBlcnJvciBtZXNzYWdlcyB0aGF0IGRldGFpbCBleGFjdGx5IHdoeVxuICB0aGVpciBpbnB1dCB3YXMgcmVqZWN0ZWQsIHJhdGhlciB0aGFuIHV4IG5pZ2h0bWFyZXMgbGlrZTpcblxuICBcImV4cGVjdGVkIGEgcGxhaW4gb2JqZWN0LCByZWNlaXZlZCBvYmplY3RcIlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXRhaWxlZFR5cGVvZih2YWx1ZTogYW55KSB7XG4gIGNvbnN0IHZhbHVlVHlwZSA9IHR5cGVvZiB2YWx1ZVxuXG4gIGlmICh2YWx1ZVR5cGUgIT09ICdvYmplY3QnKSByZXR1cm4gdmFsdWVUeXBlXG4gIGlmICghdmFsdWUpIHJldHVybiBOVUxMXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIEFSUkFZXG5cbiAgcmV0dXJuIGdldERldGFpbGVkT2JqZWN0VHlwZSh2YWx1ZSlcbn1cblxuLyoqXG4gIENoZWNrcyB3aGV0aGVyIHZhbHVlIGlzIGEgcGxhaW4gb2xkIG9iamVjdC5cblxuICBUaGUgb2JqZWN0IG1heSBvcmlnaW5hdGUgZnJvbSBhbm90aGVyIHJlYWxtIG9yIGhhdmUgaXRzIHByb3RvdHlwZVxuICBleHBsaWNpdGx5IHNldCB0byBPYmplY3QucHJvdG90eXBlLCBidXQgaXQgbWF5IG5vdCBoYXZlIGEgbnVsbFxuICBwcm90b3R5cGUgb3IgcHJvdG90eXBlIGNoYWluIG1vcmUgdGhhbiAxIGxheWVyIGRlZXAuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWU6IGFueSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCAhdmFsdWUpIHJldHVybiBmYWxzZVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSlcbiAgaWYgKCFwcm90b3R5cGUpIHJldHVybiBmYWxzZSAvLyBpdCB3YXMgY3JlYXRlZCB3aXRoIE9iamVjdC5jcmVhdGUobnVsbClcblxuICAvLyBJZiB0aGUgcHJvdG90eXBlIGNoYWluIGlzIGV4YWN0bHkgMSBsYXllciBkZWVwLCBpdCdzIGxpa2VseSBhIG5vcm1hbCBvYmplY3RcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsXG59XG5cbi8qKlxuICBDaGVja3Mgd2hldGhlciB2YWx1ZSBpcyBhIFplZHV4IHN0b3JlLlxuXG4gIEFsbCBaZWR1eCBzdG9yZXMgaGF2ZSBhIHNwZWNpYWwgc3ltYm9sIGFzIHRoZWlyIGAkJHR5cGVvZmAgcHJvcGVydHkuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGlzWmVkdXhTdG9yZSh2YWx1ZTogYW55KSB7XG4gIHJldHVybiB2YWx1ZT8uY29uc3RydWN0b3I/LiQkdHlwZW9mID09PSBTVE9SRV9JREVOVElGSUVSXG59XG5cbmV4cG9ydCBjb25zdCBub29wID0gKCkgPT4ge31cbiJdLCJuYW1lcyI6WyJBUlJBWSIsIkNPTVBMRVhfT0JKRUNUIiwiTk9fUFJPVE9UWVBFIiwiTlVMTCIsIlBMQUlOX09CSkVDVCIsImdldERldGFpbGVkT2JqZWN0VHlwZSIsInZhbHVlIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJIaWVyYXJjaHlUeXBlIiwib2JzZXJ2YWJsZVN5bWJvbCIsIlN5bWJvbCIsIm9ic2VydmFibGUiLCJJTlRFUk5BTF9TVUJTQ1JJQkVSX0lEIiwiZm9yIiwiU1RPUkVfSURFTlRJRklFUiIsImRldGFpbGVkVHlwZW9mIiwidmFsdWVUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsImlzWmVkdXhTdG9yZSIsImNvbnN0cnVjdG9yIiwiJCR0eXBlb2YiLCJub29wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8487\n')},2448:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"u\": function() { return /* binding */ AtomApi; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\n/* harmony import */ var _zedux_react_utils_general__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(395);\nvar AtomApi=/*#__PURE__*/function(){function AtomApi(value){this.promise=undefined;this.value=value;this.store=(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .isZeduxStore */ .z2)(value)?value:undefined;if((0,_zedux_react_utils_general__WEBPACK_IMPORTED_MODULE_1__.is)(value,AtomApi)){Object.assign(this,value);}}var _proto=AtomApi.prototype;_proto.addDispatchInterceptor=function addDispatchInterceptor(interceptor){if(!this.dispatchInterceptors){this.dispatchInterceptors=[];}this.dispatchInterceptors.push(interceptor);return this;// for chaining\n};_proto.addExports=function addExports(exports){if(!this.exports)this.exports=exports;else this.exports=Object.assign({},this.exports,exports);return this;};_proto.addSetStateInterceptor=function addSetStateInterceptor(interceptor){if(!this.setStateInterceptors){this.setStateInterceptors=[];}this.setStateInterceptors.push(interceptor);return this;// for chaining\n};_proto.setExports=function setExports(exports){;this.exports=exports;return this;// for chaining\n};_proto.setPromise=function setPromise(promise){this.promise=promise;return this;// for chaining\n};_proto.setTtl=function setTtl(ttl){this.ttl=ttl;return this;// for chaining\n};_proto._interceptDispatch=function _interceptDispatch(action,next){var _this$dispatchInterce;var intercept=(_this$dispatchInterce=this.dispatchInterceptors)==null?void 0:_this$dispatchInterce.reduceRight(function(nextInterceptor,interceptor){return function(newAction){return interceptor(newAction,nextInterceptor);};},next);return(intercept||next)(action);};_proto._interceptSetState=function _interceptSetState(settable,next){var _this$setStateInterce;var intercept=(_this$setStateInterce=this.setStateInterceptors)==null?void 0:_this$setStateInterce.reduceRight(function(nextInterceptor,interceptor){return function(newSettable){return interceptor(newSettable,nextInterceptor);};},next);return(intercept||next)(settable);};return AtomApi;}();AtomApi.$$typeof=Symbol.for('@@react/zedux/AtomApi');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ0OC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVNPLEdBQU1FLFFBQU8seUJBZ0JsQixpQkFDRUMsS0FBMEUsQ0FDMUUsQ0FDQSxJQUFJLENBQUNDLE9BQU8sQ0FBR0MsU0FBd0IsQ0FDdkMsSUFBSSxDQUFDRixLQUFLLENBQUdBLEtBQTBCLENBQ3ZDLElBQUksQ0FBQ0csS0FBSyxDQUFJTixtRUFBWSxDQUFDRyxLQUFLLENBQUMsQ0FBR0EsS0FBSyxDQUFHRSxTQUF1QixDQUVuRSxHQUFJSiw4REFBRSxDQUFDRSxLQUFLLENBQUVELE9BQU8sQ0FBQyxDQUFFLENBQ3RCSyxNQUFNLENBQUNDLE1BQU0sQ0FDWCxJQUFJLENBQ0pMLEtBQUssQ0FDTixDQUNILENBQ0YsQ0FBQyxvQ0FFTU0sc0JBQXNCLENBQTdCLGdDQUE4QkMsV0FBdUMsQ0FBRSxDQUNyRSxHQUFJLENBQUMsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBRSxDQUM5QixJQUFJLENBQUNBLG9CQUFvQixDQUFHLEVBQUUsQ0FDaEMsQ0FFQSxJQUFJLENBQUNBLG9CQUFvQixDQUFDQyxJQUFJLENBQUNGLFdBQVcsQ0FBQyxDQUUzQyxNQUFPLEtBQUksQ0FBb0Q7QUFDakUsQ0FBQyxRQUVNRyxVQUFVLENBQWpCLG9CQUNFQyxPQUFtQixDQUMyQyxDQUM5RCxHQUFJLENBQUMsSUFBSSxDQUFDQSxPQUFPLENBQUUsSUFBSSxDQUFDQSxPQUFPLENBQUdBLE9BQWMsS0FDM0MsS0FBSSxDQUFDQSxPQUFPLGtCQUFRLElBQUksQ0FBQ0EsT0FBTyxDQUFLQSxPQUFPLENBQUUsQ0FFbkQsTUFBTyxLQUFJLENBQ2IsQ0FBQyxRQUVNQyxzQkFBc0IsQ0FBN0IsZ0NBQThCTCxXQUF1QyxDQUFFLENBQ3JFLEdBQUksQ0FBQyxJQUFJLENBQUNNLG9CQUFvQixDQUFFLENBQzlCLElBQUksQ0FBQ0Esb0JBQW9CLENBQUcsRUFBRSxDQUNoQyxDQUVBLElBQUksQ0FBQ0Esb0JBQW9CLENBQUNKLElBQUksQ0FBQ0YsV0FBVyxDQUFDLENBRTNDLE1BQU8sS0FBSSxDQUFvRDtBQUNqRSxDQUFDLFFBRU1PLFVBQVUsQ0FBakIsb0JBQ0VILE9BQW1CLENBQ2lDLENBQ3BELENBQUcsSUFBSSxDQUtKQSxPQUFPLENBQUdBLE9BQU8sQ0FFcEIsTUFBUSxLQUFJLENBS1Y7QUFDSixDQUFDLFFBRU1JLFVBQVUsQ0FBakIsb0JBQ0VkLE9BQW1CLENBQzZCLENBQ2hELElBQUksQ0FBQ0EsT0FBTyxDQUFJQSxPQUFrQyxDQUVsRCxNQUFPLEtBQUksQ0FBbUQ7QUFDaEUsQ0FBQyxRQUVNZSxNQUFNLENBQWIsZ0JBQWNDLEdBQThDLENBQUUsQ0FDNUQsSUFBSSxDQUFDQSxHQUFHLENBQUdBLEdBQUcsQ0FFZCxNQUFPLEtBQUksQ0FBQztBQUNkLENBQUMsUUFFTUMsa0JBQWtCLENBQXpCLDRCQUNFQyxNQUFtQixDQUNuQkMsSUFBb0MsQ0FDcEMsMkJBQ0EsR0FBTUMsVUFBUyx3QkFBRyxJQUFJLENBQUNiLG9CQUFvQixlQUF6QixzQkFBMkJjLFdBQVcsQ0FDdEQsU0FBQ0MsZUFBK0MsQ0FBRWhCLFdBQVcsUUFBSyxVQUNoRWlCLFNBQXNCLFFBQ25CakIsWUFBVyxDQUFDaUIsU0FBUyxDQUFFRCxlQUFlLENBQUMsS0FDNUNILElBQUksQ0FDTCxDQUVELE1BQU8sQ0FBQ0MsU0FBUyxFQUFJRCxJQUFJLEVBQUVELE1BQU0sQ0FBQyxDQUNwQyxDQUFDLFFBRU1NLGtCQUFrQixDQUF6Qiw0QkFDRUMsUUFBeUIsQ0FDekJOLElBQTBDLENBQzFDLDJCQUNBLEdBQU1DLFVBQVMsd0JBQUcsSUFBSSxDQUFDUixvQkFBb0IsZUFBekIsc0JBQTJCUyxXQUFXLENBQ3RELFNBQUNDLGVBQXFELENBQUVoQixXQUFXLFFBQUssVUFDdEVvQixXQUE0QixRQUN6QnBCLFlBQVcsQ0FBQ29CLFdBQVcsQ0FBRUosZUFBZSxDQUFDLEtBQzlDSCxJQUFJLENBQ0wsQ0FFRCxNQUFPLENBQUNDLFNBQVMsRUFBSUQsSUFBSSxFQUFFTSxRQUFRLENBQUMsQ0FDdEMsQ0FBQyxvQkF0SFUzQixPQUFPLENBTUo2QixRQUFRLENBQUdDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvY2xhc3Nlcy9BdG9tQXBpLnRzP2YyYWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uQ2hhaW4sIGlzWmVkdXhTdG9yZSwgU2V0dGFibGUsIFN0b3JlIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQge1xuICBBdG9tSW5zdGFuY2VUdGwsXG4gIEF0b21BcGlQcm9taXNlLFxuICBEaXNwYXRjaEludGVyY2VwdG9yLFxuICBTZXRTdGF0ZUludGVyY2VwdG9yLFxufSBmcm9tICdAemVkdXgvcmVhY3QvdHlwZXMnXG5pbXBvcnQgeyBpcyB9IGZyb20gJ0B6ZWR1eC9yZWFjdC91dGlscy9nZW5lcmFsJ1xuXG5leHBvcnQgY2xhc3MgQXRvbUFwaTxcbiAgU3RhdGUsXG4gIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZTxTdGF0ZT4gfCB1bmRlZmluZWQsXG4gIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2Vcbj4ge1xuICBwdWJsaWMgc3RhdGljICQkdHlwZW9mID0gU3ltYm9sLmZvcignQEByZWFjdC96ZWR1eC9BdG9tQXBpJylcblxuICBwdWJsaWMgZGlzcGF0Y2hJbnRlcmNlcHRvcnM/OiBEaXNwYXRjaEludGVyY2VwdG9yPFN0YXRlPltdXG4gIHB1YmxpYyBleHBvcnRzPzogRXhwb3J0c1xuICBwdWJsaWMgcHJvbWlzZTogUHJvbWlzZVR5cGVcbiAgcHVibGljIHNldFN0YXRlSW50ZXJjZXB0b3JzPzogU2V0U3RhdGVJbnRlcmNlcHRvcjxTdGF0ZT5bXVxuICBwdWJsaWMgc3RvcmU6IFN0b3JlVHlwZVxuICBwdWJsaWMgdHRsPzogQXRvbUluc3RhbmNlVHRsIHwgKCgpID0+IEF0b21JbnN0YW5jZVR0bClcbiAgcHVibGljIHZhbHVlOiBTdGF0ZSB8IFN0b3JlVHlwZVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHZhbHVlOiBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiB8IFN0b3JlVHlwZSB8IFN0YXRlXG4gICkge1xuICAgIHRoaXMucHJvbWlzZSA9IHVuZGVmaW5lZCBhcyBQcm9taXNlVHlwZVxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZSBhcyBTdG9yZVR5cGUgfCBTdGF0ZVxuICAgIHRoaXMuc3RvcmUgPSAoaXNaZWR1eFN0b3JlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkKSBhcyBTdG9yZVR5cGVcblxuICAgIGlmIChpcyh2YWx1ZSwgQXRvbUFwaSkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHZhbHVlIGFzIEF0b21BcGk8U3RhdGUsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFkZERpc3BhdGNoSW50ZXJjZXB0b3IoaW50ZXJjZXB0b3I6IERpc3BhdGNoSW50ZXJjZXB0b3I8U3RhdGU+KSB7XG4gICAgaWYgKCF0aGlzLmRpc3BhdGNoSW50ZXJjZXB0b3JzKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoSW50ZXJjZXB0b3JzID0gW11cbiAgICB9XG5cbiAgICB0aGlzLmRpc3BhdGNoSW50ZXJjZXB0b3JzLnB1c2goaW50ZXJjZXB0b3IpXG5cbiAgICByZXR1cm4gdGhpcyBhcyBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiAvLyBmb3IgY2hhaW5pbmdcbiAgfVxuXG4gIHB1YmxpYyBhZGRFeHBvcnRzPE5ld0V4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihcbiAgICBleHBvcnRzOiBOZXdFeHBvcnRzXG4gICk6IEF0b21BcGk8U3RhdGUsIEV4cG9ydHMgJiBOZXdFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiB7XG4gICAgaWYgKCF0aGlzLmV4cG9ydHMpIHRoaXMuZXhwb3J0cyA9IGV4cG9ydHMgYXMgYW55XG4gICAgZWxzZSB0aGlzLmV4cG9ydHMgPSB7IC4uLnRoaXMuZXhwb3J0cywgLi4uZXhwb3J0cyB9XG5cbiAgICByZXR1cm4gdGhpcyBhcyBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzICYgTmV3RXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbiAgfVxuXG4gIHB1YmxpYyBhZGRTZXRTdGF0ZUludGVyY2VwdG9yKGludGVyY2VwdG9yOiBTZXRTdGF0ZUludGVyY2VwdG9yPFN0YXRlPikge1xuICAgIGlmICghdGhpcy5zZXRTdGF0ZUludGVyY2VwdG9ycykge1xuICAgICAgdGhpcy5zZXRTdGF0ZUludGVyY2VwdG9ycyA9IFtdXG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZUludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKVxuXG4gICAgcmV0dXJuIHRoaXMgYXMgQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4gLy8gZm9yIGNoYWluaW5nXG4gIH1cblxuICBwdWJsaWMgc2V0RXhwb3J0czxOZXdFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4oXG4gICAgZXhwb3J0czogTmV3RXhwb3J0c1xuICApOiBBdG9tQXBpPFN0YXRlLCBOZXdFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiB7XG4gICAgOygodGhpcyBhcyB1bmtub3duKSBhcyBBdG9tQXBpPFxuICAgICAgU3RhdGUsXG4gICAgICBOZXdFeHBvcnRzLFxuICAgICAgU3RvcmVUeXBlLFxuICAgICAgUHJvbWlzZVR5cGVcbiAgICA+KS5leHBvcnRzID0gZXhwb3J0c1xuXG4gICAgcmV0dXJuICh0aGlzIGFzIHVua25vd24pIGFzIEF0b21BcGk8XG4gICAgICBTdGF0ZSxcbiAgICAgIE5ld0V4cG9ydHMsXG4gICAgICBTdG9yZVR5cGUsXG4gICAgICBQcm9taXNlVHlwZVxuICAgID4gLy8gZm9yIGNoYWluaW5nXG4gIH1cblxuICBwdWJsaWMgc2V0UHJvbWlzZTxUPihcbiAgICBwcm9taXNlOiBQcm9taXNlPFQ+XG4gICk6IEF0b21BcGk8U3RhdGUsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZTxUPj4ge1xuICAgIHRoaXMucHJvbWlzZSA9IChwcm9taXNlIGFzIHVua25vd24pIGFzIFByb21pc2VUeXBlXG5cbiAgICByZXR1cm4gdGhpcyBhcyBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2U8VD4+IC8vIGZvciBjaGFpbmluZ1xuICB9XG5cbiAgcHVibGljIHNldFR0bCh0dGw6IEF0b21JbnN0YW5jZVR0bCB8ICgoKSA9PiBBdG9tSW5zdGFuY2VUdGwpKSB7XG4gICAgdGhpcy50dGwgPSB0dGxcblxuICAgIHJldHVybiB0aGlzIC8vIGZvciBjaGFpbmluZ1xuICB9XG5cbiAgcHVibGljIF9pbnRlcmNlcHREaXNwYXRjaChcbiAgICBhY3Rpb246IEFjdGlvbkNoYWluLFxuICAgIG5leHQ6IChhY3Rpb246IEFjdGlvbkNoYWluKSA9PiBTdGF0ZVxuICApIHtcbiAgICBjb25zdCBpbnRlcmNlcHQgPSB0aGlzLmRpc3BhdGNoSW50ZXJjZXB0b3JzPy5yZWR1Y2VSaWdodChcbiAgICAgIChuZXh0SW50ZXJjZXB0b3I6IChhY3Rpb246IEFjdGlvbkNoYWluKSA9PiBTdGF0ZSwgaW50ZXJjZXB0b3IpID0+IChcbiAgICAgICAgbmV3QWN0aW9uOiBBY3Rpb25DaGFpblxuICAgICAgKSA9PiBpbnRlcmNlcHRvcihuZXdBY3Rpb24sIG5leHRJbnRlcmNlcHRvciksXG4gICAgICBuZXh0XG4gICAgKVxuXG4gICAgcmV0dXJuIChpbnRlcmNlcHQgfHwgbmV4dCkoYWN0aW9uKVxuICB9XG5cbiAgcHVibGljIF9pbnRlcmNlcHRTZXRTdGF0ZShcbiAgICBzZXR0YWJsZTogU2V0dGFibGU8U3RhdGU+LFxuICAgIG5leHQ6IChzZXR0YWJsZTogU2V0dGFibGU8U3RhdGU+KSA9PiBTdGF0ZVxuICApIHtcbiAgICBjb25zdCBpbnRlcmNlcHQgPSB0aGlzLnNldFN0YXRlSW50ZXJjZXB0b3JzPy5yZWR1Y2VSaWdodChcbiAgICAgIChuZXh0SW50ZXJjZXB0b3I6IChzZXR0YWJsZTogU2V0dGFibGU8U3RhdGU+KSA9PiBTdGF0ZSwgaW50ZXJjZXB0b3IpID0+IChcbiAgICAgICAgbmV3U2V0dGFibGU6IFNldHRhYmxlPFN0YXRlPlxuICAgICAgKSA9PiBpbnRlcmNlcHRvcihuZXdTZXR0YWJsZSwgbmV4dEludGVyY2VwdG9yKSxcbiAgICAgIG5leHRcbiAgICApXG5cbiAgICByZXR1cm4gKGludGVyY2VwdCB8fCBuZXh0KShzZXR0YWJsZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImlzWmVkdXhTdG9yZSIsImlzIiwiQXRvbUFwaSIsInZhbHVlIiwicHJvbWlzZSIsInVuZGVmaW5lZCIsInN0b3JlIiwiT2JqZWN0IiwiYXNzaWduIiwiYWRkRGlzcGF0Y2hJbnRlcmNlcHRvciIsImludGVyY2VwdG9yIiwiZGlzcGF0Y2hJbnRlcmNlcHRvcnMiLCJwdXNoIiwiYWRkRXhwb3J0cyIsImV4cG9ydHMiLCJhZGRTZXRTdGF0ZUludGVyY2VwdG9yIiwic2V0U3RhdGVJbnRlcmNlcHRvcnMiLCJzZXRFeHBvcnRzIiwic2V0UHJvbWlzZSIsInNldFR0bCIsInR0bCIsIl9pbnRlcmNlcHREaXNwYXRjaCIsImFjdGlvbiIsIm5leHQiLCJpbnRlcmNlcHQiLCJyZWR1Y2VSaWdodCIsIm5leHRJbnRlcmNlcHRvciIsIm5ld0FjdGlvbiIsIl9pbnRlcmNlcHRTZXRTdGF0ZSIsInNldHRhYmxlIiwibmV3U2V0dGFibGUiLCIkJHR5cGVvZiIsIlN5bWJvbCIsImZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2448\n")},5092:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"q\": function() { return /* binding */ Ecosystem; },\n  \"z\": function() { return /* binding */ ecosystemContext; }\n});\n\n// EXTERNAL MODULE: ../packages/core/src/api/createStore.ts + 4 modules\nvar createStore = __webpack_require__(1694);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ../packages/react/src/store/index.ts + 1 modules\nvar store = __webpack_require__(5790);\n// EXTERNAL MODULE: ../packages/react/src/store/actions.ts\nvar actions = __webpack_require__(1519);\n// EXTERNAL MODULE: ../packages/react/src/types.ts\nvar types = __webpack_require__(6511);\n// EXTERNAL MODULE: ../packages/react/src/utils/general.ts\nvar general = __webpack_require__(395);\n// EXTERNAL MODULE: ../packages/react/src/utils/plugin-actions.ts\nvar plugin_actions = __webpack_require__(3299);\n// EXTERNAL MODULE: ../packages/react/src/classes/EvaluationStack.ts\nvar EvaluationStack = __webpack_require__(2633);\n// EXTERNAL MODULE: ../packages/react/src/utils/types.ts\nvar utils_types = __webpack_require__(2314);\n;// CONCATENATED MODULE: ../packages/react/src/classes/Graph.ts\nvar Graph=/*#__PURE__*/function(){function Graph(ecosystem){this.nodes={};this.updateStack=[];this.ecosystem=ecosystem;}/**\n   * Draw a new edge between two nodes in the graph. This is how dependencies\n   * are created between atoms, selectors, and external nodes like React\n   * components.\n   */var _proto=Graph.prototype;_proto.addEdge=function addEdge(dependentKey,dependencyKey,operation,flags,callback){var newEdge={callback:callback,createdAt:Date.now(),flags:flags,operation:operation};if(!this.updateStack.length){return this.finishAddingEdge(dependentKey,dependencyKey,newEdge);}// We're buffering updates! Buffer this one\nvar _this$updateStack=this.updateStack[this.updateStack.length-1],dependencies=_this$updateStack.dependencies,key=_this$updateStack.key;if( true&&key!==dependentKey){throw new Error(\"Zedux: Tried updating dependencies of a graph node that isn't currently evaluating. This means that either you tried updating the graph manually or there is a bug in Zedux. If it's a bug, please report it!\");}var dependency=dependencies[dependencyKey];// Don't overwrite a higher-prio edge with a lower one. Also ignore same-prio\nif(!dependency||dependency.flags>flags){dependencies[dependencyKey]=newEdge;return newEdge;}// if this edge was ignored, return the existing buffered edge\nreturn dependencies[dependencyKey];}// Should only be used internally\n;_proto.addNode=function addNode(nodeKey,isAtomSelector){if(this.nodes[nodeKey])return;// already added\nthis.nodes[nodeKey]={dependencies:{},dependents:{},isAtomSelector:isAtomSelector,weight:1// this node doesn't have dependencies yet; it's weight is 1\n};}/**\n   * Prevent new graph edges from being added immediately. Instead, buffer them\n   * so we can prevent duplicates or unnecessary edges. Call `.flushUpdates()`\n   * to finish buffering.\n   *\n   * This is used during atom and AtomSelector evaluation to make the graph as\n   * efficient as possible.\n   */;_proto.bufferUpdates=function bufferUpdates(key){this.updateStack.push({key:key,dependencies:{}});}/**\n   * If an atom instance or AtomSelector errors during evaluation, we need to\n   * destroy any instances or AtomSelectors created during that evaluation that\n   * now have no dependents.\n   */;_proto.destroyBuffer=function destroyBuffer(){var _this=this;var _this$updateStack2=this.updateStack[this.updateStack.length-1],dependencies=_this$updateStack2.dependencies,key=_this$updateStack2.key;var edges=this.nodes[key].dependencies;Object.keys(dependencies).forEach(function(dependencyKey){var existingEdge=edges[dependencyKey];// the edge wasn't created during the evaluation that errored; keep it\nif(existingEdge)return;_this.scheduleNodeDestruction(dependencyKey);});this.updateStack.pop();}/**\n   * Stop buffering updates for the node passed to `.bufferUpdates()` and add\n   * the buffered edges to the graph.\n   */;_proto.flushUpdates=function flushUpdates(){var _this2=this;var _this$updateStack3=this.updateStack[this.updateStack.length-1],dependencies=_this$updateStack3.dependencies,key=_this$updateStack3.key;var edges=this.nodes[key].dependencies;// remove any edges that were not recreated while buffering. Don't remove\n// anything but implicit-internal edges (those are the only kind we\n// auto-create during evaluation - other types may have been added manually\n// by the user and we don't want to touch them here)\nObject.keys(edges).forEach(function(dependencyKey){var existingEdge=_this2.nodes[dependencyKey].dependents[key];if(existingEdge.flags&(types/* EdgeFlag.Explicit */.d.Explicit|types/* EdgeFlag.External */.d.External))return;var edgeToAdd=dependencies[dependencyKey];// edge still exists; keep it\nif(edgeToAdd&&edgeToAdd.flags===existingEdge.flags)return;_this2.removeEdge(key,dependencyKey);});// add new edges that we tracked while buffering\nObject.keys(dependencies).forEach(function(dependencyKey){var edgeToAdd=dependencies[dependencyKey];var existingEdge=edges[dependencyKey];// edge already exists; keep it\nif(existingEdge)return;_this2.finishAddingEdge(key,dependencyKey,edgeToAdd);});this.updateStack.pop();};_proto.getRefCount=function getRefCount(dependencyKey){var _this$nodes$dependenc;return Object.keys(((_this$nodes$dependenc=this.nodes[dependencyKey])==null?void 0:_this$nodes$dependenc.dependents)||{}).length;};_proto.removeDependencies=function removeDependencies(dependentKey){var _this3=this;var node=this.nodes[dependentKey];if(!node)return;// node already destroyed\nvar edges=node.dependencies;if(!edges)return;Object.keys(edges).forEach(function(dependencyKey){_this3.removeEdge(dependentKey,dependencyKey);});}/**\n   * Should only be used internally. Remove the graph edge between two nodes.\n   * The dependent may not exist as a node in the graph if it's external, e.g. a\n   * React component\n   *\n   * For some reason in React 18+, React destroys parents before children. This\n   * means a parent EcosystemProvider may have already unmounted and wiped the\n   * whole graph; this edge may already be destroyed.\n   */;_proto.removeEdge=function removeEdge(dependentKey,dependencyKey){var dependency=this.nodes[dependencyKey];var dependent=this.nodes[dependentKey];// won't exist if external\n// erase graph edge between dependent and dependency\nif(dependent){delete dependent.dependencies[dependencyKey];}// hmm could maybe happen when a dependency was force-destroyed if a child\n// tries to destroy its edge before recreating it (I don't think we ever do\n// that though)\nif(!dependency)return;var dependentEdge=dependency.dependents[dependentKey];// happens in React 18+ (see this method's jsdoc above)\nif(!dependentEdge)return;delete dependency.dependents[dependentKey];// static dependencies don't change a node's weight\nif(!(dependentEdge.flags&types/* EdgeFlag.Static */.d.Static)){this.recalculateNodeWeight(dependentKey,-dependency.weight);}if(dependentEdge.task){this.ecosystem._scheduler.unscheduleJob(dependentEdge.task);}if(this.ecosystem._mods.edgeRemoved){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.edgeRemoved */.V.edgeRemoved({dependency:this.ecosystem._instances[dependencyKey]||this.ecosystem.selectorCache._caches[dependencyKey],dependent:this.ecosystem._instances[dependentKey]||this.ecosystem.selectorCache._caches[dependentKey]||dependentKey,edge:dependentEdge}));}this.scheduleNodeDestruction(dependencyKey);}// Should only be used internally\n;_proto.removeNode=function removeNode(nodeKey){var _this4=this;var node=this.nodes[nodeKey];if(!node)return;// already removed\n// We don't need to remove this dependent from its dependencies here - the\n// atom instance/AtomSelector will have removed all its deps before calling\n// this function as part of its destruction process\n// if an atom instance is force-destroyed, it could still have dependents.\n// Inform them of the destruction\nthis.scheduleDependents(nodeKey,[],undefined,undefined,true,'node destroyed','Destroyed',true);// Remove this dependency from all its dependents and recalculate all\n// weights recursively\nObject.keys(node.dependents).forEach(function(dependentKey){var dependentEdge=node.dependents[dependentKey];if(!(dependentEdge.flags&types/* EdgeFlag.Static */.d.Static)){_this4.recalculateNodeWeight(dependentKey,-node.weight);}var dependentNode=_this4.nodes[dependentKey];if(dependentNode)delete dependentNode.dependencies[nodeKey];});delete this.nodes[nodeKey];}/**\n   * Schedules a job to update all dependents of a node. This is called e.g.\n   * when an atom instance or AtomSelector updates, when an atom instance is\n   * force-destroyed, or when an atom instance's promise changes.\n   */;_proto.scheduleDependents=function scheduleDependents(nodeKey,reasons,newState,oldState,shouldSetTimeout,type,signal,scheduleStaticDeps){var _this5=this;if(type===void 0){type='state changed';}if(signal===void 0){signal='Updated';}if(scheduleStaticDeps===void 0){scheduleStaticDeps=false;}var instance=this.ecosystem._instances[nodeKey];var cache=this.ecosystem.selectorCache._caches[nodeKey];var node=this.nodes[nodeKey];Object.keys(node.dependents).forEach(function(dependentKey){var dependentEdge=node.dependents[dependentKey];// if edge.task exists, this edge has already been scheduled\nif(dependentEdge.task){if(signal!=='Destroyed')return;// destruction jobs supersede update jobs; cancel the existing job so we\n// can create a new one for the destruction\n_this5.ecosystem._scheduler.unscheduleJob(dependentEdge.task);}// Static deps don't update on state change. Dynamic deps don't update on\n// promise change. Both types update on instance force-destruction\nvar isStatic=dependentEdge.flags&types/* EdgeFlag.Static */.d.Static;if(isStatic&&!scheduleStaticDeps)return;var reason={newState:newState,oldState:oldState,operation:dependentEdge.operation,reasons:reasons,sourceKey:nodeKey,sourceType:node.isAtomSelector?'AtomSelector':'Atom',type:type};// let internal dependents (other atoms and AtomSelectors) schedule their\n// own jobs\nif(!(dependentEdge.flags&types/* EdgeFlag.External */.d.External)){if(_this5.nodes[dependentKey].isAtomSelector){return _this5.ecosystem.selectorCache._scheduleEvaluation(dependentKey,reason,dependentEdge.flags,shouldSetTimeout);}return _this5.ecosystem._instances[dependentKey]._scheduleEvaluation(reason,dependentEdge.flags,shouldSetTimeout);}// schedule external dependents\nvar task=function task(){dependentEdge.task=undefined;dependentEdge.callback==null?void 0:dependentEdge.callback(signal,instance?instance.store.getState():cache.result,// don't use the snapshotted newState above\nreason);};_this5.ecosystem._scheduler.scheduleJob({flags:dependentEdge.flags,task:task,type:utils_types/* JobType.UpdateExternalDependent */.O.UpdateExternalDependent},shouldSetTimeout);// mutate the edge; give it the scheduled task so it can be cleaned up\ndependentEdge.task=task;});}/**\n   * Actually add an edge to the graph. When we buffer graph updates, we're\n   * really just deferring the calling of this method.\n   */;_proto.finishAddingEdge=function finishAddingEdge(dependentKey,dependencyKey,newEdge){var dependency=this.nodes[dependencyKey];if(!dependency)return;// happened once for some reason\n// draw graph edge between dependent and dependency\nif(!(newEdge.flags&types/* EdgeFlag.External */.d.External)){this.nodes[dependentKey].dependencies[dependencyKey]=true;}dependency.dependents[dependentKey]=newEdge;this.unscheduleNodeDestruction(dependencyKey);// static dependencies don't change a node's weight\nif(!(newEdge.flags&types/* EdgeFlag.Static */.d.Static)){this.recalculateNodeWeight(dependentKey,dependency.weight);}if(this.ecosystem._mods.edgeCreated){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.edgeCreated */.V.edgeCreated({dependency:this.ecosystem._instances[dependencyKey]||this.ecosystem.selectorCache._caches[dependencyKey],dependent:this.ecosystem._instances[dependentKey]||this.ecosystem.selectorCache._caches[dependentKey]||dependentKey,// unfortunate but not changing for now UPDATE: shouldn't be needed anymore. Double check\nedge:newEdge}));}return newEdge;}/**\n   * When a non-static edge is added or removed, every node below that edge (the\n   * dependent, its dependents, etc) in the graph needs to have its weight\n   * recalculated.\n   */;_proto.recalculateNodeWeight=function recalculateNodeWeight(nodeKey,weightDiff){var _this6=this;var node=this.nodes[nodeKey];if(!node)return;// happens when node is external\nnode.weight+=weightDiff;Object.keys(node.dependents).forEach(function(dependentKey){_this6.recalculateNodeWeight(dependentKey,weightDiff);});}/**\n   * When a node's refCount hits 0, schedule destruction of that node.\n   */;_proto.scheduleNodeDestruction=function scheduleNodeDestruction(nodeKey){var node=this.nodes[nodeKey];if(node&&!Object.keys(node.dependents).length){if(node.isAtomSelector){this.ecosystem.selectorCache._destroySelector(nodeKey);}else{this.ecosystem._instances[nodeKey]._scheduleDestruction();}}}/**\n   * When a node's refCount hits 0, we schedule destruction of that node. If\n   * that destruction is still pending and the refCount goes back up to 1,\n   * cancel the scheduled destruction.\n   */;_proto.unscheduleNodeDestruction=function unscheduleNodeDestruction(nodeKey){var dependency=this.nodes[nodeKey];if(!dependency.isAtomSelector&&Object.keys(dependency.dependents).length===1){var instance=this.ecosystem._instances[nodeKey];instance._cancelDestruction==null?void 0:instance._cancelDestruction();}};return Graph;}();\n// EXTERNAL MODULE: ../packages/core/src/utils/general.ts\nvar utils_general = __webpack_require__(8487);\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstanceBase.ts\nvar AtomInstanceBase = __webpack_require__(4987);\n;// CONCATENATED MODULE: ../packages/react/src/classes/IdGenerator.ts\n/**\n * When using SSR, only `generateNodeId` should be allowed to run. It is okay\n * for `generateAtomSelectorId` to run, but auto-id'd selectors won't be\n * hydratable on the client (usually fine for inline selectors). Ecosystem ids\n * must be set manually\n *\n * To prevent Zedux from auto-id'ing AtomSelectors, use a shared function\n * reference. When using AtomSelectorConfig objects, make sure the object\n * reference itself is shared. In both cases, the function must have a unique\n * name.\n *\n * ```ts\n * // examples that will be auto-id'd:\n * useAtomSelector(({ get }) => get(myAtom)) // inline function ref can't be shared and has no name\n * const mySelector = { // this object reference can be shared...\n *   selector: ({ get }) => get(myAtom) // ...but the function has a generic name\n * }\n *\n * // examples where ids will be generated predictably based on params:\n * const mySelector = ({ get }) => get(myAtom) // function has a name and ref can be shared\n * const mySelector = { // this ref can be shared...\n *   selector: function mySelector({ get }) { // ...and the function has a name\n *     return get(myAtom)\n *   }\n * }\n * const mySelector = { // this ref can be shared...\n *   name: 'mySelector', // ...and we set the `name` config option\n *   selector: ({ get }) => get(myAtom)\n * }\n * ```\n */var IdGenerator=/*#__PURE__*/function(){function IdGenerator(){var _this=this;this.idCounter=0;this.weakCache=new WeakMap();this.generateId=function(prefix){return prefix+\"-\"+ ++_this.idCounter+Math.random().toString(16).slice(2,14);};}var _proto=IdGenerator.prototype;_proto.generateAtomSelectorId=function generateAtomSelectorId(name){if(name===void 0){name='';}if(!name){name= true?'unknownSelector':0;}return this.generateId(\"@@selector-\"+name);};_proto.generateEcosystemId=function generateEcosystemId(){return this.generateId('es');};_proto.generateNodeId=function generateNodeId(){return this.generateId('no');}/**\n   * Generate a graph node key for a React component\n   */;_proto.generateReactComponentId=function generateReactComponentId(){var _lines$find;if(false){}var _Error=new Error(),stack=_Error.stack;if(!stack)return'';var lines=stack.split('\\n').slice(2).map(function(line){return line.trim().replace('at ','').replace(/ \\(.*\\)/,'');});var componentName=(_lines$find=lines.find(function(line){if(!/\\w/.test(line[0]))return false;var identifiers=line.split('.');var fn=identifiers[identifiers.length-1];return fn[0].toUpperCase()===fn[0];}))==null?void 0:_lines$find.split(' ')[0];return this.generateId(componentName||'UnknownComponent');}/**\n   * Turn an array of anything into a predictable string. If any item is an atom\n   * instance, it will be serialized as the instance's keyHash. If\n   * acceptComplexParams is true, map class instances and functions to a\n   * consistent id for the reference.\n   *\n   * Note that recursive objects are not supported - they would add way too much\n   * overhead here and are really just unnecessary.\n   */;_proto.hashParams=function hashParams(params,acceptComplexParams){var _this2=this;return JSON.stringify(params,function(_,param){if((0,general.is)(param,AtomInstanceBase/* AtomInstanceBase */.T))return param.keyHash;if(!param)return param;if(!(0,utils_general/* isPlainObject */.PO)(param)){if(!acceptComplexParams||Array.isArray(param))return param;if(typeof param==='function')return _this2.cacheFn(param);if(typeof(param==null?void 0:param.constructor)==='function'){return _this2.cacheClass(param);}return param;// let engine try resolve it or throw the error\n}return Object.keys(param).sort().reduce(function(result,key){result[key]=param[key];return result;},{});});};_proto.cacheClass=function cacheClass(instance){var id=this.weakCache.get(instance);if(id)return id;id=this.generateId(instance.constructor.name||'UnknownClass');this.weakCache.set(instance,id);return id;};_proto.cacheFn=function cacheFn(fn){var id=this.weakCache.get(fn);if(id)return id;id=this.generateId(fn.name||'anonFn');this.weakCache.set(fn,id);return id;};return IdGenerator;}();\n;// CONCATENATED MODULE: ../packages/react/src/classes/Scheduler.ts\nvar Scheduler=/*#__PURE__*/function(){// private _runStartTime?: number\nfunction Scheduler(ecosystem){this.scheduledJobs=[];this.ecosystem=ecosystem;}/**\n   * Kill any current timeout and run all jobs immediately.\n   *\n   * IMPORTANT: Setting and clearing timeouts is expensive. We need to always\n   * pass `shouldSetTimeout: false` to scheduler.scheduleJob() when we're going\n   * to immediately flush\n   */var _proto=Scheduler.prototype;_proto.flush=function flush(){if(this._isRunning)return;// already flushing\nif(this._jobTimeoutId)clearTimeout(this._jobTimeoutId);this.runJobs();}/**\n   * Insert a job into the queue. Insertion point depends on job's type and\n   * weight.\n   *\n   * IMPORTANT: Setting and clearing timeouts is expensive. We need to always\n   * pass `shouldSetTimeout: false` when we're going to immediately flush\n   */;_proto.scheduleJob=function scheduleJob(newJob,shouldSetTimeout){if(shouldSetTimeout===void 0){shouldSetTimeout=true;}if(newJob.type===utils_types/* JobType.RunEffect */.O.RunEffect){this.scheduledJobs.push(newJob);}else if(newJob.type===utils_types/* JobType.EvaluateNode */.O.EvaluateNode){this.insertEvaluateNodeJob(newJob);}else{this.insertUpdateExternalDependentJob(newJob);}// we just pushed the first job onto the queue\nif(shouldSetTimeout&&this.scheduledJobs.length===1){this.setTimeout();}};_proto.unscheduleJob=function unscheduleJob(task){this.scheduledJobs=this.scheduledJobs.filter(function(job){return job.task!==task;});};_proto.wipe=function wipe(){// allow external jobs to proceed. TODO: should we flush here?\nthis.scheduledJobs=this.scheduledJobs.filter(function(job){return job.type===utils_types/* JobType.UpdateExternalDependent */.O.UpdateExternalDependent;});}// An O(log n) replacement for this.scheduledJobs.findIndex()\n;_proto.findInsertionIndex=function findInsertionIndex(cb,index,iteration){if(index===void 0){index=Math.ceil(this.scheduledJobs.length/2)-1;}if(iteration===void 0){iteration=1;}var job=this.scheduledJobs[index];if(typeof job==='undefined')return index;var direction=cb(job);if(!direction)return index;var divisor=Math.pow(2,iteration);var isDone=divisor>this.scheduledJobs.length;if(isDone){return index+(direction===1?1:0);}var effectualSize=Math.round(this.scheduledJobs.length/divisor);var newIndex=Math.min(this.scheduledJobs.length-1,Math.max(0,index+Math.ceil(effectualSize/2)*direction));return this.findInsertionIndex(cb,newIndex,iteration+1);}// EvaluateNode jobs go before any other job type and are sorted amongst\n// themselves by weight - lower weight evaluated first\n;_proto.insertEvaluateNodeJob=function insertEvaluateNodeJob(newJob){var nodes=this.ecosystem._graph.nodes;var newJobGraphNode=nodes[newJob.keyHash];var index=this.findInsertionIndex(function(job){if(job.type!==utils_types/* JobType.EvaluateNode */.O.EvaluateNode)return-1;var thatJobGraphNode=nodes[job.keyHash];return newJobGraphNode.weight<thatJobGraphNode.weight?-1:+(newJobGraphNode.weight>thatJobGraphNode.weight);});if(index===-1){this.scheduledJobs.push(newJob);return;}this.scheduledJobs.splice(index,0,newJob);}// UpdateExternalDependent jobs go just after EvaluateNode jobs, but before\n// anything else (there is only one other job type right now - RunEffect)\n;_proto.insertUpdateExternalDependentJob=function insertUpdateExternalDependentJob(newJob){var index=this.findInsertionIndex(function(job){if(job.type===utils_types/* JobType.EvaluateNode */.O.EvaluateNode)return 1;if(job.type!==utils_types/* JobType.UpdateExternalDependent */.O.UpdateExternalDependent)return-1;return newJob.flags<job.flags?-1:+(newJob.flags>job.flags);});if(index===-1){this.scheduledJobs.push(newJob);return;}this.scheduledJobs.splice(index,0,newJob);};_proto.runJobs=function runJobs(){this._jobTimeoutId=undefined;// this._runStartTime = performance.now()\n// let counter = 0\nthis._isRunning=true;while(this.scheduledJobs.length){var job=this.scheduledJobs.shift();job.task();// if (!(++counter % 20) && performance.now() - this._runStartTime >= 100) {\n//   setTimeout(() => this.runJobs())\n//   break\n// }\n}this._isRunning=false;};_proto.setTimeout=function(_setTimeout){function setTimeout(){return _setTimeout.apply(this,arguments);}setTimeout.toString=function(){return _setTimeout.toString();};return setTimeout;}(function(){var _this=this;if(this._isRunning)return;this._jobTimeoutId=setTimeout(function(){_this.runJobs();});});return Scheduler;}();\n;// CONCATENATED MODULE: ../packages/react/src/classes/SelectorCache.ts\nvar defaultResultsComparator=function defaultResultsComparator(a,b){return a===b;};var SelectorCacheInstance=function SelectorCacheInstance(cacheKey,selectorRef,args){this.nextEvaluationReasons=[];this.cacheKey=cacheKey;this.selectorRef=selectorRef;this.args=args;};/**\n * Since AtomSelectors are meant to feel lightweight, they don't have to be\n * instances of a class - they'll often be freestanding or even inline\n * functions. This class handles all the logic that AtomSelectors would handle\n * themselves if they were classes - creation, cache management, and\n * destruction.\n */SelectorCacheInstance.$$typeof=Symbol.for('@@react/zedux/SelectorCache');var SelectorCache=/*#__PURE__*/function(){/**\n   * Map selectorKey+params keyHash strings to the cached params and result for\n   * the selector\n   */ /**\n   * Map selectors (or selector config objects) to a base selectorKey that can\n   * be used to predictably create selectorKey+params keyHashes to look up the\n   * cache in `this._caches`\n   */function SelectorCache(ecosystem){this._caches={};this._refBaseKeys=new WeakMap();this.ecosystem=ecosystem;}var _proto=SelectorCache.prototype;_proto.addDependent=function addDependent(cache,_temp){var _this=this;var _ref=_temp===void 0?{}:_temp,callback=_ref.callback,_ref$operation=_ref.operation,operation=_ref$operation===void 0?'addDependent':_ref$operation;var id=this.ecosystem._idGenerator.generateNodeId();this.ecosystem._graph.addEdge(id,cache.cacheKey,operation,types/* EdgeFlag.Explicit */.d.Explicit|types/* EdgeFlag.External */.d.External,callback);return function(){return _this.ecosystem._graph.removeEdge(id,cache.cacheKey);};};/**\n   * Destroys the cache for the given selector + args combo (if it exists).\n   *\n   * Destruction bails out by default if the selector's ref count is > 0. Pass\n   * `true` as the 3rd param to force destruction.\n   */_proto.destroyCache=function destroyCache(selectable,args,force){var cacheKey=(0,general.is)(selectable,SelectorCacheInstance)?selectable.cacheKey:this.getCacheKey(selectable,args);var cache=(0,general.is)(selectable,SelectorCacheInstance)?selectable:this._caches[cacheKey];if(!cache)return;var node=this.ecosystem._graph.nodes[cacheKey];if(!force&&Object.keys((node==null?void 0:node.dependents)||{}).length)return;this._destroySelector(cacheKey);};/**\n   * Get the cached args and result for the given AtomSelector (or\n   * AtomSelectorConfig). Runs the selector, sets up the graph, and caches the\n   * initial value if this selector hasn't been cached before.\n   */_proto.getCache=function getCache(selectable,args){if(args===void 0){args=[];}if((0,general.is)(selectable,SelectorCacheInstance)){return selectable;}var selectorOrConfig=selectable;var cacheKey=this.getCacheKey(selectorOrConfig,args);var cache=this._caches[cacheKey];if(cache)return cache;// create the cache; it doesn't exist yet\ncache=new SelectorCacheInstance(cacheKey,selectorOrConfig,args);this._caches[cacheKey]=cache;this.ecosystem._graph.addNode(cacheKey,true);this.runSelector(cacheKey,args,true);return cache;};/**\n   * Get the fully qualified key hash for the given selector+params combo\n   */_proto.getCacheKey=function getCacheKey(selectorOrConfig,args,weak){var baseKey=this.getBaseKey(selectorOrConfig,weak);return args!=null&&args.length?baseKey+\"-\"+this.ecosystem._idGenerator.hashParams(args,this.ecosystem.complexSelectorParams):baseKey;}/**\n   * Get the string key we would ideally use as the cacheKey of the given\n   * AtomSelector function or AtomSelectorConfig object - doesn't necessarily\n   * mean we end up caching using this key.\n   */;_proto.getIdealCacheKey=function getIdealCacheKey(selectorOrConfig){var _selector;var idealKey=selectorOrConfig.name||((_selector=selectorOrConfig.selector)==null?void 0:_selector.name);// 'selector' is too generic (it's the key in AtomSelectorConfig objects)\nreturn idealKey!=='selector'&&idealKey||undefined;}/**\n   * Get an object of all currently-cached AtomSelectors.\n   *\n   * Pass a selector reference or string to filter by caches whose cacheKey\n   * weakly matches the passed selector name.\n   */;_proto.inspectCaches=function inspectCaches(selectableOrName){var hash={};var filterKey=!selectableOrName||typeof selectableOrName==='string'?selectableOrName:(0,general.is)(selectableOrName,SelectorCacheInstance)?selectableOrName.cacheKey:this.getBaseKey(selectableOrName,true)||this.getIdealCacheKey(selectableOrName);Object.values(this._caches).sort(function(a,b){return a.cacheKey.localeCompare(b.cacheKey);}).forEach(function(instance){if(filterKey&&!instance.cacheKey.includes(filterKey)){return;}hash[instance.cacheKey]=instance;});return hash;}/**\n   * Get an object mapping all cacheKeys in this selectorCache to their current\n   * values.\n   *\n   * Pass an atom or atom key string to only return instances whose keyHash\n   * weakly matches the passed key.\n   */;_proto.inspectCacheValues=function inspectCacheValues(selectableOrName){var hash=this.inspectCaches(selectableOrName);// We just created the object. Just mutate it.\nObject.keys(hash).forEach(function(cacheKey){hash[cacheKey]=hash[cacheKey].result;});return hash;};/**\n   * Tell Zedux the data for the given selector + args combo is stale - the\n   * AtomSelector needs to be rerun.\n   *\n   * Zedux uses this internally. AtomSelectors usually subscribe to anything\n   * that should make them rerun. You shouldn't need to call this yourself.\n   */_proto.invalidateCache=function invalidateCache(selectable,args){var cache=this.weakGetCache(selectable,args);if(!cache)return;this._scheduleEvaluation(cache.cacheKey,{operation:'invalidateCache',type:'cache invalidated',sourceType:'External'},0,false);this.ecosystem._scheduler.flush();}/**\n   * Get the cache for the given selector. Don't create it if it doesn't exist,\n   * just return undefined.\n   */;_proto.weakGetCache=function weakGetCache(selectable,args){if((0,general.is)(selectable,SelectorCacheInstance)){return selectable;}var cacheKey=this.getCacheKey(selectable,args,true);if(!cacheKey)return;return this._caches[cacheKey];}/**\n   * Destroy all cached selectors. Should probably only be used internally.\n   * Prefer `ecosystem.reset()`.\n   */;_proto.wipe=function wipe(){var _this2=this;Object.keys(this._caches).forEach(function(cacheKey){_this2._destroySelector(cacheKey);});this._refBaseKeys=new WeakMap();}/**\n   * Should only be used internally. Removes the selector from the cache and\n   * the graph\n   */;_proto._destroySelector=function _destroySelector(cacheKey){var cache=this._caches[cacheKey];if(!cache)return;// shouldn't happen\nif(cache.nextEvaluationReasons.length&&cache.task){this.ecosystem._scheduler.unscheduleJob(cache.task);}this.ecosystem._graph.removeDependencies(cacheKey);this.ecosystem._graph.removeNode(cacheKey);delete this._caches[cacheKey];cache.isDestroyed=true;this._refBaseKeys.delete(cache.selectorRef);}/**\n   * Should only be used internally\n   */;_proto._scheduleEvaluation=function _scheduleEvaluation(cacheKey,reason,flags,shouldSetTimeout){var _this3=this;var cache=this._caches[cacheKey];// TODO: Any calls in this case probably indicate a memory leak on the\n// user's part. Notify them.\nif(!cache)return;cache.nextEvaluationReasons.push(reason);if(cache.nextEvaluationReasons.length>1)return;// job already scheduled\nvar task=function task(){cache.task=undefined;_this3.runSelector(cacheKey,cache.args);};cache.task=task;this.ecosystem._scheduler.scheduleJob({flags:flags,keyHash:cacheKey,task:task,type:utils_types/* JobType.EvaluateNode */.O.EvaluateNode},shouldSetTimeout);}/**\n   * Should only be used internally\n   */;_proto._swapRefs=function _swapRefs(oldRef,newRef,args){var existingCache=this.weakGetCache(oldRef,args);var baseKey=this._refBaseKeys.get(oldRef);if(!existingCache||!baseKey)return;this._refBaseKeys.set(newRef,baseKey);existingCache.selectorRef=newRef;this.runSelector(existingCache.cacheKey,args);}/**\n   * Get a base key that can be used to generate consistent cacheKeys for the\n   * given selector\n   */;_proto.getBaseKey=function getBaseKey(selectorOrConfig,weak){var existingId=this._refBaseKeys.get(selectorOrConfig);if(existingId||weak)return existingId;var idealKey=this.getIdealCacheKey(selectorOrConfig);var prefixedKey=\"@@selector-\"+idealKey;var keyExists=this._caches[prefixedKey];// if the ideal key is taken, generate a new hash prefixed with the ideal key\nvar key=!idealKey||keyExists?this.ecosystem._idGenerator.generateAtomSelectorId(idealKey):prefixedKey;this._refBaseKeys.set(selectorOrConfig,key);return key;}/**\n   * Run an AtomSelector and, depending on the selector's resultsComparator,\n   * update its cached result. Updates the graph efficiently (using\n   * `.bufferUpdates()`)\n   */;_proto.runSelector=function runSelector(cacheKey,args,isInitializing){this.ecosystem._graph.bufferUpdates(cacheKey);var cache=this._caches[cacheKey];this.ecosystem._evaluationStack.start(cache);var selector=typeof cache.selectorRef==='function'?cache.selectorRef:cache.selectorRef.selector;var resultsComparator=typeof cache.selectorRef!=='function'&&cache.selectorRef.resultsComparator||defaultResultsComparator;try{var result=selector.apply(void 0,[this.ecosystem._evaluationStack.atomGetters].concat(args));if(!isInitializing&&!resultsComparator(result,cache.result)){this.ecosystem._graph.scheduleDependents(cacheKey,cache.nextEvaluationReasons,result,cache.result);if(this.ecosystem._mods.stateChanged){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.stateChanged */.V.stateChanged({newState:result,oldState:cache.result,reasons:cache.nextEvaluationReasons,selectorCache:cache}));}cache.result=result;}else if(isInitializing){cache.result=result;}}catch(err){this.ecosystem._graph.destroyBuffer();console.error(\"Zedux encountered an error while running AtomSelector with key \\\"\"+cacheKey+\"\\\":\",err);throw err;}finally{this.ecosystem._evaluationStack.finish();cache.prevEvaluationReasons=cache.nextEvaluationReasons;cache.nextEvaluationReasons=[];}this.ecosystem._graph.flushUpdates();};return SelectorCache;}();\n;// CONCATENATED MODULE: ../packages/react/src/classes/Ecosystem.ts\nvar defaultMods=Object.keys(plugin_actions/* pluginActions */.V).reduce(function(map,mod){map[mod]=0;return map;},{});var mapOverrides=function mapOverrides(overrides){return overrides.reduce(function(map,atom){map[atom.key]=atom;return map;},{});};var ecosystemContext=/*#__PURE__*/(0,react.createContext)('global');var Ecosystem=/*#__PURE__*/function(){// use an empty store as a message bus\nfunction Ecosystem(_ref){var complexAtomParams=_ref.complexAtomParams,complexSelectorParams=_ref.complexSelectorParams,consumeHydrations=_ref.consumeHydrations,context=_ref.context,defaultTtl=_ref.defaultTtl,destroyOnUnmount=_ref.destroyOnUnmount,flags=_ref.flags,id=_ref.id,onReady=_ref.onReady,overrides=_ref.overrides,ssr=_ref.ssr;this._destroyOnUnmount=false;this._graph=new Graph(this);this._evaluationStack=new EvaluationStack/* EvaluationStack */.O(this);this._idGenerator=new IdGenerator();this._instances={};this._mods=Object.assign({},defaultMods);this._reactContexts={};this._refCount=0;this._scheduler=new Scheduler(this);this.selectorCache=new SelectorCache(this);this.modBus=(0,createStore/* createStore */.M)();this.overrides={};this.isInitialized=false;this.plugins=[];if( true&&flags&&!Array.isArray(flags)){throw new TypeError(\"Zedux: The Ecosystem's `flags` property must be an array of strings\");}if( true&&overrides&&!Array.isArray(overrides)){throw new TypeError(\"Zedux: The Ecosystem's `overrides` property must be an array of Atom objects\");}this.ecosystemId=id||this._idGenerator.generateEcosystemId();if(overrides){this.setOverrides(overrides);}this.consumeHydrations=consumeHydrations;this.flags=flags;this.complexAtomParams=!!complexAtomParams;this.complexSelectorParams=!!complexSelectorParams;this.context=context;this.defaultTtl=defaultTtl!=null?defaultTtl:-1;this.ssr=ssr;this._destroyOnUnmount=!!destroyOnUnmount;this._onReady=onReady;this.isInitialized=true;this.cleanup=onReady==null?void 0:onReady(this);}/**\n   * Merge the passed atom overrides into the ecosystem's current list of\n   * overrides. Force-destroys all atom instances currently in the ecosystem\n   * that should now be overridden.\n   *\n   * This can't be used to remove overrides. Use `.setOverrides()` or\n   * `.removeOverrides()` for that.\n   */var _proto=Ecosystem.prototype;_proto.addOverrides=function addOverrides(overrides){var _this=this;this.overrides=Object.assign({},this.overrides,mapOverrides(overrides));overrides.forEach(function(override){var instances=_this.inspectInstances(override);Object.values(instances).forEach(function(instance){return instance.destroy(true);});});}/**\n   * Retrieve an object mapping atom instance keyHashes to their current values.\n   * Uses the `dehydrate` atom config option when specified to transform state\n   * to a serializable form.\n   *\n   * Atoms can be excluded from dehydration by passing `exclude` and/or\n   * `excludeFlags` options:\n   *\n   * ```ts\n   * myEcosystem.dehydrate({\n   *   exclude: [myAtom, 'my-fuzzy-search-string'],\n   *   excludeFlags: ['no-ssr']\n   * })\n   * ```\n   *\n   * An atom passed to `exclude` will exclude all instances of that atom. A\n   * string passed to `exclude` will exclude all instances whose keyHash\n   * contains the string (case-insensitive)\n   *\n   * You can dehydrate only a subset of all atoms by passing `include` and/or\n   * `includeFlags` options:\n   *\n   * ```ts\n   * myEcosystem.dehydrate({\n   *   include: [myAtom, 'my-fuzzy-search-string'],\n   *   includeFlags: ['ssr']\n   * })\n   * ```\n   *\n   * An atom passed to `include` will include all instances of that atom. A\n   * string passed to `include` will include all instances whose keyHash\n   * contains the string (case-insensitive)\n   *\n   * Exclude takes precedence over include\n   */;_proto.dehydrate=function dehydrate(_temp){var _ref2=_temp===void 0?{}:_temp,exclude=_ref2.exclude,excludeFlags=_ref2.excludeFlags,include=_ref2.include,includeFlags=_ref2.includeFlags;var instances=Object.values(this._instances).filter(function(instance){if(exclude&&exclude.some(function(atomOrKey){return typeof atomOrKey==='string'?instance.keyHash.toLowerCase().includes(atomOrKey.toLowerCase()):instance.atom.key===atomOrKey.key;})){return false;}if(excludeFlags&&excludeFlags.some(function(flag){var _instance$atom$flags;return(_instance$atom$flags=instance.atom.flags)==null?void 0:_instance$atom$flags.includes(flag);})){return false;}if(!include&&!includeFlags)return true;if(include&&include.some(function(atomOrKey){return typeof atomOrKey==='string'?instance.keyHash.toLowerCase().includes(atomOrKey.toLowerCase()):instance.atom.key===atomOrKey.key;})){return true;}if(includeFlags&&includeFlags.some(function(flag){var _instance$atom$flags2;return(_instance$atom$flags2=instance.atom.flags)==null?void 0:_instance$atom$flags2.includes(flag);})){return true;}return false;});return Object.fromEntries(instances.map(function(instance){var state=instance.store.getState();return[instance.keyHash,instance.atom.dehydrate?instance.atom.dehydrate(state):state];}));}/**\n   * Destroy this ecosystem - destroy all this ecosystem's atom instances,\n   * remove and clean up all plugins, and remove this ecosystem from the\n   * zeduxGlobalStore.\n   *\n   * Destruction will bail out by default if this ecosystem is still being\n   * provided via an <EcosystemProvider>. Pass `true` as the first parameter to\n   * force destruction anyway.\n   */;_proto.destroy=function destroy(force){if(!force&&this._refCount>0)return;this.wipe();// Check if this ecosystem has been destroyed already\nvar ecosystem=store/* globalStore.getState */.cr.getState().ecosystems[this.ecosystemId];if(!ecosystem)return;if(this._mods.ecosystemDestroyed){this.modBus.dispatch(plugin_actions/* pluginActions.ecosystemDestroyed */.V.ecosystemDestroyed({ecosystem:this}));}this.plugins.forEach(function(_ref3){var cleanup=_ref3.cleanup;return cleanup();});this.plugins=[];store/* globalStore.dispatch */.cr.dispatch((0,actions/* removeEcosystem */.D$)({ecosystemId:this.ecosystemId}));};/**\n   * Returns an atom instance's value. Creates the atom instance if it doesn't\n   * exist yet. Doesn't register any graph dependencies.\n   */_proto.get=function get(atom,params){if((0,general.is)(atom,AtomInstanceBase/* AtomInstanceBase */.T)){return atom.store.getState();}var instance=this.getInstance(atom,params);return instance.store.getState();};/**\n   * Returns an atom instance. Creates the atom instance if it doesn't exist\n   * yet. Doesn't register any graph dependencies.\n   */_proto.getInstance=function getInstance(atom,params){if((0,general.is)(atom,AtomInstanceBase/* AtomInstanceBase */.T))return atom;var keyHash=atom.getKeyHash(this,params);// try to find an existing instance\nvar existingInstance=this._instances[keyHash];if(existingInstance)return existingInstance;// create a new instance\nvar resolvedAtom=this.resolveAtom(atom);this._graph.addNode(keyHash);var newInstance=resolvedAtom._createInstance(this,keyHash,params||[]);this._instances[keyHash]=newInstance;newInstance._init();return newInstance;}/**\n   * Hydrate the state of atoms in this ecosystem with an object mapping atom\n   * instance keyHashes to their hydrated state. This object will usually be the\n   * result of a call to `ecosystem.dehydrate()`.\n   *\n   * This is the key to SSR. The ecosystem's initial state can be dehydrated on\n   * the server, sent to the client in serialized form, deserialized, and passed\n   * to `ecosystem.hydrate()`. Every atom instance that evaluates after this\n   * hydration can use the `hydrate` injectStore config option to retrieve its\n   * hydrated state.\n   *\n   * Pass `retroactive: false` to prevent this call from updating the state of\n   * all atom instances that have already been initialized with this new\n   * hydration. Hydration is retroactive by default.\n   *\n   * ```ts\n   * ecosystem.hydrate(dehydratedState, { retroactive: false })\n   * ```\n   */;_proto.hydrate=function hydrate(dehydratedState,config){var _this2=this;this.hydration=Object.assign({},this.hydration,dehydratedState);if((config==null?void 0:config.retroactive)===false)return;Object.entries(dehydratedState).forEach(function(_ref4){var key=_ref4[0],val=_ref4[1];var instance=_this2._instances[key];if(!instance)return;instance.setState(instance.atom.hydrate?instance.atom.hydrate(val):val);if(_this2.consumeHydrations){var _this2$hydration;(_this2$hydration=_this2.hydration)==null?true:delete _this2$hydration[key];}});};/**\n   * Get the current graph of this ecosystem. There are 3 views:\n   *\n   * Flat (default). Returns an object with all graph nodes on the top layer,\n   * each node pointing to its dependencies and dependents. No nesting.\n   *\n   * Bottom-Up. Returns an object containing all the leaf nodes of the graph\n   * (nodes that have no internal dependents), each node containing an object of\n   * its parent nodes, recursively.\n   *\n   * Top-Down. Returns an object containing all the root nodes of the graph\n   * (nodes that have no dependencies), each node containing an object of its\n   * child nodes, recursively.\n   */_proto.inspectGraph=function inspectGraph(view){var _this3=this;if(view!=='top-down'&&view!=='bottom-up'){var _hash={};Object.keys(this._graph.nodes).forEach(function(cacheKey){var node=_this3._graph.nodes[cacheKey];_hash[cacheKey]={dependencies:Object.keys(node.dependencies).map(function(key){return{key:key,operation:_this3._graph.nodes[key].dependents[cacheKey].operation};}),dependents:Object.keys(node.dependents).map(function(key){return{key:key,operation:node.dependents[key].operation};})};});return _hash;}var hash={};Object.keys(this._graph.nodes).forEach(function(key){var node=_this3._graph.nodes[key];var isTopLevel=view==='bottom-up'?Object.keys(node.dependents).every(function(key){var dependent=node.dependents[key];return dependent.flags&types/* EdgeFlag.External */.d.External;}):!Object.keys(node.dependencies).length;if(isTopLevel){hash[key]={};}});var recurse=function recurse(node){if(!node)return;var keys=Object.keys(view==='bottom-up'?node.dependencies:node.dependents);var children={};keys.forEach(function(key){var child=recurse(_this3._graph.nodes[key]);if(child)children[key]=child;});return children;};Object.keys(hash).forEach(function(key){var node=_this3._graph.nodes[key];var children=recurse(node);if(children)hash[key]=children;});return hash;}/**\n   * Get an object of all atom instances in this ecosystem.\n   *\n   * Pass an atom or atom key string to only return instances whose keyHash\n   * weakly matches the passed key.\n   */;_proto.inspectInstances=function inspectInstances(atom){var isAtom=atom==null?void 0:atom.key;var filterKey=isAtom?atom==null?void 0:atom.key:atom;var hash={};Object.values(this._instances).sort(function(a,b){return a.keyHash.localeCompare(b.keyHash);}).forEach(function(instance){if(filterKey&&(isAtom?instance.atom.key!==filterKey:!instance.keyHash.toLowerCase().includes(filterKey))){return;}hash[instance.keyHash]=instance;});return hash;}/**\n   * Get an object mapping all atom instance keyHashes in this ecosystem to\n   * their current values.\n   *\n   * Pass an atom or atom key string to only return instances whose keyHash\n   * weakly matches the passed key.\n   */;_proto.inspectInstanceValues=function inspectInstanceValues(atom){var hash=this.inspectInstances(atom);// We just created the object. Just mutate it.\nObject.keys(hash).forEach(function(key){hash[key]=hash[key].store.getState();});return hash;}/**\n   * Add a ZeduxPlugin to this ecosystem. This ecosystem will subscribe to the\n   * plugin's modStore, whose state can be changed to reactively update the mods\n   * of this ecosystem.\n   *\n   * This method will also call the passed plugin's `.registerEcosystem` method,\n   * allowing the plugin to subscribe to this ecosystem's modBus\n   *\n   * The plugin will remain part of this ecosystem until it is unregistered or\n   * this ecosystem is destroyed. `.wipe()` and `.reset()` don't remove plugins.\n   */;_proto.registerPlugin=function registerPlugin(plugin){var _this4=this;if(this.plugins.some(function(descriptor){return descriptor.plugin===plugin;}))return;var subscription=plugin.modsStore.subscribe(function(newState,oldState){_this4.recalculateMods(newState,oldState);});var cleanupRegistration=plugin.registerEcosystem(this);var cleanup=function cleanup(){subscription.unsubscribe();if(cleanupRegistration)cleanupRegistration();};this.plugins.push({plugin:plugin,cleanup:cleanup});this.recalculateMods(plugin.modsStore.getState());}/**\n   * Remove all passed atoms from this ecosystem's list of atom overrides. Does\n   * nothing for passed atoms that aren't currently in the overrides list.\n   *\n   * Force destroys all instances of all removed atoms. This forced destruction\n   * will cause dependents of those instances to recreate their dependency atom\n   * instance without using an override.\n   */;_proto.removeOverrides=function removeOverrides(overrides){var _this5=this;this.overrides=mapOverrides(Object.values(this.overrides).filter(function(atom){return overrides.every(function(override){var key=typeof override==='string'?override:override.key;return key!==atom.key;});}));overrides.forEach(function(override){var instances=_this5.inspectInstances(override);Object.values(instances).forEach(function(instance){return instance.destroy(true);});});}/**\n   * Destroys all atom instances in this ecosystem, runs the cleanup function\n   * returned from `onReady` (if any), and calls `onReady` again to reinitialize\n   * the ecosystem.\n   */;_proto.reset=function reset(newContext){var _this$_onReady;this.wipe();var prevContext=this.context;if(typeof newContext!=='undefined')this.context=newContext;this.cleanup=(_this$_onReady=this._onReady)==null?void 0:_this$_onReady.call(this,this,prevContext);}/**\n   * Runs an AtomSelector statically - without registering any dependencies or\n   * updating any caches. If we've already cached this exact selector + args\n   * combo, returns the cached value without running the selector again\n   */;_proto.select=function select(selectable){if((0,general.is)(selectable,SelectorCacheInstance)){return selectable.result;}var atomSelector=selectable;for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var cache=this.selectorCache.weakGetCache(atomSelector,args);if(cache)return cache.result;var resolvedSelector=typeof atomSelector==='function'?atomSelector:atomSelector.selector;return resolvedSelector.apply(void 0,[{ecosystem:this,get:this.get.bind(this),getInstance:this.getInstance.bind(this),select:this.select.bind(this)}].concat(args));}/**\n   * Completely replace this ecosystem's current list of atom overrides with a\n   * new list.\n   *\n   * Force destroys all instances of all previously- and newly-overridden atoms.\n   * This forced destruction will cause dependents of those instances to\n   * recreate their dependency atom instance.\n   */;_proto.setOverrides=function setOverrides(newOverrides){var _this6=this;var oldOverrides=this.overrides;this.overrides=mapOverrides(newOverrides);if(!this.isInitialized)return;newOverrides.forEach(function(atom){var instances=_this6.inspectInstances(atom);Object.values(instances).forEach(function(instance){instance.destroy(true);});});if(!oldOverrides)return;Object.values(oldOverrides).forEach(function(atom){var instances=_this6.inspectInstances(atom);Object.values(instances).forEach(function(instance){instance.destroy(true);});});}/**\n   * Unregister a plugin registered in this ecosystem via `.registerPlugin()`\n   */;_proto.unregisterPlugin=function unregisterPlugin(plugin){var index=this.plugins.findIndex(function(descriptor){return descriptor.plugin===plugin;});if(index===-1)return;this.plugins[index].cleanup();this.plugins.splice(index,1);this.recalculateMods(undefined,plugin.modsStore.getState());}/**\n   * Get an atom instance value. Don't create the atom instance if it doesn't\n   * exist. Don't register any graph dependencies.\n   */;_proto.weakGet=function weakGet(atom,params){var instance=this.weakGetInstance(atom,params);return instance==null?void 0:instance.store.getState();}/**\n   * Get an atom instance. Don't create the atom instance if it doesn't exist.\n   * Don't register any graph dependencies.\n   */;_proto.weakGetInstance=function weakGetInstance(atom,params){if(typeof atom!=='string'){var keyHash=atom.getKeyHash(this,params);// try to find an existing instance\nreturn this._instances[keyHash];}return Object.values(this.inspectInstances(atom))[0];}/**\n   * Returns the list of reasons detailing why the current atom instance or\n   * selector is evaluating.\n   *\n   * Returns undefined if nothing is currently evaluating. Returns an empty\n   * array if this is the first evaluation of the instance or selector.\n   */;_proto.why=function why(){var item=this._evaluationStack.read();if(!item)return;if(item.cache){return item.cache.nextEvaluationReasons;}return item.instance._nextEvaluationReasons;}/**\n   * Destroy all atom instances in this ecosystem. Also run the cleanup function\n   * returned from the onReady callback (if any). Don't remove plugins or re-run\n   * the onReady callback.\n   *\n   * Important! This method is mostly for internal use. You won't typically want\n   * to call this method. Prefer `.reset()` which re-runs the onReady callback\n   * after wiping the ecosystem, allowing onReady to re-initialize the ecosystem\n   * - preloading atoms, registering plugins, configuring context, etc\n   */;_proto.wipe=function wipe(){// call cleanup function first so it can configure the ecosystem for cleanup\nif(this.cleanup)this.cleanup();// TODO: Delete nodes in an optimal order, starting with nodes with no\n// internal dependents. This is different from highest-weighted nodes since\n// static dependents don't affect weight. This should make sure no internal\n// nodes schedule unnecessary reevaaluations to recreate force-destroyed\n// instances\nObject.values(this._instances).forEach(function(instance){instance.destroy(true);});this.hydration=undefined;this.selectorCache.wipe();this._scheduler.wipe();this._scheduler.flush();if(this._mods.ecosystemWiped){this.modBus.dispatch(plugin_actions/* pluginActions.ecosystemWiped */.V.ecosystemWiped({ecosystem:this}));}}// Should only be used internally\n;_proto._decrementRefCount=function _decrementRefCount(){this._refCount--;if(!this._destroyOnUnmount)return;this.destroy();// only destroys if _refCount === 0\n}// Should only be used internally\n;_proto._destroyAtomInstance=function _destroyAtomInstance(keyHash){// try to destroy instance (if not destroyed - this fn is called as part of\n// that destruction process too)\nthis._graph.removeNode(keyHash);delete this._instances[keyHash];// TODO: dispatch an action over globalStore for this mutation\n}// Should only be used internally\n;_proto._getReactContext=function _getReactContext(atom){var existingContext=this._reactContexts[atom.key];if(existingContext)return existingContext;var newContext=/*#__PURE__*/(0,react.createContext)(undefined);this._reactContexts[atom.key]=newContext;return newContext;}// Should only be used internally\n;_proto._incrementRefCount=function _incrementRefCount(){this._refCount++;};_proto.recalculateMods=function recalculateMods(newState,oldState){var _this7=this;if(oldState){Object.entries(oldState).forEach(function(_ref5){var key=_ref5[0],isModded=_ref5[1];if(isModded)_this7._mods[key]--;// fun fact, undefined-- is fine\n});}if(newState){Object.entries(newState).forEach(function(_ref6){var key=_ref6[0],isModded=_ref6[1];if(isModded)_this7._mods[key]++;});}};_proto.resolveAtom=function resolveAtom(atom){var _this$overrides,_this8=this;var override=(_this$overrides=this.overrides)==null?void 0:_this$overrides[atom.key];var maybeOverriddenAtom=override||atom;// to turn off flag checking, just don't pass a `flags` prop\nif(this.flags){var _maybeOverriddenAtom$;var badFlag=(_maybeOverriddenAtom$=maybeOverriddenAtom.flags)==null?void 0:_maybeOverriddenAtom$.find(function(flag){var _this8$flags;return!((_this8$flags=_this8.flags)!=null&&_this8$flags.includes(flag));});if( true&&badFlag){console.error(\"Zedux: encountered unsafe atom \\\"\"+atom.key+\"\\\" with flag \\\"\"+badFlag+\"\\\". This atom should be overridden in the current environment.\");}}return maybeOverriddenAtom;};return Ecosystem;}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5092\n")},2633:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"O\": function() { return /* binding */ EvaluationStack; },\n/* harmony export */   \"i\": function() { return /* binding */ readInstance; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6511);\n/* harmony import */ var _utils_plugin_actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3299);\n/**\n * A stack of AtomInstances and AtomSelectors that are currently evaluating -\n * innermost instance/selector (the one that's actually currently evaluating) at\n * the end of the array.\n *\n * This has to live in the module scope so `readInstance` can access it without\n * any ecosystem context. That's how injectors work.\n */var stack=[];var readInstance=function readInstance(){var item=stack[stack.length-1];if( true&&!(item!=null&&item.instance)){throw new Error('Zedux: Injectors can only be used in atom state factories');}return item.instance;};var EvaluationStack=/*#__PURE__*/function(){function EvaluationStack(ecosystem){var _this=this;this.ecosystem=ecosystem;var get=function get(atomOrInstance,params){var instance=ecosystem.getInstance(atomOrInstance,params);// when called outside AtomSelector evaluation, get() is just an alias for\n// ecosystem.get()\nif(!stack.length)return instance.store.getState();// if get is called during evaluation, track the required atom instances so\n// we can add graph edges for them\necosystem._graph.addEdge(stack[stack.length-1].key,instance.keyHash,'get',0);return instance.store.getState();};var getInstance=function getInstance(atomOrInstance,params,edgeInfo){var _edgeInfo$;var instance=ecosystem.getInstance(atomOrInstance,params);// when called outside AtomSelector evaluation, getInstance() is just an alias\n// for ecosystem.getInstance()\nif(!stack.length)return instance;// if getInstance is called during evaluation, track the required atom\n// instances so we can add graph edges for them\necosystem._graph.addEdge(stack[stack.length-1].key,instance.keyHash,(edgeInfo==null?void 0:edgeInfo[1])||'getInstance',(_edgeInfo$=edgeInfo==null?void 0:edgeInfo[0])!=null?_edgeInfo$:_types__WEBPACK_IMPORTED_MODULE_0__/* .EdgeFlag.Static */ .d.Static);return instance;};var select=function select(selectable){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}// when called outside AtomSelector evaluation, select() is just an alias for ecosystem.select()\nif(!stack.length){return ecosystem.select.apply(ecosystem,[selectable].concat(args));}var cache=_this.ecosystem.selectorCache.getCache(selectable,args);ecosystem._graph.addEdge(stack[stack.length-1].key,cache.cacheKey,'select',0);return cache.result;};this.atomGetters={ecosystem:ecosystem,get:get,getInstance:getInstance,select:select};}var _proto=EvaluationStack.prototype;_proto.isEvaluating=function isEvaluating(key){return stack.some(function(item){return item.key===key;});};_proto.finish=function finish(){var item=stack.pop();if(!item||!this.ecosystem._mods.evaluationFinished)return;var time=item.start?performance.now()-item.start:0;var action={time:time};if(item.instance){;action.instance=item.instance;}else if(item.cache){;action.cache=item.cache;}this.ecosystem.modBus.dispatch(_utils_plugin_actions__WEBPACK_IMPORTED_MODULE_1__/* .pluginActions.evaluationFinished */ .V.evaluationFinished(action));};_proto.read=function read(){return stack[stack.length-1];};_proto.start=function start(item){var newItem={};if(item.keyHash){newItem.key=item.keyHash;newItem.instance=item;}else{newItem.key=item.cacheKey;newItem.cache=item;}if(this.ecosystem._mods.evaluationFinished){newItem.start=performance.now();}stack.push(newItem);};return EvaluationStack;}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2633\n")},1968:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "h": function() { return /* binding */ Atom; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4578);\n/* harmony import */ var _zedux_react_factories_atom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5965);\n/* harmony import */ var _instances_AtomInstance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3096);\n/* harmony import */ var _StandardAtomBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6892);\nvar Atom=/*#__PURE__*/function(_StandardAtomBase){(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(Atom,_StandardAtomBase);function Atom(){return _StandardAtomBase.apply(this,arguments)||this;}var _proto=Atom.prototype;/**\n   * This method should be overridden when creating custom atom classes that\n   * create a custom atom instance class. Return a new instance of your atom\n   * instance class.\n   */_proto._createInstance=function _createInstance(ecosystem,keyHash,params){return new _instances_AtomInstance__WEBPACK_IMPORTED_MODULE_1__/* .AtomInstance */ .p(ecosystem,this,keyHash,params);};_proto.getKeyHash=function getKeyHash(ecosystem,params){var base=this.key;if(!(params!=null&&params.length))return base;return base+"-"+ecosystem._idGenerator.hashParams(params,ecosystem.complexAtomParams);};_proto.override=function override(newValue){return (0,_zedux_react_factories_atom__WEBPACK_IMPORTED_MODULE_2__/* .atom */ .c)(this.key,newValue,{flags:this.flags,maxInstances:this.maxInstances,ttl:this.ttl});};return Atom;}(_StandardAtomBase__WEBPACK_IMPORTED_MODULE_3__/* .StandardAtomBase */ .a);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk2OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT08sR0FBTUcsS0FBSSx3VEFPZjtBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBSkUsT0FLT0MsZUFBZSxDQUF0Qix5QkFDRUMsU0FBb0IsQ0FDcEJDLE9BQWUsQ0FDZkMsTUFBYyxDQUNnRCxDQUM5RCxNQUFPLElBQUlOLENBQUFBLDBFQUFZLENBQ3JCSSxTQUFTLENBQ1QsSUFBSSxDQUNKQyxPQUFPLENBQ1BDLE1BQU0sQ0FDUCxDQUNILENBQUMsUUFFTUMsVUFBVSxDQUFqQixvQkFBa0JILFNBQW9CLENBQUVFLE1BQWUsQ0FBRSxDQUN2RCxHQUFNRSxLQUFJLENBQUcsSUFBSSxDQUFDQyxHQUFHLENBRXJCLEdBQUksRUFBQ0gsTUFBTSxRQUFOQSxNQUFNLENBQUVJLE1BQU0sRUFBRSxNQUFPRixLQUFJLENBRWhDLE1BQVVBLEtBQUksS0FBSUosU0FBUyxDQUFDTyxZQUFZLENBQUNDLFVBQVUsQ0FDakROLE1BQU0sQ0FDTkYsU0FBUyxDQUFDUyxpQkFBaUIsQ0FDNUIsQ0FDSCxDQUFDLFFBRU1DLFFBQVEsQ0FBZixrQkFDRUMsUUFBNEUsQ0FDNUUsQ0FDQSxNQUFPaEIsQ0FBQUEsMEVBQUksQ0FBQyxJQUFJLENBQUNVLEdBQUcsQ0FBRU0sUUFBUSxDQUFFLENBQzlCQyxLQUFLLENBQUUsSUFBSSxDQUFDQSxLQUFLLENBQ2pCQyxZQUFZLENBQUUsSUFBSSxDQUFDQSxZQUFZLENBQy9CQyxHQUFHLENBQUUsSUFBSSxDQUFDQSxHQUNaLENBQUMsQ0FBQyxDQUNKLENBQUMsZUF0Q09qQix3RUFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9jbGFzc2VzL2F0b21zL0F0b20udHM/YWMyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0B6ZWR1eC9jb3JlJ1xuaW1wb3J0IHsgYXRvbSB9IGZyb20gJ0B6ZWR1eC9yZWFjdC9mYWN0b3JpZXMvYXRvbSdcbmltcG9ydCB7IEF0b21BcGlQcm9taXNlLCBBdG9tVmFsdWVPckZhY3RvcnkgfSBmcm9tICdAemVkdXgvcmVhY3QvdHlwZXMnXG5pbXBvcnQgeyBBdG9tSW5zdGFuY2UgfSBmcm9tICcuLi9pbnN0YW5jZXMvQXRvbUluc3RhbmNlJ1xuaW1wb3J0IHsgRWNvc3lzdGVtIH0gZnJvbSAnLi4vRWNvc3lzdGVtJ1xuaW1wb3J0IHsgU3RhbmRhcmRBdG9tQmFzZSB9IGZyb20gJy4vU3RhbmRhcmRBdG9tQmFzZSdcblxuZXhwb3J0IGNsYXNzIEF0b208XG4gIFN0YXRlLFxuICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSxcbiAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPixcbiAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZVxuPiBleHRlbmRzIFN0YW5kYXJkQXRvbUJhc2U8U3RhdGUsIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4ge1xuICAvKipcbiAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIG92ZXJyaWRkZW4gd2hlbiBjcmVhdGluZyBjdXN0b20gYXRvbSBjbGFzc2VzIHRoYXRcbiAgICogY3JlYXRlIGEgY3VzdG9tIGF0b20gaW5zdGFuY2UgY2xhc3MuIFJldHVybiBhIG5ldyBpbnN0YW5jZSBvZiB5b3VyIGF0b21cbiAgICogaW5zdGFuY2UgY2xhc3MuXG4gICAqL1xuICBwdWJsaWMgX2NyZWF0ZUluc3RhbmNlKFxuICAgIGVjb3N5c3RlbTogRWNvc3lzdGVtLFxuICAgIGtleUhhc2g6IHN0cmluZyxcbiAgICBwYXJhbXM6IFBhcmFtc1xuICApOiBBdG9tSW5zdGFuY2U8U3RhdGUsIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4ge1xuICAgIHJldHVybiBuZXcgQXRvbUluc3RhbmNlPFN0YXRlLCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+KFxuICAgICAgZWNvc3lzdGVtLFxuICAgICAgdGhpcyxcbiAgICAgIGtleUhhc2gsXG4gICAgICBwYXJhbXNcbiAgICApXG4gIH1cblxuICBwdWJsaWMgZ2V0S2V5SGFzaChlY29zeXN0ZW06IEVjb3N5c3RlbSwgcGFyYW1zPzogUGFyYW1zKSB7XG4gICAgY29uc3QgYmFzZSA9IHRoaXMua2V5XG5cbiAgICBpZiAoIXBhcmFtcz8ubGVuZ3RoKSByZXR1cm4gYmFzZVxuXG4gICAgcmV0dXJuIGAke2Jhc2V9LSR7ZWNvc3lzdGVtLl9pZEdlbmVyYXRvci5oYXNoUGFyYW1zKFxuICAgICAgcGFyYW1zLFxuICAgICAgZWNvc3lzdGVtLmNvbXBsZXhBdG9tUGFyYW1zXG4gICAgKX1gXG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUoXG4gICAgbmV3VmFsdWU6IEF0b21WYWx1ZU9yRmFjdG9yeTxTdGF0ZSwgUGFyYW1zLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPlxuICApIHtcbiAgICByZXR1cm4gYXRvbSh0aGlzLmtleSwgbmV3VmFsdWUsIHtcbiAgICAgIGZsYWdzOiB0aGlzLmZsYWdzLFxuICAgICAgbWF4SW5zdGFuY2VzOiB0aGlzLm1heEluc3RhbmNlcyxcbiAgICAgIHR0bDogdGhpcy50dGwsXG4gICAgfSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbImF0b20iLCJBdG9tSW5zdGFuY2UiLCJTdGFuZGFyZEF0b21CYXNlIiwiQXRvbSIsIl9jcmVhdGVJbnN0YW5jZSIsImVjb3N5c3RlbSIsImtleUhhc2giLCJwYXJhbXMiLCJnZXRLZXlIYXNoIiwiYmFzZSIsImtleSIsImxlbmd0aCIsIl9pZEdlbmVyYXRvciIsImhhc2hQYXJhbXMiLCJjb21wbGV4QXRvbVBhcmFtcyIsIm92ZXJyaWRlIiwibmV3VmFsdWUiLCJmbGFncyIsIm1heEluc3RhbmNlcyIsInR0bCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1968\n')},3789:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "H": function() { return /* binding */ AtomBase; }\n/* harmony export */ });\nvar AtomBase=function AtomBase(){};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc4OS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFHTyxHQUFlQSxTQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvY2xhc3Nlcy9hdG9tcy9BdG9tQmFzZS50cz81NjI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVjb3N5c3RlbSB9IGZyb20gJy4uL0Vjb3N5c3RlbSdcbmltcG9ydCB7IEF0b21JbnN0YW5jZUJhc2UgfSBmcm9tICcuLi9pbnN0YW5jZXMvQXRvbUluc3RhbmNlQmFzZSdcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF0b21CYXNlPFxuICBTdGF0ZSxcbiAgUGFyYW1zIGV4dGVuZHMgYW55W10sXG4gIEluc3RhbmNlVHlwZSBleHRlbmRzIEF0b21JbnN0YW5jZUJhc2U8U3RhdGUsIFBhcmFtcywgYW55PlxuPiB7XG4gIHB1YmxpYyBhYnN0cmFjdCBmbGFncz86IHN0cmluZ1tdXG4gIHB1YmxpYyBhYnN0cmFjdCBrZXk6IHN0cmluZ1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBfY3JlYXRlSW5zdGFuY2UoXG4gICAgZWNvc3lzdGVtOiBFY29zeXN0ZW0sXG4gICAga2V5SGFzaDogc3RyaW5nLFxuICAgIHBhcmFtczogUGFyYW1zXG4gICk6IEluc3RhbmNlVHlwZVxuXG4gIHB1YmxpYyBhYnN0cmFjdCBnZXRLZXlIYXNoKGVjb3N5c3RlbTogRWNvc3lzdGVtLCBwYXJhbXM/OiBQYXJhbXMpOiBzdHJpbmdcbn1cbiJdLCJuYW1lcyI6WyJBdG9tQmFzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3789\n')},6892:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "a": function() { return /* binding */ StandardAtomBase; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4578);\n/* harmony import */ var _AtomBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3789);\nvar StandardAtomBase=/*#__PURE__*/function(_AtomBase){(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(StandardAtomBase,_AtomBase);function StandardAtomBase(key,_value,config){var _this;_this=_AtomBase.call(this)||this;_this.key=key;_this._value=_value;_this.consumeHydrations=config==null?void 0:config.consumeHydrations;_this.dehydrate=config==null?void 0:config.dehydrate;_this.flags=config==null?void 0:config.flags;_this.hydrate=config==null?void 0:config.hydrate;_this.manualHydration=config==null?void 0:config.manualHydration;_this.maxInstances=config==null?void 0:config.maxInstances;_this.ttl=config==null?void 0:config.ttl;// const map = new WeakMap();\n// map.set(newAtomInstance, true);\n// map.set({ control: true }, true);\n// console.log({ key: atom.key, map });\nreturn _this;}return StandardAtomBase;}(_AtomBase__WEBPACK_IMPORTED_MODULE_1__/* .AtomBase */ .H);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg5Mi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVNPLEdBQWVDLGlCQUFnQixvTkFtQnBDLDBCQUNrQkMsR0FBVyxDQUNYQyxNQU1mLENBQ0RDLE1BQTBCLENBQzFCLFdBQ0EsMEJBQU8sYUFWU0YsR0FBVyxDQUFYQSxHQUFXLE9BQ1hDLE1BTWYsQ0FOZUEsTUFNZixDQUlELE1BQUtFLGlCQUFpQixDQUFHRCxNQUFNLGNBQU5BLE1BQU0sQ0FBRUMsaUJBQWlCLENBQ2xELE1BQUtDLFNBQVMsQ0FBR0YsTUFBTSxjQUFOQSxNQUFNLENBQUVFLFNBQVMsQ0FDbEMsTUFBS0MsS0FBSyxDQUFHSCxNQUFNLGNBQU5BLE1BQU0sQ0FBRUcsS0FBSyxDQUMxQixNQUFLQyxPQUFPLENBQUdKLE1BQU0sY0FBTkEsTUFBTSxDQUFFSSxPQUFPLENBQzlCLE1BQUtDLGVBQWUsQ0FBR0wsTUFBTSxjQUFOQSxNQUFNLENBQUVLLGVBQWUsQ0FDOUMsTUFBS0MsWUFBWSxDQUFHTixNQUFNLGNBQU5BLE1BQU0sQ0FBRU0sWUFBWSxDQUN4QyxNQUFLQyxHQUFHLENBQUdQLE1BQU0sY0FBTkEsTUFBTSxDQUFFTyxHQUFHLENBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQUEsYUFDRixDQUFDLDBCQXJDT1gsd0RBQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9jbGFzc2VzL2F0b21zL1N0YW5kYXJkQXRvbUJhc2UudHM/ZDc3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0B6ZWR1eC9jb3JlJ1xuaW1wb3J0IHtcbiAgQXRvbUNvbmZpZyxcbiAgQXRvbUFwaVByb21pc2UsXG4gIEF0b21WYWx1ZU9yRmFjdG9yeSxcbn0gZnJvbSAnQHplZHV4L3JlYWN0L3R5cGVzJ1xuaW1wb3J0IHsgQXRvbUluc3RhbmNlIH0gZnJvbSAnLi4vaW5zdGFuY2VzL0F0b21JbnN0YW5jZSdcbmltcG9ydCB7IEF0b21CYXNlIH0gZnJvbSAnLi9BdG9tQmFzZSdcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0YW5kYXJkQXRvbUJhc2U8XG4gIFN0YXRlLFxuICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSxcbiAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPixcbiAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZVxuPiBleHRlbmRzIEF0b21CYXNlPFxuICBTdGF0ZSxcbiAgUGFyYW1zLFxuICBBdG9tSW5zdGFuY2U8U3RhdGUsIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbj4ge1xuICBwdWJsaWMgcmVhZG9ubHkgY29uc3VtZUh5ZHJhdGlvbnM/OiBib29sZWFuXG4gIHB1YmxpYyByZWFkb25seSBkZWh5ZHJhdGU/OiBBdG9tQ29uZmlnPFN0YXRlPlsnZGVoeWRyYXRlJ11cbiAgcHVibGljIHJlYWRvbmx5IGZsYWdzPzogc3RyaW5nW11cbiAgcHVibGljIHJlYWRvbmx5IGh5ZHJhdGU/OiBBdG9tQ29uZmlnPFN0YXRlPlsnaHlkcmF0ZSddXG4gIHB1YmxpYyByZWFkb25seSBtYW51YWxIeWRyYXRpb24/OiBib29sZWFuXG4gIHB1YmxpYyByZWFkb25seSBtYXhJbnN0YW5jZXM/OiBudW1iZXJcbiAgcHVibGljIHJlYWRvbmx5IHR0bD86IG51bWJlclxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBrZXk6IHN0cmluZyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgX3ZhbHVlOiBBdG9tVmFsdWVPckZhY3Rvcnk8XG4gICAgICBTdGF0ZSxcbiAgICAgIFBhcmFtcyxcbiAgICAgIEV4cG9ydHMsXG4gICAgICBTdG9yZVR5cGUsXG4gICAgICBQcm9taXNlVHlwZVxuICAgID4sXG4gICAgY29uZmlnPzogQXRvbUNvbmZpZzxTdGF0ZT5cbiAgKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuY29uc3VtZUh5ZHJhdGlvbnMgPSBjb25maWc/LmNvbnN1bWVIeWRyYXRpb25zXG4gICAgdGhpcy5kZWh5ZHJhdGUgPSBjb25maWc/LmRlaHlkcmF0ZVxuICAgIHRoaXMuZmxhZ3MgPSBjb25maWc/LmZsYWdzXG4gICAgdGhpcy5oeWRyYXRlID0gY29uZmlnPy5oeWRyYXRlXG4gICAgdGhpcy5tYW51YWxIeWRyYXRpb24gPSBjb25maWc/Lm1hbnVhbEh5ZHJhdGlvblxuICAgIHRoaXMubWF4SW5zdGFuY2VzID0gY29uZmlnPy5tYXhJbnN0YW5jZXNcbiAgICB0aGlzLnR0bCA9IGNvbmZpZz8udHRsXG5cbiAgICAvLyBjb25zdCBtYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgIC8vIG1hcC5zZXQobmV3QXRvbUluc3RhbmNlLCB0cnVlKTtcbiAgICAvLyBtYXAuc2V0KHsgY29udHJvbDogdHJ1ZSB9LCB0cnVlKTtcbiAgICAvLyBjb25zb2xlLmxvZyh7IGtleTogYXRvbS5rZXksIG1hcCB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkF0b21CYXNlIiwiU3RhbmRhcmRBdG9tQmFzZSIsImtleSIsIl92YWx1ZSIsImNvbmZpZyIsImNvbnN1bWVIeWRyYXRpb25zIiwiZGVoeWRyYXRlIiwiZmxhZ3MiLCJoeWRyYXRlIiwibWFudWFsSHlkcmF0aW9uIiwibWF4SW5zdGFuY2VzIiwidHRsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6892\n')},3096:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"p\": function() { return /* binding */ AtomInstance; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4236);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4578);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1694);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7159);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3064);\n/* harmony import */ var _zedux_react_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2314);\n/* harmony import */ var _zedux_react_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(395);\n/* harmony import */ var _zedux_react_utils_promiseUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(1881);\n/* harmony import */ var _AtomApi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2448);\n/* harmony import */ var _AtomInstanceBase__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(4987);\n/* harmony import */ var _zedux_react_utils_plugin_actions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3299);\nvar StateType;(function(StateType){StateType[StateType[\"Store\"]=0]=\"Store\";StateType[StateType[\"Value\"]=1]=\"Value\";})(StateType||(StateType={}));var getStateType=function getStateType(val){if((0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .isZeduxStore */ .z2)(val))return StateType.Store;return StateType.Value;};var getStateStore=function getStateStore(factoryResult){var stateType=getStateType(factoryResult);var stateStore=stateType===StateType.Store?factoryResult:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_1__/* .createStore */ .M)();// define how we populate our store (doesn't apply to user-supplied stores)\nif(stateType===StateType.Value){stateStore.setState(typeof factoryResult==='function'?function(){return factoryResult;}:factoryResult);}return[stateType,stateStore];};var AtomInstance=/*#__PURE__*/function(_AtomInstanceBase){(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_2__/* [\"default\"] */ .Z)(AtomInstance,_AtomInstanceBase);function AtomInstance(ecosystem,atom,keyHash,params){var _this;_this=_AtomInstanceBase.call(this)||this;// lol\n_this.activeState='Initializing';_this._createdAt=Date.now();_this._nextEvaluationReasons=[];_this.dispatch=function(action){var _this$api,_this$api$dispatchInt;var val=(_this$api=_this.api)!=null&&(_this$api$dispatchInt=_this$api.dispatchInterceptors)!=null&&_this$api$dispatchInt.length?_this.api._interceptDispatch(action,function(newAction){return _this.store.dispatch(newAction);}):_this.store.dispatch(action);return val;};_this.setState=function(settable,meta){var _this$api2,_this$api2$setStateIn;var val=(_this$api2=_this.api)!=null&&(_this$api2$setStateIn=_this$api2.setStateInterceptors)!=null&&_this$api2$setStateIn.length?_this.api._interceptSetState(settable,function(newSettable){return _this.store.setState(newSettable,meta);}):_this.store.setState(settable,meta);return val;};_this._scheduleEvaluation=function(reason,flags,shouldSetTimeout){if(flags===void 0){flags=0;}// TODO: Any calls in this case probably indicate a memory leak on the\n// user's part. Notify them. TODO: Can we pause evaluations while\n// activeState is Stale (and should we just always evaluate once when\n// waking up a stale atom)?\nif(_this.activeState==='Destroyed')return;_this._nextEvaluationReasons.push(reason);if(_this._nextEvaluationReasons.length>1)return;// job already scheduled\n_this.ecosystem._scheduler.scheduleJob({flags:flags,keyHash:_this.keyHash,task:_this.evaluationTask,type:_zedux_react_utils__WEBPACK_IMPORTED_MODULE_3__/* .JobType.EvaluateNode */ .O.EvaluateNode},shouldSetTimeout);};_this.invalidate=function(operation,sourceType){return _this._invalidate(operation,sourceType);};_this.evaluationTask=function(){return _this._evaluationTask();};_this.ecosystem=ecosystem;_this.atom=atom;_this.keyHash=keyHash;_this.params=params;_this.exports=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(_this).exports;_this.promise=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(_this).promise;_this.store=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(_this).store;_this._promiseStatus=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .Z)(_this)._promiseStatus;return _this;}/**\n   * Detach this atom instance from the ecosystem and clean up all graph edges\n   * and other subscriptions/effects created by this atom instance.\n   *\n   * Destruction will bail out if this atom instance still has dependents. Pass\n   * `true` to force-destroy the atom instance anyway.\n   */var _proto=AtomInstance.prototype;_proto.destroy=function destroy(force){var _this$ecosystem$_grap,_this$_cancelDestruct,_this$_injectors,_this$_subscription;if(this.activeState==='Destroyed')return;// If we're not force-destroying, don't destroy if there are dependents\nif(!force&&Object.keys(((_this$ecosystem$_grap=this.ecosystem._graph.nodes[this.keyHash])==null?void 0:_this$ecosystem$_grap.dependents)||{}).length){return;}(_this$_cancelDestruct=this._cancelDestruction)==null?void 0:_this$_cancelDestruct.call(this);this._cancelDestruction=undefined;this._setActiveState('Destroyed');if(this._nextEvaluationReasons.length){this.ecosystem._scheduler.unscheduleJob(this.evaluationTask);}// Clean up effect injectors first, then everything else\nvar nonEffectInjectors=[];(_this$_injectors=this._injectors)==null?void 0:_this$_injectors.forEach(function(injector){if(injector.type!==_zedux_react_utils__WEBPACK_IMPORTED_MODULE_3__/* .InjectorType.Effect */ .R.Effect){nonEffectInjectors.push(injector);return;}injector.cleanup==null?void 0:injector.cleanup();});nonEffectInjectors.forEach(function(injector){injector.cleanup==null?void 0:injector.cleanup();});this.ecosystem._graph.removeDependencies(this.keyHash);(_this$_subscription=this._subscription)==null?void 0:_this$_subscription.unsubscribe();this.ecosystem._destroyAtomInstance(this.keyHash);}/**\n   * Call `store.dispatch()` on this atom instance's store. Run any `dispatch`\n   * interceptors from this atom's AtomApi (if any) first.\n   */;/**\n   * An alias for `instance.store.getState()`. Returns the current state of this\n   * atom instance's store.\n   */_proto.getState=function getState(){return this.store.getState();}/**\n   * Call `store.setState()` on this atom instance's store. Run any `setState`\n   * interceptors from this atom's AtomApi (if any) first.\n   */;_proto._init=function _init(){var _this2=this;var factoryResult=this._doEvaluate();var _getStateStore=getStateStore(factoryResult);this._stateType=_getStateStore[0];this.store=_getStateStore[1];this._subscription=this.store.subscribe(function(newState,oldState,action){// buffer updates (with cache size of 1) if this instance is currently\n// evaluating\nif(_this2.ecosystem._evaluationStack.isEvaluating(_this2.keyHash)){_this2._bufferedUpdate={newState:newState,oldState:oldState,action:action};return;}_this2._handleStateChange(newState,oldState,action);});this._setActiveState('Active');// hydrate if possible\nif(this.ecosystem.hydration&&!this.atom.manualHydration){var hydration=this.ecosystem.hydration[this.keyHash];if(typeof hydration!=='undefined'){var _this$atom$consumeHyd;var transformed=this.atom.hydrate?this.atom.hydrate(hydration):hydration;this.store.setState(transformed);if((_this$atom$consumeHyd=this.atom.consumeHydrations)!=null?_this$atom$consumeHyd:this.ecosystem.consumeHydrations){delete this.ecosystem.hydration[this.keyHash];}}}}/**\n   * When a standard atom instance's refCount hits 0 and a ttl is set, we set a\n   * timeout to destroy this atom instance.\n   */;_proto._scheduleDestruction=function _scheduleDestruction(){var _this3=this;// the atom is already scheduled for destruction or destroyed\nif(this.activeState!=='Active')return;this._setActiveState('Stale');var maxInstances=this.atom.maxInstances;if(maxInstances!=null){if(maxInstances===0)return this.destroy();var currentCount=Object.keys(this.ecosystem.inspectInstances(this.atom)).length;if(currentCount>maxInstances)return this.destroy();}var ttl=this._getTtl();if(ttl==null||ttl===-1)return;if(ttl===0)return this.destroy();if(typeof ttl==='number'){// ttl is > 0; schedule destruction\nvar timeoutId=setTimeout(function(){_this3._cancelDestruction=undefined;_this3.destroy();},ttl);// TODO: dispatch an action over stateStore for these mutations\nthis._cancelDestruction=function(){_this3._cancelDestruction=undefined;clearTimeout(timeoutId);};return;}if(typeof ttl.then==='function'){var isCanceled=false;ttl.then(function(){_this3._cancelDestruction=undefined;if(!isCanceled)_this3.destroy();});this._cancelDestruction=function(){_this3._cancelDestruction=undefined;isCanceled=true;};return;}// ttl is an observable; destroy as soon as it emits\nvar subscription=ttl.subscribe(function(){_this3._cancelDestruction=undefined;_this3.destroy();});this._cancelDestruction=function(){_this3._cancelDestruction=undefined;subscription.unsubscribe();};};_proto._doEvaluate=function _doEvaluate(){this._nextInjectors=[];var newFactoryResult;this.ecosystem._evaluationStack.start(this);this.ecosystem._graph.bufferUpdates(this.keyHash);try{newFactoryResult=this._evaluate();}catch(err){this._nextInjectors.forEach(function(injector){injector.cleanup==null?void 0:injector.cleanup();});this._nextInjectors=undefined;this.ecosystem._graph.destroyBuffer();throw err;}finally{this.ecosystem._evaluationStack.finish();// even if evaluation errored, we need to update dependents if the store's\n// state changed\nif(this._bufferedUpdate){this._handleStateChange(this._bufferedUpdate.newState,this._bufferedUpdate.oldState,this._bufferedUpdate.action);this._bufferedUpdate=undefined;}this._prevEvaluationReasons=this._nextEvaluationReasons;this._nextEvaluationReasons=[];}this._injectors=this._nextInjectors;this._nextInjectors=undefined;this.ecosystem._graph.flushUpdates();return newFactoryResult;}/**\n   * A standard atom's value can be one of:\n   *\n   * - A raw value\n   * - A Zedux store\n   * - A function that returns a raw value\n   * - A function that returns a Zedux store\n   * - A function that returns an AtomApi\n   */;_proto._evaluate=function _evaluate(){var _value=this.atom._value;if(typeof _value!=='function'){return _value;}try{var _this$api$value;var val=_value.apply(void 0,this.params);if(!(0,_zedux_react_utils__WEBPACK_IMPORTED_MODULE_5__.is)(val,_AtomApi__WEBPACK_IMPORTED_MODULE_6__/* .AtomApi */ .u))return val;this.api=val;// Exports can only be set on initial evaluation\nif(this.activeState==='Initializing'){this.exports=this.api.exports;}// if api.value is a promise, we ignore api.promise\nif(typeof((_this$api$value=this.api.value)==null?void 0:_this$api$value.then)==='function'){return this._setPromise(this.api.value,true);}else if(this.api.promise){this._setPromise(this.api.promise);}return this.api.value;}catch(err){console.error(\"Zedux: Error while evaluating atom \\\"\"+this.atom.key+\"\\\" with params:\",this.params,err);throw err;}};_proto._evaluationTask=function _evaluationTask(){var newFactoryResult=this._doEvaluate();var newStateType=getStateType(newFactoryResult);if( true&&newStateType!==this._stateType){throw new Error(\"Zedux: atom factory for atom \\\"\"+this.atom.key+\"\\\" returned a different type than the previous evaluation. This can happen if the atom returned a store initially but then returned a non-store value on a later evaluation or vice versa\");}if( true&&newStateType===StateType.Store&&newFactoryResult!==this.store){throw new Error(\"Zedux: atom factory for atom \\\"\"+this.atom.key+\"\\\" returned a different store. Did you mean to use `injectStore()`, or `injectMemo()`?\");}// there is no way to cause an evaluation loop when the StateType is Value\nif(newStateType===StateType.Value){this.store.setState(typeof newFactoryResult==='function'?function(){return newFactoryResult;}:newFactoryResult);}};_proto._getTtl=function _getTtl(){var _this$api3;if(((_this$api3=this.api)==null?void 0:_this$api3.ttl)==null){return this.atom.ttl!=null?this.atom.ttl:this.ecosystem.defaultTtl;}// this atom instance set its own ttl\nvar ttl=this.api.ttl;return typeof ttl==='function'?ttl():ttl;};_proto._handleStateChange=function _handleStateChange(newState,oldState,action){this.ecosystem._graph.scheduleDependents(this.keyHash,this._nextEvaluationReasons,newState,oldState,false);// Set the action's meta field to `metaTypes.SKIP_EVALUATION` to prevent\n// plugins from receiving it. The Zedux StateHub has to do this to prevent\n// infinite state update loops when inspecting the state of the StateHub\n// itself.\nif(this.ecosystem._mods.stateChanged&&(0,_zedux_core__WEBPACK_IMPORTED_MODULE_7__/* .removeAllMeta */ .vU)(action).meta!==_zedux_core__WEBPACK_IMPORTED_MODULE_8__/* .metaTypes.SKIP_EVALUATION */ .u.SKIP_EVALUATION){this.ecosystem.modBus.dispatch(_zedux_react_utils_plugin_actions__WEBPACK_IMPORTED_MODULE_9__/* .pluginActions.stateChanged */ .V.stateChanged({action:action,instance:this,newState:newState,oldState:oldState,reasons:this._nextEvaluationReasons}));}// run the scheduler synchronously after any atom instance state update\nthis.ecosystem._scheduler.flush();};_proto._invalidate=function _invalidate(operation,sourceType){if(operation===void 0){operation='invalidate';}if(sourceType===void 0){sourceType='External';}this._scheduleEvaluation({operation:operation,sourceType:sourceType,type:'cache invalidated'},0,false);// run the scheduler synchronously after invalidation\nthis.ecosystem._scheduler.flush();};_proto._setActiveState=function _setActiveState(newActiveState){var oldActiveState=this.activeState;this.activeState=newActiveState;if(this.ecosystem._mods.activeStateChanged){this.ecosystem.modBus.dispatch(_zedux_react_utils_plugin_actions__WEBPACK_IMPORTED_MODULE_9__/* .pluginActions.activeStateChanged */ .V.activeStateChanged({instance:this,newActiveState:newActiveState,oldActiveState:oldActiveState}));}};_proto._setPromise=function _setPromise(promise,isStateUpdater){var _this4=this;if(promise===this.promise)return this.store.getState();this.promise=promise;// since we're the first to chain off the returned promise, we don't need to\n// track the chained promise - it will run first, before React suspense's\n// `.then` on the thrown promise, for example\npromise.then(function(data){if(_this4.promise!==promise)return;_this4._promiseStatus='success';if(!isStateUpdater)return;_this4.store.setState((0,_zedux_react_utils_promiseUtils__WEBPACK_IMPORTED_MODULE_10__/* .getSuccessPromiseState */ .W2)(data));}).catch(function(error){if(_this4.promise!==promise)return;_this4._promiseStatus='error';_this4._promiseError=error;if(!isStateUpdater)return;_this4.store.setState((0,_zedux_react_utils_promiseUtils__WEBPACK_IMPORTED_MODULE_10__/* .getErrorPromiseState */ .bG)(error));});var state=(0,_zedux_react_utils_promiseUtils__WEBPACK_IMPORTED_MODULE_10__/* .getInitialPromiseState */ .KF)();this._promiseStatus=state.status;this.ecosystem._graph.scheduleDependents(this.keyHash,this._nextEvaluationReasons,undefined,undefined,true,'promise changed','Updated',true);return state;};return AtomInstance;}(_AtomInstanceBase__WEBPACK_IMPORTED_MODULE_11__/* .AtomInstanceBase */ .T);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3096\n")},4987:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"T\": function() { return /* binding */ AtomInstanceBase; }\n/* harmony export */ });\n/* harmony import */ var _zedux_react_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6511);\nvar AtomInstanceBase=/*#__PURE__*/function(){function AtomInstanceBase(){}var _proto=AtomInstanceBase.prototype;_proto.addDependent=function addDependent(_temp){var _this=this;var _ref=_temp===void 0?{}:_temp,callback=_ref.callback,_ref$operation=_ref.operation,operation=_ref$operation===void 0?'addDependent':_ref$operation;var id=this.ecosystem._idGenerator.generateNodeId();this.ecosystem._graph.addEdge(id,this.keyHash,operation,_zedux_react_types__WEBPACK_IMPORTED_MODULE_0__/* .EdgeFlag.Explicit */ .d.Explicit|_zedux_react_types__WEBPACK_IMPORTED_MODULE_0__/* .EdgeFlag.External */ .d.External,callback);return function(){return _this.ecosystem._graph.removeEdge(id,_this.keyHash);};};return AtomInstanceBase;}();AtomInstanceBase.$$typeof=Symbol.for('@@react/zedux/AtomInstanceBase');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk4Ny5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBYU8sR0FBZUMsaUJBQWdCLG1HQTJCN0JDLFlBQVksQ0FBbkIsNEJBTWlCLHdDQUFiLENBQUMsQ0FBQyxPQUxKQyxRQUFRLE1BQVJBLFFBQVEscUJBQ1JDLFNBQVMsQ0FBVEEsU0FBUyx5QkFBRyxjQUFjLGdCQUsxQixHQUFNQyxHQUFFLENBQUcsSUFBSSxDQUFDQyxTQUFTLENBQUNDLFlBQVksQ0FBQ0MsY0FBYyxFQUFFLENBQ3ZELElBQUksQ0FBQ0YsU0FBUyxDQUFDRyxNQUFNLENBQUNDLE9BQU8sQ0FDM0JMLEVBQUUsQ0FDRixJQUFJLENBQUNNLE9BQU8sQ0FDWlAsU0FBUyxDQUNUSixtRkFBaUIsQ0FBR0EsbUZBQWlCLENBQ3JDRyxRQUFRLENBQ1QsQ0FFRCxNQUFPLGtCQUFNLE1BQUksQ0FBQ0csU0FBUyxDQUFDRyxNQUFNLENBQUNLLFVBQVUsQ0FBQ1QsRUFBRSxDQUFFLEtBQUksQ0FBQ00sT0FBTyxDQUFDLEdBQ2pFLENBQUMsNkJBNUNtQlYsZ0JBQWdCLENBS3RCYyxRQUFRLENBQUdDLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLGdDQUFnQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvY2xhc3Nlcy9pbnN0YW5jZXMvQXRvbUluc3RhbmNlQmFzZS50cz9iZDcwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFjdGl2ZVN0YXRlLFxuICBEZXBlbmRlbnRFZGdlLFxuICBFdmFsdWF0aW9uUmVhc29uLFxuICBDbGVhbnVwLFxuICBFZGdlRmxhZyxcbiAgUHJvbWlzZVN0YXR1cyxcbn0gZnJvbSAnQHplZHV4L3JlYWN0L3R5cGVzJ1xuaW1wb3J0IHsgSW5qZWN0b3JEZXNjcmlwdG9yIH0gZnJvbSAnQHplZHV4L3JlYWN0L3V0aWxzJ1xuaW1wb3J0IHsgQXRvbUJhc2UgfSBmcm9tICcuLi9hdG9tcy9BdG9tQmFzZSdcbmltcG9ydCB7IEVjb3N5c3RlbSB9IGZyb20gJy4uL0Vjb3N5c3RlbSdcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdG9tSW5zdGFuY2VCYXNlPFxuICBTdGF0ZSxcbiAgUGFyYW1zIGV4dGVuZHMgYW55W10sXG4gIEF0b21UeXBlIGV4dGVuZHMgQXRvbUJhc2U8U3RhdGUsIFBhcmFtcywgYW55PlxuPiB7XG4gIHB1YmxpYyBzdGF0aWMgJCR0eXBlb2YgPSBTeW1ib2wuZm9yKCdAQHJlYWN0L3plZHV4L0F0b21JbnN0YW5jZUJhc2UnKVxuICBwdWJsaWMgYWJzdHJhY3QgYWN0aXZlU3RhdGU6IEFjdGl2ZVN0YXRlXG4gIHB1YmxpYyBhYnN0cmFjdCBhdG9tOiBBdG9tVHlwZVxuICBwdWJsaWMgYWJzdHJhY3QgZWNvc3lzdGVtOiBFY29zeXN0ZW1cbiAgcHVibGljIGFic3RyYWN0IGtleUhhc2g6IHN0cmluZ1xuICBwdWJsaWMgYWJzdHJhY3QgcHJvbWlzZT86IFByb21pc2U8YW55PlxuICBwdWJsaWMgYWJzdHJhY3Qgc3RvcmU6IFN0b3JlPFN0YXRlPlxuXG4gIHB1YmxpYyBhYnN0cmFjdCBfY3JlYXRlZEF0OiBudW1iZXJcbiAgcHVibGljIGFic3RyYWN0IF9pbmplY3RvcnM/OiBJbmplY3RvckRlc2NyaXB0b3JbXVxuICBwdWJsaWMgYWJzdHJhY3QgX3ByZXZFdmFsdWF0aW9uUmVhc29ucz86IEV2YWx1YXRpb25SZWFzb25bXVxuICBwdWJsaWMgYWJzdHJhY3QgX3Byb21pc2VFcnJvcj86IEVycm9yXG4gIHB1YmxpYyBhYnN0cmFjdCBfcHJvbWlzZVN0YXR1cz86IFByb21pc2VTdGF0dXNcblxuICBwdWJsaWMgYWJzdHJhY3QgZGVzdHJveShmb3JjZT86IGJvb2xlYW4pOiB2b2lkXG5cbiAgcHVibGljIGFic3RyYWN0IF9zY2hlZHVsZUV2YWx1YXRpb24oXG4gICAgcmVhc29uOiBFdmFsdWF0aW9uUmVhc29uLFxuICAgIGZsYWdzPzogbnVtYmVyLFxuICAgIHNob3VsZFNldFRpbWVvdXQ/OiBib29sZWFuXG4gICk6IHZvaWRcblxuICBwdWJsaWMgYWRkRGVwZW5kZW50KHtcbiAgICBjYWxsYmFjayxcbiAgICBvcGVyYXRpb24gPSAnYWRkRGVwZW5kZW50JyxcbiAgfToge1xuICAgIGNhbGxiYWNrPzogRGVwZW5kZW50RWRnZVsnY2FsbGJhY2snXVxuICAgIG9wZXJhdGlvbj86IHN0cmluZ1xuICB9ID0ge30pOiBDbGVhbnVwIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuZWNvc3lzdGVtLl9pZEdlbmVyYXRvci5nZW5lcmF0ZU5vZGVJZCgpXG4gICAgdGhpcy5lY29zeXN0ZW0uX2dyYXBoLmFkZEVkZ2UoXG4gICAgICBpZCxcbiAgICAgIHRoaXMua2V5SGFzaCxcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIEVkZ2VGbGFnLkV4cGxpY2l0IHwgRWRnZUZsYWcuRXh0ZXJuYWwsXG4gICAgICBjYWxsYmFja1xuICAgIClcblxuICAgIHJldHVybiAoKSA9PiB0aGlzLmVjb3N5c3RlbS5fZ3JhcGgucmVtb3ZlRWRnZShpZCwgdGhpcy5rZXlIYXNoKVxuICB9XG59XG4iXSwibmFtZXMiOlsiRWRnZUZsYWciLCJBdG9tSW5zdGFuY2VCYXNlIiwiYWRkRGVwZW5kZW50IiwiY2FsbGJhY2siLCJvcGVyYXRpb24iLCJpZCIsImVjb3N5c3RlbSIsIl9pZEdlbmVyYXRvciIsImdlbmVyYXRlTm9kZUlkIiwiX2dyYXBoIiwiYWRkRWRnZSIsImtleUhhc2giLCJFeHBsaWNpdCIsIkV4dGVybmFsIiwicmVtb3ZlRWRnZSIsIiQkdHlwZW9mIiwiU3ltYm9sIiwiZm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4987\n")},552:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "h": function() { return /* binding */ api; }\n/* harmony export */ });\n/* harmony import */ var _classes_AtomApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2448);\nvar api=function api(value){return new _classes_AtomApi__WEBPACK_IMPORTED_MODULE_0__/* .AtomApi */ .u(value);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFJTyxHQUFNQyxJQXFDWixDQUFHLFFBckNTQSxJQXFDWixDQU1DQyxLQUEyRSxRQUUzRSxJQUFJRixDQUFBQSw4REFBTyxDQUNURSxLQUFLLENBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9mYWN0b3JpZXMvYXBpLnRzP2EwNGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RvcmUsIFN0b3JlU3RhdGVUeXBlIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgeyBBdG9tQXBpIH0gZnJvbSAnLi4vY2xhc3Nlcy9BdG9tQXBpJ1xuaW1wb3J0IHsgQXRvbUFwaVByb21pc2UgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGFwaToge1xuICAvLyBDdXN0b20gU3RvcmVzXG4gIDxcbiAgICBTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZTxhbnk+ID0gU3RvcmU8YW55PixcbiAgICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZSA9IHVuZGVmaW5lZFxuICA+KFxuICAgIHZhbHVlOlxuICAgICAgfCBTdG9yZVR5cGVcbiAgICAgIHwgQXRvbUFwaTxTdG9yZVN0YXRlVHlwZTxTdG9yZVR5cGU+LCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPlxuICApOiBBdG9tQXBpPFN0b3JlU3RhdGVUeXBlPFN0b3JlVHlwZT4sIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG5cbiAgLy8gTm8gVmFsdWVcbiAgPFxuICAgIFN0YXRlID0gdW5kZWZpbmVkLFxuICAgIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4gID4oKTogQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgdW5kZWZpbmVkLCBQcm9taXNlVHlwZT5cblxuICAvLyBObyBTdG9yZVxuICA8XG4gICAgU3RhdGUgPSB1bmRlZmluZWQsXG4gICAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2UgPSB1bmRlZmluZWRcbiAgPihcbiAgICB2YWx1ZTogU3RhdGUgfCBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCB1bmRlZmluZWQsIFByb21pc2VUeXBlPlxuICApOiBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCB1bmRlZmluZWQsIFByb21pc2VUeXBlPlxuXG4gIC8vIENhdGNoLWFsbFxuICA8XG4gICAgU3RhdGUgPSB1bmRlZmluZWQsXG4gICAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPiA9IFN0b3JlPFN0YXRlPixcbiAgICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4gID4oXG4gICAgdmFsdWU6IFN0YXRlIHwgU3RvcmVUeXBlIHwgQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbiAgKTogQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbn0gPSA8XG4gIFN0YXRlID0gdW5kZWZpbmVkLFxuICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZSA9IHVuZGVmaW5lZFxuPihcbiAgdmFsdWU/OiBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiB8IFN0b3JlVHlwZSB8IFN0YXRlXG4pID0+XG4gIG5ldyBBdG9tQXBpKFxuICAgIHZhbHVlIGFzIEF0b21BcGk8U3RhdGUsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+IHwgU3RvcmVUeXBlIHwgU3RhdGVcbiAgKVxuIl0sIm5hbWVzIjpbIkF0b21BcGkiLCJhcGkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///552\n')},5965:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ atom; }\n/* harmony export */ });\n/* harmony import */ var _classes_atoms_Atom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1968);\nvar atom=function atom(key,value,config){if( true&&!key){throw new TypeError('Zedux: All atoms must have a key');}return new _classes_atoms_Atom__WEBPACK_IMPORTED_MODULE_0__/* .Atom */ .h(key,value,config);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk2NS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBVU8sR0FBTUMsS0FpRFosQ0FBRyxRQWpEU0EsS0FpRFosQ0FPQ0MsR0FBVyxDQUNYQyxLQUF5RSxDQUN6RUMsTUFBMEIsQ0FDdkIsQ0FDSCxHQUFJQyxLQUFHLEVBQUksQ0FBQ0gsR0FBRyxDQUFFLENBQ2YsS0FBTSxJQUFJSSxVQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FDekQsQ0FFQSxNQUFPLElBQUlOLENBQUFBLDhEQUFJLENBQ2JFLEdBQUcsQ0FDSEMsS0FBSyxDQUNMQyxNQUFNLENBQ1AsQ0FDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvZmFjdG9yaWVzL2F0b20udHM/Njc3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSwgU3RvcmVTdGF0ZVR5cGUgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7XG4gIEF0b21Db25maWcsXG4gIEF0b21BcGlQcm9taXNlLFxuICBBdG9tVmFsdWVPckZhY3RvcnksXG4gIFByb21pc2VTdGF0ZSxcbn0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBBdG9tIH0gZnJvbSAnLi4vY2xhc3Nlcy9hdG9tcy9BdG9tJ1xuaW1wb3J0IHsgQXRvbUFwaSB9IGZyb20gJy4uL2NsYXNzZXMnXG5cbmV4cG9ydCBjb25zdCBhdG9tOiB7XG4gIC8vIFF1ZXJ5IEF0b21zXG4gIDxcbiAgICBTdGF0ZSA9IGFueSxcbiAgICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSA9IFtdLFxuICAgIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgbmV2ZXI+LFxuICAgIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2UgPSB1bmRlZmluZWRcbiAgPihcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogKFxuICAgICAgLi4ucGFyYW1zOiBQYXJhbXNcbiAgICApID0+IEF0b21BcGk8UHJvbWlzZTxTdGF0ZT4sIEV4cG9ydHMsIHVuZGVmaW5lZCwgUHJvbWlzZVR5cGU+LFxuICAgIGNvbmZpZz86IEF0b21Db25maWc8U3RhdGU+XG4gICk6IEF0b208XG4gICAgUHJvbWlzZVN0YXRlPFN0YXRlPixcbiAgICBQYXJhbXMsXG4gICAgRXhwb3J0cyxcbiAgICBTdG9yZTxQcm9taXNlU3RhdGU8U3RhdGU+PixcbiAgICBQcm9taXNlVHlwZVxuICA+XG5cbiAgLy8gQ3VzdG9tIFN0b3Jlc1xuICA8XG4gICAgU3RvcmVUeXBlIGV4dGVuZHMgU3RvcmU8YW55PiA9IFN0b3JlPGFueT4sXG4gICAgUGFyYW1zIGV4dGVuZHMgYW55W10gPSBbXSxcbiAgICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIG5ldmVyPixcbiAgICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4gID4oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IChcbiAgICAgIC4uLnBhcmFtczogUGFyYW1zXG4gICAgKSA9PlxuICAgICAgfCBTdG9yZVR5cGVcbiAgICAgIHwgQXRvbUFwaTxTdG9yZVN0YXRlVHlwZTxTdG9yZT4sIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+LFxuICAgIGNvbmZpZz86IEF0b21Db25maWc8U3RvcmVTdGF0ZVR5cGU8U3RvcmVUeXBlPj5cbiAgKTogQXRvbTxTdG9yZVN0YXRlVHlwZTxTdG9yZVR5cGU+LCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG5cbiAgLy8gQ2F0Y2gtYWxsXG4gIDxcbiAgICBTdGF0ZSA9IGFueSxcbiAgICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSA9IFtdLFxuICAgIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgbmV2ZXI+LFxuICAgIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPiA9IFN0b3JlPFN0YXRlPixcbiAgICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4gID4oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IEF0b21WYWx1ZU9yRmFjdG9yeTxTdGF0ZSwgUGFyYW1zLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPixcbiAgICBjb25maWc/OiBBdG9tQ29uZmlnPFN0YXRlPlxuICApOiBBdG9tPFN0YXRlLCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG59ID0gPFxuICBTdGF0ZSA9IGFueSxcbiAgUGFyYW1zIGV4dGVuZHMgYW55W10gPSBbXSxcbiAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4sXG4gIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPiA9IFN0b3JlPFN0YXRlPixcbiAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZSA9IHVuZGVmaW5lZFxuPihcbiAga2V5OiBzdHJpbmcsXG4gIHZhbHVlOiBBdG9tVmFsdWVPckZhY3Rvcnk8U3RhdGUsIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4sXG4gIGNvbmZpZz86IEF0b21Db25maWc8U3RhdGU+XG4pID0+IHtcbiAgaWYgKERFViAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWmVkdXg6IEFsbCBhdG9tcyBtdXN0IGhhdmUgYSBrZXknKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBBdG9tPFN0YXRlLCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+KFxuICAgIGtleSxcbiAgICB2YWx1ZSxcbiAgICBjb25maWdcbiAgKVxufVxuIl0sIm5hbWVzIjpbIkF0b20iLCJhdG9tIiwia2V5IiwidmFsdWUiLCJjb25maWciLCJERVYiLCJUeXBlRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5965\n")},2662:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "q": function() { return /* binding */ createEcosystem; }\n/* harmony export */ });\n/* harmony import */ var _classes_Ecosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5092);\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5790);\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1519);\n/* harmony import */ var _store_public_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9409);\nvar createEcosystem=function createEcosystem(config){var _config;if(config===void 0){config={};}if((_config=config)!=null&&_config.id){var _ecosystem=(0,_store_public_api__WEBPACK_IMPORTED_MODULE_0__/* .getEcosystem */ .$$)(config.id);if(_ecosystem)return _ecosystem;}var ecosystem=new _classes_Ecosystem__WEBPACK_IMPORTED_MODULE_1__/* .Ecosystem */ .q(config);// yep. Dispatch this here. We\'ll make sure no component can ever be updated\n// synchronously from this call (causing update-during-render react warnings)\n_store__WEBPACK_IMPORTED_MODULE_2__/* .globalStore.dispatch */ .cr.dispatch((0,_store__WEBPACK_IMPORTED_MODULE_3__/* .addEcosystem */ .tZ)(ecosystem));return ecosystem;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBS08sR0FBTUksZ0JBQWUsQ0FBRyxRQUFsQkEsZ0JBQWUsQ0FHMUJDLE1BQWdDLENBQzdCLGdCQURIQSxNQUFnQyxXQUFoQ0EsTUFBZ0MsQ0FBRyxDQUFDLENBQUMsRUFFckMsWUFBSUEsTUFBTSxTQUFOLFFBQVFDLEVBQUUsQ0FBRSxDQUNkLEdBQU1DLFdBQVMsQ0FBR0oseUVBQVksQ0FBQ0UsTUFBTSxDQUFDQyxFQUFFLENBQUMsQ0FFekMsR0FBSUMsVUFBUyxDQUFFLE1BQU9BLFdBQVMsQ0FDakMsQ0FFQSxHQUFNQSxVQUFTLENBQUcsR0FBSVAsQ0FBQUEsa0VBQVMsQ0FBVUssTUFBTSxDQUFDLENBRWhEO0FBQ0E7QUFDQUgsMkVBQW9CLENBQUNELDhEQUFZLENBQUNNLFNBQVMsQ0FBQyxDQUFDLENBRTdDLE1BQU9BLFVBQVMsQ0FDbEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2ZhY3Rvcmllcy9jcmVhdGVFY29zeXN0ZW0udHM/MDgxNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuLi9jbGFzc2VzL0Vjb3N5c3RlbSdcbmltcG9ydCB7IGFkZEVjb3N5c3RlbSwgZ2xvYmFsU3RvcmUgfSBmcm9tICcuLi9zdG9yZSdcbmltcG9ydCB7IGdldEVjb3N5c3RlbSB9IGZyb20gJy4uL3N0b3JlL3B1YmxpYy1hcGknXG5pbXBvcnQgeyBFY29zeXN0ZW1Db25maWcgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVjb3N5c3RlbSA9IDxcbiAgQ29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQgPSBhbnlcbj4oXG4gIGNvbmZpZzogRWNvc3lzdGVtQ29uZmlnPENvbnRleHQ+ID0ge31cbikgPT4ge1xuICBpZiAoY29uZmlnPy5pZCkge1xuICAgIGNvbnN0IGVjb3N5c3RlbSA9IGdldEVjb3N5c3RlbShjb25maWcuaWQpXG5cbiAgICBpZiAoZWNvc3lzdGVtKSByZXR1cm4gZWNvc3lzdGVtXG4gIH1cblxuICBjb25zdCBlY29zeXN0ZW0gPSBuZXcgRWNvc3lzdGVtPENvbnRleHQ+KGNvbmZpZylcblxuICAvLyB5ZXAuIERpc3BhdGNoIHRoaXMgaGVyZS4gV2UnbGwgbWFrZSBzdXJlIG5vIGNvbXBvbmVudCBjYW4gZXZlciBiZSB1cGRhdGVkXG4gIC8vIHN5bmNocm9ub3VzbHkgZnJvbSB0aGlzIGNhbGwgKGNhdXNpbmcgdXBkYXRlLWR1cmluZy1yZW5kZXIgcmVhY3Qgd2FybmluZ3MpXG4gIGdsb2JhbFN0b3JlLmRpc3BhdGNoKGFkZEVjb3N5c3RlbShlY29zeXN0ZW0pKVxuXG4gIHJldHVybiBlY29zeXN0ZW1cbn1cbiJdLCJuYW1lcyI6WyJFY29zeXN0ZW0iLCJhZGRFY29zeXN0ZW0iLCJnbG9iYWxTdG9yZSIsImdldEVjb3N5c3RlbSIsImNyZWF0ZUVjb3N5c3RlbSIsImNvbmZpZyIsImlkIiwiZWNvc3lzdGVtIiwiZGlzcGF0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2662\n')},4538:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Q\": function() { return /* binding */ useAtomInstance; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6511);\n/* harmony import */ var _useEcosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6215);\n/* harmony import */ var _useReactComponentId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6559);\nvar OPERATION='useAtomInstance';/**\n * useAtomInstance\n *\n * Creates an atom instance for the passed atom based on the passed params. If\n * an instance has already been created for the passed params, reuses the\n * existing instance.\n *\n * Registers a static graph dependency on the atom instance. This means\n * components that use this hook will not rerender when this atom instance's\n * state changes.\n *\n * If the params are large, serializing them every render can cause some\n * overhead.\n *\n * @param atom The atom to instantiate or reuse an instantiation of\n * @param params The params for generating the instance's key.\n */var useAtomInstance=function useAtomInstance(atom,params,_temp){var _ref=_temp===void 0?{operation:OPERATION}:_temp,_ref$operation=_ref.operation,operation=_ref$operation===void 0?OPERATION:_ref$operation,suspend=_ref.suspend;var ecosystem=(0,_useEcosystem__WEBPACK_IMPORTED_MODULE_1__/* .useEcosystem */ .l)();var dependentKey=(0,_useReactComponentId__WEBPACK_IMPORTED_MODULE_2__/* .useReactComponentId */ .$)();// it should be fine for this to run every render. It's possible to change\n// approaches if it is too heavy sometimes. But don't memoize this call:\nvar instance=ecosystem.getInstance(atom,params);var _useMemo=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function(){var cachedInstance=instance;return[function(onStoreChange){var _ecosystem$_graph$nod;// this function must be idempotent\nif(!((_ecosystem$_graph$nod=ecosystem._graph.nodes[instance.keyHash])!=null&&_ecosystem$_graph$nod.dependents[dependentKey])){// React can unmount other components before calling this subscribe\n// function but after we got the instance above. Re-get the instance\n// if such unmountings destroyed it in the meantime:\nif(instance.activeState==='Destroyed'){cachedInstance=undefined;onStoreChange();return function(){};// let the next render register the graph edge\n}ecosystem._graph.addEdge(dependentKey,instance.keyHash,operation,_types__WEBPACK_IMPORTED_MODULE_3__/* .EdgeFlag.External */ .d.External|_types__WEBPACK_IMPORTED_MODULE_3__/* .EdgeFlag.Static */ .d.Static,function(signal){// see note in useAtomInstanceDynamic\nif(signal==='Destroyed')cachedInstance=undefined;onStoreChange();});}return function(){ecosystem._graph.removeEdge(dependentKey,instance.keyHash);};},function(){// This hack should work 'cause React can't use the return value unless\n// it renders this component. And when it rerenders,\n// `cachedInstance` will get defined again before this point\nif(!cachedInstance)return cachedInstance;// Suspense!\nif(suspend!==false){if(cachedInstance._promiseStatus==='loading'){throw cachedInstance.promise;}else if(cachedInstance._promiseStatus==='error'){throw cachedInstance._promiseError;}}return cachedInstance;}];},[ecosystem,instance,suspend]),subscribe=_useMemo[0],getSnapshot=_useMemo[1];return (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribe,getSnapshot,getSnapshot);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUzOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0EsR0FBTUssVUFBUyxDQUFHLGlCQUFpQixDQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ08sR0FBTUMsZ0JBY1osQ0FBRyxRQWRTQSxnQkFjWixDQUNDQyxJQUE4QyxDQUM5Q0MsTUFBMEIsT0FJdkIseUJBSG1ELENBQ3BEQyxTQUFTLENBQUVKLFNBQ2IsQ0FBQywyQkFGQ0ksU0FBUyxDQUFUQSxTQUFTLHlCQUFHSixTQUFTLGdCQUFFSyxPQUFPLE1BQVBBLE9BQU8sQ0FJaEMsR0FBTUMsVUFBUyxDQUFHUixvRUFBWSxFQUFFLENBQ2hDLEdBQU1TLGFBQVksQ0FBR1Isa0ZBQW1CLEVBQUUsQ0FFMUM7QUFDQTtBQUNBLEdBQU1TLFNBQVEsQ0FBR0YsU0FBUyxDQUFDRyxXQUFXLENBQUNQLElBQUksQ0FBT0MsTUFBTSxDQUFzQixDQUU5RSxhQUFpQ1IsOENBQU8sQ0FBQyxVQUFNLENBQzdDLEdBQUllLGVBQTJDLENBQUdGLFFBQVEsQ0FFMUQsTUFBTyxDQUNMLFNBQUNHLGFBQXlCLENBQUssMkJBQzdCO0FBQ0EsR0FDRSx5QkFBQ0wsU0FBUyxDQUFDTSxNQUFNLENBQUNDLEtBQUssQ0FBQ0wsUUFBUSxDQUFDTSxPQUFPLENBQUMsU0FBeEMsc0JBQTBDQyxVQUFVLENBQUNSLFlBQVksQ0FBQyxFQUNuRSxDQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUlDLFFBQVEsQ0FBQ1EsV0FBVyxHQUFLLFdBQVcsQ0FBRSxDQUN4Q04sY0FBYyxDQUFHTyxTQUFTLENBQzFCTixhQUFhLEVBQUUsQ0FFZixNQUFPLFdBQU0sQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FFQUwsU0FBUyxDQUFDTSxNQUFNLENBQUNNLE9BQU8sQ0FDdEJYLFlBQVksQ0FDWkMsUUFBUSxDQUFDTSxPQUFPLENBQ2hCVixTQUFTLENBQ1RQLHVFQUFpQixDQUFHQSxtRUFBZSxDQUNuQyxTQUFBd0IsTUFBTSxDQUFJLENBQ1I7QUFDQSxHQUFJQSxNQUFNLEdBQUssV0FBVyxDQUFFWCxjQUFjLENBQUdPLFNBQVMsQ0FFdEROLGFBQWEsRUFBRSxDQUNqQixDQUFDLENBQ0YsQ0FDSCxDQUVBLE1BQU8sV0FBTSxDQUNYTCxTQUFTLENBQUNNLE1BQU0sQ0FBQ1UsVUFBVSxDQUFDZixZQUFZLENBQUVDLFFBQVEsQ0FBQ00sT0FBTyxDQUFDLENBQzdELENBQUMsQ0FDSCxDQUFDLENBQ0QsVUFBTSxDQUNKO0FBQ0E7QUFDQTtBQUNBLEdBQUksQ0FBQ0osY0FBYyxDQUFFLE1BQU9BLGVBQWMsQ0FFMUM7QUFDQSxHQUFJTCxPQUFPLEdBQUssS0FBSyxDQUFFLENBQ3JCLEdBQUlLLGNBQWMsQ0FBQ2EsY0FBYyxHQUFLLFNBQVMsQ0FBRSxDQUMvQyxLQUFNYixlQUFjLENBQUNjLE9BQU8sQ0FDOUIsQ0FBQyxJQUFNLElBQUlkLGNBQWMsQ0FBQ2EsY0FBYyxHQUFLLE9BQU8sQ0FBRSxDQUNwRCxLQUFNYixlQUFjLENBQUNlLGFBQWEsQ0FDcEMsQ0FDRixDQUVBLE1BQU9mLGVBQWMsQ0FDdkIsQ0FBQyxDQUNGLENBQ0gsQ0FBQyxDQUFFLENBQUNKLFNBQVMsQ0FBRUUsUUFBUSxDQUFFSCxPQUFPLENBQUMsQ0FBQyxDQXZEM0JxQixTQUFTLGFBQUVDLFdBQVcsYUF5RDdCLE1BQU8vQixDQUFBQSwyREFBb0IsQ0FBQzhCLFNBQVMsQ0FBRUMsV0FBVyxDQUFFQSxXQUFXLENBQUMsQ0FDbEUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2hvb2tzL3VzZUF0b21JbnN0YW5jZS50cz81NGM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU1lbW8sIHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBBdG9tQmFzZSwgQXRvbUluc3RhbmNlLCBBdG9tSW5zdGFuY2VCYXNlIH0gZnJvbSAnLi4vY2xhc3NlcydcbmltcG9ydCB7XG4gIEF0b21JbnN0YW5jZVR5cGUsXG4gIEF0b21QYXJhbXNUeXBlLFxuICBFZGdlRmxhZyxcbiAgWmVkdXhIb29rQ29uZmlnLFxufSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IHVzZUVjb3N5c3RlbSB9IGZyb20gJy4vdXNlRWNvc3lzdGVtJ1xuaW1wb3J0IHsgdXNlUmVhY3RDb21wb25lbnRJZCB9IGZyb20gJy4vdXNlUmVhY3RDb21wb25lbnRJZCdcblxuY29uc3QgT1BFUkFUSU9OID0gJ3VzZUF0b21JbnN0YW5jZSdcblxuLyoqXG4gKiB1c2VBdG9tSW5zdGFuY2VcbiAqXG4gKiBDcmVhdGVzIGFuIGF0b20gaW5zdGFuY2UgZm9yIHRoZSBwYXNzZWQgYXRvbSBiYXNlZCBvbiB0aGUgcGFzc2VkIHBhcmFtcy4gSWZcbiAqIGFuIGluc3RhbmNlIGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCBmb3IgdGhlIHBhc3NlZCBwYXJhbXMsIHJldXNlcyB0aGVcbiAqIGV4aXN0aW5nIGluc3RhbmNlLlxuICpcbiAqIFJlZ2lzdGVycyBhIHN0YXRpYyBncmFwaCBkZXBlbmRlbmN5IG9uIHRoZSBhdG9tIGluc3RhbmNlLiBUaGlzIG1lYW5zXG4gKiBjb21wb25lbnRzIHRoYXQgdXNlIHRoaXMgaG9vayB3aWxsIG5vdCByZXJlbmRlciB3aGVuIHRoaXMgYXRvbSBpbnN0YW5jZSdzXG4gKiBzdGF0ZSBjaGFuZ2VzLlxuICpcbiAqIElmIHRoZSBwYXJhbXMgYXJlIGxhcmdlLCBzZXJpYWxpemluZyB0aGVtIGV2ZXJ5IHJlbmRlciBjYW4gY2F1c2Ugc29tZVxuICogb3ZlcmhlYWQuXG4gKlxuICogQHBhcmFtIGF0b20gVGhlIGF0b20gdG8gaW5zdGFudGlhdGUgb3IgcmV1c2UgYW4gaW5zdGFudGlhdGlvbiBvZlxuICogQHBhcmFtIHBhcmFtcyBUaGUgcGFyYW1zIGZvciBnZW5lcmF0aW5nIHRoZSBpbnN0YW5jZSdzIGtleS5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUF0b21JbnN0YW5jZToge1xuICA8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgW10sIGFueT4+KGF0b206IEEpOiBBdG9tSW5zdGFuY2VUeXBlPEE+XG5cbiAgPEEgZXh0ZW5kcyBBdG9tQmFzZTxhbnksIFsuLi5hbnldLCBhbnk+PihcbiAgICBhdG9tOiBBLFxuICAgIHBhcmFtczogQXRvbVBhcmFtc1R5cGU8QT4sXG4gICAgY29uZmlnPzogWmVkdXhIb29rQ29uZmlnXG4gICk6IEF0b21JbnN0YW5jZVR5cGU8QT5cblxuICA8QUkgZXh0ZW5kcyBBdG9tSW5zdGFuY2U8YW55LCBbLi4uYW55XSwgYW55LCBhbnksIGFueT4+KFxuICAgIGluc3RhbmNlOiBBSSxcbiAgICBwYXJhbXM/OiBbXSxcbiAgICBjb25maWc/OiBaZWR1eEhvb2tDb25maWdcbiAgKTogQUlcbn0gPSA8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgWy4uLmFueV0sIGFueT4+KFxuICBhdG9tOiBBIHwgQXRvbUluc3RhbmNlQmFzZTxhbnksIFsuLi5hbnldLCBhbnk+LFxuICBwYXJhbXM/OiBBdG9tUGFyYW1zVHlwZTxBPixcbiAgeyBvcGVyYXRpb24gPSBPUEVSQVRJT04sIHN1c3BlbmQgfTogWmVkdXhIb29rQ29uZmlnID0ge1xuICAgIG9wZXJhdGlvbjogT1BFUkFUSU9OLFxuICB9XG4pID0+IHtcbiAgY29uc3QgZWNvc3lzdGVtID0gdXNlRWNvc3lzdGVtKClcbiAgY29uc3QgZGVwZW5kZW50S2V5ID0gdXNlUmVhY3RDb21wb25lbnRJZCgpXG5cbiAgLy8gaXQgc2hvdWxkIGJlIGZpbmUgZm9yIHRoaXMgdG8gcnVuIGV2ZXJ5IHJlbmRlci4gSXQncyBwb3NzaWJsZSB0byBjaGFuZ2VcbiAgLy8gYXBwcm9hY2hlcyBpZiBpdCBpcyB0b28gaGVhdnkgc29tZXRpbWVzLiBCdXQgZG9uJ3QgbWVtb2l6ZSB0aGlzIGNhbGw6XG4gIGNvbnN0IGluc3RhbmNlID0gZWNvc3lzdGVtLmdldEluc3RhbmNlKGF0b20gYXMgQSwgcGFyYW1zIGFzIEF0b21QYXJhbXNUeXBlPEE+KVxuXG4gIGNvbnN0IFtzdWJzY3JpYmUsIGdldFNuYXBzaG90XSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCBjYWNoZWRJbnN0YW5jZTogdHlwZW9mIGluc3RhbmNlIHwgdW5kZWZpbmVkID0gaW5zdGFuY2VcblxuICAgIHJldHVybiBbXG4gICAgICAob25TdG9yZUNoYW5nZTogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgICAvLyB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgaWRlbXBvdGVudFxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWVjb3N5c3RlbS5fZ3JhcGgubm9kZXNbaW5zdGFuY2Uua2V5SGFzaF0/LmRlcGVuZGVudHNbZGVwZW5kZW50S2V5XVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBSZWFjdCBjYW4gdW5tb3VudCBvdGhlciBjb21wb25lbnRzIGJlZm9yZSBjYWxsaW5nIHRoaXMgc3Vic2NyaWJlXG4gICAgICAgICAgLy8gZnVuY3Rpb24gYnV0IGFmdGVyIHdlIGdvdCB0aGUgaW5zdGFuY2UgYWJvdmUuIFJlLWdldCB0aGUgaW5zdGFuY2VcbiAgICAgICAgICAvLyBpZiBzdWNoIHVubW91bnRpbmdzIGRlc3Ryb3llZCBpdCBpbiB0aGUgbWVhbnRpbWU6XG4gICAgICAgICAgaWYgKGluc3RhbmNlLmFjdGl2ZVN0YXRlID09PSAnRGVzdHJveWVkJykge1xuICAgICAgICAgICAgY2FjaGVkSW5zdGFuY2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIG9uU3RvcmVDaGFuZ2UoKVxuXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge30gLy8gbGV0IHRoZSBuZXh0IHJlbmRlciByZWdpc3RlciB0aGUgZ3JhcGggZWRnZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGVjb3N5c3RlbS5fZ3JhcGguYWRkRWRnZShcbiAgICAgICAgICAgIGRlcGVuZGVudEtleSxcbiAgICAgICAgICAgIGluc3RhbmNlLmtleUhhc2gsXG4gICAgICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgICAgICBFZGdlRmxhZy5FeHRlcm5hbCB8IEVkZ2VGbGFnLlN0YXRpYyxcbiAgICAgICAgICAgIHNpZ25hbCA9PiB7XG4gICAgICAgICAgICAgIC8vIHNlZSBub3RlIGluIHVzZUF0b21JbnN0YW5jZUR5bmFtaWNcbiAgICAgICAgICAgICAgaWYgKHNpZ25hbCA9PT0gJ0Rlc3Ryb3llZCcpIGNhY2hlZEluc3RhbmNlID0gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgICAgb25TdG9yZUNoYW5nZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBlY29zeXN0ZW0uX2dyYXBoLnJlbW92ZUVkZ2UoZGVwZW5kZW50S2V5LCBpbnN0YW5jZS5rZXlIYXNoKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBUaGlzIGhhY2sgc2hvdWxkIHdvcmsgJ2NhdXNlIFJlYWN0IGNhbid0IHVzZSB0aGUgcmV0dXJuIHZhbHVlIHVubGVzc1xuICAgICAgICAvLyBpdCByZW5kZXJzIHRoaXMgY29tcG9uZW50LiBBbmQgd2hlbiBpdCByZXJlbmRlcnMsXG4gICAgICAgIC8vIGBjYWNoZWRJbnN0YW5jZWAgd2lsbCBnZXQgZGVmaW5lZCBhZ2FpbiBiZWZvcmUgdGhpcyBwb2ludFxuICAgICAgICBpZiAoIWNhY2hlZEluc3RhbmNlKSByZXR1cm4gY2FjaGVkSW5zdGFuY2UgYXMgdHlwZW9mIGluc3RhbmNlXG5cbiAgICAgICAgLy8gU3VzcGVuc2UhXG4gICAgICAgIGlmIChzdXNwZW5kICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmIChjYWNoZWRJbnN0YW5jZS5fcHJvbWlzZVN0YXR1cyA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBjYWNoZWRJbnN0YW5jZS5wcm9taXNlXG4gICAgICAgICAgfSBlbHNlIGlmIChjYWNoZWRJbnN0YW5jZS5fcHJvbWlzZVN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgY2FjaGVkSW5zdGFuY2UuX3Byb21pc2VFcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWNoZWRJbnN0YW5jZVxuICAgICAgfSxcbiAgICBdXG4gIH0sIFtlY29zeXN0ZW0sIGluc3RhbmNlLCBzdXNwZW5kXSlcblxuICByZXR1cm4gdXNlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U25hcHNob3QpXG59XG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwiRWRnZUZsYWciLCJ1c2VFY29zeXN0ZW0iLCJ1c2VSZWFjdENvbXBvbmVudElkIiwiT1BFUkFUSU9OIiwidXNlQXRvbUluc3RhbmNlIiwiYXRvbSIsInBhcmFtcyIsIm9wZXJhdGlvbiIsInN1c3BlbmQiLCJlY29zeXN0ZW0iLCJkZXBlbmRlbnRLZXkiLCJpbnN0YW5jZSIsImdldEluc3RhbmNlIiwiY2FjaGVkSW5zdGFuY2UiLCJvblN0b3JlQ2hhbmdlIiwiX2dyYXBoIiwibm9kZXMiLCJrZXlIYXNoIiwiZGVwZW5kZW50cyIsImFjdGl2ZVN0YXRlIiwidW5kZWZpbmVkIiwiYWRkRWRnZSIsIkV4dGVybmFsIiwiU3RhdGljIiwic2lnbmFsIiwicmVtb3ZlRWRnZSIsIl9wcm9taXNlU3RhdHVzIiwicHJvbWlzZSIsIl9wcm9taXNlRXJyb3IiLCJzdWJzY3JpYmUiLCJnZXRTbmFwc2hvdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4538\n")},6215:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "l": function() { return /* binding */ useEcosystem; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _factories_createEcosystem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2662);\n/* harmony import */ var _classes_Ecosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5092);\n/* harmony import */ var _store_public_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9409);\nvar useEcosystem=function useEcosystem(){var ecosystemId=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_classes_Ecosystem__WEBPACK_IMPORTED_MODULE_1__/* .ecosystemContext */ .z);return (0,_store_public_api__WEBPACK_IMPORTED_MODULE_2__/* .getEcosystem */ .$$)(ecosystemId)||(0,_factories_createEcosystem__WEBPACK_IMPORTED_MODULE_3__/* .createEcosystem */ .q)({id:ecosystemId});};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIxNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBS08sR0FBTUksYUFBWSxDQUFHLFFBQWZBLGFBQVksRUFBUyxDQUNoQyxHQUFNQyxZQUFXLENBQUdMLGlEQUFVLENBQUNFLHlFQUFnQixDQUFDLENBQ2hELE1BQU9DLENBQUFBLHlFQUFZLENBQUNFLFdBQVcsQ0FBQyxFQUFJSixvRkFBZSxDQUFDLENBQUVLLEVBQUUsQ0FBRUQsV0FBWSxDQUFDLENBQUMsQ0FDMUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2hvb2tzL3VzZUVjb3N5c3RlbS50cz81YjcyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNyZWF0ZUVjb3N5c3RlbSB9IGZyb20gJy4uL2ZhY3Rvcmllcy9jcmVhdGVFY29zeXN0ZW0nXG5pbXBvcnQgeyBlY29zeXN0ZW1Db250ZXh0IH0gZnJvbSAnLi4vY2xhc3Nlcy9FY29zeXN0ZW0nXG5pbXBvcnQgeyBnZXRFY29zeXN0ZW0gfSBmcm9tICcuLi9zdG9yZS9wdWJsaWMtYXBpJ1xuXG5leHBvcnQgY29uc3QgdXNlRWNvc3lzdGVtID0gKCkgPT4ge1xuICBjb25zdCBlY29zeXN0ZW1JZCA9IHVzZUNvbnRleHQoZWNvc3lzdGVtQ29udGV4dClcbiAgcmV0dXJuIGdldEVjb3N5c3RlbShlY29zeXN0ZW1JZCkgfHwgY3JlYXRlRWNvc3lzdGVtKHsgaWQ6IGVjb3N5c3RlbUlkIH0pXG59XG4iXSwibmFtZXMiOlsidXNlQ29udGV4dCIsImNyZWF0ZUVjb3N5c3RlbSIsImVjb3N5c3RlbUNvbnRleHQiLCJnZXRFY29zeXN0ZW0iLCJ1c2VFY29zeXN0ZW0iLCJlY29zeXN0ZW1JZCIsImlkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6215\n')},6559:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": function() { return /* binding */ useReactComponentId; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _useEcosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6215);\n/**\n * Get a unique id for a Zedux hook call. The exact string doesn't really\n * matter, but try to use an error stack to grab the React component's actual\n * name for a better debugging experience\n */var useReactComponentId=function useReactComponentId(){var ecosystem=(0,_useEcosystem__WEBPACK_IMPORTED_MODULE_1__/* .useEcosystem */ .l)();// would be nice if React provided some way to know that multiple hooks are\n// from the same component. For now, every Zedux hook usage creates a new\n// graph node\nreturn (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function(){return ecosystem._idGenerator.generateReactComponentId();},[ecosystem]);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU1OS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNRSxvQkFBbUIsQ0FBRyxRQUF0QkEsb0JBQW1CLEVBQVMsQ0FDdkMsR0FBTUMsVUFBUyxDQUFHRixvRUFBWSxFQUFFLENBRWhDO0FBQ0E7QUFDQTtBQUNBLE1BQU9ELENBQUFBLDhDQUFPLENBQUMsaUJBQU1HLFVBQVMsQ0FBQ0MsWUFBWSxDQUFDQyx3QkFBd0IsRUFBRSxHQUFFLENBQ3RFRixTQUFTLENBQ1YsQ0FBQyxDQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9ob29rcy91c2VSZWFjdENvbXBvbmVudElkLnRzPzFiMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRWNvc3lzdGVtIH0gZnJvbSAnLi91c2VFY29zeXN0ZW0nXG5cbi8qKlxuICogR2V0IGEgdW5pcXVlIGlkIGZvciBhIFplZHV4IGhvb2sgY2FsbC4gVGhlIGV4YWN0IHN0cmluZyBkb2Vzbid0IHJlYWxseVxuICogbWF0dGVyLCBidXQgdHJ5IHRvIHVzZSBhbiBlcnJvciBzdGFjayB0byBncmFiIHRoZSBSZWFjdCBjb21wb25lbnQncyBhY3R1YWxcbiAqIG5hbWUgZm9yIGEgYmV0dGVyIGRlYnVnZ2luZyBleHBlcmllbmNlXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSZWFjdENvbXBvbmVudElkID0gKCkgPT4ge1xuICBjb25zdCBlY29zeXN0ZW0gPSB1c2VFY29zeXN0ZW0oKVxuXG4gIC8vIHdvdWxkIGJlIG5pY2UgaWYgUmVhY3QgcHJvdmlkZWQgc29tZSB3YXkgdG8ga25vdyB0aGF0IG11bHRpcGxlIGhvb2tzIGFyZVxuICAvLyBmcm9tIHRoZSBzYW1lIGNvbXBvbmVudC4gRm9yIG5vdywgZXZlcnkgWmVkdXggaG9vayB1c2FnZSBjcmVhdGVzIGEgbmV3XG4gIC8vIGdyYXBoIG5vZGVcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gZWNvc3lzdGVtLl9pZEdlbmVyYXRvci5nZW5lcmF0ZVJlYWN0Q29tcG9uZW50SWQoKSwgW1xuICAgIGVjb3N5c3RlbSxcbiAgXSlcbn1cbiJdLCJuYW1lcyI6WyJ1c2VNZW1vIiwidXNlRWNvc3lzdGVtIiwidXNlUmVhY3RDb21wb25lbnRJZCIsImVjb3N5c3RlbSIsIl9pZEdlbmVyYXRvciIsImdlbmVyYXRlUmVhY3RDb21wb25lbnRJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6559\n")},8723:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"o\": function() { return /* binding */ injectEffect; }\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(395);\n/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2314);\nvar getTask=function getTask(effect,descriptor){var task=function task(){var cleanup=effect();// now that the task has run, there's no need for the scheduler cleanup\n// function; replace it with the cleanup logic returned from the effect\n// (if any). If a promise was returned, ignore it.\ndescriptor.cleanup=typeof cleanup==='function'?cleanup:undefined;};return task;};/**\n * Runs a deferred side effect. This is just like React's `useEffect`. When\n * `deps` change on a subsequent reevaluation, the previous effect will be\n * cleaned up and the effect will rerun.\n *\n * Return a cleanup function to clean up resources when the effect reruns or the\n * current atom instance is destroyed.\n *\n * Unlike `useEffect`, you can return a promise from `injectEffect` (e.g. by\n * passing an async function). This is only for convenience in cases where you\n * don't have anything to cleanup, as you'll be unable to clean up resources if\n * you return a promise.\n */var injectEffect=function injectEffect(effect,deps){(0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .split */ .Vl)('injectEffect',_utils_types__WEBPACK_IMPORTED_MODULE_1__/* .InjectorType.Effect */ .R.Effect,function(instance){var descriptor={deps:deps,type:_utils_types__WEBPACK_IMPORTED_MODULE_1__/* .InjectorType.Effect */ .R.Effect};if(!instance.ecosystem.ssr){var task=getTask(effect,descriptor);descriptor.cleanup=function(){instance.ecosystem._scheduler.unscheduleJob(task);descriptor.cleanup=undefined;};instance.ecosystem._scheduler.scheduleJob({task:task,type:_utils_types__WEBPACK_IMPORTED_MODULE_1__/* .JobType.RunEffect */ .O.RunEffect});}return descriptor;},function(prevDescriptor,instance){if(instance.ecosystem.ssr)return prevDescriptor;var depsHaveChanged=(0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .haveDepsChanged */ .EM)(prevDescriptor==null?void 0:prevDescriptor.deps,deps);if(!depsHaveChanged)return prevDescriptor;prevDescriptor.cleanup==null?void 0:prevDescriptor.cleanup();var task=getTask(effect,prevDescriptor);// this cleanup should be unnecessary since effects run immediately every\n// time except init. Leave this though in case we add a way to update an\n// atom instance without flushing the scheduler\nprevDescriptor.cleanup=function(){instance.ecosystem._scheduler.unscheduleJob(task);prevDescriptor.cleanup=undefined;};prevDescriptor.deps=deps;instance.ecosystem._scheduler.scheduleJob({task:task,type:_utils_types__WEBPACK_IMPORTED_MODULE_1__/* .JobType.RunEffect */ .O.RunEffect});return prevDescriptor;});};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcyMy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUlBLEdBQU1JLFFBQU8sQ0FBRyxRQUFWQSxRQUFPLENBQ1hDLE1BQXNCLENBQ3RCQyxVQUFvQyxDQUNqQyxDQUNILEdBQU1DLEtBQUksQ0FBRyxRQUFQQSxLQUFJLEVBQVMsQ0FDakIsR0FBTUMsUUFBTyxDQUFHSCxNQUFNLEVBQUUsQ0FFeEI7QUFDQTtBQUNBO0FBQ0FDLFVBQVUsQ0FBQ0UsT0FBTyxDQUFHLE1BQU9BLFFBQU8sR0FBSyxVQUFVLENBQUdBLE9BQU8sQ0FBR0MsU0FBUyxDQUMxRSxDQUFDLENBRUQsTUFBT0YsS0FBSSxDQUNiLENBQUMsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNPLEdBQU1HLGFBQVksQ0FBRyxRQUFmQSxhQUFZLENBQUlMLE1BQXNCLENBQUVNLElBQW1CLENBQUssQ0FDM0VWLHVEQUFLLENBQ0gsY0FBYyxDQUNkQyw2RUFBbUIsQ0FDbkIsU0FBQVcsUUFBUSxDQUFJLENBQ1YsR0FBTVAsV0FBb0MsQ0FBRyxDQUMzQ0ssSUFBSSxDQUFKQSxJQUFJLENBQ0pHLElBQUksQ0FBRVosNkVBQ1IsQ0FBQyxDQUVELEdBQUksQ0FBQ1csUUFBUSxDQUFDRSxTQUFTLENBQUNDLEdBQUcsQ0FBRSxDQUMzQixHQUFNVCxLQUFJLENBQUdILE9BQU8sQ0FBQ0MsTUFBTSxDQUFFQyxVQUFVLENBQUMsQ0FDeENBLFVBQVUsQ0FBQ0UsT0FBTyxDQUFHLFVBQU0sQ0FDekJLLFFBQVEsQ0FBQ0UsU0FBUyxDQUFDRSxVQUFVLENBQUNDLGFBQWEsQ0FBQ1gsSUFBSSxDQUFDLENBQ2pERCxVQUFVLENBQUNFLE9BQU8sQ0FBR0MsU0FBUyxDQUNoQyxDQUFDLENBRURJLFFBQVEsQ0FBQ0UsU0FBUyxDQUFDRSxVQUFVLENBQUNFLFdBQVcsQ0FBQyxDQUN4Q1osSUFBSSxDQUFKQSxJQUFJLENBQ0pPLElBQUksQ0FBRVgsOEVBQ1IsQ0FBQyxDQUFDLENBQ0osQ0FFQSxNQUFPRyxXQUFVLENBQ25CLENBQUMsQ0FDRCxTQUFDZSxjQUFjLENBQUVSLFFBQVEsQ0FBSyxDQUM1QixHQUFJQSxRQUFRLENBQUNFLFNBQVMsQ0FBQ0MsR0FBRyxDQUFFLE1BQU9LLGVBQWMsQ0FFakQsR0FBTUMsZ0JBQWUsQ0FBR3RCLGlFQUFlLENBQUNxQixjQUFjLGNBQWRBLGNBQWMsQ0FBRVYsSUFBSSxDQUFFQSxJQUFJLENBQUMsQ0FFbkUsR0FBSSxDQUFDVyxlQUFlLENBQUUsTUFBT0QsZUFBYyxDQUUzQ0EsY0FBYyxDQUFDYixPQUFPLGNBQXRCYSxjQUFjLENBQUNiLE9BQU8sRUFBSSxDQUUxQixHQUFNRCxLQUFJLENBQUdILE9BQU8sQ0FBQ0MsTUFBTSxDQUFFZ0IsY0FBYyxDQUFDLENBQzVDO0FBQ0E7QUFDQTtBQUNBQSxjQUFjLENBQUNiLE9BQU8sQ0FBRyxVQUFNLENBQzdCSyxRQUFRLENBQUNFLFNBQVMsQ0FBQ0UsVUFBVSxDQUFDQyxhQUFhLENBQUNYLElBQUksQ0FBQyxDQUNqRGMsY0FBYyxDQUFDYixPQUFPLENBQUdDLFNBQVMsQ0FDcEMsQ0FBQyxDQUNEWSxjQUFjLENBQUNWLElBQUksQ0FBR0EsSUFBSSxDQUUxQkUsUUFBUSxDQUFDRSxTQUFTLENBQUNFLFVBQVUsQ0FBQ0UsV0FBVyxDQUFDLENBQ3hDWixJQUFJLENBQUpBLElBQUksQ0FDSk8sSUFBSSxDQUFFWCw4RUFDUixDQUFDLENBQUMsQ0FFRixNQUFPa0IsZUFBYyxDQUN2QixDQUFDLENBQ0YsQ0FDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvaW5qZWN0b3JzL2luamVjdEVmZmVjdC50cz9lOTE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVmZmVjdENhbGxiYWNrLCBJbmplY3RvckRlcHMgfSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IGhhdmVEZXBzQ2hhbmdlZCwgc3BsaXQgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7IEVmZmVjdEluamVjdG9yRGVzY3JpcHRvciwgSW5qZWN0b3JUeXBlLCBKb2JUeXBlIH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnXG5cbmNvbnN0IGdldFRhc2sgPSAoXG4gIGVmZmVjdDogRWZmZWN0Q2FsbGJhY2ssXG4gIGRlc2NyaXB0b3I6IEVmZmVjdEluamVjdG9yRGVzY3JpcHRvclxuKSA9PiB7XG4gIGNvbnN0IHRhc2sgPSAoKSA9PiB7XG4gICAgY29uc3QgY2xlYW51cCA9IGVmZmVjdCgpXG5cbiAgICAvLyBub3cgdGhhdCB0aGUgdGFzayBoYXMgcnVuLCB0aGVyZSdzIG5vIG5lZWQgZm9yIHRoZSBzY2hlZHVsZXIgY2xlYW51cFxuICAgIC8vIGZ1bmN0aW9uOyByZXBsYWNlIGl0IHdpdGggdGhlIGNsZWFudXAgbG9naWMgcmV0dXJuZWQgZnJvbSB0aGUgZWZmZWN0XG4gICAgLy8gKGlmIGFueSkuIElmIGEgcHJvbWlzZSB3YXMgcmV0dXJuZWQsIGlnbm9yZSBpdC5cbiAgICBkZXNjcmlwdG9yLmNsZWFudXAgPSB0eXBlb2YgY2xlYW51cCA9PT0gJ2Z1bmN0aW9uJyA/IGNsZWFudXAgOiB1bmRlZmluZWRcbiAgfVxuXG4gIHJldHVybiB0YXNrXG59XG5cbi8qKlxuICogUnVucyBhIGRlZmVycmVkIHNpZGUgZWZmZWN0LiBUaGlzIGlzIGp1c3QgbGlrZSBSZWFjdCdzIGB1c2VFZmZlY3RgLiBXaGVuXG4gKiBgZGVwc2AgY2hhbmdlIG9uIGEgc3Vic2VxdWVudCByZWV2YWx1YXRpb24sIHRoZSBwcmV2aW91cyBlZmZlY3Qgd2lsbCBiZVxuICogY2xlYW5lZCB1cCBhbmQgdGhlIGVmZmVjdCB3aWxsIHJlcnVuLlxuICpcbiAqIFJldHVybiBhIGNsZWFudXAgZnVuY3Rpb24gdG8gY2xlYW4gdXAgcmVzb3VyY2VzIHdoZW4gdGhlIGVmZmVjdCByZXJ1bnMgb3IgdGhlXG4gKiBjdXJyZW50IGF0b20gaW5zdGFuY2UgaXMgZGVzdHJveWVkLlxuICpcbiAqIFVubGlrZSBgdXNlRWZmZWN0YCwgeW91IGNhbiByZXR1cm4gYSBwcm9taXNlIGZyb20gYGluamVjdEVmZmVjdGAgKGUuZy4gYnlcbiAqIHBhc3NpbmcgYW4gYXN5bmMgZnVuY3Rpb24pLiBUaGlzIGlzIG9ubHkgZm9yIGNvbnZlbmllbmNlIGluIGNhc2VzIHdoZXJlIHlvdVxuICogZG9uJ3QgaGF2ZSBhbnl0aGluZyB0byBjbGVhbnVwLCBhcyB5b3UnbGwgYmUgdW5hYmxlIHRvIGNsZWFuIHVwIHJlc291cmNlcyBpZlxuICogeW91IHJldHVybiBhIHByb21pc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBpbmplY3RFZmZlY3QgPSAoZWZmZWN0OiBFZmZlY3RDYWxsYmFjaywgZGVwcz86IEluamVjdG9yRGVwcykgPT4ge1xuICBzcGxpdDxFZmZlY3RJbmplY3RvckRlc2NyaXB0b3I+KFxuICAgICdpbmplY3RFZmZlY3QnLFxuICAgIEluamVjdG9yVHlwZS5FZmZlY3QsXG4gICAgaW5zdGFuY2UgPT4ge1xuICAgICAgY29uc3QgZGVzY3JpcHRvcjogRWZmZWN0SW5qZWN0b3JEZXNjcmlwdG9yID0ge1xuICAgICAgICBkZXBzLFxuICAgICAgICB0eXBlOiBJbmplY3RvclR5cGUuRWZmZWN0LFxuICAgICAgfVxuXG4gICAgICBpZiAoIWluc3RhbmNlLmVjb3N5c3RlbS5zc3IpIHtcbiAgICAgICAgY29uc3QgdGFzayA9IGdldFRhc2soZWZmZWN0LCBkZXNjcmlwdG9yKVxuICAgICAgICBkZXNjcmlwdG9yLmNsZWFudXAgPSAoKSA9PiB7XG4gICAgICAgICAgaW5zdGFuY2UuZWNvc3lzdGVtLl9zY2hlZHVsZXIudW5zY2hlZHVsZUpvYih0YXNrKVxuICAgICAgICAgIGRlc2NyaXB0b3IuY2xlYW51cCA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgaW5zdGFuY2UuZWNvc3lzdGVtLl9zY2hlZHVsZXIuc2NoZWR1bGVKb2Ioe1xuICAgICAgICAgIHRhc2ssXG4gICAgICAgICAgdHlwZTogSm9iVHlwZS5SdW5FZmZlY3QsXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXNjcmlwdG9yXG4gICAgfSxcbiAgICAocHJldkRlc2NyaXB0b3IsIGluc3RhbmNlKSA9PiB7XG4gICAgICBpZiAoaW5zdGFuY2UuZWNvc3lzdGVtLnNzcikgcmV0dXJuIHByZXZEZXNjcmlwdG9yXG5cbiAgICAgIGNvbnN0IGRlcHNIYXZlQ2hhbmdlZCA9IGhhdmVEZXBzQ2hhbmdlZChwcmV2RGVzY3JpcHRvcj8uZGVwcywgZGVwcylcblxuICAgICAgaWYgKCFkZXBzSGF2ZUNoYW5nZWQpIHJldHVybiBwcmV2RGVzY3JpcHRvclxuXG4gICAgICBwcmV2RGVzY3JpcHRvci5jbGVhbnVwPy4oKVxuXG4gICAgICBjb25zdCB0YXNrID0gZ2V0VGFzayhlZmZlY3QsIHByZXZEZXNjcmlwdG9yKVxuICAgICAgLy8gdGhpcyBjbGVhbnVwIHNob3VsZCBiZSB1bm5lY2Vzc2FyeSBzaW5jZSBlZmZlY3RzIHJ1biBpbW1lZGlhdGVseSBldmVyeVxuICAgICAgLy8gdGltZSBleGNlcHQgaW5pdC4gTGVhdmUgdGhpcyB0aG91Z2ggaW4gY2FzZSB3ZSBhZGQgYSB3YXkgdG8gdXBkYXRlIGFuXG4gICAgICAvLyBhdG9tIGluc3RhbmNlIHdpdGhvdXQgZmx1c2hpbmcgdGhlIHNjaGVkdWxlclxuICAgICAgcHJldkRlc2NyaXB0b3IuY2xlYW51cCA9ICgpID0+IHtcbiAgICAgICAgaW5zdGFuY2UuZWNvc3lzdGVtLl9zY2hlZHVsZXIudW5zY2hlZHVsZUpvYih0YXNrKVxuICAgICAgICBwcmV2RGVzY3JpcHRvci5jbGVhbnVwID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgICBwcmV2RGVzY3JpcHRvci5kZXBzID0gZGVwc1xuXG4gICAgICBpbnN0YW5jZS5lY29zeXN0ZW0uX3NjaGVkdWxlci5zY2hlZHVsZUpvYih7XG4gICAgICAgIHRhc2ssXG4gICAgICAgIHR5cGU6IEpvYlR5cGUuUnVuRWZmZWN0LFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHByZXZEZXNjcmlwdG9yXG4gICAgfVxuICApXG59XG4iXSwibmFtZXMiOlsiaGF2ZURlcHNDaGFuZ2VkIiwic3BsaXQiLCJJbmplY3RvclR5cGUiLCJKb2JUeXBlIiwiZ2V0VGFzayIsImVmZmVjdCIsImRlc2NyaXB0b3IiLCJ0YXNrIiwiY2xlYW51cCIsInVuZGVmaW5lZCIsImluamVjdEVmZmVjdCIsImRlcHMiLCJFZmZlY3QiLCJpbnN0YW5jZSIsInR5cGUiLCJlY29zeXN0ZW0iLCJzc3IiLCJfc2NoZWR1bGVyIiwidW5zY2hlZHVsZUpvYiIsInNjaGVkdWxlSm9iIiwiUnVuRWZmZWN0IiwicHJldkRlc2NyaXB0b3IiLCJkZXBzSGF2ZUNoYW5nZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8723\n")},7361:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"i\": function() { return /* binding */ injectRef; }\n/* harmony export */ });\n/* harmony import */ var _zedux_react_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(395);\n/* harmony import */ var _zedux_react_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2314);\nvar injectRef=function injectRef(initialVal){var _split=(0,_zedux_react_utils__WEBPACK_IMPORTED_MODULE_0__/* .split */ .Vl)('injectRef',_zedux_react_utils__WEBPACK_IMPORTED_MODULE_1__/* .InjectorType.Ref */ .R.Ref,function(){return{ref:{current:initialVal},type:_zedux_react_utils__WEBPACK_IMPORTED_MODULE_1__/* .InjectorType.Ref */ .R.Ref};}),ref=_split.ref;return ref;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM2MS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUdPLEdBQU1FLFVBSVosQ0FBRyxRQUpTQSxVQUlaLENBQU9DLFVBQWMsQ0FBSyxDQUN6QixXQUFnQkYsbUVBQUssQ0FDbkIsV0FBVyxDQUNYRCw2RUFBZ0IsQ0FDaEIsaUJBQU8sQ0FDTEssR0FBRyxDQUFFLENBQUVDLE9BQU8sQ0FBRUgsVUFBZ0IsQ0FBQyxDQUNqQ0ksSUFBSSxDQUFFUCw2RUFDUixDQUFDLEVBQUMsQ0FDSCxDQVBPSyxHQUFHLFFBQUhBLEdBQUcsQ0FTWCxNQUFPQSxJQUFHLENBQ1osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2luamVjdG9ycy9pbmplY3RSZWYudHM/M2RlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNdXRhYmxlUmVmT2JqZWN0LCBSZWZPYmplY3QgfSBmcm9tICdAemVkdXgvcmVhY3QvdHlwZXMnXG5pbXBvcnQgeyBJbmplY3RvclR5cGUsIFJlZkluamVjdG9yRGVzY3JpcHRvciwgc3BsaXQgfSBmcm9tICdAemVkdXgvcmVhY3QvdXRpbHMnXG5cbmV4cG9ydCBjb25zdCBpbmplY3RSZWY6IHtcbiAgPFQ+KGluaXRpYWxWYWw6IFQpOiBNdXRhYmxlUmVmT2JqZWN0PFQ+XG4gIDxUPihpbml0aWFsVmFsOiBUIHwgbnVsbCk6IFJlZk9iamVjdDxUPlxuICA8VCA9IHVuZGVmaW5lZD4oKTogTXV0YWJsZVJlZk9iamVjdDxUIHwgdW5kZWZpbmVkPlxufSA9IDxUPihpbml0aWFsVmFsPzogVCkgPT4ge1xuICBjb25zdCB7IHJlZiB9ID0gc3BsaXQ8UmVmSW5qZWN0b3JEZXNjcmlwdG9yPFQ+PihcbiAgICAnaW5qZWN0UmVmJyxcbiAgICBJbmplY3RvclR5cGUuUmVmLFxuICAgICgpID0+ICh7XG4gICAgICByZWY6IHsgY3VycmVudDogaW5pdGlhbFZhbCBhcyBUIH0sXG4gICAgICB0eXBlOiBJbmplY3RvclR5cGUuUmVmLFxuICAgIH0pXG4gIClcblxuICByZXR1cm4gcmVmXG59XG4iXSwibmFtZXMiOlsiSW5qZWN0b3JUeXBlIiwic3BsaXQiLCJpbmplY3RSZWYiLCJpbml0aWFsVmFsIiwiUmVmIiwicmVmIiwiY3VycmVudCIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7361\n")},5684:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"n\": function() { return /* binding */ injectStore; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3064);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1694);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(395);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2314);\nvar doSubscribe=function doSubscribe(instance,store){return store.subscribe({effects:function effects(_ref){var action=_ref.action,newState=_ref.newState,oldState=_ref.oldState;// Nothing to do if the state hasn't changed. Also, ignore state updates\n// during evaluation. TODO: Create an ecosystem-level flag to turn on\n// warning logging for state-updates-during-evaluation, since this may be\n// considered an anti-pattern.\nif(newState===oldState||instance.ecosystem._evaluationStack.isEvaluating(instance.keyHash)||(action==null?void 0:action.meta)===_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .metaTypes.SKIP_EVALUATION */ .u.SKIP_EVALUATION){return;}instance._scheduleEvaluation({newState:newState,oldState:oldState,operation:'injectStore',reasons:[{action:action,newState:newState,oldState:oldState,operation:'dispatch',sourceType:'Store',type:'state changed'}],sourceType:'Injector',type:'state changed'},0,false);// run the scheduler synchronously after any store update\ninstance.ecosystem._scheduler.flush();}});};var getHydration=function getHydration(instance){var _instance$ecosystem$h,_instance$atom$consum;var hydratedValue=(_instance$ecosystem$h=instance.ecosystem.hydration)==null?void 0:_instance$ecosystem$h[instance.keyHash];if(typeof hydratedValue==='undefined')return;if((_instance$atom$consum=instance.atom.consumeHydrations)!=null?_instance$atom$consum:instance.ecosystem.consumeHydrations){var _instance$ecosystem$h2;(_instance$ecosystem$h2=instance.ecosystem.hydration)==null?true:delete _instance$ecosystem$h2[instance.keyHash];}return instance.atom.hydrate?instance.atom.hydrate(hydratedValue):hydratedValue;};/**\n * injectStore()\n *\n * A convenience utility for quickly creating and optionally subscribing to\n * stores in atoms.\n *\n * The returned store is a stable reference - it will not change on subsequent\n * evaluations. It can therefore be returned from the instance factory as the\n * instance's store. It also doesn't _need_ to be added to injector deps arrays\n * (though there's no harm in doing so).\n *\n * Accepts either the initial store state or a function that returns the store.\n * Use the latter for maximum flexibility.\n *\n * Subscribes to the store by default, causing the atom to be reevaluated on\n * every state change. This can be changed by passing `false` as the\n * subscribe config option.\n *\n * In most cases you won't need to prevent subscribing. But it can be a useful\n * performance optimization.\n *\n * ```ts\n * import { atom, injectStore } from '@zedux/react'\n *\n * const inputAtom = atom('input', () => {\n *   const store = injectStore('', { subscribe: false })\n *\n *   return store\n * })\n * ```\n *\n * When `hydrate: true` is passed, the store's initial state will be set to the\n * value from the last call to `ecosystem.hydrate()` whose key matches this atom\n * instance. The hydrated value will be passed to the atom's `hydrate` config\n * option, if any, to transform the value first.\n *\n * When the function `storeFactory` overload is used and `hydrate: true` is\n * passed, the transformed hydration will be passed to the store factory\n * function and it's up to you to use it to hydrate the store you create.\n *\n * ```ts\n * const store = injectStore(\n *   hydration => createStore(null, hydration ?? defaultVal),\n *   { hydrate: true }\n * )\n * // or simply:\n * const store = injectStore(defaultVal, { hydrate: true })\n * ```\n *\n * @param storeFactory - Either a function that returns a store or the initial\n * state of the store\n * @param config - A config object. Accepts the following properties:\n *   - `hydrate` - Whether to try hydrating this store with\n *   - `subscribe` - Whether to subscribe to the store (default: `true`)\n * @returns Store\n */var injectStore=function injectStore(storeFactory,config){var _config$subscribe;var subscribe=(_config$subscribe=config==null?void 0:config.subscribe)!=null?_config$subscribe:true;var _split=(0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .split */ .Vl)('injectStore',_utils__WEBPACK_IMPORTED_MODULE_2__/* .InjectorType.Store */ .R.Store,function(instance){var getStore=typeof storeFactory==='function'?storeFactory:function(hydration){return (0,_zedux_core__WEBPACK_IMPORTED_MODULE_3__/* .createStore */ .M)(null,hydration||storeFactory);};var store=getStore(config!=null&&config.hydrate?getHydration(instance):undefined);var subscription=subscribe&&doSubscribe(instance,store);return{cleanup:subscription?function(){return subscription.unsubscribe();}:undefined,store:store,type:_utils__WEBPACK_IMPORTED_MODULE_2__/* .InjectorType.Store */ .R.Store};},function(prevInjector,instance){var prevsubscribe=!!prevInjector.cleanup;if(prevsubscribe===subscribe)return prevInjector;// we were subscribed, now we're not\nif(!subscribe){prevInjector.cleanup==null?void 0:prevInjector.cleanup();prevInjector.cleanup=undefined;return prevInjector;}// we weren't subscribed, now we are\nvar subscription=doSubscribe(instance,prevInjector.store);prevInjector.cleanup=function(){return subscription.unsubscribe();};return prevInjector;}),store=_split.store;return store;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5684\n")},1519:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"D$\": function() { return /* binding */ removeEcosystem; },\n/* harmony export */   \"Ej\": function() { return /* binding */ wipe; },\n/* harmony export */   \"tZ\": function() { return /* binding */ addEcosystem; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2808);\nvar addEcosystem=(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('@@zedux/react/addEcosystem');var removeEcosystem=(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('removeEcosystem');var wipe=(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('wipe');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFHTyxHQUFNQyxhQUFZLENBQUdELG1FQUFhLENBQ3ZDLDRCQUE0QixDQUM3QixDQUVNLEdBQU1FLGdCQUFlLENBQUdGLG1FQUFhLENBRXpDLGlCQUFpQixDQUFDLENBRWQsR0FBTUcsS0FBSSxDQUFHSCxtRUFBYSxDQUFDLE1BQU0sQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL3N0b3JlL2FjdGlvbnMudHM/NzE2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhY3Rpb25GYWN0b3J5IH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuLi9jbGFzc2VzL0Vjb3N5c3RlbSdcblxuZXhwb3J0IGNvbnN0IGFkZEVjb3N5c3RlbSA9IGFjdGlvbkZhY3Rvcnk8RWNvc3lzdGVtPihcbiAgJ0BAemVkdXgvcmVhY3QvYWRkRWNvc3lzdGVtJ1xuKVxuXG5leHBvcnQgY29uc3QgcmVtb3ZlRWNvc3lzdGVtID0gYWN0aW9uRmFjdG9yeTx7XG4gIGVjb3N5c3RlbUlkOiBzdHJpbmdcbn0+KCdyZW1vdmVFY29zeXN0ZW0nKVxuXG5leHBvcnQgY29uc3Qgd2lwZSA9IGFjdGlvbkZhY3RvcnkoJ3dpcGUnKVxuIl0sIm5hbWVzIjpbImFjdGlvbkZhY3RvcnkiLCJhZGRFY29zeXN0ZW0iLCJyZW1vdmVFY29zeXN0ZW0iLCJ3aXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1519\n")},5790:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"cr\": function() { return /* binding */ globalStore; }\n});\n\n// UNUSED EXPORTS: addEcosystem, removeEcosystem, wipe\n\n// EXTERNAL MODULE: ../packages/core/src/api/createStore.ts + 4 modules\nvar createStore = __webpack_require__(1694);\n// EXTERNAL MODULE: ../packages/core/src/api/createReducer.ts\nvar createReducer = __webpack_require__(6967);\n// EXTERNAL MODULE: ../packages/react/src/store/actions.ts\nvar actions = __webpack_require__(1519);\n;// CONCATENATED MODULE: ../packages/react/src/store/ecosystems.ts\nvar initialState={};var ecosystemsReducer=(0,createReducer/* createReducer */.L)(initialState).reduce(actions/* addEcosystem */.tZ,function(state,newEcosystem){var _Object$assign;return Object.assign({},state,(_Object$assign={},_Object$assign[newEcosystem.ecosystemId]=newEcosystem,_Object$assign));}).reduce(actions/* removeEcosystem */.D$,function(state,_ref){var ecosystemId=_ref.ecosystemId;var newState=Object.assign({},state);delete newState[ecosystemId];return newState;}).reduce(actions/* wipe */.Ej,function(){return initialState;});\n;// CONCATENATED MODULE: ../packages/react/src/store/index.ts\nvar eventType='@@zedux/register-child-window';var getGlobalStore=function getGlobalStore(){if(typeof window==='undefined'){return (0,createStore/* createStore */.M)({ecosystems:ecosystemsReducer});}if(typeof window.addEventListener!=='undefined'){window.addEventListener(eventType,function(event){var _detail;if(typeof((_detail=event.detail)==null?void 0:_detail.callback)==='function'){;event.detail.callback(globalStore);}});}if(window.opener&&window.dispatchEvent&&window.CustomEvent){var store=undefined;var callback=function callback(storeFromAbove){return store=storeFromAbove;};var event=new window.CustomEvent(eventType,{detail:{callback:callback}});window.opener.dispatchEvent(event);if(store)return store;}return (0,createStore/* createStore */.M)({ecosystems:ecosystemsReducer});};var globalStore=getGlobalStore();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTc5MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFJQSxHQUFNSSxhQUFZLENBQUcsQ0FBQyxDQUFDLENBRWhCLEdBQU1DLGtCQUFpQixDQUFHTCxzQ0FBYSxDQUUzQ0ksWUFBWSxDQUFDLENBQ2JFLE1BQU0sQ0FBQ0wsNEJBQVksQ0FBRSxTQUFDTSxLQUFLLENBQUVDLFlBQVksNkNBQ3JDRCxLQUFLLG1DQUNQQyxZQUFZLENBQUNDLFdBQVcsRUFBR0QsWUFBWSxtQkFDeEMsQ0FBQyxDQUNGRixNQUFNLENBQUNKLCtCQUFlLENBQUUsU0FBQ0ssS0FBSyxNQUFzQixJQUFsQkUsWUFBVyxNQUFYQSxXQUFXLENBQzVDLEdBQU1DLFNBQVEsa0JBQVFILEtBQUssQ0FBRSxDQUM3QixNQUFPRyxTQUFRLENBQUNELFdBQVcsQ0FBQyxDQUU1QixNQUFPQyxTQUFRLENBQ2pCLENBQUMsQ0FBQyxDQUNESixNQUFNLENBQUNILG9CQUFJLENBQUUsaUJBQU1DLGFBQVksR0FBQyxDOztBQ2RuQyxHQUFNUSxVQUFTLENBQUcsK0JBQStCLENBSWpELEdBQU1DLGVBQWMsQ0FBRyxRQUFqQkEsZUFBYyxFQUFzQixDQUN4QyxHQUFJLE1BQU9DLE9BQU0sR0FBSyxXQUFXLENBQUUsQ0FDakMsTUFBT0gsQ0FBQUEsa0NBQVcsQ0FBQyxDQUFFSSxVQUFVLENBQUVWLGlCQUFrQixDQUFDLENBQUMsQ0FDdkQsQ0FFQSxHQUFJLE1BQU9TLE9BQU0sQ0FBQ0UsZ0JBQWdCLEdBQUssV0FBVyxDQUFFLENBQ2xERixNQUFNLENBQUNFLGdCQUFnQixDQUFDSixTQUFTLENBQUUsU0FBQUssS0FBSyxDQUFJLGFBQzFDLEdBQUksZ0JBQVFBLEtBQUssQ0FBaUJDLE1BQU0sZUFBN0IsUUFBK0JDLFFBQVEsSUFBSyxVQUFVLENBQUUsQ0FDakUsQ0FBRUYsS0FBSyxDQUFpQkMsTUFBTSxDQUFDQyxRQUFRLENBQUNDLFdBQVcsQ0FBQyxDQUN0RCxDQUNGLENBQUMsQ0FBQyxDQUNKLENBRUEsR0FBSU4sTUFBTSxDQUFDTyxNQUFNLEVBQUtQLE1BQU0sQ0FBU1EsYUFBYSxFQUFJUixNQUFNLENBQUNTLFdBQVcsQ0FBRSxDQUN4RSxHQUFJQyxNQUF3QixDQUFHQyxTQUFTLENBQ3hDLEdBQU1OLFNBQVEsQ0FBRyxRQUFYQSxTQUFRLENBQUlPLGNBQXFCLFFBQU1GLE1BQUssQ0FBR0UsY0FBYyxFQUFDLENBRXBFLEdBQU1ULE1BQUssQ0FBRyxHQUFJSCxPQUFNLENBQUNTLFdBQVcsQ0FBQ1gsU0FBUyxDQUFFLENBQUVNLE1BQU0sQ0FBRSxDQUFFQyxRQUFRLENBQVJBLFFBQVMsQ0FBRSxDQUFDLENBQUMsQ0FDekVMLE1BQU0sQ0FBQ08sTUFBTSxDQUFDQyxhQUFhLENBQUNMLEtBQUssQ0FBQyxDQUVsQyxHQUFJTyxLQUFLLENBQUUsTUFBT0EsTUFBSyxDQUN6QixDQUVBLE1BQU9iLENBQUFBLGtDQUFXLENBQUMsQ0FDakJJLFVBQVUsQ0FBRVYsaUJBQ2QsQ0FBQyxDQUFDLENBQ0osQ0FBQyxDQUVNLEdBQU1lLFlBQVcsQ0FBR1AsY0FBYyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvc3RvcmUvZWNvc3lzdGVtcy50cz9iYzBhIiwid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL3N0b3JlL2luZGV4LnRzPzExYzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmVkdWNlciB9IGZyb20gJ0B6ZWR1eC9jb3JlJ1xuaW1wb3J0IHsgRWNvc3lzdGVtIH0gZnJvbSAnLi4vY2xhc3Nlcy9FY29zeXN0ZW0nXG5pbXBvcnQgeyBhZGRFY29zeXN0ZW0sIHJlbW92ZUVjb3N5c3RlbSwgd2lwZSB9IGZyb20gJy4vYWN0aW9ucydcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge31cblxuZXhwb3J0IGNvbnN0IGVjb3N5c3RlbXNSZWR1Y2VyID0gY3JlYXRlUmVkdWNlcjx7XG4gIFtlY29zeXN0ZW1JZDogc3RyaW5nXTogRWNvc3lzdGVtXG59Pihpbml0aWFsU3RhdGUpXG4gIC5yZWR1Y2UoYWRkRWNvc3lzdGVtLCAoc3RhdGUsIG5ld0Vjb3N5c3RlbSkgPT4gKHtcbiAgICAuLi5zdGF0ZSxcbiAgICBbbmV3RWNvc3lzdGVtLmVjb3N5c3RlbUlkXTogbmV3RWNvc3lzdGVtLFxuICB9KSlcbiAgLnJlZHVjZShyZW1vdmVFY29zeXN0ZW0sIChzdGF0ZSwgeyBlY29zeXN0ZW1JZCB9KSA9PiB7XG4gICAgY29uc3QgbmV3U3RhdGUgPSB7IC4uLnN0YXRlIH1cbiAgICBkZWxldGUgbmV3U3RhdGVbZWNvc3lzdGVtSWRdXG5cbiAgICByZXR1cm4gbmV3U3RhdGVcbiAgfSlcbiAgLnJlZHVjZSh3aXBlLCAoKSA9PiBpbml0aWFsU3RhdGUpXG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgU3RvcmUgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7IGVjb3N5c3RlbXNSZWR1Y2VyIH0gZnJvbSAnLi9lY29zeXN0ZW1zJ1xuXG5leHBvcnQgKiBmcm9tICcuL2FjdGlvbnMnXG5cbmNvbnN0IGV2ZW50VHlwZSA9ICdAQHplZHV4L3JlZ2lzdGVyLWNoaWxkLXdpbmRvdydcblxudHlwZSBHbG9iYWxTdG9yZSA9IFN0b3JlPHsgZWNvc3lzdGVtczogUmV0dXJuVHlwZTx0eXBlb2YgZWNvc3lzdGVtc1JlZHVjZXI+IH0+XG5cbmNvbnN0IGdldEdsb2JhbFN0b3JlID0gKCk6IEdsb2JhbFN0b3JlID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHsgZWNvc3lzdGVtczogZWNvc3lzdGVtc1JlZHVjZXIgfSlcbiAgfVxuXG4gIGlmICh0eXBlb2Ygd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudCA9PiB7XG4gICAgICBpZiAodHlwZW9mIChldmVudCBhcyBDdXN0b21FdmVudCkuZGV0YWlsPy5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICA7KGV2ZW50IGFzIEN1c3RvbUV2ZW50KS5kZXRhaWwuY2FsbGJhY2soZ2xvYmFsU3RvcmUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGlmICh3aW5kb3cub3BlbmVyICYmICh3aW5kb3cgYXMgYW55KS5kaXNwYXRjaEV2ZW50ICYmIHdpbmRvdy5DdXN0b21FdmVudCkge1xuICAgIGxldCBzdG9yZTogU3RvcmUgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgICBjb25zdCBjYWxsYmFjayA9IChzdG9yZUZyb21BYm92ZTogU3RvcmUpID0+IChzdG9yZSA9IHN0b3JlRnJvbUFib3ZlKVxuXG4gICAgY29uc3QgZXZlbnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50VHlwZSwgeyBkZXRhaWw6IHsgY2FsbGJhY2sgfSB9KVxuICAgIHdpbmRvdy5vcGVuZXIuZGlzcGF0Y2hFdmVudChldmVudClcblxuICAgIGlmIChzdG9yZSkgcmV0dXJuIHN0b3JlXG4gIH1cblxuICByZXR1cm4gY3JlYXRlU3RvcmUoe1xuICAgIGVjb3N5c3RlbXM6IGVjb3N5c3RlbXNSZWR1Y2VyLFxuICB9KVxufVxuXG5leHBvcnQgY29uc3QgZ2xvYmFsU3RvcmUgPSBnZXRHbG9iYWxTdG9yZSgpXG4iXSwibmFtZXMiOlsiY3JlYXRlUmVkdWNlciIsImFkZEVjb3N5c3RlbSIsInJlbW92ZUVjb3N5c3RlbSIsIndpcGUiLCJpbml0aWFsU3RhdGUiLCJlY29zeXN0ZW1zUmVkdWNlciIsInJlZHVjZSIsInN0YXRlIiwibmV3RWNvc3lzdGVtIiwiZWNvc3lzdGVtSWQiLCJuZXdTdGF0ZSIsImNyZWF0ZVN0b3JlIiwiZXZlbnRUeXBlIiwiZ2V0R2xvYmFsU3RvcmUiLCJ3aW5kb3ciLCJlY29zeXN0ZW1zIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZGV0YWlsIiwiY2FsbGJhY2siLCJnbG9iYWxTdG9yZSIsIm9wZW5lciIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsInN0b3JlIiwidW5kZWZpbmVkIiwic3RvcmVGcm9tQWJvdmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5790\n")},9409:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "$$": function() { return /* binding */ getEcosystem; },\n/* harmony export */   "Ej": function() { return /* binding */ wipe; },\n/* harmony export */   "Wg": function() { return /* binding */ zeduxGlobalStore; }\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5790);\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1519);\nvar getEcosystem=function getEcosystem(id){var ecosystem=___WEBPACK_IMPORTED_MODULE_0__/* .globalStore.getState */ .cr.getState().ecosystems[id];if(ecosystem)return ecosystem;};var wipe=function wipe(){var ecosystems=Object.values(___WEBPACK_IMPORTED_MODULE_0__/* .globalStore.getState */ .cr.getState().ecosystems);ecosystems.forEach(function(es){es.destroy(true);});___WEBPACK_IMPORTED_MODULE_0__/* .globalStore.dispatch */ .cr.dispatch((0,___WEBPACK_IMPORTED_MODULE_1__/* .wipe */ .Ej)());};var zeduxGlobalStore=___WEBPACK_IMPORTED_MODULE_0__/* .globalStore */ .cr;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQwOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR08sR0FBTUcsYUFBWSxDQUFHLFFBQWZBLGFBQVksQ0FBSUMsRUFBVSxDQUE0QixDQUNqRSxHQUFNQyxVQUFTLENBQUdMLHNFQUFvQixFQUFFLENBQUNPLFVBQVUsQ0FBQ0gsRUFBRSxDQUFDLENBRXZELEdBQUlDLFNBQVMsQ0FBRSxNQUFPQSxVQUFTLENBQ2pDLENBQUMsQ0FFTSxHQUFNSixLQUFJLENBQUcsUUFBUEEsS0FBSSxFQUFTLENBQ3hCLEdBQU1NLFdBQVUsQ0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNULHNFQUFvQixFQUFFLENBQUNPLFVBQVUsQ0FBQyxDQUVuRUEsVUFBVSxDQUFDRyxPQUFPLENBQUMsU0FBQUMsRUFBRSxDQUFJLENBQ3ZCQSxFQUFFLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDbEIsQ0FBQyxDQUFDLENBRUZaLHNFQUFvQixDQUFDRSxpREFBVSxFQUFFLENBQUMsQ0FDcEMsQ0FBQyxDQUVNLEdBQU1ZLGlCQUFnQixDQUFHZCxvREFBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL3N0b3JlL3B1YmxpYy1hcGkudHM/YzRlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuLi9jbGFzc2VzJ1xuaW1wb3J0IHsgZ2xvYmFsU3RvcmUsIHdpcGUgYXMgd2lwZUFjdGlvbiB9IGZyb20gJy4vJ1xuXG5leHBvcnQgY29uc3QgZ2V0RWNvc3lzdGVtID0gKGlkOiBzdHJpbmcpOiBFY29zeXN0ZW0gfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCBlY29zeXN0ZW0gPSBnbG9iYWxTdG9yZS5nZXRTdGF0ZSgpLmVjb3N5c3RlbXNbaWRdXG5cbiAgaWYgKGVjb3N5c3RlbSkgcmV0dXJuIGVjb3N5c3RlbVxufVxuXG5leHBvcnQgY29uc3Qgd2lwZSA9ICgpID0+IHtcbiAgY29uc3QgZWNvc3lzdGVtcyA9IE9iamVjdC52YWx1ZXMoZ2xvYmFsU3RvcmUuZ2V0U3RhdGUoKS5lY29zeXN0ZW1zKVxuXG4gIGVjb3N5c3RlbXMuZm9yRWFjaChlcyA9PiB7XG4gICAgZXMuZGVzdHJveSh0cnVlKVxuICB9KVxuXG4gIGdsb2JhbFN0b3JlLmRpc3BhdGNoKHdpcGVBY3Rpb24oKSlcbn1cblxuZXhwb3J0IGNvbnN0IHplZHV4R2xvYmFsU3RvcmUgPSBnbG9iYWxTdG9yZVxuIl0sIm5hbWVzIjpbImdsb2JhbFN0b3JlIiwid2lwZSIsIndpcGVBY3Rpb24iLCJnZXRFY29zeXN0ZW0iLCJpZCIsImVjb3N5c3RlbSIsImdldFN0YXRlIiwiZWNvc3lzdGVtcyIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJlcyIsImRlc3Ryb3kiLCJkaXNwYXRjaCIsInplZHV4R2xvYmFsU3RvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9409\n')},6511:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "d": function() { return /* binding */ EdgeFlag; }\n/* harmony export */ });\n/**\n * The AtomGettersBase interface. You probably won\'t want to use this directly.\n * Use AtomGetters instead.\n */ /**\n * AtomGetters are used all throughout Zedux. When called synchronously during\n * atom or AtomSelector evaluation, they register graph edges. When called\n * asynchronously, they\'re just aliases for the corresponding ecosystem method.\n *\n * ```ts\n * const mySelector = ion(\'mySelector\', ({ ecosystem, get }) => {\n *   const dynamicVal = get(myAtom) // registers graph edge\n *   const staticVal = ecosystem.get(myAtom) // doesn\'t register anything\n *\n *   injectEffect(() => {\n *     const staticVal2 = get(myAtom) // doesn\'t register anything\n *     // const staticVal2 = ecosystem.get(myAtom) // same exact thing\n *   }, [])\n * })\n * ```\n */ /**\n * The flag score determines job priority in the scheduler. Scores range from\n * 0-7. Lower score = higher prio. Examples:\n *\n * 0 = implicit-internal-dynamic\n * 3 = explicit-external-dynamic\n * 7 = explicit-external-static\n */var EdgeFlag;// Deferred = 8,\n(function(EdgeFlag){EdgeFlag[EdgeFlag["Explicit"]=1]="Explicit";EdgeFlag[EdgeFlag["External"]=2]="External";EdgeFlag[EdgeFlag["Static"]=4]="Static";})(EdgeFlag||(EdgeFlag={}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6511\n')},395:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "EM": function() { return /* binding */ haveDepsChanged; },\n/* harmony export */   "H5": function() { return /* binding */ getPrevInjector; },\n/* harmony export */   "Vl": function() { return /* binding */ split; },\n/* harmony export */   "is": function() { return /* binding */ is; }\n/* harmony export */ });\n/* harmony import */ var _classes_EvaluationStack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2633);\nvar getPrevInjector=function getPrevInjector(operation,type,instance,next){var _instance$_injectors,_instance$_nextInject,_instance$_nextInject2;var prevDescriptor=(_instance$_injectors=instance._injectors)==null?void 0:_instance$_injectors[(_instance$_nextInject=instance._nextInjectors)==null?void 0:_instance$_nextInject.length];if( true&&(!prevDescriptor||prevDescriptor.type!==type)){throw new Error("Zedux: "+operation+" in atom \\""+instance.atom.key+"\\" - injectors cannot be added, removed, or reordered");}var descriptor=next?next(prevDescriptor,instance):prevDescriptor;(_instance$_nextInject2=instance._nextInjectors)==null?void 0:_instance$_nextInject2.push(descriptor);return descriptor;};/**\n * Compare two arrays and see if any elements are different (===). Returns true\n * by default if either array is undefined\n */var haveDepsChanged=function haveDepsChanged(prevDeps,nextDeps,matchUndefinedAndEmpty){if(!prevDeps||!nextDeps){return matchUndefinedAndEmpty?!(prevDeps!=null&&prevDeps.length)&&!(nextDeps!=null&&nextDeps.length):!prevDeps||!nextDeps;}return prevDeps.length!==nextDeps.length||prevDeps.some(function(dep,i){return nextDeps[i]!==dep;});};/**\n * is() - Checks if a value is an instance of a class\n *\n * We can\'t use instanceof \'cause that breaks across realms - e.g. when an atom\n * instance is shared between a parent and child window, that instance\'s object\n * reference will be different in both windows (since each window creates its\n * own copy of Zedux).\n *\n * The classToCheck should have a static $$typeof property whose value is a\n * symbol created with Symbol.for() (sharing the symbol reference across realms)\n *\n * Important! Only one level of inheritance is supported currently - we never\n * use $$typeof on a child of a child of a class, but if we do need a $$typeof\n * on the Atom class and the BaseAtom class, for example, we\'ll need to add\n * logic here to support that\n *\n * @param val anything - the thing we\'re checking\n * @param classToCheck a class with a static $$typeof property\n * @returns boolean - whether val is an instanceof classToCheck\n */var is=function is(val,classToCheck){var _Object$getPrototypeO;return(val==null?void 0:val.constructor)&&(val.constructor.$$typeof===classToCheck.$$typeof||((_Object$getPrototypeO=Object.getPrototypeOf(val.constructor))==null?void 0:_Object$getPrototypeO.$$typeof)===classToCheck.$$typeof);};var split=function split(operation,type,first,next){var instance=(0,_classes_EvaluationStack__WEBPACK_IMPORTED_MODULE_0__/* .readInstance */ .i)();if(instance.activeState===\'Initializing\'){var _instance$_nextInject3;var descriptor=first(instance);(_instance$_nextInject3=instance._nextInjectors)==null?void 0:_instance$_nextInject3.push(descriptor);return descriptor;}return getPrevInjector(operation,type,instance,next);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJTyxHQUFNQyxnQkFBZSxDQUFHLFFBQWxCQSxnQkFBZSxDQUMxQkMsU0FBaUIsQ0FDakJDLElBQWtCLENBQ2xCQyxRQUF5QixDQUN6QkMsSUFBMEQsQ0FDdkQsdUVBQ0gsR0FBTUMsZUFBYyx1QkFBR0YsUUFBUSxDQUFDRyxVQUFVLGVBQW5CLDRDQUNyQkgsUUFBUSxDQUFDSSxjQUFjLGVBQXZCLHNCQUF5QkMsTUFBTSxDQUMzQixDQUVOLEdBQUlDLEtBQUcsR0FBSyxDQUFDSixjQUFjLEVBQUlBLGNBQWMsQ0FBQ0gsSUFBSSxHQUFLQSxJQUFJLENBQUMsQ0FBRSxDQUM1RCxLQUFNLElBQUlRLE1BQUssV0FDSFQsU0FBUyxlQUFhRSxRQUFRLENBQUNRLElBQUksQ0FBQ0MsR0FBRyx5REFDbEQsQ0FDSCxDQUVBLEdBQU1DLFdBQVUsQ0FBR1QsSUFBSSxDQUFHQSxJQUFJLENBQUNDLGNBQWMsQ0FBRUYsUUFBUSxDQUFDLENBQUdFLGNBQWMsQ0FDekUsd0JBQUFGLFFBQVEsQ0FBQ0ksY0FBYyxlQUF2Qix1QkFBeUJPLElBQUksQ0FBQ0QsVUFBVSxDQUFDLENBRXpDLE1BQU9BLFdBQVUsQ0FDbkIsQ0FBQyxDQUVEO0FBQ0E7QUFDQTtBQUNBLEdBQ08sR0FBTUUsZ0JBQWUsQ0FBRyxRQUFsQkEsZ0JBQWUsQ0FDMUJDLFFBQWdCLENBQ2hCQyxRQUFnQixDQUNoQkMsc0JBQWdDLENBQzdCLENBQ0gsR0FBSSxDQUFDRixRQUFRLEVBQUksQ0FBQ0MsUUFBUSxDQUFFLENBQzFCLE1BQU9DLHVCQUFzQixDQUN6QixFQUFDRixRQUFRLFFBQVJBLFFBQVEsQ0FBRVIsTUFBTSxHQUFJLEVBQUNTLFFBQVEsUUFBUkEsUUFBUSxDQUFFVCxNQUFNLEVBQ3RDLENBQUNRLFFBQVEsRUFBSSxDQUFDQyxRQUFRLENBQzVCLENBRUEsTUFDRUQsU0FBUSxDQUFDUixNQUFNLEdBQUtTLFFBQVEsQ0FBQ1QsTUFBTSxFQUNuQ1EsUUFBUSxDQUFDRyxJQUFJLENBQUMsU0FBQ0MsR0FBRyxDQUFFQyxDQUFDLFFBQUtKLFNBQVEsQ0FBQ0ksQ0FBQyxDQUFDLEdBQUtELEdBQUcsR0FBQyxDQUVsRCxDQUFDLENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNPLEdBQU1FLEdBQUUsQ0FBRyxRQUFMQSxHQUFFLENBQUlDLEdBQVEsQ0FBRUMsWUFBa0Msa0NBQzdELENBQUFELEdBQUcsY0FBSEEsR0FBRyxDQUFFRSxXQUFXLElBQ2ZGLEdBQUcsQ0FBQ0UsV0FBVyxDQUFDQyxRQUFRLEdBQUtGLFlBQVksQ0FBQ0UsUUFBUSxFQUNqRCx3QkFBQUMsTUFBTSxDQUFDQyxjQUFjLENBQUNMLEdBQUcsQ0FBQ0UsV0FBVyxDQUFDLGVBQXRDLHNCQUF3Q0MsUUFBUSxJQUFLRixZQUFZLENBQUNFLFFBQVEsQ0FBQyxHQUV4RSxHQUFNRyxNQUFLLENBQUcsUUFBUkEsTUFBSyxDQUNoQjVCLFNBQWlCLENBQ2pCQyxJQUFrQixDQUNsQjRCLEtBQXVDLENBQ3ZDMUIsSUFBMEQsQ0FDdkQsQ0FDSCxHQUFNRCxTQUFRLENBQUdKLCtFQUFZLEVBQUUsQ0FFL0IsR0FBSUksUUFBUSxDQUFDNEIsV0FBVyxHQUFLLGNBQWMsQ0FBRSw0QkFDM0MsR0FBTWxCLFdBQVUsQ0FBR2lCLEtBQUssQ0FBQzNCLFFBQVEsQ0FBQyxDQUNsQyx3QkFBQUEsUUFBUSxDQUFDSSxjQUFjLGVBQXZCLHVCQUF5Qk8sSUFBSSxDQUFDRCxVQUFVLENBQUMsQ0FFekMsTUFBT0EsV0FBVSxDQUNuQixDQUVBLE1BQU9iLGdCQUFlLENBQUNDLFNBQVMsQ0FBRUMsSUFBSSxDQUFFQyxRQUFRLENBQUVDLElBQUksQ0FBQyxDQUN6RCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvdXRpbHMvZ2VuZXJhbC50cz8xMGM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yRGVzY3JpcHRvciwgSW5qZWN0b3JUeXBlIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IHJlYWRJbnN0YW5jZSB9IGZyb20gJy4uL2NsYXNzZXMvRXZhbHVhdGlvblN0YWNrJ1xuaW1wb3J0IHsgQW55QXRvbUluc3RhbmNlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBjb25zdCBnZXRQcmV2SW5qZWN0b3IgPSA8VCBleHRlbmRzIEluamVjdG9yRGVzY3JpcHRvcj4oXG4gIG9wZXJhdGlvbjogc3RyaW5nLFxuICB0eXBlOiBJbmplY3RvclR5cGUsXG4gIGluc3RhbmNlOiBBbnlBdG9tSW5zdGFuY2UsXG4gIG5leHQ/OiAocHJldkRlc2NyaXB0b3I6IFQsIGluc3RhbmNlOiBBbnlBdG9tSW5zdGFuY2UpID0+IFRcbikgPT4ge1xuICBjb25zdCBwcmV2RGVzY3JpcHRvciA9IGluc3RhbmNlLl9pbmplY3RvcnM/LltcbiAgICBpbnN0YW5jZS5fbmV4dEluamVjdG9ycz8ubGVuZ3RoIGFzIG51bWJlclxuICBdIGFzIFRcblxuICBpZiAoREVWICYmICghcHJldkRlc2NyaXB0b3IgfHwgcHJldkRlc2NyaXB0b3IudHlwZSAhPT0gdHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgWmVkdXg6ICR7b3BlcmF0aW9ufSBpbiBhdG9tIFwiJHtpbnN0YW5jZS5hdG9tLmtleX1cIiAtIGluamVjdG9ycyBjYW5ub3QgYmUgYWRkZWQsIHJlbW92ZWQsIG9yIHJlb3JkZXJlZGBcbiAgICApXG4gIH1cblxuICBjb25zdCBkZXNjcmlwdG9yID0gbmV4dCA/IG5leHQocHJldkRlc2NyaXB0b3IsIGluc3RhbmNlKSA6IHByZXZEZXNjcmlwdG9yXG4gIGluc3RhbmNlLl9uZXh0SW5qZWN0b3JzPy5wdXNoKGRlc2NyaXB0b3IpXG5cbiAgcmV0dXJuIGRlc2NyaXB0b3Jcbn1cblxuLyoqXG4gKiBDb21wYXJlIHR3byBhcnJheXMgYW5kIHNlZSBpZiBhbnkgZWxlbWVudHMgYXJlIGRpZmZlcmVudCAoPT09KS4gUmV0dXJucyB0cnVlXG4gKiBieSBkZWZhdWx0IGlmIGVpdGhlciBhcnJheSBpcyB1bmRlZmluZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGhhdmVEZXBzQ2hhbmdlZCA9IChcbiAgcHJldkRlcHM/OiBhbnlbXSxcbiAgbmV4dERlcHM/OiBhbnlbXSxcbiAgbWF0Y2hVbmRlZmluZWRBbmRFbXB0eT86IGJvb2xlYW5cbikgPT4ge1xuICBpZiAoIXByZXZEZXBzIHx8ICFuZXh0RGVwcykge1xuICAgIHJldHVybiBtYXRjaFVuZGVmaW5lZEFuZEVtcHR5XG4gICAgICA/ICFwcmV2RGVwcz8ubGVuZ3RoICYmICFuZXh0RGVwcz8ubGVuZ3RoXG4gICAgICA6ICFwcmV2RGVwcyB8fCAhbmV4dERlcHNcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgcHJldkRlcHMubGVuZ3RoICE9PSBuZXh0RGVwcy5sZW5ndGggfHxcbiAgICBwcmV2RGVwcy5zb21lKChkZXAsIGkpID0+IG5leHREZXBzW2ldICE9PSBkZXApXG4gIClcbn1cblxuLyoqXG4gKiBpcygpIC0gQ2hlY2tzIGlmIGEgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgYSBjbGFzc1xuICpcbiAqIFdlIGNhbid0IHVzZSBpbnN0YW5jZW9mICdjYXVzZSB0aGF0IGJyZWFrcyBhY3Jvc3MgcmVhbG1zIC0gZS5nLiB3aGVuIGFuIGF0b21cbiAqIGluc3RhbmNlIGlzIHNoYXJlZCBiZXR3ZWVuIGEgcGFyZW50IGFuZCBjaGlsZCB3aW5kb3csIHRoYXQgaW5zdGFuY2UncyBvYmplY3RcbiAqIHJlZmVyZW5jZSB3aWxsIGJlIGRpZmZlcmVudCBpbiBib3RoIHdpbmRvd3MgKHNpbmNlIGVhY2ggd2luZG93IGNyZWF0ZXMgaXRzXG4gKiBvd24gY29weSBvZiBaZWR1eCkuXG4gKlxuICogVGhlIGNsYXNzVG9DaGVjayBzaG91bGQgaGF2ZSBhIHN0YXRpYyAkJHR5cGVvZiBwcm9wZXJ0eSB3aG9zZSB2YWx1ZSBpcyBhXG4gKiBzeW1ib2wgY3JlYXRlZCB3aXRoIFN5bWJvbC5mb3IoKSAoc2hhcmluZyB0aGUgc3ltYm9sIHJlZmVyZW5jZSBhY3Jvc3MgcmVhbG1zKVxuICpcbiAqIEltcG9ydGFudCEgT25seSBvbmUgbGV2ZWwgb2YgaW5oZXJpdGFuY2UgaXMgc3VwcG9ydGVkIGN1cnJlbnRseSAtIHdlIG5ldmVyXG4gKiB1c2UgJCR0eXBlb2Ygb24gYSBjaGlsZCBvZiBhIGNoaWxkIG9mIGEgY2xhc3MsIGJ1dCBpZiB3ZSBkbyBuZWVkIGEgJCR0eXBlb2ZcbiAqIG9uIHRoZSBBdG9tIGNsYXNzIGFuZCB0aGUgQmFzZUF0b20gY2xhc3MsIGZvciBleGFtcGxlLCB3ZSdsbCBuZWVkIHRvIGFkZFxuICogbG9naWMgaGVyZSB0byBzdXBwb3J0IHRoYXRcbiAqXG4gKiBAcGFyYW0gdmFsIGFueXRoaW5nIC0gdGhlIHRoaW5nIHdlJ3JlIGNoZWNraW5nXG4gKiBAcGFyYW0gY2xhc3NUb0NoZWNrIGEgY2xhc3Mgd2l0aCBhIHN0YXRpYyAkJHR5cGVvZiBwcm9wZXJ0eVxuICogQHJldHVybnMgYm9vbGVhbiAtIHdoZXRoZXIgdmFsIGlzIGFuIGluc3RhbmNlb2YgY2xhc3NUb0NoZWNrXG4gKi9cbmV4cG9ydCBjb25zdCBpcyA9ICh2YWw6IGFueSwgY2xhc3NUb0NoZWNrOiB7ICQkdHlwZW9mOiBzeW1ib2wgfSkgPT5cbiAgdmFsPy5jb25zdHJ1Y3RvciAmJlxuICAodmFsLmNvbnN0cnVjdG9yLiQkdHlwZW9mID09PSBjbGFzc1RvQ2hlY2suJCR0eXBlb2YgfHxcbiAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsLmNvbnN0cnVjdG9yKT8uJCR0eXBlb2YgPT09IGNsYXNzVG9DaGVjay4kJHR5cGVvZilcblxuZXhwb3J0IGNvbnN0IHNwbGl0ID0gPFQgZXh0ZW5kcyBJbmplY3RvckRlc2NyaXB0b3I+KFxuICBvcGVyYXRpb246IHN0cmluZyxcbiAgdHlwZTogSW5qZWN0b3JUeXBlLFxuICBmaXJzdDogKGluc3RhbmNlOiBBbnlBdG9tSW5zdGFuY2UpID0+IFQsXG4gIG5leHQ/OiAocHJldkRlc2NyaXB0b3I6IFQsIGluc3RhbmNlOiBBbnlBdG9tSW5zdGFuY2UpID0+IFRcbikgPT4ge1xuICBjb25zdCBpbnN0YW5jZSA9IHJlYWRJbnN0YW5jZSgpXG5cbiAgaWYgKGluc3RhbmNlLmFjdGl2ZVN0YXRlID09PSAnSW5pdGlhbGl6aW5nJykge1xuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBmaXJzdChpbnN0YW5jZSlcbiAgICBpbnN0YW5jZS5fbmV4dEluamVjdG9ycz8ucHVzaChkZXNjcmlwdG9yKVxuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3JcbiAgfVxuXG4gIHJldHVybiBnZXRQcmV2SW5qZWN0b3Iob3BlcmF0aW9uLCB0eXBlLCBpbnN0YW5jZSwgbmV4dClcbn1cbiJdLCJuYW1lcyI6WyJyZWFkSW5zdGFuY2UiLCJnZXRQcmV2SW5qZWN0b3IiLCJvcGVyYXRpb24iLCJ0eXBlIiwiaW5zdGFuY2UiLCJuZXh0IiwicHJldkRlc2NyaXB0b3IiLCJfaW5qZWN0b3JzIiwiX25leHRJbmplY3RvcnMiLCJsZW5ndGgiLCJERVYiLCJFcnJvciIsImF0b20iLCJrZXkiLCJkZXNjcmlwdG9yIiwicHVzaCIsImhhdmVEZXBzQ2hhbmdlZCIsInByZXZEZXBzIiwibmV4dERlcHMiLCJtYXRjaFVuZGVmaW5lZEFuZEVtcHR5Iiwic29tZSIsImRlcCIsImkiLCJpcyIsInZhbCIsImNsYXNzVG9DaGVjayIsImNvbnN0cnVjdG9yIiwiJCR0eXBlb2YiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsInNwbGl0IiwiZmlyc3QiLCJhY3RpdmVTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///395\n')},3299:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"V\": function() { return /* binding */ pluginActions; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2808);\nvar pluginActions={activeStateChanged:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('activeStateChanged'),ecosystemDestroyed:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('ecosystemDestroyed'),ecosystemWiped:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('ecosystemWiped'),edgeCreated:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('edgeCreated'),edgeRemoved:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('edgeRemoved'),evaluationFinished:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('evaluationFinished'),// either instance or selectorCache will always be defined, depending on the node type\nstateChanged:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('stateChanged')};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5OS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBVU8sR0FBTUMsY0FBYSxDQUFHLENBQzNCQyxrQkFBa0IsQ0FBRUYsbUVBQWEsQ0FPL0Isb0JBQW9CLENBQUMsQ0FDdkJHLGtCQUFrQixDQUFFSCxtRUFBYSxDQUcvQixvQkFBb0IsQ0FBQyxDQUN2QkksY0FBYyxDQUFFSixtRUFBYSxDQUMzQixnQkFBZ0IsQ0FDakIsQ0FDREssV0FBVyxDQUFFTCxtRUFBYSxDQVd4QixhQUFhLENBQUMsQ0FDaEJNLFdBQVcsQ0FBRU4sbUVBQWEsQ0FPeEIsYUFBYSxDQUFDLENBQ2hCTyxrQkFBa0IsQ0FBRVAsbUVBQWEsQ0FVL0Isb0JBQW9CLENBQUMsQ0FDdkI7QUFDQVEsWUFBWSxDQUFFUixtRUFBYSxDQVV6QixjQUFjLENBQ2xCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy91dGlscy9wbHVnaW4tYWN0aW9ucy50cz85NjY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbkNoYWluLCBhY3Rpb25GYWN0b3J5IH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuLi9jbGFzc2VzL0Vjb3N5c3RlbSdcbmltcG9ydCB7XG4gIEFjdGl2ZVN0YXRlLFxuICBBbnlBdG9tSW5zdGFuY2UsXG4gIERlcGVuZGVudEVkZ2UsXG4gIEV2YWx1YXRpb25SZWFzb24sXG59IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgU2VsZWN0b3JDYWNoZUluc3RhbmNlIH0gZnJvbSAnLi4vY2xhc3Nlcy9TZWxlY3RvckNhY2hlJ1xuXG5leHBvcnQgY29uc3QgcGx1Z2luQWN0aW9ucyA9IHtcbiAgYWN0aXZlU3RhdGVDaGFuZ2VkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGluc3RhbmNlOiBBbnlBdG9tSW5zdGFuY2VcbiAgICAgIG5ld0FjdGl2ZVN0YXRlOiBBY3RpdmVTdGF0ZVxuICAgICAgb2xkQWN0aXZlU3RhdGU6IEFjdGl2ZVN0YXRlXG4gICAgfSxcbiAgICAnYWN0aXZlU3RhdGVDaGFuZ2VkJ1xuICA+KCdhY3RpdmVTdGF0ZUNoYW5nZWQnKSxcbiAgZWNvc3lzdGVtRGVzdHJveWVkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHsgZWNvc3lzdGVtOiBFY29zeXN0ZW0gfSxcbiAgICAnZWNvc3lzdGVtRGVzdHJveWVkJ1xuICA+KCdlY29zeXN0ZW1EZXN0cm95ZWQnKSxcbiAgZWNvc3lzdGVtV2lwZWQ6IGFjdGlvbkZhY3Rvcnk8eyBlY29zeXN0ZW06IEVjb3N5c3RlbSB9LCAnZWNvc3lzdGVtV2lwZWQnPihcbiAgICAnZWNvc3lzdGVtV2lwZWQnXG4gICksXG4gIGVkZ2VDcmVhdGVkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGRlcGVuZGVuY3k6IEFueUF0b21JbnN0YW5jZVxuICAgICAgLy8gc3RyaW5nIGlmIGBlZGdlLmZsYWdzICYgRWRnZUZsYWcuRXh0ZXJuYWxgIG9yIHRoZSBhdG9tIGluc3RhbmNlXG4gICAgICAvLyBoYXNuJ3QgYmVlbiBjcmVhdGVkIHlldCAoJ2NhdXNlIHRoZSBlZGdlIHdhcyBjcmVhdGVkIHdoaWxlIHRoZVxuICAgICAgLy8gaW5zdGFuY2Ugd2FzIGluaXRpYWxpemluZy4gVE9ETzogbWF5YmUgbWFrZSBpdCBzbyBhdG9tIGluc3RhbmNlcyBjYW5cbiAgICAgIC8vIGJlIGFkZGVkIHRvIHRoZSBlY29zeXN0ZW0gYmVmb3JlIGJlaW5nIGZ1bGx5IGluaXRpYWxpemVkKTpcbiAgICAgIGRlcGVuZGVudDogQW55QXRvbUluc3RhbmNlIHwgc3RyaW5nXG4gICAgICBlZGdlOiBEZXBlbmRlbnRFZGdlXG4gICAgfSxcbiAgICAnZWRnZUNyZWF0ZWQnXG4gID4oJ2VkZ2VDcmVhdGVkJyksXG4gIGVkZ2VSZW1vdmVkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGRlcGVuZGVuY3k6IEFueUF0b21JbnN0YW5jZSB8IFNlbGVjdG9yQ2FjaGVJbnN0YW5jZTxhbnksIGFueVtdPlxuICAgICAgZGVwZW5kZW50OiBBbnlBdG9tSW5zdGFuY2UgfCBTZWxlY3RvckNhY2hlSW5zdGFuY2U8YW55LCBhbnlbXT4gfCBzdHJpbmcgLy8gc3RyaW5nIGlmIGVkZ2UgaXMgRXh0ZXJuYWxcbiAgICAgIGVkZ2U6IERlcGVuZGVudEVkZ2VcbiAgICB9LFxuICAgICdlZGdlUmVtb3ZlZCdcbiAgPignZWRnZVJlbW92ZWQnKSxcbiAgZXZhbHVhdGlvbkZpbmlzaGVkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHwge1xuICAgICAgICBpbnN0YW5jZTogQW55QXRvbUluc3RhbmNlXG4gICAgICAgIHRpbWU6IG51bWJlclxuICAgICAgfVxuICAgIHwge1xuICAgICAgICBjYWNoZTogU2VsZWN0b3JDYWNoZUluc3RhbmNlXG4gICAgICAgIHRpbWU6IG51bWJlclxuICAgICAgfSxcbiAgICAnZXZhbHVhdGlvbkZpbmlzaGVkJ1xuICA+KCdldmFsdWF0aW9uRmluaXNoZWQnKSxcbiAgLy8gZWl0aGVyIGluc3RhbmNlIG9yIHNlbGVjdG9yQ2FjaGUgd2lsbCBhbHdheXMgYmUgZGVmaW5lZCwgZGVwZW5kaW5nIG9uIHRoZSBub2RlIHR5cGVcbiAgc3RhdGVDaGFuZ2VkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGFjdGlvbj86IEFjdGlvbkNoYWluXG4gICAgICBpbnN0YW5jZT86IEFueUF0b21JbnN0YW5jZVxuICAgICAgbmV3U3RhdGU6IGFueVxuICAgICAgb2xkU3RhdGU6IGFueVxuICAgICAgcmVhc29uczogRXZhbHVhdGlvblJlYXNvbltdXG4gICAgICBzZWxlY3RvckNhY2hlPzogU2VsZWN0b3JDYWNoZUluc3RhbmNlXG4gICAgfSxcbiAgICAnc3RhdGVDaGFuZ2VkJ1xuICA+KCdzdGF0ZUNoYW5nZWQnKSxcbn1cbiJdLCJuYW1lcyI6WyJhY3Rpb25GYWN0b3J5IiwicGx1Z2luQWN0aW9ucyIsImFjdGl2ZVN0YXRlQ2hhbmdlZCIsImVjb3N5c3RlbURlc3Ryb3llZCIsImVjb3N5c3RlbVdpcGVkIiwiZWRnZUNyZWF0ZWQiLCJlZGdlUmVtb3ZlZCIsImV2YWx1YXRpb25GaW5pc2hlZCIsInN0YXRlQ2hhbmdlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3299\n")},1881:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KF\": function() { return /* binding */ getInitialPromiseState; },\n/* harmony export */   \"W2\": function() { return /* binding */ getSuccessPromiseState; },\n/* harmony export */   \"bG\": function() { return /* binding */ getErrorPromiseState; }\n/* harmony export */ });\nvar getErrorPromiseState=function getErrorPromiseState(error){return{error:error,isError:true,isLoading:false,isSuccess:false,status:'error'};};var getInitialPromiseState=function getInitialPromiseState(data){return{data:data,isError:false,isLoading:true,isSuccess:false,status:'loading'};};var getSuccessPromiseState=function getSuccessPromiseState(data){return{data:data,isError:false,isLoading:false,isSuccess:true,status:'success'};};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4MS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVPLEdBQU1BLHFCQUFvQixDQUFHLFFBQXZCQSxxQkFBb0IsQ0FBT0MsS0FBWSxRQUF1QixDQUN6RUEsS0FBSyxDQUFMQSxLQUFLLENBQ0xDLE9BQU8sQ0FBRSxJQUFJLENBQ2JDLFNBQVMsQ0FBRSxLQUFLLENBQ2hCQyxTQUFTLENBQUUsS0FBSyxDQUNoQkMsTUFBTSxDQUFFLE9BQ1YsQ0FBQyxFQUFDLENBRUssR0FBTUMsdUJBQXNCLENBQUcsUUFBekJBLHVCQUFzQixDQUFPQyxJQUFRLFFBQXVCLENBQ3ZFQSxJQUFJLENBQUpBLElBQUksQ0FDSkwsT0FBTyxDQUFFLEtBQUssQ0FDZEMsU0FBUyxDQUFFLElBQUksQ0FDZkMsU0FBUyxDQUFFLEtBQUssQ0FDaEJDLE1BQU0sQ0FBRSxTQUNWLENBQUMsRUFBQyxDQUVLLEdBQU1HLHVCQUFzQixDQUFHLFFBQXpCQSx1QkFBc0IsQ0FBT0QsSUFBTyxRQUF1QixDQUN0RUEsSUFBSSxDQUFKQSxJQUFJLENBQ0pMLE9BQU8sQ0FBRSxLQUFLLENBQ2RDLFNBQVMsQ0FBRSxLQUFLLENBQ2hCQyxTQUFTLENBQUUsSUFBSSxDQUNmQyxNQUFNLENBQUUsU0FDVixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy91dGlscy9wcm9taXNlVXRpbHMudHM/ZGM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9taXNlU3RhdGUgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGdldEVycm9yUHJvbWlzZVN0YXRlID0gPFQ+KGVycm9yOiBFcnJvcik6IFByb21pc2VTdGF0ZTxUPiA9PiAoe1xuICBlcnJvcixcbiAgaXNFcnJvcjogdHJ1ZSxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgc3RhdHVzOiAnZXJyb3InLFxufSlcblxuZXhwb3J0IGNvbnN0IGdldEluaXRpYWxQcm9taXNlU3RhdGUgPSA8VD4oZGF0YT86IFQpOiBQcm9taXNlU3RhdGU8VD4gPT4gKHtcbiAgZGF0YSxcbiAgaXNFcnJvcjogZmFsc2UsXG4gIGlzTG9hZGluZzogdHJ1ZSxcbiAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgc3RhdHVzOiAnbG9hZGluZycgYXMgY29uc3QsXG59KVxuXG5leHBvcnQgY29uc3QgZ2V0U3VjY2Vzc1Byb21pc2VTdGF0ZSA9IDxUPihkYXRhOiBUKTogUHJvbWlzZVN0YXRlPFQ+ID0+ICh7XG4gIGRhdGEsXG4gIGlzRXJyb3I6IGZhbHNlLFxuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBpc1N1Y2Nlc3M6IHRydWUsXG4gIHN0YXR1czogJ3N1Y2Nlc3MnLFxufSlcbiJdLCJuYW1lcyI6WyJnZXRFcnJvclByb21pc2VTdGF0ZSIsImVycm9yIiwiaXNFcnJvciIsImlzTG9hZGluZyIsImlzU3VjY2VzcyIsInN0YXR1cyIsImdldEluaXRpYWxQcm9taXNlU3RhdGUiLCJkYXRhIiwiZ2V0U3VjY2Vzc1Byb21pc2VTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1881\n")},2314:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "O": function() { return /* binding */ JobType; },\n/* harmony export */   "R": function() { return /* binding */ InjectorType; }\n/* harmony export */ });\nvar InjectorType;(function(InjectorType){InjectorType["AsyncEffect"]="AsyncEffect";InjectorType["Atom"]="Atom";InjectorType["AtomDynamic"]="AtomDynamic";InjectorType["Effect"]="Effect";InjectorType["MachineStore"]="MachineStore";InjectorType["Memo"]="Memo";InjectorType["Ref"]="Ref";InjectorType["Selector"]="Selector";InjectorType["Store"]="Store";InjectorType["Value"]="Value";})(InjectorType||(InjectorType={}));var JobType;(function(JobType){JobType["EvaluateNode"]="EvaluateNode";JobType["RunEffect"]="RunEffect";JobType["UpdateExternalDependent"]="UpdateExternalDependent";})(JobType||(JobType={}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxNC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBa0RPLEdBQUtBLGFBQVksQ0FXdkIsVUFYV0EsWUFBWSxFQUFaQSxZQUFZLDhCQUFaQSxZQUFZLGdCQUFaQSxZQUFZLDhCQUFaQSxZQUFZLG9CQUFaQSxZQUFZLGdDQUFaQSxZQUFZLGdCQUFaQSxZQUFZLGNBQVpBLFlBQVksd0JBQVpBLFlBQVksa0JBQVpBLFlBQVkscUJBQVpBLFlBQVksR0FBWkEsWUFBWSxNQW9CakIsR0FBS0MsUUFBTyxDQUlsQixVQUpXQSxPQUFPLEVBQVBBLE9BQU8sZ0NBQVBBLE9BQU8sMEJBQVBBLE9BQU8seURBQVBBLE9BQU8sR0FBUEEsT0FBTyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL3V0aWxzL3R5cGVzLnRzP2YzNzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW55QXRvbUluc3RhbmNlLFxuICBEZXBlbmRlbnRFZGdlLFxuICBNdXRhYmxlUmVmT2JqZWN0LFxuICBSZWZPYmplY3QsXG59IGZyb20gJ0B6ZWR1eC9yZWFjdC90eXBlcydcbmltcG9ydCB7IE1hY2hpbmVTdG9yZSwgU3RvcmUgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7IEF0b21JbnN0YW5jZUJhc2UgfSBmcm9tICcuLi9jbGFzc2VzL2luc3RhbmNlcy9BdG9tSW5zdGFuY2VCYXNlJ1xuaW1wb3J0IHsgU2VsZWN0b3JDYWNoZUluc3RhbmNlIH0gZnJvbSAnLi4vY2xhc3Nlcy9TZWxlY3RvckNhY2hlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEF0b21JbmplY3RvckRlc2NyaXB0b3I8XG4gIEluc3RhbmNlVHlwZSBleHRlbmRzIEF0b21JbnN0YW5jZUJhc2U8YW55LCBhbnlbXSwgYW55PlxuPiBleHRlbmRzIEluamVjdG9yRGVzY3JpcHRvciB7XG4gIGluc3RhbmNlOiBJbnN0YW5jZVR5cGVcbiAgdHlwZTogSW5qZWN0b3JUeXBlLkF0b21cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdG9tRHluYW1pY0luamVjdG9yRGVzY3JpcHRvcjxcbiAgSW5zdGFuY2VUeXBlIGV4dGVuZHMgQXRvbUluc3RhbmNlQmFzZTxhbnksIGFueVtdLCBhbnk+XG4+IGV4dGVuZHMgSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgaW5zdGFuY2U6IEluc3RhbmNlVHlwZVxuICB0eXBlOiBJbmplY3RvclR5cGUuQXRvbUR5bmFtaWNcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXBzSW5qZWN0b3JEZXNjcmlwdG9yIGV4dGVuZHMgSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgZGVwcz86IGFueVtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWNvc3lzdGVtR3JhcGhOb2RlIHtcbiAgZGVwZW5kZW5jaWVzOiBSZWNvcmQ8c3RyaW5nLCB0cnVlPlxuICBkZXBlbmRlbnRzOiBSZWNvcmQ8c3RyaW5nLCBEZXBlbmRlbnRFZGdlPlxuICBpc0F0b21TZWxlY3Rvcj86IGJvb2xlYW5cbiAgd2VpZ2h0OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFZmZlY3RJbmplY3RvckRlc2NyaXB0b3IgZXh0ZW5kcyBEZXBzSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgdHlwZTogSW5qZWN0b3JUeXBlLkVmZmVjdFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2YWx1YXRlTm9kZUpvYiBleHRlbmRzIEpvYkJhc2Uge1xuICBmbGFnczogbnVtYmVyXG4gIGtleUhhc2g6IHN0cmluZ1xuICB0eXBlOiBKb2JUeXBlLkV2YWx1YXRlTm9kZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluamVjdG9yRGVzY3JpcHRvciB7XG4gIGNsZWFudXA/OiAoKSA9PiB2b2lkXG4gIHR5cGU6IEluamVjdG9yVHlwZVxufVxuXG5leHBvcnQgZW51bSBJbmplY3RvclR5cGUge1xuICBBc3luY0VmZmVjdCA9ICdBc3luY0VmZmVjdCcsXG4gIEF0b20gPSAnQXRvbScsXG4gIEF0b21EeW5hbWljID0gJ0F0b21EeW5hbWljJyxcbiAgRWZmZWN0ID0gJ0VmZmVjdCcsXG4gIE1hY2hpbmVTdG9yZSA9ICdNYWNoaW5lU3RvcmUnLFxuICBNZW1vID0gJ01lbW8nLFxuICBSZWYgPSAnUmVmJyxcbiAgU2VsZWN0b3IgPSAnU2VsZWN0b3InLFxuICBTdG9yZSA9ICdTdG9yZScsXG4gIFZhbHVlID0gJ1ZhbHVlJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBKb2JCYXNlIHtcbiAgdGFzazogKCkgPT4gdm9pZFxuICB0eXBlOiBKb2JUeXBlXG59XG5cbmV4cG9ydCB0eXBlIEpvYiA9IEV2YWx1YXRlTm9kZUpvYiB8IFJ1bkVmZmVjdEpvYiB8IFVwZGF0ZUV4dGVybmFsRGVwZW5kZW50Sm9iXG5cbmV4cG9ydCBlbnVtIEpvYlR5cGUge1xuICBFdmFsdWF0ZU5vZGUgPSAnRXZhbHVhdGVOb2RlJyxcbiAgUnVuRWZmZWN0ID0gJ1J1bkVmZmVjdCcsXG4gIFVwZGF0ZUV4dGVybmFsRGVwZW5kZW50ID0gJ1VwZGF0ZUV4dGVybmFsRGVwZW5kZW50Jyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYWNoaW5lU3RvcmVJbmplY3RvckRlc2NyaXB0b3I8XG4gIFN0YXRlTmFtZXMgZXh0ZW5kcyBzdHJpbmcsXG4gIEV2ZW50TmFtZXMgZXh0ZW5kcyBzdHJpbmcsXG4gIENvbnRleHQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkXG4+IGV4dGVuZHMgSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgc3RvcmU6IE1hY2hpbmVTdG9yZTxTdGF0ZU5hbWVzLCBFdmVudE5hbWVzLCBDb250ZXh0PlxuICB0eXBlOiBJbmplY3RvclR5cGUuTWFjaGluZVN0b3JlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVtb0luamVjdG9yRGVzY3JpcHRvcjxWYWx1ZSA9IGFueT5cbiAgZXh0ZW5kcyBEZXBzSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgbWVtb2l6ZWRWYWw6IFZhbHVlXG4gIHR5cGU6IEluamVjdG9yVHlwZS5NZW1vXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVmSW5qZWN0b3JEZXNjcmlwdG9yPFQgPSBhbnk+IGV4dGVuZHMgSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgcmVmOiBSZWZPYmplY3Q8VD4gfCBNdXRhYmxlUmVmT2JqZWN0PFQ+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVuRWZmZWN0Sm9iIGV4dGVuZHMgSm9iQmFzZSB7XG4gIHR5cGU6IEpvYlR5cGUuUnVuRWZmZWN0XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0b3JJbmplY3RvckRlc2NyaXB0b3I8U3RhdGUgPSBhbnksIEQgPSBhbnk+XG4gIGV4dGVuZHMgSW5qZWN0b3JEZXNjcmlwdG9yIHtcbiAgaW5zdGFuY2U6IEF0b21JbnN0YW5jZUJhc2U8U3RhdGUsIGFueSwgYW55PlxuICBzZWxlY3RvcjogKHN0YXRlOiBTdGF0ZSkgPT4gRFxuICBzZWxlY3RvclJlc3VsdDogRFxuICB0eXBlOiBJbmplY3RvclR5cGUuU2VsZWN0b3Jcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFja0l0ZW1CYXNlIHtcbiAgLyoqXG4gICAqIFRoZSBjYWNoZUtleSBvZiB0aGUgaW5zdGFuY2Ugb3Igc2VsZWN0b3JDYWNoZVxuICAgKi9cbiAga2V5OiBzdHJpbmdcblxuICAvKipcbiAgICogdGhlIGhpZ2gtZGVmIHRpbWVzdGFtcCBvZiB3aGVuIHRoZSBpdGVtIHdhcyBwdXNoZWQgb250byB0aGUgc3RhY2tcbiAgICovXG4gIHN0YXJ0PzogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFuY2VTdGFja0l0ZW0gZXh0ZW5kcyBTdGFja0l0ZW1CYXNlIHtcbiAgaW5zdGFuY2U6IEFueUF0b21JbnN0YW5jZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdG9yU3RhY2tJdGVtIGV4dGVuZHMgU3RhY2tJdGVtQmFzZSB7XG4gIGNhY2hlOiBTZWxlY3RvckNhY2hlSW5zdGFuY2Vcbn1cblxuZXhwb3J0IHR5cGUgU3RhY2tJdGVtID0gSW5zdGFuY2VTdGFja0l0ZW0gfCBTZWxlY3RvclN0YWNrSXRlbVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JlSW5qZWN0b3JEZXNjcmlwdG9yPFN0YXRlID0gYW55PlxuICBleHRlbmRzIEluamVjdG9yRGVzY3JpcHRvciB7XG4gIHN0b3JlOiBTdG9yZTxTdGF0ZT5cbiAgdHlwZTogSW5qZWN0b3JUeXBlLlN0b3JlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlRXh0ZXJuYWxEZXBlbmRlbnRKb2IgZXh0ZW5kcyBKb2JCYXNlIHtcbiAgZmxhZ3M6IG51bWJlclxuICB0eXBlOiBKb2JUeXBlLlVwZGF0ZUV4dGVybmFsRGVwZW5kZW50XG59XG4iXSwibmFtZXMiOlsiSW5qZWN0b3JUeXBlIiwiSm9iVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2314\n')}}]);