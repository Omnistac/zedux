"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[3508],{8010:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return u},default:function(){return d}});var o=n(3117),a=n(102),s=(n(7294),n(3905)),l=n(3052),i=["components"],r={id:"LocalAtom",title:"LocalAtom"},c=void 0,m={unversionedId:"api/classes/LocalAtom",id:"api/classes/LocalAtom",isDocsHomePage:!1,title:"LocalAtom",description:"Extends Atom.",source:"@site/docs/api/classes/LocalAtom.mdx",sourceDirName:"api/classes",slug:"/api/classes/LocalAtom",permalink:"/zedux/docs/api/classes/LocalAtom",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/classes/LocalAtom.mdx",tags:[],version:"current",frontMatter:{id:"LocalAtom",title:"LocalAtom"},sidebar:"react",previous:{title:"Ion",permalink:"/zedux/docs/api/classes/Ion"},next:{title:"Store",permalink:"/zedux/docs/api/classes/Store"}},u=[{value:"Creation",id:"creation",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Overriding",id:"overriding",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Extends ",(0,s.kt)("a",{parentName:"p",href:"Atom"},"Atom"),"."),(0,s.kt)("p",null,"Local atoms are a type of atom that specializes in React Context."),(0,s.kt)("p",null,"The first param of all local atoms is an optional string id. You can pass this string yourself to id local atoms manually. This can be useful e.g. when persisting/rehydrating them, or just so you know what's what when debugging. Manually-id'd local atoms can also be reused anywhere by passing the same id, just like any other normal atom."),(0,s.kt)("p",null,"Local atoms can be injected in other atoms, but they're not really designed for that."),(0,s.kt)("h2",{id:"creation"},"Creation"),(0,s.kt)("p",null,"Create local atoms with ",(0,s.kt)("a",{parentName:"p",href:"../factories/localAtom"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"localAtom()")," factory"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const myLocalAtom = localAtom('myLocal')\n\nconst withParams = localAtom('withParams', (id?: string, other?: number) => {\n  const store = injectStore(other)\n\n  return other\n})\n\n// You can make the id param required:\nconst withRequiredParams = localAtom(\n  'withRequiredParams',\n  (id: string, other: number) => {\n    const store = injectStore(other)\n\n    return store\n  }\n)\n")),(0,s.kt)("p",null,"If you don't pass an id, Zedux will auto-generate one every time you use the local atom in any hook or injector."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"injectAtomValue(myLocalAtom) // creates a new instance\ninjectAtomInstance(myLocalAtom) // creates another new instance\n\nuseAtomInstance(myLocalAtom) // creates another new instance\nuseAtomState(myLocalAtom) // creates another new instance\nuseAtomState(myLocalAtom, []) // creates another new instance\n\nuseAtomInstance(myLocalAtom, ['manual-id']) // creates another new instance\nuseAtomInstance(myLocalAtom, ['manual-id']) // reuses the 'manual-id' instance\n")),(0,s.kt)("p",null,"Local atoms also always set ",(0,s.kt)("a",{parentName:"p",href:"Atom#ttl"},(0,s.kt)("inlineCode",{parentName:"a"},"ttl"))," to ",(0,s.kt)("inlineCode",{parentName:"p"},"0"),", which will clean up atom instances immediately when all components using the atom instance unmount."),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("p",null,"Local atoms are useful when you just want to provide different atom instances to different component trees."),(0,s.kt)(l.u,{extraScope:"const PopupStyle = { background: 'rgba(255, 255, 255, 0.4)', boxShadow: '2px 2px 5px 1px rgba(0, 0, 0, 0.2)', padding: '12px', position: 'absolute', top: '8px', right: '20px' }",resultVar:"Popups",mdxType:"LiveEditor"},"\nconst popupAtom = localAtom('popup', () => ({ isOpen: false }))\n\nfunction Popup() {\n  const [{ isOpen }, setVal] = useAtomState(useAtomConsumer(popupAtom, []))\n  const toggle = () => setVal(val => ({ ...val, isOpen: !val.isOpen }))\n\n  return (\n    <div>\n      <button onClick={toggle}>\n        {isOpen ? 'Close' : 'Open'}\n      </button>\n      {isOpen && (\n        <div style={PopupStyle} onClick={toggle}>\n          I Am Open!!\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction Popups() {\n  const instanceA = useAtomInstance(popupAtom)\n  const instanceB = useAtomInstance(popupAtom)\n\n  return (\n    <>\n      <AtomInstanceProvider instance={instanceA}>\n        <Popup />\n      </AtomInstanceProvider>\n      <AtomInstanceProvider instance={instanceB}>\n        <Popup />\n      </AtomInstanceProvider>\n    </>\n  )\n}\n"),(0,s.kt)("h2",{id:"overriding"},"Overriding"),(0,s.kt)("p",null,"This class overrides the Atom class's ",(0,s.kt)("a",{parentName:"p",href:"Atom#override"},(0,s.kt)("inlineCode",{parentName:"a"},".override")," method")," to return instances of this class instead of the Atom class."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { localAtom } from '@zedux/react'\n\nconst myLocalAtom = localAtom('myLocal', initialValue)\n\nconst clone = myLocalAtom.override(newValue)\n")))}d.isMDXComponent=!0}}]);