"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[2541],{2697:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return m}});var a=t(3117),c=t(102),i=(t(7294),t(3905)),o=t(3052),l=["components"],r={id:"injectCallback",title:"injectCallback"},s=void 0,u={unversionedId:"api/injectors/injectCallback",id:"api/injectors/injectCallback",isDocsHomePage:!1,title:"injectCallback",description:"An injector that memoizes a function. Really just a shorthand for injectMemo() where the memoized value itself is a function. The returned function reference will only change when the passed dependencies change.",source:"@site/docs/api/injectors/injectCallback.mdx",sourceDirName:"api/injectors",slug:"/api/injectors/injectCallback",permalink:"/zedux/docs/api/injectors/injectCallback",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectCallback.mdx",tags:[],version:"current",frontMatter:{id:"injectCallback",title:"injectCallback"},sidebar:"react",previous:{title:"injectAtomValue",permalink:"/zedux/docs/api/injectors/injectAtomValue"},next:{title:"injectEcosystem",permalink:"/zedux/docs/api/injectors/injectEcosystem"}},d=[{value:"Signature",id:"signature",children:[{value:"<code>callback</code>",id:"callback",children:[],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3}],level:2}],p={toc:d};function m(e){var n=e.components,t=(0,c.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectCallback } from '@zedux/react'\n")),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"../glossary#injector"},"injector")," that memoizes a function. Really just a shorthand for ",(0,i.kt)("a",{parentName:"p",href:"injectMemo"},(0,i.kt)("inlineCode",{parentName:"a"},"injectMemo()"))," where the memoized value itself is a function. The returned function reference will only change when the passed dependencies change."),(0,i.kt)("p",null,"Can be useful when exporting functions from an atom to ensure that you're only exporting stable references."),(0,i.kt)(o.u,{resultVar:"Seconds",mdxType:"LiveEditor"},"\nconst counterAtom = atom('counter', () => {\n  const store = injectStore(0)\n\n  const add = injectCallback(\n    (amount: number) => store.setState(state => state + amount),\n    [] // no deps - the callback reference will never change\n  )\n\n  return api(store).setExports({ add })\n})\n\nfunction Seconds() {\n  const state = useAtomValue(counterAtom)\n  const { add } = useAtomInstance(counterAtom).exports\n\n  return (\n    <>\n      <div>Current Count: {state}</div>\n      <button onClick={() => add(1)}>Add 1</button>\n      <button onClick={() => add(5)}>Add 5</button>\n    </>\n  )\n}\n"),(0,i.kt)("p",null,"Miscellaneous:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectCallback, injectMemo } from '@zedux/react'\n\n// These are equivalent:\nconst add = injectCallback((a: number, b: number) => a + b, [])\nconst add = injectMemo(() => (a: number, b: number) => a + b, [])\n\nconst withDeps = injectCallback(fn, [depA, depB])\n")),(0,i.kt)("h2",{id:"signature"},"Signature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"injectCallback(callback, deps?) => callback\n")),(0,i.kt)("h3",{id:"callback"},(0,i.kt)("inlineCode",{parentName:"h3"},"callback")),(0,i.kt)("p",null,"Required. A function. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"deps")," haven't changed since the previous evaluation, this function will be ignored. Otherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"injectCallback")," will return this function itself."),(0,i.kt)("h3",{id:"deps"},(0,i.kt)("inlineCode",{parentName:"h3"},"deps")),(0,i.kt)("p",null,"Optional (but you should probably pass it). An array of values that will cause the memoized function to be swapped out for the current one when they change."))}m.isMDXComponent=!0}}]);