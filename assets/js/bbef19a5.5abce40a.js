"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[3099],{7228:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return d},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=a(3117),n=a(102),c=(a(7294),a(3905)),o=["components"],d={id:"createReducer",title:"createReducer"},i=void 0,s={unversionedId:"api/factories/createReducer",id:"api/factories/createReducer",isDocsHomePage:!1,title:"createReducer",description:"A factory for creating reducers. These reducers can then be passed to createStore() or used directly in React's useReducer() hooks.",source:"@site/docs/api/factories/createReducer.mdx",sourceDirName:"api/factories",slug:"/api/factories/createReducer",permalink:"/zedux/docs/api/factories/createReducer",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/factories/createReducer.mdx",tags:[],version:"current",frontMatter:{id:"createReducer",title:"createReducer"},sidebar:"react",previous:{title:"createAsyncStore",permalink:"/zedux/docs/api/factories/createAsyncStore"},next:{title:"createStore",permalink:"/zedux/docs/api/factories/createStore"}},u=[{value:"Examples",id:"examples",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"<code>initialState</code>",id:"initialstate",children:[],level:3},{value:"<code>reduce</code>",id:"reduce",children:[{value:"<code>actor</code>",id:"actor",children:[],level:4},{value:"<code>reducer</code>",id:"reducer",children:[],level:4}],level:3}],level:2}],l={toc:u};function p(e){var t=e.components,a=(0,n.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"A factory for creating ",(0,c.kt)("a",{parentName:"p",href:"../types/Reducer"},"reducers"),". These reducers can then be passed to ",(0,c.kt)("a",{parentName:"p",href:"createStore"},(0,c.kt)("inlineCode",{parentName:"a"},"createStore()"))," or used directly in React's ",(0,c.kt)("inlineCode",{parentName:"p"},"useReducer()")," hooks."),(0,c.kt)("h2",{id:"examples"},"Examples"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createActor, createReducer } from '@zedux/react'\n\nconst withInitialState = createReducer('initial state')\nconst withoutInitialState = createReducer()\n\nconst withStringActionTypes = createReducer([]).reduce(\n  'todos/add',\n  (state, newTodo) => [...state, newTodo]\n)\n\nconst multipleActions = createReducer([]).reduce(\n  ['todos/reset', 'todos/clear'],\n  () => []\n)\n\nconst addTodo = createActor<Todo>('todos/add')\nconst removeTodo = createActor<Todo>('todos/add')\nconst withActors = createReducer([])\n  .reduce(addTodo, (state, newTodo) => [...state, newTodo])\n  .reduce(removeTodo, (state, id) => state.filter(todo => todo.id !== id))\n\nconst clear = createActor('todos/clear')\nconst mixed = createReducer([])\n  .reduce(addTodo, (state, newTodo) => [...state, newTodo])\n  .reduce('todos/remove', (state, id) => state.filter(todo => todo.id !== id))\n  .reduce(['todos/reset', clear], () => [])\n")),(0,c.kt)("h2",{id:"signature"},"Signature"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"type SubReducer<State = any, Payload = any> = (\n  state: State,\n  payload: Payload\n) => State\n\ninterface ZeduxReducer<State = any> extends Reducer<State> {\n  reduce<Type extends string = string, Payload = any>(\n    actor: Reactable<Payload, Type> | Reactable<Payload, Type>[], // TODO: allow multiple actions with different payload types\n    reducer: SubReducer<State, Payload>\n  ): ZeduxReducer<State>\n}\n\ncreateReducer<State = any>(initialState?: State) => ZeduxReducer<State>\n")),(0,c.kt)("p",null,"A function that accepts an optional initial state and returns a ZeduxReducer object. This object is a reducer function with an attached ",(0,c.kt)("inlineCode",{parentName:"p"},".reduce()")," method for building out the cases this reducer handles. It can be used anywhere a reducer is required."),(0,c.kt)("h3",{id:"initialstate"},(0,c.kt)("inlineCode",{parentName:"h3"},"initialState")),(0,c.kt)("p",null,"Optional. Can be anything. The initial value of the state controlled by this reducer."),(0,c.kt)("h3",{id:"reduce"},(0,c.kt)("inlineCode",{parentName:"h3"},"reduce")),(0,c.kt)("p",null,"A function that passes actions along to the passed SubReducer when those actions match the criteria"),(0,c.kt)("h4",{id:"actor"},(0,c.kt)("inlineCode",{parentName:"h4"},"actor")),(0,c.kt)("p",null,"A single action type string or actor function created with ",(0,c.kt)("a",{parentName:"p",href:"createActor"},(0,c.kt)("inlineCode",{parentName:"a"},"createActor()"))," or a list of strings and/or actors. The SubReducer will be called whenever any of the actions in this list are dispatched."),(0,c.kt)("h4",{id:"reducer"},(0,c.kt)("inlineCode",{parentName:"h4"},"reducer")),(0,c.kt)("p",null,"A SubReducer function. SubReducers look like reducers, but instead of receiving the entire action object as the second parameter, they receive only the action's ",(0,c.kt)("inlineCode",{parentName:"p"},"payload")," property."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},".reduce(myActor, (state, actionPayload) => newState)\n")))}p.isMDXComponent=!0}}]);