"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[2541],{2697:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\n/* harmony import */ var _site_src_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9441);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'injectCallback\',title:\'injectCallback\'};var contentTitle=undefined;var metadata={"unversionedId":"api/injectors/injectCallback","id":"api/injectors/injectCallback","title":"injectCallback","description":"An injector that memoizes a function. Really just a shorthand for injectMemo() where the memoized value itself is a function. The returned function reference will only change when the passed dependencies change.","source":"@site/docs/api/injectors/injectCallback.mdx","sourceDirName":"api/injectors","slug":"/api/injectors/injectCallback","permalink":"/zedux/docs/api/injectors/injectCallback","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectCallback.mdx","tags":[],"version":"current","frontMatter":{"id":"injectCallback","title":"injectCallback"},"sidebar":"react","previous":{"title":"injectAtomValue","permalink":"/zedux/docs/api/injectors/injectAtomValue"},"next":{"title":"injectEffect","permalink":"/zedux/docs/api/injectors/injectEffect"}};var assets={};var toc=[{value:\'Signature\',id:\'signature\',level:2},{value:\'See Also\',id:\'see-also\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { injectCallback } from \'@zedux/react\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../glossary#injector"},"injector")," that memoizes a function. Really just a shorthand for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"injectMemo"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectMemo()"))," where the memoized value itself is a function. The returned function reference will only change when the passed dependencies change."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Can be useful when exporting functions from an atom to ensure that you\'re only exporting stable references."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=injectCallback/example resultVar=Seconds","live":true,"ecosystemId":"injectCallback/example","resultVar":"Seconds"},"const counterAtom = atom(\'counter\', () => {\\n  const store = injectStore(0)\\n\\n  const add = injectCallback(\\n    (amount: number) => store.setState(state => state + amount),\\n    [] // no deps - the callback reference will never change\\n  )\\n\\n  return api(store).setExports({ add })\\n})\\n\\nfunction Seconds() {\\n  const state = useAtomValue(counterAtom)\\n  const { add } = useAtomInstance(counterAtom).exports\\n\\n  return (\\n    <>\\n      <div>Current Count: {state}</div>\\n      <button onClick={() => add(1)}>Add 1</button>\\n      <button onClick={() => add(5)}>Add 5</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Miscellaneous:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { injectCallback, injectMemo } from \'@zedux/react\'\\n\\n// These are equivalent:\\nconst add = injectCallback((a: number, b: number) => a + b, [])\\nconst add = injectMemo(() => (a: number, b: number) => a + b, [])\\n\\nconst withDeps = injectCallback(fn, [depA, depB])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"signature"},"Signature"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Tabs */ .mQ,{mdxType:"Tabs"},(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab1 */ .x_)("injectCallback = (callback, deps?) => callback"),(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab2 */ .s2)("declare const injectCallback: <Args extends any[] = [], Ret = any>(\\n  callback: (...args: Args) => Ret,\\n  deps?: InjectorDeps\\n) => (...args: Args) => Ret")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Legend */ .De,{mdxType:"Legend"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"callback",mdxType:"Item"},"Required. The function to memoize. This function reference will be discarded when deps are the same."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"deps",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Optional (though you\'ll always want to pass it). An array containing absolutely anything."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If any items in this array change on a subsequent evaluation, the previously memoized callback will be discarded, replaced with the newly-passed function."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Pass an empty array to prevent the returned callback reference from ever changing, as long as this atom instance is alive.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"Returns",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The memoized callback function. The returned reference will only change if any deps change."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"see-also"},"See Also"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"injectMemo"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectMemo()")))));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUksRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQzlCLGtLQUdJLENBQ0osbU9BSUksQ0FDSixtTUFHSSxDQUNDLENBQ1AsNkRBQUMseURBQUksRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQ2pDLG9LQUdJLENBQ0MsQ0FDSSxDQUNULG1FQUNFLElBQUksQ0FBRSxVQUFVLGFBQ0UsQ0FDcEIsdUVBQ0UsbUVBQUksVUFBVSxDQUFDLElBQUksRUFBQyxrRUFBRyxVQUFVLENBQUMsSUFBSSxDQUNsQyxNQUFNLENBQUUsWUFBWSxFQUNuQiwyRUFBWSxVQUFVLENBQUMsR0FBRyxpQkFBOEIsQ0FBSSxDQUFLLENBQ25FLENBQ08sQ0FDaEIsQ0FDQSxDQUNBTSxVQUFVLENBQUNHLGNBQWMsQ0FBRyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL2RvY3MvYXBpL2luamVjdG9ycy9pbmplY3RDYWxsYmFjay5tZHg/ZjIyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuLyogQGpzeFJ1bnRpbWUgY2xhc3NpYyAqL1xuLyogQGpzeCBtZHggKi9cbi8qIEBqc3hGcmFnIFJlYWN0LkZyYWdtZW50ICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0JztcblxuXG5leHBvcnQgY29uc3QgZnJvbnRNYXR0ZXIgPSB7XG5cdGlkOiAnaW5qZWN0Q2FsbGJhY2snLFxuXHR0aXRsZTogJ2luamVjdENhbGxiYWNrJ1xufTtcbmV4cG9ydCBjb25zdCBjb250ZW50VGl0bGUgPSB1bmRlZmluZWQ7XG5leHBvcnQgY29uc3QgbWV0YWRhdGEgPSB7XG4gIFwidW52ZXJzaW9uZWRJZFwiOiBcImFwaS9pbmplY3RvcnMvaW5qZWN0Q2FsbGJhY2tcIixcbiAgXCJpZFwiOiBcImFwaS9pbmplY3RvcnMvaW5qZWN0Q2FsbGJhY2tcIixcbiAgXCJ0aXRsZVwiOiBcImluamVjdENhbGxiYWNrXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBbiBpbmplY3RvciB0aGF0IG1lbW9pemVzIGEgZnVuY3Rpb24uIFJlYWxseSBqdXN0IGEgc2hvcnRoYW5kIGZvciBpbmplY3RNZW1vKCkgd2hlcmUgdGhlIG1lbW9pemVkIHZhbHVlIGl0c2VsZiBpcyBhIGZ1bmN0aW9uLiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gcmVmZXJlbmNlIHdpbGwgb25seSBjaGFuZ2Ugd2hlbiB0aGUgcGFzc2VkIGRlcGVuZGVuY2llcyBjaGFuZ2UuXCIsXG4gIFwic291cmNlXCI6IFwiQHNpdGUvZG9jcy9hcGkvaW5qZWN0b3JzL2luamVjdENhbGxiYWNrLm1keFwiLFxuICBcInNvdXJjZURpck5hbWVcIjogXCJhcGkvaW5qZWN0b3JzXCIsXG4gIFwic2x1Z1wiOiBcIi9hcGkvaW5qZWN0b3JzL2luamVjdENhbGxiYWNrXCIsXG4gIFwicGVybWFsaW5rXCI6IFwiL3plZHV4L2RvY3MvYXBpL2luamVjdG9ycy9pbmplY3RDYWxsYmFja1wiLFxuICBcImRyYWZ0XCI6IGZhbHNlLFxuICBcImVkaXRVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vT21uaXN0YWMvemVkdXgvdHJlZS9tYXN0ZXIvZG9jcy9hcGkvaW5qZWN0b3JzL2luamVjdENhbGxiYWNrLm1keFwiLFxuICBcInRhZ3NcIjogW10sXG4gIFwidmVyc2lvblwiOiBcImN1cnJlbnRcIixcbiAgXCJmcm9udE1hdHRlclwiOiB7XG4gICAgXCJpZFwiOiBcImluamVjdENhbGxiYWNrXCIsXG4gICAgXCJ0aXRsZVwiOiBcImluamVjdENhbGxiYWNrXCJcbiAgfSxcbiAgXCJzaWRlYmFyXCI6IFwicmVhY3RcIixcbiAgXCJwcmV2aW91c1wiOiB7XG4gICAgXCJ0aXRsZVwiOiBcImluamVjdEF0b21WYWx1ZVwiLFxuICAgIFwicGVybWFsaW5rXCI6IFwiL3plZHV4L2RvY3MvYXBpL2luamVjdG9ycy9pbmplY3RBdG9tVmFsdWVcIlxuICB9LFxuICBcIm5leHRcIjoge1xuICAgIFwidGl0bGVcIjogXCJpbmplY3RFZmZlY3RcIixcbiAgICBcInBlcm1hbGlua1wiOiBcIi96ZWR1eC9kb2NzL2FwaS9pbmplY3RvcnMvaW5qZWN0RWZmZWN0XCJcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBhc3NldHMgPSB7XG5cbn07XG5cbmltcG9ydCB7IExlZ2VuZCwgSXRlbSwgTGluaywgVGFicywgVHMsIHRhYjEsIHRhYjIgfSBmcm9tICdAc2l0ZS9zcmMvYWxsJ1xuZXhwb3J0IGNvbnN0IHRvYyA9IFt7XG4gIHZhbHVlOiAnU2lnbmF0dXJlJyxcbiAgaWQ6ICdzaWduYXR1cmUnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJ1NlZSBBbHNvJyxcbiAgaWQ6ICdzZWUtYWxzbycsXG4gIGxldmVsOiAyXG59XTtcblxuY29uc3QgbGF5b3V0UHJvcHMgPSB7XG4gIHRvY1xufTtcbmNvbnN0IE1EWExheW91dCA9IFwid3JhcHBlclwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNRFhDb250ZW50KHtcbiAgY29tcG9uZW50cyxcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIDxNRFhMYXlvdXQgey4uLmxheW91dFByb3BzfSB7Li4ucHJvcHN9IGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IG1keFR5cGU9XCJNRFhMYXlvdXRcIj5cblxuXG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGltcG9ydCB7IGluamVjdENhbGxiYWNrIH0gZnJvbSAnQHplZHV4L3JlYWN0J1xuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BBbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiLi4vZ2xvc3NhcnkjaW5qZWN0b3JcIlxuICAgICAgfX0+e2BpbmplY3RvcmB9PC9hPntgIHRoYXQgbWVtb2l6ZXMgYSBmdW5jdGlvbi4gUmVhbGx5IGp1c3QgYSBzaG9ydGhhbmQgZm9yIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCJpbmplY3RNZW1vXCJcbiAgICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJhXCI+e2BpbmplY3RNZW1vKClgfTwvaW5saW5lQ29kZT48L2E+e2Agd2hlcmUgdGhlIG1lbW9pemVkIHZhbHVlIGl0c2VsZiBpcyBhIGZ1bmN0aW9uLiBUaGUgcmV0dXJuZWQgZnVuY3Rpb24gcmVmZXJlbmNlIHdpbGwgb25seSBjaGFuZ2Ugd2hlbiB0aGUgcGFzc2VkIGRlcGVuZGVuY2llcyBjaGFuZ2UuYH08L3A+XG4gICAgPHA+e2BDYW4gYmUgdXNlZnVsIHdoZW4gZXhwb3J0aW5nIGZ1bmN0aW9ucyBmcm9tIGFuIGF0b20gdG8gZW5zdXJlIHRoYXQgeW91J3JlIG9ubHkgZXhwb3J0aW5nIHN0YWJsZSByZWZlcmVuY2VzLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHN4XCIsXG4gICAgICAgIFwibWV0YXN0cmluZ1wiOiBcImxpdmUgZWNvc3lzdGVtSWQ9aW5qZWN0Q2FsbGJhY2svZXhhbXBsZSByZXN1bHRWYXI9U2Vjb25kc1wiLFxuICAgICAgICBcImxpdmVcIjogdHJ1ZSxcbiAgICAgICAgXCJlY29zeXN0ZW1JZFwiOiBcImluamVjdENhbGxiYWNrL2V4YW1wbGVcIixcbiAgICAgICAgXCJyZXN1bHRWYXJcIjogXCJTZWNvbmRzXCJcbiAgICAgIH19PntgY29uc3QgY291bnRlckF0b20gPSBhdG9tKCdjb3VudGVyJywgKCkgPT4ge1xuICBjb25zdCBzdG9yZSA9IGluamVjdFN0b3JlKDApXG5cbiAgY29uc3QgYWRkID0gaW5qZWN0Q2FsbGJhY2soXG4gICAgKGFtb3VudDogbnVtYmVyKSA9PiBzdG9yZS5zZXRTdGF0ZShzdGF0ZSA9PiBzdGF0ZSArIGFtb3VudCksXG4gICAgW10gLy8gbm8gZGVwcyAtIHRoZSBjYWxsYmFjayByZWZlcmVuY2Ugd2lsbCBuZXZlciBjaGFuZ2VcbiAgKVxuXG4gIHJldHVybiBhcGkoc3RvcmUpLnNldEV4cG9ydHMoeyBhZGQgfSlcbn0pXG5cbmZ1bmN0aW9uIFNlY29uZHMoKSB7XG4gIGNvbnN0IHN0YXRlID0gdXNlQXRvbVZhbHVlKGNvdW50ZXJBdG9tKVxuICBjb25zdCB7IGFkZCB9ID0gdXNlQXRvbUluc3RhbmNlKGNvdW50ZXJBdG9tKS5leHBvcnRzXG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdj5DdXJyZW50IENvdW50OiB7c3RhdGV9PC9kaXY+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGFkZCgxKX0+QWRkIDE8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gYWRkKDUpfT5BZGQgNTwvYnV0dG9uPlxuICAgIDwvPlxuICApXG59XG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YE1pc2NlbGxhbmVvdXM6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGltcG9ydCB7IGluamVjdENhbGxiYWNrLCBpbmplY3RNZW1vIH0gZnJvbSAnQHplZHV4L3JlYWN0J1xuXG4vLyBUaGVzZSBhcmUgZXF1aXZhbGVudDpcbmNvbnN0IGFkZCA9IGluamVjdENhbGxiYWNrKChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4gYSArIGIsIFtdKVxuY29uc3QgYWRkID0gaW5qZWN0TWVtbygoKSA9PiAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IGEgKyBiLCBbXSlcblxuY29uc3Qgd2l0aERlcHMgPSBpbmplY3RDYWxsYmFjayhmbiwgW2RlcEEsIGRlcEJdKVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwic2lnbmF0dXJlXCJcbiAgICB9fT57YFNpZ25hdHVyZWB9PC9oMj5cbiAgICA8VGFicyBtZHhUeXBlPVwiVGFic1wiPlxuICB7dGFiMShgaW5qZWN0Q2FsbGJhY2sgPSAoY2FsbGJhY2ssIGRlcHM/KSA9PiBjYWxsYmFja2ApfVxuICB7dGFiMihgZGVjbGFyZSBjb25zdCBpbmplY3RDYWxsYmFjazogPEFyZ3MgZXh0ZW5kcyBhbnlbXSA9IFtdLCBSZXQgPSBhbnk+KFxuICBjYWxsYmFjazogKC4uLmFyZ3M6IEFyZ3MpID0+IFJldCxcbiAgZGVwcz86IEluamVjdG9yRGVwc1xuKSA9PiAoLi4uYXJnczogQXJncykgPT4gUmV0YCl9XG4gICAgPC9UYWJzPlxuICAgIDxMZWdlbmQgbWR4VHlwZT1cIkxlZ2VuZFwiPlxuICA8SXRlbSBuYW1lPVwiY2FsbGJhY2tcIiBtZHhUeXBlPVwiSXRlbVwiPlxuICAgIFJlcXVpcmVkLiBUaGUgZnVuY3Rpb24gdG8gbWVtb2l6ZS4gVGhpcyBmdW5jdGlvbiByZWZlcmVuY2Ugd2lsbCBiZSBkaXNjYXJkZWRcbiAgICB3aGVuIGRlcHMgYXJlIHRoZSBzYW1lLlxuICA8L0l0ZW0+XG4gIDxJdGVtIG5hbWU9XCJkZXBzXCIgbWR4VHlwZT1cIkl0ZW1cIj5cbiAgICA8cD5cbiAgICAgIE9wdGlvbmFsICh0aG91Z2ggeW91J2xsIGFsd2F5cyB3YW50IHRvIHBhc3MgaXQpLiBBbiBhcnJheSBjb250YWluaW5nXG4gICAgICBhYnNvbHV0ZWx5IGFueXRoaW5nLlxuICAgIDwvcD5cbiAgICA8cD5cbiAgICAgIElmIGFueSBpdGVtcyBpbiB0aGlzIGFycmF5IGNoYW5nZSBvbiBhIHN1YnNlcXVlbnQgZXZhbHVhdGlvbiwgdGhlXG4gICAgICBwcmV2aW91c2x5IG1lbW9pemVkIGNhbGxiYWNrIHdpbGwgYmUgZGlzY2FyZGVkLCByZXBsYWNlZCB3aXRoIHRoZVxuICAgICAgbmV3bHktcGFzc2VkIGZ1bmN0aW9uLlxuICAgIDwvcD5cbiAgICA8cD5cbiAgICAgIFBhc3MgYW4gZW1wdHkgYXJyYXkgdG8gcHJldmVudCB0aGUgcmV0dXJuZWQgY2FsbGJhY2sgcmVmZXJlbmNlIGZyb20gZXZlclxuICAgICAgY2hhbmdpbmcsIGFzIGxvbmcgYXMgdGhpcyBhdG9tIGluc3RhbmNlIGlzIGFsaXZlLlxuICAgIDwvcD5cbiAgPC9JdGVtPlxuICA8SXRlbSBuYW1lPVwiUmV0dXJuc1wiIG1keFR5cGU9XCJJdGVtXCI+XG4gICAgPHA+XG4gICAgICBUaGUgbWVtb2l6ZWQgY2FsbGJhY2sgZnVuY3Rpb24uIFRoZSByZXR1cm5lZCByZWZlcmVuY2Ugd2lsbCBvbmx5IGNoYW5nZSBpZlxuICAgICAgYW55IGRlcHMgY2hhbmdlLlxuICAgIDwvcD5cbiAgPC9JdGVtPlxuICAgIDwvTGVnZW5kPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInNlZS1hbHNvXCJcbiAgICB9fT57YFNlZSBBbHNvYH08L2gyPlxuICAgIDx1bD5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj48YSBwYXJlbnROYW1lPVwibGlcIiB7Li4ue1xuICAgICAgICAgIFwiaHJlZlwiOiBcImluamVjdE1lbW9cIlxuICAgICAgICB9fT48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwiYVwiPntgaW5qZWN0TWVtbygpYH08L2lubGluZUNvZGU+PC9hPjwvbGk+XG4gICAgPC91bD5cbiAgICA8L01EWExheW91dD47XG59XG47XG5NRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsIm1keCIsImZyb250TWF0dGVyIiwiaWQiLCJ0aXRsZSIsImNvbnRlbnRUaXRsZSIsInVuZGVmaW5lZCIsIm1ldGFkYXRhIiwiYXNzZXRzIiwiTGVnZW5kIiwiSXRlbSIsIkxpbmsiLCJUYWJzIiwiVHMiLCJ0YWIxIiwidGFiMiIsInRvYyIsInZhbHVlIiwibGV2ZWwiLCJsYXlvdXRQcm9wcyIsIk1EWExheW91dCIsIk1EWENvbnRlbnQiLCJjb21wb25lbnRzIiwicHJvcHMiLCJpc01EWENvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2697\n')}}]);