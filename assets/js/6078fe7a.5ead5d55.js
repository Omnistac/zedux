"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[307],{5278:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'query-atoms\',title:\'Query Atoms\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/query-atoms","id":"walkthrough/query-atoms","title":"Query Atoms","description":"The Atom APIs and Suspense walkthroughs taught how to set an atom instance\'s promise. But promises themselves innately carry state like:","source":"@site/docs/walkthrough/query-atoms.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/query-atoms","permalink":"/zedux/docs/walkthrough/query-atoms","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/query-atoms.mdx","tags":[],"version":"current","frontMatter":{"id":"query-atoms","title":"Query Atoms"},"sidebar":"react","previous":{"title":"Suspense","permalink":"/zedux/docs/walkthrough/suspense"},"next":{"title":"Stores","permalink":"/zedux/docs/walkthrough/stores"}};var assets={};var toc=[{value:\'Query Atoms\',id:\'query-atoms\',level:2},{value:\'State Shape\',id:\'state-shape\',level:3},{value:\'<code>injectPromise</code>\',id:\'injectpromise\',level:2},{value:\'AtomApi Composition\',id:\'atomapi-composition\',level:3},{value:\'Cleanup\',id:\'cleanup\',level:3},{value:\'Example\',id:\'example\',level:3},{value:\'Not React Query\',id:\'not-react-query\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"Atom APIs")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense"},"Suspense")," walkthroughs taught how to set an atom instance\'s promise. But promises themselves innately carry state like:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Is the promise resolved?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"What\'s the resolved value?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"If the promise rejected, what was the error?")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Rather than translating this \\"promise state\\" into state yourself, you can make Zedux do it for you."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to create \\"query atoms\\""),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to get more control with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectPromise()")))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"query-atoms"},"Query Atoms"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To recap ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"the Atom APIs walkthrough"),": A query atom is just an atom whose state factory returns ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"api(promise)"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const fetcherAtom = atom(\'fetcher\', (url: string) => {\\n  const promise = fetch(url).then(result => result.json())\\n\\n  return api(promise)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Compared to the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"fetcherAtom")," in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense#quick-overview"},"the suspense walkthrough"),", this simplified a lot:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"We no longer have to inject a store and track state manually."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"We don\'t have to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},".setPromise")," anymore - the promise passed to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"api()")," serves as both the atom\'s state source and suspense promise.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"state-shape"},"State Shape"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Query atoms have their state set to an object with the following shape:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"interface PromiseState<T> {\\n  data?: T\\n  error?: Error\\n  isError: boolean\\n  isLoading: boolean\\n  isSuccess: boolean\\n  status: PromiseStatus\\n}\\n\\ntype PromiseStatus = \'error\' | \'loading\' | \'success\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"They\'re called \\"query atoms\\" because they mimic React Query queries.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The resolved promise value will be set as the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".data")," property:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"function UsersList() {\\n  const { data } = useAtomValue(fetcherAtom, [\'/users\'])\\n\\n  return (\\n    <ul>\\n      {data.map(user => (\\n        <li key={user}>{user}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"fetcherAtom")," example from the suspense walkthrough refactored to use query atoms:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=query-atoms/example resultVar=Users","live":true,"ecosystemId":"query-atoms/example","resultVar":"Users"},"// mock stuff for example:\\nconst mockUsers = [\'Joe\', \'Jim\', \'Sally\', \'Jill\', \'Bob\', \'Jamie\']\\nconst mockFetch = () =>\\n  new Promise(resolve =>\\n    setTimeout(\\n      () => resolve([...mockUsers].sort(() => Math.random() - 0.5)),\\n      1500\\n    )\\n  )\\n\\n// start here:\\nconst fetcherAtom = atom(\'fetcher\', (url: string) => {\\n  const promise = mockFetch(url)\\n\\n  return api(promise)\\n})\\n\\nfunction RefreshUsers() {\\n  const instance = useAtomInstance(fetcherAtom, [\'/users\'], {\\n    suspend: false,\\n  })\\n\\n  return <button onClick={() => instance.invalidate()}>Refresh</button>\\n}\\n\\nfunction UsersList() {\\n  const { data } = useAtomValue(fetcherAtom, [\'/users\'])\\n\\n  return (\\n    <ul>\\n      {data.map(user => (\\n        <li key={user}>{user}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nfunction Users() {\\n  return (\\n    <>\\n      <Suspense fallback={<div>fetching users...</div>}>\\n        <UsersList />\\n      </Suspense>\\n      <RefreshUsers />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"injectpromise"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"injectPromise")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"So far we\'ve been creating our promise inline in the state factory. While this is certainly a supported pattern, there are downsides:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"li"},"A side effect is running immediately when the atom instance is initialized. Since atoms are often initialized during a React render, this means we\'re kicking off side effects during render \\uD83D\\uDE2E. Especially when using SSR, this can be a problem.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"li"},"The fetch will run every time this ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"fetcherAtom")," instance is reevaluated. In Zedux, we typically do have more control over when evaluations happen than we do over rerenders in React components. But relying on this pattern still makes code more brittle. For example, it\'s easy for someone to add code later that causes this atom to reevaluate in new cases and voila we have a bug."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We could use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMemo")," to at least prevent the fetch from running unnecessarily on reevaluations."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const promise = injectMemo(() => fetch(url), [url])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But we still have the first problem of the side effect running immediately. A separate injector to isolate these side effects during SSR would be nice. Fortunately there is an injector that solves all of the above: ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const fetcherAtom = atom(\'fetcher\', (url: string) => {\\n  const queryApi = injectPromise(() => fetch(url).then(data => data.json()), [\\n    url,\\n  ])\\n\\n  return queryApi\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise")," gives you the skeleton of a query atom. The first param is a promise factory function that returns your promise. The second param is a dependency array, just like other injectors like ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMemo"),". Zedux will only rerun the promise factory when deps change."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise")," returns an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomApi"},"AtomApi")," with:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"A ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},".store")," whose state looks like a query atom\'s state (see the above ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"PromiseState")," interface)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"An attached ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},".promise")," set to the promise returned from your promise factory.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"atomapi-composition"},"AtomApi Composition"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The AtomApi can then be returned directly from your state factory as your atom\'s api. Or you can use the returned store and promise however you want - e.g. to compose them together with other stores/promises:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import {\\n  atom,\\n  createStore,\\n  injectMemo,\\n  injectPromise,\\n  injectStore,\\n} from \'@zedux/react\'\\n\\n// an atom that fetches a blog post and all its comments:\\nconst blogPostAtom = atom(\'blogPost\', (id: string) => {\\n  const commentsApi = injectPromise(\\n    () => fetch(`/comments/${id}`).then(data => data.json()),\\n    [id],\\n    // the parent store will subscribe - these child stores don\'t need to:\\n    { subscribe: false }\\n  )\\n\\n  const postApi = injectPromise(\\n    () => fetch(`/post/${id}`).then(data => data.json()),\\n    [id],\\n    { subscribe: false }\\n  )\\n\\n  // compose both stores together:\\n  const store = injectStore()\\n  store.use({ comments: commentsApi.store, post: postApi.store })\\n\\n  const promise = injectMemo(\\n    () => Promise.all([commentsApi.promise, postApi.promise]),\\n    [commentsApi.promise, postApi.promise]\\n  )\\n\\n  return api(store).setPromise(promise)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"cleanup"},"Cleanup"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux passes an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://developer.mozilla.org/en-US/docs/Web/API/AbortController"},"AbortController")," to the promise factory. Hook into this to cancel fetches or otherwise clean up your async flow."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const fetcherAtom = atom(\'fetcher\', (url: string) => {\\n  const queryApi = injectPromise(\\n    controller =>\\n      fetch(url, { signal: controller.signal }).then(data => data.json()),\\n    [url]\\n  )\\n\\n  return queryApi\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Just like ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect"),"\'s cleanup, Zedux will abort the signal whenever the promise factory runs again due to deps changing and when the atom instance is destroyed."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"example"},"Example"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Let\'s see ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise")," plugged into the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"fetcherAtom")," example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=suspense/injectPromise resultVar=Users","live":true,"ecosystemId":"suspense/injectPromise","resultVar":"Users"},"// mock stuff for example:\\nconst mockUsers = [\'Joe\', \'Jim\', \'Sally\', \'Jill\', \'Bob\', \'Jamie\']\\nconst mockFetch = () =>\\n  new Promise(resolve =>\\n    setTimeout(\\n      () => resolve([...mockUsers].sort(() => Math.random() - 0.5)),\\n      1500\\n    )\\n  )\\n\\n// start here:\\nconst fetcherAtom = atom(\'fetcher\', (url: string) => {\\n  const queryApi = injectPromise(() => mockFetch(url), [url])\\n\\n  return queryApi\\n})\\n\\nfunction RefreshUsers() {\\n  const [isPending, startTransition] = useTransition()\\n  const instance = useAtomInstance(fetcherAtom, [\'/users\'], {\\n    suspend: false,\\n  })\\n\\n  return (\\n    <button onClick={() => instance.invalidate()}>\\n      Refresh (does nothing!)\\n    </button>\\n  )\\n}\\n\\nfunction UsersList() {\\n  const { data } = useAtomValue(fetcherAtom, [\'/users\'])\\n\\n  return (\\n    <ul>\\n      {data.map(user => (\\n        <li key={user}>{user}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nfunction Users() {\\n  return (\\n    <>\\n      <Suspense fallback={<div>fetching users...</div>}>\\n        <UsersList />\\n      </Suspense>\\n      <RefreshUsers />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Clicking the button now does nothing because ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise")," prevents the promise from being recreated. The params we pass it (",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"[url]"),") aren\'t changing, so Zedux doesn\'t rerun the promise factory."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"challenge!","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Try modifying the above sandbox to make the button work again while still using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise")," (tip: As with most things in Zedux, there are several ways to go about it).")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"not-react-query"},"Not React Query"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If you know React Query, you\'ve surely noticed that these \\"query atoms\\" lack tons of features that React Query has. This is primarily because Zedux\'s objective is different from React Query\'s: React Query is a server cache manager. Zedux is ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"good")," at managing server caches and is extensible enough to at least match React Query in that regard, but Zedux is primarily a client state manager like Recoil and Redux."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"At Omnistac, we use lots of sockets and observables to shuttle highly-volatile state around. Zedux is specifically designed for this use case, so may even be the better server cache manager for similar apps."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"While we could add pagination, infinite query helpers, window focus refetching, etc, etc to Zedux core, it would bloat the codebase significantly. Query atoms should be sufficient promise handling for most apps. For everything else, we may create a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"@zedux/query")," package someday that adds injectors/helpers for more niche query operations. In the meantime:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can use both. In fact we designed Zedux in a way that allowed us to dual-wield Redux and Zedux for years. It\'s easily possible to provide a QueryClient to an ecosystem via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#context"},"ecosystem context")," or creating a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"reactQueryAtom"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create query atoms with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"return api(promise)")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Gain more control over query atom state with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectPromise()"),".")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms drive Zedux\'s powerful DI model, and stores are the backbone of atoms. It\'s time to learn all about ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"stores"},"the Zedux store"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5278\n')}}]);