"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[6242],{1186:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return h}});var n=r(3117),a=r(102),s=(r(7294),r(3905)),i=r(3052),o=["components"],l={id:"Subscriber",title:"Subscriber"},c=void 0,d={unversionedId:"api/types/Subscriber",id:"api/types/Subscriber",isDocsHomePage:!1,title:"Subscriber",description:"A function passed to store.subscribe(). Zedux will call the function when certain events happen.",source:"@site/docs/api/types/Subscriber.mdx",sourceDirName:"api/types",slug:"/api/types/Subscriber",permalink:"/zedux/docs/api/types/Subscriber",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/Subscriber.mdx",tags:[],version:"current",frontMatter:{id:"Subscriber",title:"Subscriber"},sidebar:"react",previous:{title:"Settable",permalink:"/zedux/docs/api/types/Settable"},next:{title:"Subscription",permalink:"/zedux/docs/api/types/Subscription"}},p=[{value:"Subscriber Types",id:"subscriber-types",children:[{value:"Normal",id:"normal",children:[{value:"<code>newState</code>",id:"newstate",children:[],level:4},{value:"<code>oldState</code>",id:"oldstate",children:[],level:4},{value:"<code>action</code>",id:"action",children:[],level:4}],level:3},{value:"Error",id:"error",children:[{value:"<code>error</code>",id:"error-1",children:[],level:4}],level:3},{value:"Effects",id:"effects",children:[{value:"<code>action</code>",id:"action-1",children:[],level:4},{value:"<code>error</code>",id:"error-2",children:[],level:4},{value:"<code>newState</code>",id:"newstate-1",children:[],level:4},{value:"<code>oldState</code>",id:"oldstate-1",children:[],level:4},{value:"<code>store</code>",id:"store",children:[],level:4}],level:3}],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Definition",id:"definition",children:[],level:2}],u={toc:p};function h(e){var t=e.components,r=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"A function passed to ",(0,s.kt)("a",{parentName:"p",href:"../classes/Store#subscribe"},(0,s.kt)("inlineCode",{parentName:"a"},"store.subscribe()")),". Zedux will call the function when certain events happen."),(0,s.kt)("h2",{id:"subscriber-types"},"Subscriber Types"),(0,s.kt)("p",null,"There are 3 types of subscribers:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'normal (or "next") - will be called on state change.'),(0,s.kt)("li",{parentName:"ul"},"error - will be called whenever a dispatch or setState call throws an error."),(0,s.kt)("li",{parentName:"ul"},"effects - will be called every time an action is dispatched to the store, regardless of whether the action triggered a state update.")),(0,s.kt)("p",null,"Passing a function to ",(0,s.kt)("inlineCode",{parentName:"p"},"store.subscribe()")," registers a normal subscriber. To register error and effect subscribers, pass an object with optional ",(0,s.kt)("inlineCode",{parentName:"p"},"next"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"error"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},"effects")," properties."),(0,s.kt)("h3",{id:"normal"},"Normal"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"store.subscribe((newState, oldState, action) => {\n  console.log('state changed', { newState, oldState, action })\n})\n\n// or\nstore.subscribe({\n  next: (newState, oldState, action) => ...\n})\n")),(0,s.kt)("p",null,'Also called "next" subscribers. These subscribers receive 3 parameters:'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"type NextSubscriber<State = any> = (\n  newState: State,\n  prevState: State | undefined,\n  action: ActionChain\n) => void\n")),(0,s.kt)("h4",{id:"newstate"},(0,s.kt)("inlineCode",{parentName:"h4"},"newState")),(0,s.kt)("p",null,"The current state of the store, after the latest operation changed it."),(0,s.kt)("h4",{id:"oldstate"},(0,s.kt)("inlineCode",{parentName:"h4"},"oldState")),(0,s.kt)("p",null,"The state of the store before the latest operation changed it. Can be ",(0,s.kt)("inlineCode",{parentName:"p"},"undefined")," if the subscriber is registered before the store's state is set."),(0,s.kt)("h4",{id:"action"},(0,s.kt)("inlineCode",{parentName:"h4"},"action")),(0,s.kt)("p",null,"The action that triggered the state change. If the state change was due to a ",(0,s.kt)("inlineCode",{parentName:"p"},"setState")," call or an action dispatched in a parent or child store, this action will be an ",(0,s.kt)("a",{parentName:"p",href:"ActionChain"},"ActionChain")," containing metadata that can be used to reproduce the state update from this store for time travel."),(0,s.kt)("h3",{id:"error"},"Error"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"store.subscribe({\n  error: err => {\n    console.error('Store update raised an error', err)\n  },\n})\n")),(0,s.kt)("p",null,"Will be called if an error is thrown in any reducer or in a function passed to ",(0,s.kt)("inlineCode",{parentName:"p"},".setState()")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"store.setState(currentState => {\n  throw 'test-error'\n})\n")),(0,s.kt)("p",null,"Error subscribers receive a single parameter:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"type ErrorSubscriber = (error: Error) => void\n")),(0,s.kt)("h4",{id:"error-1"},(0,s.kt)("inlineCode",{parentName:"h4"},"error")),(0,s.kt)("p",null,"The error that was thrown."),(0,s.kt)("h3",{id:"effects"},"Effects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"store.subscribe({\n  effects: ({ action, error, newState, oldState, store }) => {},\n})\n")),(0,s.kt)("p",null,"Effects subscribers will be called every time an action is dispatched to the store - regardless of whether that action causes a state change, raises an error, or has no effect."),(0,s.kt)("p",null,"They are also called for ",(0,s.kt)("a",{parentName:"p",href:"../glossary#pseudo-action"},"pseudo-actions")," (e.g. actions generated from ",(0,s.kt)("inlineCode",{parentName:"p"},"setState()")," calls) that trigger state updates or raise errors."),(0,s.kt)("p",null,"Effects subscribers are not called when a ",(0,s.kt)("inlineCode",{parentName:"p"},"setState()")," call doesn't change the state."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"store.dispatch({ type: 'anything' }) // hits effects subscribers\nparentStore.dispatch({ type: 'anything' }) // hits store's effects subscribers\nchildStore.dispatch({ type: 'anything' }) // hits store's effects subscribers\nstore.setState(state => !state) // hits effects subscribers\nstore.setState(state => state) // doesn't hit effects subscribers\n")),(0,s.kt)("p",null,"Effects subscribers receive an object with the following properties:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"interface EffectData<State = any> {\n  action?: ActionChain\n  error?: Error\n  newState: State\n  oldState?: State\n  store: Store<State>\n}\n\ntype EffectsSubscriber<State = any> = (effectData: EffectData<State>) => void\n")),(0,s.kt)("h4",{id:"action-1"},(0,s.kt)("inlineCode",{parentName:"h4"},"action")),(0,s.kt)("p",null,"The action or pseudo-action that triggered the effect. If the state change was due to a ",(0,s.kt)("inlineCode",{parentName:"p"},"setState")," call or an action dispatched in a parent or child store, this action will be an ",(0,s.kt)("a",{parentName:"p",href:"ActionChain"},"ActionChain")," containing metadata that can be used to reproduce the state update from this store for time travel."),(0,s.kt)("h4",{id:"error-2"},(0,s.kt)("inlineCode",{parentName:"h4"},"error")),(0,s.kt)("p",null,"The error that was thrown, if any."),(0,s.kt)("h4",{id:"newstate-1"},(0,s.kt)("inlineCode",{parentName:"h4"},"newState")),(0,s.kt)("p",null,"The current state of the store, after passing the action through the reducer layer or applying any state updates from a ",(0,s.kt)("inlineCode",{parentName:"p"},"setState()")," call."),(0,s.kt)("h4",{id:"oldstate-1"},(0,s.kt)("inlineCode",{parentName:"h4"},"oldState")),(0,s.kt)("p",null,"The previous state of the store, before the action was dispatched. Can be ",(0,s.kt)("inlineCode",{parentName:"p"},"undefined")," if the subscriber is registered before the store's state is set."),(0,s.kt)("h4",{id:"store"},(0,s.kt)("inlineCode",{parentName:"h4"},"store")),(0,s.kt)("p",null,"A reference to the store this effects subscriber is subscribed to."),(0,s.kt)("h4",{id:""}),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)(i.u,{resultVar:"Subscribers",mdxType:"LiveEditor"},"\nconst store = createStore(null, 1)\n\nfunction Subscribers() {\n  const [log, setLog] = useState('')\n\n  useEffect(() => {\n    const subscription = store.subscribe({\n      next: (newState, oldState, action) => setLog(\n        log => `${log}Next - ${JSON.stringify({\n          newState,\n          oldState,\n          action\n        })}\\n\\n`\n      ),\n      error: (...params) => setLog(\n        log => `${log}Error - ${params}\\n\\n`\n      ),\n      effects: (...params) => setLog(\n        log => `${log}Effect - ${JSON.stringify(params)}\\n\\n`\n      )\n    })\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  return (\n    <>\n      <pre>{log}</pre>\n      <button onClick={() => store.setState(1)}>Set to 1</button>\n      <button onClick={() => store.setState(2)}>Set to 2</button>\n      <button onClick={() => store.dispatch({ type: 'test' })}>\n        Dispatch Action\n      </button>\n      <button onClick={() => {\n        try {\n          store.setState(() => {\n            throw new Error('test-error')\n          })\n        } catch (err) {}\n      }}>\n        Trigger Error\n      </button>\n    </>\n  )\n}\n"),(0,s.kt)("h2",{id:"definition"},"Definition"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"type Subscriber<State = any> = NextSubscriber<State> | SubscriberObject<State>\n\ninterface SubscriberObject<State = any> {\n  next?: NextSubscriber<State>\n  effects?: EffectsSubscriber<State>\n  error?: ErrorSubscriber\n}\n")))}h.isMDXComponent=!0}}]);