"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4929],{6267:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var a=n(3117),s=n(102),o=(n(7294),n(3905)),i=n(3052),r=["components"],c={id:"injectAtomInstance",title:"injectAtomInstance"},l=void 0,d={unversionedId:"api/injectors/injectAtomInstance",id:"api/injectors/injectAtomInstance",isDocsHomePage:!1,title:"injectAtomInstance",description:"An injector that accepts an atom and its params and registers a static graph dependency on the resolved atom instance. Returns the resolved atom instance object.",source:"@site/docs/api/injectors/injectAtomInstance.mdx",sourceDirName:"api/injectors",slug:"/api/injectors/injectAtomInstance",permalink:"/zedux/docs/api/injectors/injectAtomInstance",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectAtomInstance.mdx",tags:[],version:"current",frontMatter:{id:"injectAtomInstance",title:"injectAtomInstance"},sidebar:"react",previous:{title:"injectAsyncEffect",permalink:"/zedux/docs/api/injectors/injectAsyncEffect"},next:{title:"injectAtomSelector",permalink:"/zedux/docs/api/injectors/injectAtomSelector"}},p=[{value:"Examples",id:"examples",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"Overloads",id:"overloads",children:[],level:3},{value:"<code>atom</code>",id:"atom",children:[],level:3},{value:"<code>params</code>",id:"params",children:[],level:3},{value:"<code>operation</code>",id:"operation",children:[],level:3},{value:"<code>shouldRegisterDependency</code>",id:"shouldregisterdependency",children:[],level:3},{value:"<code>instance</code>",id:"instance",children:[],level:3}],level:2}],u={toc:p};function m(e){var t=e.components,n=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectAtomInstance } from '@zedux/react'\n")),(0,o.kt)("p",null,"An ",(0,o.kt)("a",{parentName:"p",href:"../glossary#injector"},"injector")," that accepts an atom and its params and registers a ",(0,o.kt)("a",{parentName:"p",href:"../glossary#static-graph-dependency"},"static graph dependency")," on the resolved atom instance. Returns the resolved ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instance object"),"."),(0,o.kt)("p",null,"Since the dependency is static, the atom instance that uses this injector will not reevaluate when the resolved atom instance's state changes."),(0,o.kt)("p",null,"You can also pass an atom instance directly to register a static graph dependency on instances received from other sources, e.g. an ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance#params"},"atom instance param"),"."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)(i.u,{resultVar:"Seconds",mdxType:"LiveEditor"},"\nconst shouldCountAtom = atom('shouldCount', true)\n\nconst secondsAtom = atom('seconds', () => {\n  const shouldCountInstance = injectAtomInstance(shouldCountAtom)\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => {\n        const shouldCount = shouldCountInstance.store.getState()\n        if (!shouldCount) return\n\n        store.setState(val => val + 1)\n      },\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [shouldCountInstance])\n\n  return store\n})\n\nfunction Seconds() {\n  const [shouldCount, setShouldCount] = useAtomState(shouldCountAtom)\n  const state = useAtomValue(secondsAtom)\n\n  return (\n    <>\n      <div>Seconds: {state}</div>\n      <button onClick={() => setShouldCount(val => !val)}>\n        {shouldCount ? 'Pause' : 'Resume'} Counter\n      </button>\n    </>\n  )\n}\n"),(0,o.kt)("p",null,"Miscellaneous:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const instance = injectAtomInstance(myAtom)\nconst withParams = injectAtomInstance(myAtom, ['param 1', 'param 2'])\n\n// passing an operation helps with debugging:\nconst injectCustomStuff = () => {\n  const instance = injectAtomInstance(myAtom, [], 'injectCustomStuff')\n}\n\n// you can bypass the graph registration by passing `false` as the 4th param:\n// (you won't typically use this)\ninjectAtomInstance(myAtom, [], 'myOperation', false)\n")),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"injectAtomInstance(\n  atom,\n  params?,\n  operation?,\n  shouldRegisterDependency?\n) => AtomInstance\n")),(0,o.kt)("p",null,"Uses the atom + params combo to find an existing atom instance. If no instance is found, creates one. Returns the resolved ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instance"),"."),(0,o.kt)("h3",{id:"overloads"},"Overloads"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"injectAtomInstance(\n  instance,\n  params?,\n  operation?,\n  shouldRegisterDependency?\n) => AtomInstance\n")),(0,o.kt)("h3",{id:"atom"},(0,o.kt)("inlineCode",{parentName:"h3"},"atom")),(0,o.kt)("p",null,"Required. The ",(0,o.kt)("a",{parentName:"p",href:"../classes/Atom"},"atom")," object whose key will be used to find an existing atom instance and whose definition will be used to create an atom instance if none exist yet."),(0,o.kt)("h3",{id:"params"},(0,o.kt)("inlineCode",{parentName:"h3"},"params")),(0,o.kt)("p",null,"Optional. An array of parameters that identify this atom instance. These params will be passed to the atom's ",(0,o.kt)("a",{parentName:"p",href:"../glossary#evaluator"},"evaluator function"),"."),(0,o.kt)("p",null,"TS users will be required to pass this for atoms that take params. If you don't use TS ... just don't forget to pass them."),(0,o.kt)("p",null,"Pass an empty array if the atom doesn't take params but you're passing ",(0,o.kt)("inlineCode",{parentName:"p"},"operation")," and/or ",(0,o.kt)("inlineCode",{parentName:"p"},"shouldRegisterDependency"),"."),(0,o.kt)("h3",{id:"operation"},(0,o.kt)("inlineCode",{parentName:"h3"},"operation")),(0,o.kt)("p",null,"Optional. A string. Default ",(0,o.kt)("inlineCode",{parentName:"p"},"'injectAtomInstance'"),". Identifies this usage of ",(0,o.kt)("inlineCode",{parentName:"p"},"injectAtomInstance")," for debugging purposes. Specifically, this will identify the ",(0,o.kt)("a",{parentName:"p",href:"../glossary#graph-edge"},"graph edge")," Zedux creates for this dependency."),(0,o.kt)("p",null,"As an example, when using this injector inside a custom injector, this may be the custom injector's name."),(0,o.kt)("p",null,"You typically won't need to pass this."),(0,o.kt)("h3",{id:"shouldregisterdependency"},(0,o.kt)("inlineCode",{parentName:"h3"},"shouldRegisterDependency")),(0,o.kt)("p",null,"Optional. A boolean. Default ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),". Whether this call should register a static graph dependency on the resolved atom instance."),(0,o.kt)("p",null,"You typically won't pass this."),(0,o.kt)("h3",{id:"instance"},(0,o.kt)("inlineCode",{parentName:"h3"},"instance")),(0,o.kt)("p",null,"Required (in this overload). An ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instance"),". Will register a static dependency on the passed instance and return it."))}m.isMDXComponent=!0}}]);