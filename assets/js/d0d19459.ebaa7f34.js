"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[5963],{3905:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Zo": function() { return /* binding */ MDXProvider; },\n/* harmony export */   "kt": function() { return /* binding */ createElement; }\n/* harmony export */ });\n/* unused harmony exports MDXContext, useMDXComponents, withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === \'function\';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = \'mdxType\';\nvar DEFAULTS = {\n  inlineCode: \'code\',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components["".concat(parentName, ".").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = \'MDXCreateElement\';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === \'string\' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === \'string\' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, args);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3905\n')},1265:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'atom-instances\',title:\'Atom Instances\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/atom-instances","id":"walkthrough/atom-instances","title":"Atom Instances","description":"In the quick start, we learned that atoms are like classes. Whenever an atom is used, Zedux creates an \\"instance\\" of that atom and caches it.","source":"@site/docs/walkthrough/atom-instances.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/atom-instances","permalink":"/zedux/docs/walkthrough/atom-instances","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/atom-instances.mdx","tags":[],"version":"current","frontMatter":{"id":"atom-instances","title":"Atom Instances"},"sidebar":"react","previous":{"title":"Atom State","permalink":"/zedux/docs/walkthrough/atom-state"},"next":{"title":"Atom APIs","permalink":"/zedux/docs/walkthrough/atom-apis"}};var assets={};var toc=[{value:\'Atom Params\',id:\'atom-params\',level:2},{value:\'<code>useAtomInstance</code>\',id:\'useatominstance\',level:2},{value:\'Atom Instances\',id:\'atom-instances\',level:2},{value:\'<code>activeState</code>\',id:\'activestate\',level:3},{value:\'<code>atom</code>\',id:\'atom\',level:3},{value:\'<code>exports</code>\',id:\'exports\',level:3},{value:\'<code>params</code>\',id:\'params\',level:3},{value:\'<code>promise</code>\',id:\'promise\',level:3},{value:\'<code>store</code>\',id:\'store\',level:3},{value:\'<code>setState()</code>\',id:\'setstate\',level:3},{value:\'<code>dispatch()</code>\',id:\'dispatch\',level:3},{value:\'<code>invalidate()</code>\',id:\'invalidate\',level:3},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In the quick start, we learned that atoms are like classes. Whenever an atom is used, Zedux creates an \\"instance\\" of that atom and caches it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How atom params work"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to get an atom instance itself"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"What atom instances look like"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-params"},"Atom Params"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an atom takes params, Zedux creates a different atom instance for every \\"unique\\" set of params you pass. So how does Zedux determine \\"uniqueness\\"?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux doesn\'t compare object references. Internally, Zedux turns all params into a single string. This \\"hashing\\" is deterministic. If you know React Query, this should all sound familiar \'cause that\'s where we got the idea. Check out ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://react-query.tanstack.com/guides/query-keys#query-keys-are-hashed-deterministically"},"React Query\'s docs on this"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Let\'s look at some examples. Say we have this atom:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const myParamsAtom = atom(\'myParams\', (a: any, b: any) => {\\n  ...\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The following params are considered the same - Zedux will translate them to the exact same atom instance:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"useAtomState(myParamsAtom, [{ one, two }, three])\\nuseAtomState(myParamsAtom, [{ two, one }, three])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But the following params are all different (params order and array order matter):"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"useAtomState(myParamsAtom, [{ one, two }, three])\\nuseAtomState(myParamsAtom, [three, { one, two }])\\n\\nuseAtomState(myParamsAtom, [[one, two], three])\\nuseAtomState(myParamsAtom, [[two, one], three])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"useatominstance"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"useAtomInstance")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Up till now, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState")," has been our only way to interact with atoms. It\'s time we learned a new hook."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance")," is a lower-level hook than ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState")," that returns the entire atom instance. Importantly, unlike ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState"),", it doesn\'t cause a rerender when the atom instance\'s state changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=atom-instances/useAtomInstance resultVar=App","live":true,"ecosystemId":"atom-instances/useAtomInstance","resultVar":"App"},"const counterAtom = atom(\'counter\', 0)\\n\\nfunction Static() {\\n  // useAtomInstance does _not_ trigger rerenders\\n  const greetingInstance = useAtomInstance(counterAtom)\\n\\n  return (\\n    <div>\\n      <button onClick={() => greetingInstance.setState(state => state + 1)}>\\n        Increment\\n      </button>\\n      <span> non-updating state: {greetingInstance.getState()}</span>\\n    </div>\\n  )\\n}\\n\\nfunction Dynamic() {\\n  // useAtomState triggers rerenders on state update\\n  const [counter, setState] = useAtomState(counterAtom)\\n\\n  return (\\n    <div>\\n      <button onClick={() => setState(state => state + 1)}>Increment</button>\\n      <span> state: {counter}</span>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Static />\\n      <Dynamic />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Click the buttons a few times and you\'ll see the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Dynamic")," component update while the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Static")," component stays ... static, even though both buttons are doing exactly the same thing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This example is contrived - you shouldn\'t ever ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"read")," an atom\'s state in a component like this. But one of the primary uses of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance")," is to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"set")," an atom\'s state without subscribing to state updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// subscribes:\\nconst [, setState] = useAtomState(myAtom)\\n...\\nsetState(newState)\\n\\n// doesn\'t subscribe:\\nconst instance = useAtomInstance(myAtom)\\n...\\ninstance.setState(newState)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright, we did a few things with the atom instance that we haven\'t seen before. Let\'s look at those now."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-instances"},"Atom Instances"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance"},"atom instance")," is just an object that contains the following methods/properties:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"activestate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"activeState")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A string. Every atom instance goes through a lifecycle:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("img",{alt:"Initializing -&gt; Active &lt;-&gt; Stale -&gt; Destroyed",src:(__webpack_require__(1063)/* ["default"] */ .Z),width:"1540",height:"572"})),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.activeState")," should typically be ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'Active\'")," on instances you use. We\'ll talk more about these in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"destruction"},"the destruction walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"atom"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"atom")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A reference to the atom that this atom instance is an instance of."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', () => \'my state\')\\n...\\nconst instance = useAtomInstance(exampleAtom)\\ninstance.atom === exampleAtom // true\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"exports"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"exports")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An object containing the exports of the atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomInstance(myAtom)\\nconst { someExport } = instance.exports\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"These exports are constant - they are set the first time an atom instance evaluates and they will not change on subsequent evaluations. We\'ll learn how to set exports in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"the Atom API walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"params"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"params")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An array of the params of this atom instance, in the order passed"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const blogPostCommentAtom = atom(\\n  \'blogPostComment\',\\n  (blogPostId: string, commentId: string) => {\\n    ...\\n  }\\n)\\n...\\nconst instance = useAtomInstance(myAtom)\\nconst [blogPostId, commentId] = instance.params\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"promise"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"promise")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A reference to the current promise of the atom instance. Instance promises are used to kick off React suspense and inform other atoms when an atom instance\'s state is \\"ready\\"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomInstance(myAtom)\\n...\\ninstance.promise.then(() => /* instance is ready */)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll learn how to set promises in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"the Atom API walkthrough")," and how to use them with React suspense in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense"},"the suspense walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"store"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"store")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A reference to the atom instance\'s store. Every atom instance has one. If the atom\'s state factory returns a store, this will be a reference to that store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const storeAtom = atom(\'store\', () => {\\n  const store = injectStore(\'initial state\')\\n\\n  return store\\n})\\n\\nfunction MyComponent() {\\n  const instance = useAtomInstance(storeAtom)\\n  instance.store // <- this is the exact same store that we returned\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We learned a bit about stores in the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-state"},"atom state walkthrough"),". Quick recap:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"store.getState() // returns the current state of the store\\nstore.setState(\'new state\') // overwrites the store\'s state\\n\\n// recursively merge state into existing state:\\nstore.setStateDeep({ deeply: { merge: \'this state\' } })\\n\\n// function overloads - set new state based on current state\\nstore.setState(state => state + 1)\\nstore.setStateDeep(state => ({ someKey: state.someKey + 1 }))\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"setstate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"setState()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The most common way to set the state of an atom instance\'s store. This is the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"setState")," function returned by ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState"),". Function overload supported."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomInstance(myAtom)\\n...\\ninstance.setState(newState)\\ninstance.setState(currentState => newState)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setState()")," function is ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"not")," a reference to the instance\'s store\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setState()")," function. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.setState()")," is a wrapper around ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.store.setState()"),". This is important because ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.setState()")," allows interceptors to run before calling ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".store.setState()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Always prefer calling ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.setState()")," over ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.store.setState()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"dispatch"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"dispatch()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The recommended way to dispatch actions to the instance\'s store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomInstance(myAtom)\\n...\\ninstance.dispatch({ type: \'some-type\' })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Similar to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.setState()"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.dispatch()")," is a wrapper around ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.store.dispatch()"),". The difference is that ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.dispatch()")," allows dispatch interceptors to run before calling ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".store.dispatch()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Always prefer calling ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.dispatch()")," over ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.store.dispatch()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"invalidate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"invalidate()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Call this to force the atom instance to reevaluate. Typically you should avoid impure or mutation-oriented patterns that require you to manually invalidate atom instances. But there are some useful invalidation patterns that we\'ll look at in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"resets"},"the resets walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=atom-instances/invalidate resultVar=RandomNum","live":true,"ecosystemId":"atom-instances/invalidate","resultVar":"RandomNum"},"const randomNumAtom = atom(\'randomNum\', () => Math.floor(Math.random() * 100))\\n\\nfunction RandomNum() {\\n  const instance = useAtomInstance(randomNumAtom)\\n  const value = useAtomValue(randomNumAtom)\\n\\n  return (\\n    <>\\n      <div>Random Number: {value}</div>\\n      <button onClick={() => instance.invalidate()}>Re-roll</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom params are hashed deterministically."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomInstance")," returns an atom instance without subscribing to state updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom instances have a lot of features. We\'ll cover more in the rest of this walkthrough.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We learned that atom instances have ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"exports")," and a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"promise"),", but we still don\'t know how to create those. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"Let\'s fix that"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bURBQW1ELGtFQUFHLFVBQVUsQ0FBQyxHQUFHLENBQzVOLE1BQU0sQ0FBRSxXQUFXLG1CQUNJLEtBQVMsQ0FDeEIsQ0FDaEIsQ0FDQSxDQUNBSCxVQUFVLENBQUNLLGNBQWMsQ0FBRyxJQUFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL2RvY3Mvd2Fsa3Rocm91Z2gvYXRvbS1pbnN0YW5jZXMubWR4PzA4MGUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbi8qIEBqc3hSdW50aW1lIGNsYXNzaWMgKi9cbi8qIEBqc3ggbWR4ICovXG4vKiBAanN4RnJhZyBSZWFjdC5GcmFnbWVudCAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbWR4IH0gZnJvbSAnQG1keC1qcy9yZWFjdCc7XG5cblxuZXhwb3J0IGNvbnN0IGZyb250TWF0dGVyID0ge1xuXHRpZDogJ2F0b20taW5zdGFuY2VzJyxcblx0dGl0bGU6ICdBdG9tIEluc3RhbmNlcydcbn07XG5leHBvcnQgY29uc3QgY29udGVudFRpdGxlID0gdW5kZWZpbmVkO1xuZXhwb3J0IGNvbnN0IG1ldGFkYXRhID0ge1xuICBcInVudmVyc2lvbmVkSWRcIjogXCJ3YWxrdGhyb3VnaC9hdG9tLWluc3RhbmNlc1wiLFxuICBcImlkXCI6IFwid2Fsa3Rocm91Z2gvYXRvbS1pbnN0YW5jZXNcIixcbiAgXCJ0aXRsZVwiOiBcIkF0b20gSW5zdGFuY2VzXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJJbiB0aGUgcXVpY2sgc3RhcnQsIHdlIGxlYXJuZWQgdGhhdCBhdG9tcyBhcmUgbGlrZSBjbGFzc2VzLiBXaGVuZXZlciBhbiBhdG9tIGlzIHVzZWQsIFplZHV4IGNyZWF0ZXMgYW4gXFxcImluc3RhbmNlXFxcIiBvZiB0aGF0IGF0b20gYW5kIGNhY2hlcyBpdC5cIixcbiAgXCJzb3VyY2VcIjogXCJAc2l0ZS9kb2NzL3dhbGt0aHJvdWdoL2F0b20taW5zdGFuY2VzLm1keFwiLFxuICBcInNvdXJjZURpck5hbWVcIjogXCJ3YWxrdGhyb3VnaFwiLFxuICBcInNsdWdcIjogXCIvd2Fsa3Rocm91Z2gvYXRvbS1pbnN0YW5jZXNcIixcbiAgXCJwZXJtYWxpbmtcIjogXCIvemVkdXgvZG9jcy93YWxrdGhyb3VnaC9hdG9tLWluc3RhbmNlc1wiLFxuICBcImRyYWZ0XCI6IGZhbHNlLFxuICBcImVkaXRVcmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vT21uaXN0YWMvemVkdXgvdHJlZS9tYXN0ZXIvZG9jcy93YWxrdGhyb3VnaC9hdG9tLWluc3RhbmNlcy5tZHhcIixcbiAgXCJ0YWdzXCI6IFtdLFxuICBcInZlcnNpb25cIjogXCJjdXJyZW50XCIsXG4gIFwiZnJvbnRNYXR0ZXJcIjoge1xuICAgIFwiaWRcIjogXCJhdG9tLWluc3RhbmNlc1wiLFxuICAgIFwidGl0bGVcIjogXCJBdG9tIEluc3RhbmNlc1wiXG4gIH0sXG4gIFwic2lkZWJhclwiOiBcInJlYWN0XCIsXG4gIFwicHJldmlvdXNcIjoge1xuICAgIFwidGl0bGVcIjogXCJBdG9tIFN0YXRlXCIsXG4gICAgXCJwZXJtYWxpbmtcIjogXCIvemVkdXgvZG9jcy93YWxrdGhyb3VnaC9hdG9tLXN0YXRlXCJcbiAgfSxcbiAgXCJuZXh0XCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQXRvbSBBUElzXCIsXG4gICAgXCJwZXJtYWxpbmtcIjogXCIvemVkdXgvZG9jcy93YWxrdGhyb3VnaC9hdG9tLWFwaXNcIlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGFzc2V0cyA9IHtcblxufTtcblxuXG5leHBvcnQgY29uc3QgdG9jID0gW3tcbiAgdmFsdWU6ICdBdG9tIFBhcmFtcycsXG4gIGlkOiAnYXRvbS1wYXJhbXMnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJzxjb2RlPnVzZUF0b21JbnN0YW5jZTwvY29kZT4nLFxuICBpZDogJ3VzZWF0b21pbnN0YW5jZScsXG4gIGxldmVsOiAyXG59LCB7XG4gIHZhbHVlOiAnQXRvbSBJbnN0YW5jZXMnLFxuICBpZDogJ2F0b20taW5zdGFuY2VzJyxcbiAgbGV2ZWw6IDJcbn0sIHtcbiAgdmFsdWU6ICc8Y29kZT5hY3RpdmVTdGF0ZTwvY29kZT4nLFxuICBpZDogJ2FjdGl2ZXN0YXRlJyxcbiAgbGV2ZWw6IDNcbn0sIHtcbiAgdmFsdWU6ICc8Y29kZT5hdG9tPC9jb2RlPicsXG4gIGlkOiAnYXRvbScsXG4gIGxldmVsOiAzXG59LCB7XG4gIHZhbHVlOiAnPGNvZGU+ZXhwb3J0czwvY29kZT4nLFxuICBpZDogJ2V4cG9ydHMnLFxuICBsZXZlbDogM1xufSwge1xuICB2YWx1ZTogJzxjb2RlPnBhcmFtczwvY29kZT4nLFxuICBpZDogJ3BhcmFtcycsXG4gIGxldmVsOiAzXG59LCB7XG4gIHZhbHVlOiAnPGNvZGU+cHJvbWlzZTwvY29kZT4nLFxuICBpZDogJ3Byb21pc2UnLFxuICBsZXZlbDogM1xufSwge1xuICB2YWx1ZTogJzxjb2RlPnN0b3JlPC9jb2RlPicsXG4gIGlkOiAnc3RvcmUnLFxuICBsZXZlbDogM1xufSwge1xuICB2YWx1ZTogJzxjb2RlPnNldFN0YXRlKCk8L2NvZGU+JyxcbiAgaWQ6ICdzZXRzdGF0ZScsXG4gIGxldmVsOiAzXG59LCB7XG4gIHZhbHVlOiAnPGNvZGU+ZGlzcGF0Y2goKTwvY29kZT4nLFxuICBpZDogJ2Rpc3BhdGNoJyxcbiAgbGV2ZWw6IDNcbn0sIHtcbiAgdmFsdWU6ICc8Y29kZT5pbnZhbGlkYXRlKCk8L2NvZGU+JyxcbiAgaWQ6ICdpbnZhbGlkYXRlJyxcbiAgbGV2ZWw6IDNcbn0sIHtcbiAgdmFsdWU6ICdSZWNhcCcsXG4gIGlkOiAncmVjYXAnLFxuICBsZXZlbDogMlxufSwge1xuICB2YWx1ZTogJ05leHQgU3RlcHMnLFxuICBpZDogJ25leHQtc3RlcHMnLFxuICBsZXZlbDogMlxufV07XG5cbmNvbnN0IGxheW91dFByb3BzID0ge1xuICB0b2Ncbn07XG5jb25zdCBNRFhMYXlvdXQgPSBcIndyYXBwZXJcIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudCh7XG4gIGNvbXBvbmVudHMsXG4gIC4uLnByb3BzXG59KSB7XG4gIHJldHVybiA8TURYTGF5b3V0IHsuLi5sYXlvdXRQcm9wc30gey4uLnByb3BzfSBjb21wb25lbnRzPXtjb21wb25lbnRzfSBtZHhUeXBlPVwiTURYTGF5b3V0XCI+XG5cbiAgICA8cD57YEluIHRoZSBxdWljayBzdGFydCwgd2UgbGVhcm5lZCB0aGF0IGF0b21zIGFyZSBsaWtlIGNsYXNzZXMuIFdoZW5ldmVyIGFuIGF0b20gaXMgdXNlZCwgWmVkdXggY3JlYXRlcyBhbiBcImluc3RhbmNlXCIgb2YgdGhhdCBhdG9tIGFuZCBjYWNoZXMgaXQuYH08L3A+XG4gICAgPGFkbW9uaXRpb24gey4uLntcbiAgICAgIFwidGl0bGVcIjogXCJ5b3Ugd2lsbCBsZWFybjpcIixcbiAgICAgIFwidHlwZVwiOiBcInRpcFwiXG4gICAgfX0+PHVsIHBhcmVudE5hbWU9XCJhZG1vbml0aW9uXCI+XG4gICAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YEhvdyBhdG9tIHBhcmFtcyB3b3JrYH08L2xpPlxuICAgICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BIb3cgdG8gZ2V0IGFuIGF0b20gaW5zdGFuY2UgaXRzZWxmYH08L2xpPlxuICAgICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BXaGF0IGF0b20gaW5zdGFuY2VzIGxvb2sgbGlrZWB9PC9saT5cbiAgICAgIDwvdWw+PC9hZG1vbml0aW9uPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcImF0b20tcGFyYW1zXCJcbiAgICB9fT57YEF0b20gUGFyYW1zYH08L2gyPlxuICAgIDxwPntgV2hlbiBhbiBhdG9tIHRha2VzIHBhcmFtcywgWmVkdXggY3JlYXRlcyBhIGRpZmZlcmVudCBhdG9tIGluc3RhbmNlIGZvciBldmVyeSBcInVuaXF1ZVwiIHNldCBvZiBwYXJhbXMgeW91IHBhc3MuIFNvIGhvdyBkb2VzIFplZHV4IGRldGVybWluZSBcInVuaXF1ZW5lc3NcIj9gfTwvcD5cbiAgICA8cD57YFplZHV4IGRvZXNuJ3QgY29tcGFyZSBvYmplY3QgcmVmZXJlbmNlcy4gSW50ZXJuYWxseSwgWmVkdXggdHVybnMgYWxsIHBhcmFtcyBpbnRvIGEgc2luZ2xlIHN0cmluZy4gVGhpcyBcImhhc2hpbmdcIiBpcyBkZXRlcm1pbmlzdGljLiBJZiB5b3Uga25vdyBSZWFjdCBRdWVyeSwgdGhpcyBzaG91bGQgYWxsIHNvdW5kIGZhbWlsaWFyICdjYXVzZSB0aGF0J3Mgd2hlcmUgd2UgZ290IHRoZSBpZGVhLiBDaGVjayBvdXQgYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgIFwiaHJlZlwiOiBcImh0dHBzOi8vcmVhY3QtcXVlcnkudGFuc3RhY2suY29tL2d1aWRlcy9xdWVyeS1rZXlzI3F1ZXJ5LWtleXMtYXJlLWhhc2hlZC1kZXRlcm1pbmlzdGljYWxseVwiXG4gICAgICB9fT57YFJlYWN0IFF1ZXJ5J3MgZG9jcyBvbiB0aGlzYH08L2E+e2AuYH08L3A+XG4gICAgPHA+e2BMZXQncyBsb29rIGF0IHNvbWUgZXhhbXBsZXMuIFNheSB3ZSBoYXZlIHRoaXMgYXRvbTpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgY29uc3QgbXlQYXJhbXNBdG9tID0gYXRvbSgnbXlQYXJhbXMnLCAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgLi4uXG59KVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BUaGUgZm9sbG93aW5nIHBhcmFtcyBhcmUgY29uc2lkZXJlZCB0aGUgc2FtZSAtIFplZHV4IHdpbGwgdHJhbnNsYXRlIHRoZW0gdG8gdGhlIGV4YWN0IHNhbWUgYXRvbSBpbnN0YW5jZTpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgdXNlQXRvbVN0YXRlKG15UGFyYW1zQXRvbSwgW3sgb25lLCB0d28gfSwgdGhyZWVdKVxudXNlQXRvbVN0YXRlKG15UGFyYW1zQXRvbSwgW3sgdHdvLCBvbmUgfSwgdGhyZWVdKVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPHA+e2BCdXQgdGhlIGZvbGxvd2luZyBwYXJhbXMgYXJlIGFsbCBkaWZmZXJlbnQgKHBhcmFtcyBvcmRlciBhbmQgYXJyYXkgb3JkZXIgbWF0dGVyKTpgfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgdXNlQXRvbVN0YXRlKG15UGFyYW1zQXRvbSwgW3sgb25lLCB0d28gfSwgdGhyZWVdKVxudXNlQXRvbVN0YXRlKG15UGFyYW1zQXRvbSwgW3RocmVlLCB7IG9uZSwgdHdvIH1dKVxuXG51c2VBdG9tU3RhdGUobXlQYXJhbXNBdG9tLCBbW29uZSwgdHdvXSwgdGhyZWVdKVxudXNlQXRvbVN0YXRlKG15UGFyYW1zQXRvbSwgW1t0d28sIG9uZV0sIHRocmVlXSlcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInVzZWF0b21pbnN0YW5jZVwiXG4gICAgfX0+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImgyXCI+e2B1c2VBdG9tSW5zdGFuY2VgfTwvaW5saW5lQ29kZT48L2gyPlxuICAgIDxwPntgVXAgdGlsbCBub3csIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YHVzZUF0b21TdGF0ZWB9PC9pbmxpbmVDb2RlPntgIGhhcyBiZWVuIG91ciBvbmx5IHdheSB0byBpbnRlcmFjdCB3aXRoIGF0b21zLiBJdCdzIHRpbWUgd2UgbGVhcm5lZCBhIG5ldyBob29rLmB9PC9wPlxuICAgIDxwPjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2B1c2VBdG9tSW5zdGFuY2VgfTwvaW5saW5lQ29kZT57YCBpcyBhIGxvd2VyLWxldmVsIGhvb2sgdGhhbiBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2B1c2VBdG9tU3RhdGVgfTwvaW5saW5lQ29kZT57YCB0aGF0IHJldHVybnMgdGhlIGVudGlyZSBhdG9tIGluc3RhbmNlLiBJbXBvcnRhbnRseSwgdW5saWtlIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YHVzZUF0b21TdGF0ZWB9PC9pbmxpbmVDb2RlPntgLCBpdCBkb2Vzbid0IGNhdXNlIGEgcmVyZW5kZXIgd2hlbiB0aGUgYXRvbSBpbnN0YW5jZSdzIHN0YXRlIGNoYW5nZXMuYH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c3hcIixcbiAgICAgICAgXCJtZXRhc3RyaW5nXCI6IFwibGl2ZSBlY29zeXN0ZW1JZD1hdG9tLWluc3RhbmNlcy91c2VBdG9tSW5zdGFuY2UgcmVzdWx0VmFyPUFwcFwiLFxuICAgICAgICBcImxpdmVcIjogdHJ1ZSxcbiAgICAgICAgXCJlY29zeXN0ZW1JZFwiOiBcImF0b20taW5zdGFuY2VzL3VzZUF0b21JbnN0YW5jZVwiLFxuICAgICAgICBcInJlc3VsdFZhclwiOiBcIkFwcFwiXG4gICAgICB9fT57YGNvbnN0IGNvdW50ZXJBdG9tID0gYXRvbSgnY291bnRlcicsIDApXG5cbmZ1bmN0aW9uIFN0YXRpYygpIHtcbiAgLy8gdXNlQXRvbUluc3RhbmNlIGRvZXMgX25vdF8gdHJpZ2dlciByZXJlbmRlcnNcbiAgY29uc3QgZ3JlZXRpbmdJbnN0YW5jZSA9IHVzZUF0b21JbnN0YW5jZShjb3VudGVyQXRvbSlcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGdyZWV0aW5nSW5zdGFuY2Uuc2V0U3RhdGUoc3RhdGUgPT4gc3RhdGUgKyAxKX0+XG4gICAgICAgIEluY3JlbWVudFxuICAgICAgPC9idXR0b24+XG4gICAgICA8c3Bhbj4gbm9uLXVwZGF0aW5nIHN0YXRlOiB7Z3JlZXRpbmdJbnN0YW5jZS5nZXRTdGF0ZSgpfTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBEeW5hbWljKCkge1xuICAvLyB1c2VBdG9tU3RhdGUgdHJpZ2dlcnMgcmVyZW5kZXJzIG9uIHN0YXRlIHVwZGF0ZVxuICBjb25zdCBbY291bnRlciwgc2V0U3RhdGVdID0gdXNlQXRvbVN0YXRlKGNvdW50ZXJBdG9tKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0U3RhdGUoc3RhdGUgPT4gc3RhdGUgKyAxKX0+SW5jcmVtZW50PC9idXR0b24+XG4gICAgICA8c3Bhbj4gc3RhdGU6IHtjb3VudGVyfTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgKVxufVxuXG5mdW5jdGlvbiBBcHAoKSB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxTdGF0aWMgLz5cbiAgICAgIDxEeW5hbWljIC8+XG4gICAgPC8+XG4gIClcbn1cbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgQ2xpY2sgdGhlIGJ1dHRvbnMgYSBmZXcgdGltZXMgYW5kIHlvdSdsbCBzZWUgdGhlIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YER5bmFtaWNgfTwvaW5saW5lQ29kZT57YCBjb21wb25lbnQgdXBkYXRlIHdoaWxlIHRoZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BTdGF0aWNgfTwvaW5saW5lQ29kZT57YCBjb21wb25lbnQgc3RheXMgLi4uIHN0YXRpYywgZXZlbiB0aG91Z2ggYm90aCBidXR0b25zIGFyZSBkb2luZyBleGFjdGx5IHRoZSBzYW1lIHRoaW5nLmB9PC9wPlxuICAgIDxwPntgVGhpcyBleGFtcGxlIGlzIGNvbnRyaXZlZCAtIHlvdSBzaG91bGRuJ3QgZXZlciBgfTxlbSBwYXJlbnROYW1lPVwicFwiPntgcmVhZGB9PC9lbT57YCBhbiBhdG9tJ3Mgc3RhdGUgaW4gYSBjb21wb25lbnQgbGlrZSB0aGlzLiBCdXQgb25lIG9mIHRoZSBwcmltYXJ5IHVzZXMgb2YgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgdXNlQXRvbUluc3RhbmNlYH08L2lubGluZUNvZGU+e2AgaXMgdG8gYH08ZW0gcGFyZW50TmFtZT1cInBcIj57YHNldGB9PC9lbT57YCBhbiBhdG9tJ3Mgc3RhdGUgd2l0aG91dCBzdWJzY3JpYmluZyB0byBzdGF0ZSB1cGRhdGVzLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2AvLyBzdWJzY3JpYmVzOlxuY29uc3QgWywgc2V0U3RhdGVdID0gdXNlQXRvbVN0YXRlKG15QXRvbSlcbi4uLlxuc2V0U3RhdGUobmV3U3RhdGUpXG5cbi8vIGRvZXNuJ3Qgc3Vic2NyaWJlOlxuY29uc3QgaW5zdGFuY2UgPSB1c2VBdG9tSW5zdGFuY2UobXlBdG9tKVxuLi4uXG5pbnN0YW5jZS5zZXRTdGF0ZShuZXdTdGF0ZSlcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgQWxyaWdodCwgd2UgZGlkIGEgZmV3IHRoaW5ncyB3aXRoIHRoZSBhdG9tIGluc3RhbmNlIHRoYXQgd2UgaGF2ZW4ndCBzZWVuIGJlZm9yZS4gTGV0J3MgbG9vayBhdCB0aG9zZSBub3cuYH08L3A+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwiYXRvbS1pbnN0YW5jZXNcIlxuICAgIH19PntgQXRvbSBJbnN0YW5jZXNgfTwvaDI+XG4gICAgPHA+e2BFdmVyeSBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiLi4vYXBpL2NsYXNzZXMvQXRvbUluc3RhbmNlXCJcbiAgICAgIH19PntgYXRvbSBpbnN0YW5jZWB9PC9hPntgIGlzIGp1c3QgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGZvbGxvd2luZyBtZXRob2RzL3Byb3BlcnRpZXM6YH08L3A+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwiYWN0aXZlc3RhdGVcIlxuICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJoM1wiPntgYWN0aXZlU3RhdGVgfTwvaW5saW5lQ29kZT48L2gzPlxuICAgIDxwPntgQSBzdHJpbmcuIEV2ZXJ5IGF0b20gaW5zdGFuY2UgZ29lcyB0aHJvdWdoIGEgbGlmZWN5Y2xlOmB9PC9wPlxuICAgIDxwPjxpbWcgYWx0PXtcIkluaXRpYWxpemluZyAtJmd0OyBBY3RpdmUgJmx0Oy0mZ3Q7IFN0YWxlIC0mZ3Q7IERlc3Ryb3llZFwifSBzcmM9e3JlcXVpcmUoXCIhL1VzZXJzL2pvc2h1YWNsYXVuY2gvY29kZS9vc3MvemVkdXgvZG9jcy9ub2RlX21vZHVsZXMvdXJsLWxvYWRlci9kaXN0L2Nqcy5qcz9saW1pdD0xMDAwMCZuYW1lPWFzc2V0cy9pbWFnZXMvW25hbWVdLVtjb250ZW50aGFzaF0uW2V4dF0mZmFsbGJhY2s9L1VzZXJzL2pvc2h1YWNsYXVuY2gvY29kZS9vc3MvemVkdXgvZG9jcy9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMhLi8uLi8uLi9zdGF0aWMvaW1nL2RpYWdyYW1zL2FjdGl2ZS1zdGF0ZS1tYWNoaW5lLnBuZ1wiKS5kZWZhdWx0fSB3aWR0aD1cIjE1NDBcIiBoZWlnaHQ9XCI1NzJcIiAvPjwvcD5cbiAgICA8cD48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5zdGFuY2UuYWN0aXZlU3RhdGVgfTwvaW5saW5lQ29kZT57YCBzaG91bGQgdHlwaWNhbGx5IGJlIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YCdBY3RpdmUnYH08L2lubGluZUNvZGU+e2Agb24gaW5zdGFuY2VzIHlvdSB1c2UuIFdlJ2xsIHRhbGsgbW9yZSBhYm91dCB0aGVzZSBpbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiZGVzdHJ1Y3Rpb25cIlxuICAgICAgfX0+e2B0aGUgZGVzdHJ1Y3Rpb24gd2Fsa3Rocm91Z2hgfTwvYT57YC5gfTwvcD5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJhdG9tXCJcbiAgICB9fT48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwiaDNcIj57YGF0b21gfTwvaW5saW5lQ29kZT48L2gzPlxuICAgIDxwPntgQSByZWZlcmVuY2UgdG8gdGhlIGF0b20gdGhhdCB0aGlzIGF0b20gaW5zdGFuY2UgaXMgYW4gaW5zdGFuY2Ugb2YuYH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGNvbnN0IGV4YW1wbGVBdG9tID0gYXRvbSgnZXhhbXBsZScsICgpID0+ICdteSBzdGF0ZScpXG4uLi5cbmNvbnN0IGluc3RhbmNlID0gdXNlQXRvbUluc3RhbmNlKGV4YW1wbGVBdG9tKVxuaW5zdGFuY2UuYXRvbSA9PT0gZXhhbXBsZUF0b20gLy8gdHJ1ZVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwiZXhwb3J0c1wiXG4gICAgfX0+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImgzXCI+e2BleHBvcnRzYH08L2lubGluZUNvZGU+PC9oMz5cbiAgICA8cD57YEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBleHBvcnRzIG9mIHRoZSBhdG9tIGluc3RhbmNlLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2Bjb25zdCBpbnN0YW5jZSA9IHVzZUF0b21JbnN0YW5jZShteUF0b20pXG5jb25zdCB7IHNvbWVFeHBvcnQgfSA9IGluc3RhbmNlLmV4cG9ydHNcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxwPntgVGhlc2UgZXhwb3J0cyBhcmUgY29uc3RhbnQgLSB0aGV5IGFyZSBzZXQgdGhlIGZpcnN0IHRpbWUgYW4gYXRvbSBpbnN0YW5jZSBldmFsdWF0ZXMgYW5kIHRoZXkgd2lsbCBub3QgY2hhbmdlIG9uIHN1YnNlcXVlbnQgZXZhbHVhdGlvbnMuIFdlJ2xsIGxlYXJuIGhvdyB0byBzZXQgZXhwb3J0cyBpbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiYXRvbS1hcGlzXCJcbiAgICAgIH19PntgdGhlIEF0b20gQVBJIHdhbGt0aHJvdWdoYH08L2E+e2AuYH08L3A+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwicGFyYW1zXCJcbiAgICB9fT48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwiaDNcIj57YHBhcmFtc2B9PC9pbmxpbmVDb2RlPjwvaDM+XG4gICAgPHA+e2BBbiBhcnJheSBvZiB0aGUgcGFyYW1zIG9mIHRoaXMgYXRvbSBpbnN0YW5jZSwgaW4gdGhlIG9yZGVyIHBhc3NlZGB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHNcIlxuICAgICAgfX0+e2Bjb25zdCBibG9nUG9zdENvbW1lbnRBdG9tID0gYXRvbShcbiAgJ2Jsb2dQb3N0Q29tbWVudCcsXG4gIChibG9nUG9zdElkOiBzdHJpbmcsIGNvbW1lbnRJZDogc3RyaW5nKSA9PiB7XG4gICAgLi4uXG4gIH1cbilcbi4uLlxuY29uc3QgaW5zdGFuY2UgPSB1c2VBdG9tSW5zdGFuY2UobXlBdG9tKVxuY29uc3QgW2Jsb2dQb3N0SWQsIGNvbW1lbnRJZF0gPSBpbnN0YW5jZS5wYXJhbXNcbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxoMyB7Li4ue1xuICAgICAgXCJpZFwiOiBcInByb21pc2VcIlxuICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJoM1wiPntgcHJvbWlzZWB9PC9pbmxpbmVDb2RlPjwvaDM+XG4gICAgPHA+e2BBIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBwcm9taXNlIG9mIHRoZSBhdG9tIGluc3RhbmNlLiBJbnN0YW5jZSBwcm9taXNlcyBhcmUgdXNlZCB0byBraWNrIG9mZiBSZWFjdCBzdXNwZW5zZSBhbmQgaW5mb3JtIG90aGVyIGF0b21zIHdoZW4gYW4gYXRvbSBpbnN0YW5jZSdzIHN0YXRlIGlzIFwicmVhZHlcIi5gfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgY29uc3QgaW5zdGFuY2UgPSB1c2VBdG9tSW5zdGFuY2UobXlBdG9tKVxuLi4uXG5pbnN0YW5jZS5wcm9taXNlLnRoZW4oKCkgPT4gLyogaW5zdGFuY2UgaXMgcmVhZHkgKi8pXG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFdlJ2xsIGxlYXJuIGhvdyB0byBzZXQgcHJvbWlzZXMgaW4gYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgIFwiaHJlZlwiOiBcImF0b20tYXBpc1wiXG4gICAgICB9fT57YHRoZSBBdG9tIEFQSSB3YWxrdGhyb3VnaGB9PC9hPntgIGFuZCBob3cgdG8gdXNlIHRoZW0gd2l0aCBSZWFjdCBzdXNwZW5zZSBpbiBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwic3VzcGVuc2VcIlxuICAgICAgfX0+e2B0aGUgc3VzcGVuc2Ugd2Fsa3Rocm91Z2hgfTwvYT57YC5gfTwvcD5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJzdG9yZVwiXG4gICAgfX0+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImgzXCI+e2BzdG9yZWB9PC9pbmxpbmVDb2RlPjwvaDM+XG4gICAgPHA+e2BBIHJlZmVyZW5jZSB0byB0aGUgYXRvbSBpbnN0YW5jZSdzIHN0b3JlLiBFdmVyeSBhdG9tIGluc3RhbmNlIGhhcyBvbmUuIElmIHRoZSBhdG9tJ3Mgc3RhdGUgZmFjdG9yeSByZXR1cm5zIGEgc3RvcmUsIHRoaXMgd2lsbCBiZSBhIHJlZmVyZW5jZSB0byB0aGF0IHN0b3JlLmB9PC9wPlxuICAgIDxwcmU+PGNvZGUgcGFyZW50TmFtZT1cInByZVwiIHsuLi57XG4gICAgICAgIFwiY2xhc3NOYW1lXCI6IFwibGFuZ3VhZ2UtdHN4XCJcbiAgICAgIH19PntgY29uc3Qgc3RvcmVBdG9tID0gYXRvbSgnc3RvcmUnLCAoKSA9PiB7XG4gIGNvbnN0IHN0b3JlID0gaW5qZWN0U3RvcmUoJ2luaXRpYWwgc3RhdGUnKVxuXG4gIHJldHVybiBzdG9yZVxufSlcblxuZnVuY3Rpb24gTXlDb21wb25lbnQoKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gdXNlQXRvbUluc3RhbmNlKHN0b3JlQXRvbSlcbiAgaW5zdGFuY2Uuc3RvcmUgLy8gPC0gdGhpcyBpcyB0aGUgZXhhY3Qgc2FtZSBzdG9yZSB0aGF0IHdlIHJldHVybmVkXG59XG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFdlIGxlYXJuZWQgYSBiaXQgYWJvdXQgc3RvcmVzIGluIHRoZSBgfTxhIHBhcmVudE5hbWU9XCJwXCIgey4uLntcbiAgICAgICAgXCJocmVmXCI6IFwiYXRvbS1zdGF0ZVwiXG4gICAgICB9fT57YGF0b20gc3RhdGUgd2Fsa3Rocm91Z2hgfTwvYT57YC4gUXVpY2sgcmVjYXA6YH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YHN0b3JlLmdldFN0YXRlKCkgLy8gcmV0dXJucyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc3RvcmVcbnN0b3JlLnNldFN0YXRlKCduZXcgc3RhdGUnKSAvLyBvdmVyd3JpdGVzIHRoZSBzdG9yZSdzIHN0YXRlXG5cbi8vIHJlY3Vyc2l2ZWx5IG1lcmdlIHN0YXRlIGludG8gZXhpc3Rpbmcgc3RhdGU6XG5zdG9yZS5zZXRTdGF0ZURlZXAoeyBkZWVwbHk6IHsgbWVyZ2U6ICd0aGlzIHN0YXRlJyB9IH0pXG5cbi8vIGZ1bmN0aW9uIG92ZXJsb2FkcyAtIHNldCBuZXcgc3RhdGUgYmFzZWQgb24gY3VycmVudCBzdGF0ZVxuc3RvcmUuc2V0U3RhdGUoc3RhdGUgPT4gc3RhdGUgKyAxKVxuc3RvcmUuc2V0U3RhdGVEZWVwKHN0YXRlID0+ICh7IHNvbWVLZXk6IHN0YXRlLnNvbWVLZXkgKyAxIH0pKVxuYH08L2NvZGU+PC9wcmU+XG4gICAgPGgzIHsuLi57XG4gICAgICBcImlkXCI6IFwic2V0c3RhdGVcIlxuICAgIH19PjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJoM1wiPntgc2V0U3RhdGUoKWB9PC9pbmxpbmVDb2RlPjwvaDM+XG4gICAgPHA+e2BUaGUgbW9zdCBjb21tb24gd2F5IHRvIHNldCB0aGUgc3RhdGUgb2YgYW4gYXRvbSBpbnN0YW5jZSdzIHN0b3JlLiBUaGlzIGlzIHRoZSBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BzZXRTdGF0ZWB9PC9pbmxpbmVDb2RlPntgIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YHVzZUF0b21TdGF0ZWB9PC9pbmxpbmVDb2RlPntgLiBGdW5jdGlvbiBvdmVybG9hZCBzdXBwb3J0ZWQuYH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c1wiXG4gICAgICB9fT57YGNvbnN0IGluc3RhbmNlID0gdXNlQXRvbUluc3RhbmNlKG15QXRvbSlcbi4uLlxuaW5zdGFuY2Uuc2V0U3RhdGUobmV3U3RhdGUpXG5pbnN0YW5jZS5zZXRTdGF0ZShjdXJyZW50U3RhdGUgPT4gbmV3U3RhdGUpXG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFRoaXMgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgLnNldFN0YXRlKClgfTwvaW5saW5lQ29kZT57YCBmdW5jdGlvbiBpcyBgfTxzdHJvbmcgcGFyZW50TmFtZT1cInBcIj57YG5vdGB9PC9zdHJvbmc+e2AgYSByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlJ3Mgc3RvcmUncyBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2Auc2V0U3RhdGUoKWB9PC9pbmxpbmVDb2RlPntgIGZ1bmN0aW9uLiBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5zZXRTdGF0ZSgpYH08L2lubGluZUNvZGU+e2AgaXMgYSB3cmFwcGVyIGFyb3VuZCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5zdG9yZS5zZXRTdGF0ZSgpYH08L2lubGluZUNvZGU+e2AuIFRoaXMgaXMgaW1wb3J0YW50IGJlY2F1c2UgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5zdGFuY2Uuc2V0U3RhdGUoKWB9PC9pbmxpbmVDb2RlPntgIGFsbG93cyBpbnRlcmNlcHRvcnMgdG8gcnVuIGJlZm9yZSBjYWxsaW5nIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YC5zdG9yZS5zZXRTdGF0ZSgpYH08L2lubGluZUNvZGU+e2AuYH08L3A+XG4gICAgPGFkbW9uaXRpb24gey4uLntcbiAgICAgIFwidHlwZVwiOiBcInRpcFwiXG4gICAgfX0+PHAgcGFyZW50TmFtZT1cImFkbW9uaXRpb25cIj57YEFsd2F5cyBwcmVmZXIgY2FsbGluZyBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5zZXRTdGF0ZSgpYH08L2lubGluZUNvZGU+e2Agb3ZlciBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5zdG9yZS5zZXRTdGF0ZSgpYH08L2lubGluZUNvZGU+PC9wPjwvYWRtb25pdGlvbj5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJkaXNwYXRjaFwiXG4gICAgfX0+PGlubGluZUNvZGUgcGFyZW50TmFtZT1cImgzXCI+e2BkaXNwYXRjaCgpYH08L2lubGluZUNvZGU+PC9oMz5cbiAgICA8cD57YFRoZSByZWNvbW1lbmRlZCB3YXkgdG8gZGlzcGF0Y2ggYWN0aW9ucyB0byB0aGUgaW5zdGFuY2UncyBzdG9yZS5gfTwvcD5cbiAgICA8cHJlPjxjb2RlIHBhcmVudE5hbWU9XCJwcmVcIiB7Li4ue1xuICAgICAgICBcImNsYXNzTmFtZVwiOiBcImxhbmd1YWdlLXRzXCJcbiAgICAgIH19PntgY29uc3QgaW5zdGFuY2UgPSB1c2VBdG9tSW5zdGFuY2UobXlBdG9tKVxuLi4uXG5pbnN0YW5jZS5kaXNwYXRjaCh7IHR5cGU6ICdzb21lLXR5cGUnIH0pXG5gfTwvY29kZT48L3ByZT5cbiAgICA8cD57YFNpbWlsYXIgdG8gYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5zdGFuY2Uuc2V0U3RhdGUoKWB9PC9pbmxpbmVDb2RlPntgLCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5kaXNwYXRjaCgpYH08L2lubGluZUNvZGU+e2AgaXMgYSB3cmFwcGVyIGFyb3VuZCBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5zdG9yZS5kaXNwYXRjaCgpYH08L2lubGluZUNvZGU+e2AuIFRoZSBkaWZmZXJlbmNlIGlzIHRoYXQgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgaW5zdGFuY2UuZGlzcGF0Y2goKWB9PC9pbmxpbmVDb2RlPntgIGFsbG93cyBkaXNwYXRjaCBpbnRlcmNlcHRvcnMgdG8gcnVuIGJlZm9yZSBjYWxsaW5nIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YC5zdG9yZS5kaXNwYXRjaCgpYH08L2lubGluZUNvZGU+e2AuYH08L3A+XG4gICAgPGFkbW9uaXRpb24gey4uLntcbiAgICAgIFwidHlwZVwiOiBcInRpcFwiXG4gICAgfX0+PHAgcGFyZW50TmFtZT1cImFkbW9uaXRpb25cIj57YEFsd2F5cyBwcmVmZXIgY2FsbGluZyBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5kaXNwYXRjaCgpYH08L2lubGluZUNvZGU+e2Agb3ZlciBgfTxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJwXCI+e2BpbnN0YW5jZS5zdG9yZS5kaXNwYXRjaCgpYH08L2lubGluZUNvZGU+PC9wPjwvYWRtb25pdGlvbj5cbiAgICA8aDMgey4uLntcbiAgICAgIFwiaWRcIjogXCJpbnZhbGlkYXRlXCJcbiAgICB9fT48aW5saW5lQ29kZSBwYXJlbnROYW1lPVwiaDNcIj57YGludmFsaWRhdGUoKWB9PC9pbmxpbmVDb2RlPjwvaDM+XG4gICAgPHA+e2BDYWxsIHRoaXMgdG8gZm9yY2UgdGhlIGF0b20gaW5zdGFuY2UgdG8gcmVldmFsdWF0ZS4gVHlwaWNhbGx5IHlvdSBzaG91bGQgYXZvaWQgaW1wdXJlIG9yIG11dGF0aW9uLW9yaWVudGVkIHBhdHRlcm5zIHRoYXQgcmVxdWlyZSB5b3UgdG8gbWFudWFsbHkgaW52YWxpZGF0ZSBhdG9tIGluc3RhbmNlcy4gQnV0IHRoZXJlIGFyZSBzb21lIHVzZWZ1bCBpbnZhbGlkYXRpb24gcGF0dGVybnMgdGhhdCB3ZSdsbCBsb29rIGF0IGluIGB9PGEgcGFyZW50TmFtZT1cInBcIiB7Li4ue1xuICAgICAgICBcImhyZWZcIjogXCJyZXNldHNcIlxuICAgICAgfX0+e2B0aGUgcmVzZXRzIHdhbGt0aHJvdWdoYH08L2E+e2AuYH08L3A+XG4gICAgPHByZT48Y29kZSBwYXJlbnROYW1lPVwicHJlXCIgey4uLntcbiAgICAgICAgXCJjbGFzc05hbWVcIjogXCJsYW5ndWFnZS10c3hcIixcbiAgICAgICAgXCJtZXRhc3RyaW5nXCI6IFwibGl2ZSBlY29zeXN0ZW1JZD1hdG9tLWluc3RhbmNlcy9pbnZhbGlkYXRlIHJlc3VsdFZhcj1SYW5kb21OdW1cIixcbiAgICAgICAgXCJsaXZlXCI6IHRydWUsXG4gICAgICAgIFwiZWNvc3lzdGVtSWRcIjogXCJhdG9tLWluc3RhbmNlcy9pbnZhbGlkYXRlXCIsXG4gICAgICAgIFwicmVzdWx0VmFyXCI6IFwiUmFuZG9tTnVtXCJcbiAgICAgIH19PntgY29uc3QgcmFuZG9tTnVtQXRvbSA9IGF0b20oJ3JhbmRvbU51bScsICgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkpXG5cbmZ1bmN0aW9uIFJhbmRvbU51bSgpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSB1c2VBdG9tSW5zdGFuY2UocmFuZG9tTnVtQXRvbSlcbiAgY29uc3QgdmFsdWUgPSB1c2VBdG9tVmFsdWUocmFuZG9tTnVtQXRvbSlcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlJhbmRvbSBOdW1iZXI6IHt2YWx1ZX08L2Rpdj5cbiAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gaW5zdGFuY2UuaW52YWxpZGF0ZSgpfT5SZS1yb2xsPC9idXR0b24+XG4gICAgPC8+XG4gIClcbn1cbmB9PC9jb2RlPjwvcHJlPlxuICAgIDxoMiB7Li4ue1xuICAgICAgXCJpZFwiOiBcInJlY2FwXCJcbiAgICB9fT57YFJlY2FwYH08L2gyPlxuICAgIDx1bD5cbiAgICAgIDxsaSBwYXJlbnROYW1lPVwidWxcIj57YEF0b20gcGFyYW1zIGFyZSBoYXNoZWQgZGV0ZXJtaW5pc3RpY2FsbHkuYH08L2xpPlxuICAgICAgPGxpIHBhcmVudE5hbWU9XCJ1bFwiPjxpbmxpbmVDb2RlIHBhcmVudE5hbWU9XCJsaVwiPntgdXNlQXRvbUluc3RhbmNlYH08L2lubGluZUNvZGU+e2AgcmV0dXJucyBhbiBhdG9tIGluc3RhbmNlIHdpdGhvdXQgc3Vic2NyaWJpbmcgdG8gc3RhdGUgdXBkYXRlcy5gfTwvbGk+XG4gICAgICA8bGkgcGFyZW50TmFtZT1cInVsXCI+e2BBdG9tIGluc3RhbmNlcyBoYXZlIGEgbG90IG9mIGZlYXR1cmVzLiBXZSdsbCBjb3ZlciBtb3JlIGluIHRoZSByZXN0IG9mIHRoaXMgd2Fsa3Rocm91Z2guYH08L2xpPlxuICAgIDwvdWw+XG4gICAgPGgyIHsuLi57XG4gICAgICBcImlkXCI6IFwibmV4dC1zdGVwc1wiXG4gICAgfX0+e2BOZXh0IFN0ZXBzYH08L2gyPlxuICAgIDxwPntgV2UgbGVhcm5lZCB0aGF0IGF0b20gaW5zdGFuY2VzIGhhdmUgYH08aW5saW5lQ29kZSBwYXJlbnROYW1lPVwicFwiPntgZXhwb3J0c2B9PC9pbmxpbmVDb2RlPntgIGFuZCBhIGB9PGlubGluZUNvZGUgcGFyZW50TmFtZT1cInBcIj57YHByb21pc2VgfTwvaW5saW5lQ29kZT57YCwgYnV0IHdlIHN0aWxsIGRvbid0IGtub3cgaG93IHRvIGNyZWF0ZSB0aG9zZS4gYH08YSBwYXJlbnROYW1lPVwicFwiIHsuLi57XG4gICAgICAgIFwiaHJlZlwiOiBcImF0b20tYXBpc1wiXG4gICAgICB9fT57YExldCdzIGZpeCB0aGF0YH08L2E+e2AuYH08L3A+XG4gICAgPC9NRFhMYXlvdXQ+O1xufVxuO1xuTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJtZHgiLCJmcm9udE1hdHRlciIsImlkIiwidGl0bGUiLCJjb250ZW50VGl0bGUiLCJ1bmRlZmluZWQiLCJtZXRhZGF0YSIsImFzc2V0cyIsInRvYyIsInZhbHVlIiwibGV2ZWwiLCJsYXlvdXRQcm9wcyIsIk1EWExheW91dCIsIk1EWENvbnRlbnQiLCJjb21wb25lbnRzIiwicHJvcHMiLCJyZXF1aXJlIiwiZGVmYXVsdCIsImlzTURYQ29tcG9uZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1265\n')},1063:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony default export */ __webpack_exports__["Z"] = (__webpack_require__.p + "assets/images/active-state-machine-eb791085acec841b6ad623bb719a4e56.png");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2My5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5REFBZSxxQkFBdUIsNEVBQTRFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL3N0YXRpYy9pbWcvZGlhZ3JhbXMvYWN0aXZlLXN0YXRlLW1hY2hpbmUucG5nPzc0NWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvYWN0aXZlLXN0YXRlLW1hY2hpbmUtZWI3OTEwODVhY2VjODQxYjZhZDYyM2JiNzE5YTRlNTYucG5nXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1063\n')}}]);