"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[1431],{216:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'more-patterns\',title:\'More Patterns\'};var contentTitle=undefined;var metadata={"unversionedId":"advanced/more-patterns","id":"advanced/more-patterns","title":"More Patterns","description":"Circular Dependencies","source":"@site/docs/advanced/more-patterns.mdx","sourceDirName":"advanced","slug":"/advanced/more-patterns","permalink":"/zedux/docs/advanced/more-patterns","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/advanced/more-patterns.mdx","tags":[],"version":"current","frontMatter":{"id":"more-patterns","title":"More Patterns"},"sidebar":"react","previous":{"title":"Store Composition","permalink":"/zedux/docs/advanced/store-composition"},"next":{"title":"Atom","permalink":"/zedux/docs/api/classes/Atom"}};var assets={};var toc=[{value:\'Circular Dependencies\',id:\'circular-dependencies\',level:2},{value:\'Workaround 1\',id:\'workaround-1\',level:3},{value:\'Workaround 2\',id:\'workaround-2\',level:3},{value:\'Atom Instance Factories\',id:\'atom-instance-factories\',level:2},{value:\'Recursive Atoms\',id:\'recursive-atoms\',level:2},{value:\'Params Are Constant\',id:\'params-are-constant\',level:2},{value:\'Updating other atoms during evaluation\',id:\'updating-other-atoms-during-evaluation\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"circular-dependencies"},"Circular Dependencies"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It is always possible to design an atom graph without any circular dependencies. That said, sometimes it can be very hard to do so - requirements change, the new guy comes in, or sometimes the state is just very complex."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux\' atomic model can\'t support circular dependencies ... or can it?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright, strictly speaking, direct circular dependencies are not allowed:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const atomA = atom(\'a\', () => {\\n  injectAtomValue(atomB)\\n})\\n\\nconst atomB = atom(\'b\', () => {\\n  injectAtomValue(atomA) // <- circular dep! This will always break everything\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But there are a couple workarounds. The basic idea for all of them is: Create one of the dependencies asynchronously"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"workaround-1"},"Workaround 1"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Only make one dependency, e.g. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"a -> b")," (a depends on b). Load the other atom when needed, e.g. (in b) ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get(atomA)"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import {\\n  api,\\n  atom,\\n  injectAtomGetters,\\n  injectAtomInstance,\\n  injectStore,\\n} from \'@zedux/react\'\\n\\nconst connectionAtom = atom(\'connection\', () => {\\n  const { getInstance } = injectAtomGetters()\\n\\n  // instead of calling getInstance during atom evaluation like this:\\n  // const login = getInstance(loginAtom)\\n  // we call it only when we need to (inside an exported callback):\\n  // highlight-next-line\\n  const logout = () => getInstance(loginAtom).exports.reset()\\n\\n  const post = (url: string, data: any) =>\\n    fetch(url, { body: JSON.stringify(data), method: \'POST\' }).then(data =>\\n      data.json()\\n    )\\n\\n  return api().setExports({ logout, post })\\n})\\n\\nconst loginAtom = atom(\'login\', () => {\\n  // highlight-next-line\\n  const { post } = injectAtomInstance(connectionAtom).exports\\n  const store = injectStore({ email: \'\', password: \'\' })\\n\\n  const reset = () => store.setState({ email: \'\', password: \'\' })\\n  const setEmail = (email: string) => store.setStateDeep({ email })\\n  const setPassword = (password: string) => store.setStateDeep({ password })\\n  const submit = () => post(\'/login\', store.getState())\\n\\n  return api(store).setExports({ reset, setEmail, setPassword, submit })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(Note that the better solution here is to move the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"logout")," function somewhere else - e.g. inside ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"loginAtom")," - completely avoiding the circular dependency in the first place)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"workaround-2"},"Workaround 2"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/destruction#manual-graphing"},"manual graphing")," to add a dependency later."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const atomA = atom(\'a\', () => {\\n  const b = injectAtomValue(atomB)\\n\\n  return \'a\' + b\\n})\\n\\nconst atomB = atom(\'b\', () => {\\n  const { getInstance } = injectAtomGetters\\n  const store = injectStore(\'b\')\\n\\n  injectEffect(() => {\\n    const a = getInstance(atomA)\\n    const cleanup = a.addDependent()\\n    store.setState(a)\\n\\n    return cleanup // this is insufficient; see Important Note below\\n  }, [])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"Important Note below","type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"In this case, these two atoms have real dependencies on each other. As such, they prevent each other from being cleaned up, so this ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect")," cleanup will never run. You\'ll need to account for that by destroying the manually created edge yourself or force destroying either instance if destruction is needed.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-instance-factories"},"Atom Instance Factories"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux creates atom instances dynamically whenever they\'re first used. This is very convenient but takes some control out of your hands. Pro Tip: You can use Atom Selectors to get that control back."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Remember that Atom Selectors can return absolutely anything. Well, that means they can also return atom instances. Also remember that atoms can export anything. Well, that means they can also export something that indicates if the atom instance was just created or is missing some ref value or ... anything!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const formFieldAtom = atom(\'formField\', (fieldName: string) => {\\n  const store = injectStore(\'\')\\n  const isValidRef = injectRef()\\n\\n  return api(store).setExports({ isValidRef })\\n})\\n\\nconst getFormFieldInstance = (\\n  { getInstance }: AtomGetters,\\n  fieldName: string,\\n  isValid: (val: string) => boolean\\n) => {\\n  const instance = getInstance(formFieldAtom, [fieldName])\\n\\n  // if the formField doesn\'t have its validator set yet, set it\\n  if (!instance.exports.isValidRef) {\\n    instance.exports.isValidRef.current = isValid\\n  }\\n\\n  return instance\\n}\\n\\nfunction Form() {\\n  // now instead of `useAtomInstance(formFieldAtom, \'email\')`, do:\\n  const emailFieldInstance = useAtomSelector(\\n    getFormFieldInstance,\\n    \'email\',\\n    isValidEmail\\n  )\\n\\n  // and instead of `useAtomInstance(formFieldAtom, \'password\')`, do:\\n  const passwordFieldInstance = useAtomSelector(\\n    getFormFieldInstance,\\n    \'password\',\\n    isValidPassword\\n  )\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(Note that this is a contrived example. There are certainly better ways to do per-field form validation)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recursive-atoms"},"Recursive Atoms"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux doesn\'t directly have a concept of \\"recursive atoms\\" or \\"atoms-in-atoms\\". However, Zedux\' APIs are so powerful that setting up recursive atoms is easy. Here\'s just one of many ways to go about it:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=more-patterns/recursive-atoms resultVar=App","live":true,"ecosystemId":"more-patterns/recursive-atoms","resultVar":"App"},"const idGeneratorAtom = atom(\'idGenerator\', () =>\\n  api().setExports({ idCounter: injectRef(0) })\\n)\\n\\nconst nodeAtom = atom(\'node\', (id: number) => {\\n  const idGenerator = injectAtomInstance(idGeneratorAtom)\\n\\n  const store = injectStore({\\n    children: [],\\n    id,\\n  })\\n\\n  const addChild = () => {\\n    store.setStateDeep(state => ({\\n      children: [...state.children, idGenerator.exports.idCounter.current++],\\n    }))\\n  }\\n\\n  const removeChild = (targetId: number) => {\\n    store.setStateDeep(state => ({\\n      children: state.children.filter(childId => childId !== targetId),\\n    }))\\n  }\\n\\n  return api(store).setExports({ addChild, removeChild })\\n})\\n\\nfunction Node({\\n  id,\\n  onDelete,\\n}: {\\n  id: number\\n  onDelete?: (id: number) => void\\n}) {\\n  const [{ children }, { addChild, removeChild }] = useAtomState(nodeAtom, [id])\\n\\n  return (\\n    <div>\\n      <div>\\n        Node Id: {id} {onDelete && <button onClick={onDelete}>Delete</button>}\\n      </div>\\n      <ul>\\n        {children.map(id => (\\n          <li key={id}>\\n            <Node id={id} onDelete={() => removeChild(id)} />\\n          </li>\\n        ))}\\n        <li>\\n          <button onClick={addChild}>+ Add Child</button>\\n        </li>\\n      </ul>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  const idGenerator = useAtomInstance(idGeneratorAtom)\\n  const rootId = useMemo(() => idGenerator.exports.idCounter.current++, [])\\n\\n  return <Node id={rootId} />\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"params-are-constant"},"Params Are Constant"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since Zedux creates a different atom instance if it detects different atom params, params are essentially constant; the params received by an atom instance can never change for the entire lifetime of that instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This means you ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"can")," conditionally add/remove injectors based on params. We definitely don\'t recommend doing this, especially if you\'re new to Zedux. But we have found some situations where it\'s convenient."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It also means that you don\'t need to pass params as deps to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMemo"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectCallback"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise"),", and similar injectors."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const requestAtom = atom(\'request\', (endpoint: string) => {\\n  let prefix = \'\'\\n\\n  if (!endpoint.startsWith(\'http\')) {\\n    prefix = injectAtomValue(protocolAtom) // technically fine\\n  }\\n\\n  injectEffect(() => {\\n    fetch(`${prefix}${endpoint}`).then(...)\\n  }, [prefix]) // <- don\'t need to pass endpoint\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"updating-other-atoms-during-evaluation"},"Updating other atoms during evaluation"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There shouldn\'t be a need for this, but it is actually fine to update other atom instances during atom evaluation ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"if")," this is not the first evaluation:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const rogueAtom = atom(\'rogue\', () => {\\n  const reasons = injectWhy()\\n  const victimInstance = injectAtomInstance(victimAtom)\\n\\n  victimInstance.setState(\'sadness\') // <- Bad! Don\'t do this\\n\\n  // use injectWhy to determine if this is the initial evaluation (reasons is\\n  // empty if it is):\\n  if (reasons.length) {\\n    victimInstance.setState(\'mwahahaha\') // <- fine... but still probably don\'t\\n  }\\n  ...\\n})\\n")));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///216\n')}}]);