"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[6766],{6561:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var a=n(3117),o=n(102),s=(n(7294),n(3905)),r=n(3052),i=["components"],d={id:"useAtomConsumer",title:"useAtomConsumer"},m=void 0,c={unversionedId:"api/hooks/useAtomConsumer",id:"api/hooks/useAtomConsumer",isDocsHomePage:!1,title:"useAtomConsumer",description:"A React hook that accepts an atom and returns an instance of that atom that has been provided over React context via ``.",source:"@site/docs/api/hooks/useAtomConsumer.mdx",sourceDirName:"api/hooks",slug:"/api/hooks/useAtomConsumer",permalink:"/zedux/docs/api/hooks/useAtomConsumer",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/hooks/useAtomConsumer.mdx",tags:[],version:"current",frontMatter:{id:"useAtomConsumer",title:"useAtomConsumer"},sidebar:"react",previous:{title:"localAtom",permalink:"/zedux/docs/api/factories/localAtom"},next:{title:"useAtomInstance",permalink:"/zedux/docs/api/hooks/useAtomInstance"}},l=[{value:"Example",id:"example",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"Overloads",id:"overloads",children:[],level:3},{value:"<code>atom</code>",id:"atom",children:[],level:3},{value:"<code>params</code>",id:"params",children:[],level:3},{value:"<code>throwIfNotProvided</code>",id:"throwifnotprovided",children:[],level:3}],level:2}],p={toc:l};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { useAtomConsumer } from '@zedux/react'\n")),(0,s.kt)("p",null,"A React hook that accepts an ",(0,s.kt)("a",{parentName:"p",href:"../classes/Atom"},"atom")," and returns an ",(0,s.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"instance")," of that atom that has been provided over React context via ",(0,s.kt)("a",{parentName:"p",href:"../components/AtomInstanceProvider"},(0,s.kt)("inlineCode",{parentName:"a"},"<AtomInstanceProvider>")),"."),(0,s.kt)("p",null,"If no instance has been provided, this hook will return an empty object. Pass default params as the second argument to tell Zedux to create an atom instance if one wasn't provided. Pass ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," as the second argument to tell Zedux to throw an error if you forgot to provide an instance."),(0,s.kt)("p",null,"This hook will not register a graph dependency of any kind on the provided instance. You can create a graph dependency by passing the consumed atom instance to various hooks:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"To register a ",(0,s.kt)("a",{parentName:"p",href:"../glossary#dynamic-graph-dependency"},"dynamic dependency")," (causing this component to rerender when the atom instance's state updates), pass the consumed atom instance to ",(0,s.kt)("a",{parentName:"p",href:"useAtomValue"},(0,s.kt)("inlineCode",{parentName:"a"},"useAtomValue")),", ",(0,s.kt)("a",{parentName:"p",href:"useAtomState"},(0,s.kt)("inlineCode",{parentName:"a"},"useAtomState")),", or ",(0,s.kt)("a",{parentName:"p",href:"useAtomSelector"},(0,s.kt)("inlineCode",{parentName:"a"},"useAtomSelector")),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"To register a ",(0,s.kt)("a",{parentName:"p",href:"../glossary#static-graph-dependency"},"static dependency"),", pass the consumed atom instance to ",(0,s.kt)("a",{parentName:"p",href:"useAtomInstance"},(0,s.kt)("inlineCode",{parentName:"a"},"useAtomInstance")),". There should never be any need to do this, as the providing parent component should be doing this already."))),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"This is one of the few hooks that does not have an injector equivalent (there is no such thing as ",(0,s.kt)("inlineCode",{parentName:"p"},"injectAtomConsumer"),"). This is because this hook's functionality is very specific to React. There is no equivalent in the atoms universe."))),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)(r.u,{resultVar:"Parent",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', () => {\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nfunction Child() {\n  const instance = useAtomConsumer(secondsAtom)\n  const state = useAtomValue(instance)\n\n  return <div>Child Seconds: {state}</div>\n}\n\nfunction Parent() {\n  const instance = useAtomInstance(secondsAtom)\n\n  return (\n    <AtomInstanceProvider instance={instance}>\n      <Child />\n    </AtomInstanceProvider>\n  )\n}\n"),(0,s.kt)("p",null,"Miscellaneous:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const instance = useAtomInstance(myAtom)\n\nconst defaulted = useAtomInstance(myAtom, ['param 1', 'param 2'])\n\n// if the atom doesn't take params, pass an empty array for the default params:\nconst defaultedNoParams = useAtomInstance(myAtom, [])\n\n// passing `true` makes Zedux throw an error if no instance was provided:\nconst guaranteed = useAtomInstance(myAtom, true)\n")),(0,s.kt)("h2",{id:"signature"},"Signature"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"useAtomInstance(atom, defaultParams?) => AtomInstance\n")),(0,s.kt)("p",null,"Uses the passed ",(0,s.kt)("a",{parentName:"p",href:"../classes/Atom"},"atom")," to find the nearest instance of that atom that has been provided over React context via ",(0,s.kt)("a",{parentName:"p",href:"../components/AtomInstanceProvider"},(0,s.kt)("inlineCode",{parentName:"a"},"<AtomInstanceProvider>")),"."),(0,s.kt)("p",null,"If no atom instance was provided, returns an empty object. If defaultParams were passed, creates an atom instance using the passed atom and default params and returns the new instance."),(0,s.kt)("h3",{id:"overloads"},"Overloads"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"useAtomInstance(atom, throwIfNotProvided?) => AtomInstance\n")),(0,s.kt)("p",null,"If no atom instance was provided and ",(0,s.kt)("inlineCode",{parentName:"p"},"throwIfNotProvided")," is true, this overload throws an error. This is the recommended overload in most situations. Fail fast!"),(0,s.kt)("h3",{id:"atom"},(0,s.kt)("inlineCode",{parentName:"h3"},"atom")),(0,s.kt)("p",null,"Required. The ",(0,s.kt)("a",{parentName:"p",href:"../classes/Atom"},"atom")," object whose key will be used to find an existing atom instance and whose definition will be used to create an atom instance if none exist yet."),(0,s.kt)("h3",{id:"params"},(0,s.kt)("inlineCode",{parentName:"h3"},"params")),(0,s.kt)("p",null,"Optional. An array of default parameters that Zedux will use to create an instance if none was provided. These params will be passed to the atom's ",(0,s.kt)("a",{parentName:"p",href:"../glossary#evaluator"},"evaluator function"),"."),(0,s.kt)("p",null,"If the atom doesn't take parameters, pass an empty array to tell Zedux to create a default instance."),(0,s.kt)("h3",{id:"throwifnotprovided"},(0,s.kt)("inlineCode",{parentName:"h3"},"throwIfNotProvided")),(0,s.kt)("p",null,"Optional. A boolean. If true, Zedux will throw an error if you forgot to provide an atom instance above this component in the component tree."))}u.isMDXComponent=!0}}]);