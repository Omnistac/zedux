"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[2187],{3905:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Zo": function() { return /* binding */ MDXProvider; },\n/* harmony export */   "kt": function() { return /* binding */ createElement; }\n/* harmony export */ });\n/* unused harmony exports MDXContext, useMDXComponents, withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === \'function\';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = \'mdxType\';\nvar DEFAULTS = {\n  inlineCode: \'code\',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components["".concat(parentName, ".").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = \'MDXCreateElement\';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === \'string\' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === \'string\' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, args);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3905\n')},1001:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'creating-atoms\',title:\'Creating Atoms\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/creating-atoms","id":"walkthrough/creating-atoms","title":"Creating Atoms","description":"Atoms are extremely flexible and can be configured in many ways for many different situations.","source":"@site/docs/walkthrough/creating-atoms.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/creating-atoms","permalink":"/zedux/docs/walkthrough/creating-atoms","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/creating-atoms.mdx","tags":[],"version":"current","frontMatter":{"id":"creating-atoms","title":"Creating Atoms"}};var assets={};var toc=[{value:\'Atom Config\',id:\'atom-config\',level:2},{value:\'TTL\',id:\'ttl\',level:3},{value:\'Flags\',id:\'flags\',level:3},{value:\'Stores\',id:\'stores\',level:2},{value:\'Injectors\',id:\'injectors\',level:2},{value:\'<code>injectStore</code>\',id:\'injectstore\',level:3},{value:\'<code>injectEffect</code>\',id:\'injecteffect\',level:3},{value:\'<code>injectMemo</code>\',id:\'injectmemo\',level:3},{value:\'<code>injectAtomGetters</code>\',id:\'injectatomgetters\',level:3},{value:\'Atom Api\',id:\'atom-api\',level:2},{value:\'Exports\',id:\'exports\',level:3},{value:\'Suspense\',id:\'suspense\',level:3},{value:\'Ions\',id:\'ions\',level:2},{value:\'Recap\',id:\'recap\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms are extremely flexible and can be configured in many ways for many different situations."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"How to:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Configure atoms"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use stores to give an atom control over its own state"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use injectors to fine-tune an atom\'s behavior"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Export values from an atom"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Make atoms trigger React suspense"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-config"},"Atom Config"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Many aspects of an atom\'s behavior can be configured. The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"atom()")," factory can take a config object as the 3rd parameter."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom } from \'@zedux/react\'\\n\\natom(\'foo\', \'initial value\', {\\n  flags: [\'async\', \'electron\'],\\n  maxInstances: 10,\\n  ttl: 1000 * 60 * 60,\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This config object has many useful properties. We\'ll look at some of these now. See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/AtomConfig"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"AtomConfig"))," for the full rundown."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ttl"},"TTL"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an atom instance is no longer used, we sometimes want to destroy it - allowing its data to be garbage collected."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"By default, standard atoms live forever. But they can be given a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," to configure how long instances should stick around when they\'re no longer in use."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const zombieAtom = atom(\'zombie\', null, {\\n  // keep stale zombieAtom instances in memory for 10 minutes:\\n  ttl: 1000 * 60 * 10,\\n})\\n// if anyone uses the instance within 10 minutes, cleanup is cancelled\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl")," can be set to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"0")," to clean up stale atom instances immediately."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"flags"},"Flags"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An atom can be given any number of string \\"flags\\" that serve various purposes, such as logging warnings when certain atoms are run in \\"unsafe\\" environments - for example, to indicate that an atom that sends network requests should be overridden in tests, or that an atom that uses browser APIs shouldn\'t run in Node. Flags can also be used during SSR dehydration/hydration to mark atoms whose state can\'t be serialized."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"stores"},"Stores"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every instance of every atom creates a light-weight ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Store"},"Zedux store"),". Stores manage state and serve as a message bus for running side effects based on dispatched actions or state changes. Most stores in Zedux use the \\"zero-config\\" approach - no reducer hierarchy, just simple getting and setting."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms create most stores for you. But you can easily create them manually:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { createStore } from \'@zedux/react\'\\n\\nconst myStore = createStore()\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Stores have lots of cool features that we\'ll look at in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"stores"},"the stores walkthrough"),". For now, just remember that every atom instance has an underlying store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"injectors"},"Injectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Most atoms will make use of injectors. Injectors allow us to safely manage an atom\'s side effects, memoization, dependency injection, and lots more. Some injectors return helpful utility functions or help with debugging."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Injectors are inspired by React hooks. Using them should feel similar to using hooks. Like hooks, injectors should only be used at the top level of state factory functions - outside any if statements or loops and before any early returns."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll look at some of the most common injectors here."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injectstore"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectStore")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Creates a store. The returned store is a stable reference; like a React ref, it will not change on subsequent evaluations. This means you can then return the store from the state factory."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The first parameter can be either the initial state of the store or a function that returns a custom store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom, injectStore } from \'@zedux/react\'\\n\\nconst storeAtom = atom(\'store\', () => {\\n  const store = injectStore(\'initial state!\')\\n\\n  return store // Store is a stable reference; we can return it here.\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Notice that we returned the store from the state factory. This is important! Zedux automatically creates a store for every atom instance ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("strong",{parentName:"p"},"unless")," you return a store from the state factory function. This essentially tells Zedux, \\"Don\'t create a store for me! I created my own. Use this one.\\""),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"important"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"When returning a store from a state factory, ensure that the exact same store reference is returned every time the atom evaluates - e.g. by using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectStore")," (recommended) or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMemo"),".")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectStore"),"\'s second parameter is a config object. It can currently take one property - ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"subscribe")," - a boolean indicating whether this atom instance should subscribe to this store. Default is ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"true"),", meaning state updates on the injected store will trigger a reevaluation of the current atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// every time this store\'s state changes, this state factory will rerun:\\nconst store = injectStore(initialState)\\n\\n// this store will never cause this state factory to rerun:\\nconst nonSubscribingStore = injectStore(initialState, {\\n  subscribe: false,\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Zedux stores can be either zero-config or reducer-driven. Because of this,",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectStore")," is the injector equivalent of both ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useReducer"),". You\'ll probably use it a lot.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injecteffect"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectEffect")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The injector equivalent of React\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://reactjs.org/docs/hooks-reference.html#useeffect"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useEffect")),". Runs a deferred side effect every time its dependencies change."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const myEffectAtom = atom(\'myEffect\', () => {\\n  const store = injectStore({ status: \'loading\', data: null, error: null })\\n\\n  injectEffect(() => {\\n    fetch(\'/api/blog-posts\')\\n      .then(async data => {\\n        store.setState({ status: \'success\', data: await res.json() })\\n      })\\n      .catch(err => {\\n        store.setState({ status: \'error\', error: err })\\n      })\\n  }, []) // no dependencies; side effect will only run once\\n\\n  return store // remember to return the store!\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Return a cleanup function to cancel side effect execution and destroy resources created during the side effect."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const rxjs$ = injectAtomValue(rxjsAtom)\\n\\ninjectEffect(() => {\\n  const subscription = rxjs$.subscribe(...)\\n\\n  return () => subscription.unsubscribe()\\n}, [rxjs$])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every time the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"rxjs$")," reference changes, the previous effect will be cleaned up and the effect will rerun with the new reference."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injectmemo"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectMemo")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The injector equivalent of React\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://reactjs.org/docs/hooks-reference.html#usememo"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useMemo")),". Used to maintain stable references across evaluations and to prevent expensive calculations from re-running unnecessarily."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const memoizedValue = injectMemo(() => computeExpensiveValue(a, b), [a, b])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injectatomgetters"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectAtomGetters")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns a special ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/AtomGetters"},"AtomGetters")," object with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"getInstance"),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"select")," properties. These can be used to get atom instances, atom instance values, and run ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/AtomSelector"},"AtomSelectors"),". Unlike injectors, AtomGetters can be used in loops or even asynchronously:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const sumAtom = atom(\'sum\', (a: number, b: number) => a + b)\\n\\nconst someAtom = atom(\'some\', () => {\\n  const { get } = injectAtomGetters()\\n  const sum = get(sumAtom, [1, 2]) // 3\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When used synchronously during atom evaluation (like we did here), ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"getInstance"),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"select")," update the atom instance\'s dependency graph dynamically."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When used asynchronously, AtomGetters will not update the dependency graph; they simply return the value. (We\'ll cover ways to asynchronously update an atom instance\'s dependency graph ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"/not-done"},"later"),")"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-api"},"Atom Api"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Some operations don\'t fit well into the injector paradigm. Injectors, like hooks, should be composable and usable multiple times throughout an atom state factory and other injectors. But atoms have a few one-off operations - operations that should only be performed once. For these situations, we use an AtomApi."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To create an AtomApi, we simply wrap the atom instance\'s state in a call to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"api()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { api, atom } from \'@zedux/react\'\\n\\nconst myAtom = atom(\'my\', () => \'initial state\') // before\\nconst myAtom = atom(\'my\', () => api(\'initial state\')) // after\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This works with stores too:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const myAtom = atom(\'my\', () => {\\n  const store = injectStore()\\n\\n  return store // before\\n  return api(store) // after\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"So now then ... what can an AtomApi do?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"exports"},"Exports"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux atoms can export anything via an AtomApi:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=creating-atoms/exports resultVar=App","live":true,"ecosystemId":"creating-atoms/exports","resultVar":"App"},"const counterAtom = atom(\'counter\', () => {\\n  const store = injectStore(0)\\n\\n  // Expose methods\\n  return api(store).setExports({\\n    decrement: () => store.setState(state => state - 1),\\n    increment: () => store.setState(state => state + 1),\\n  })\\n})\\n\\nfunction App() {\\n  const { decrement, increment } = useAtomInstance(counterAtom).exports\\n  const value = useAtomValue(counterAtom)\\n\\n  return (\\n    <>\\n      <div>Counter: {value}</div>\\n      <button onClick={increment}>Increment</button>\\n      <button onClick={decrement}>Decrement</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"important"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Exports are constant! This means exported variables should be stable references. Zedux won\'t update them on subsequent evaluations. In this example, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"increment")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"decrement")," are not stable references, but they don\'t reference anything except the store, which is stable.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Exports are extremely powerful. Exposing an atom\'s \\"public API\\" like this is just one of their uses. Since you can export anything, refs can be used to great effect:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const gridAtom = atom(\'grid\', () => {\\n  const gridApiRef = injectRef()\\n\\n  // this atom provides universal access to the grid api once it\'s been set:\\n  return api().setExports({ gridApiRef })\\n})\\n\\nfunction Grid() {\\n  const { gridApi } = useAtomInstance(gridAtom).exports\\n\\n  // expose this grid component\'s api to the atom universe!\\n  return <ThirdPartyGridLibrary onLoad={api => (gridApiRef.current = api)} />\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Another use is to export callbacks for implementing render-as-you-fetch patterns:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=creating-atoms/export-callbacks resultVar=Age","live":true,"ecosystemId":"creating-atoms/export-callbacks","resultVar":"Age"},"const mockFetch = data =>\\n  new Promise(resolve => {\\n    setTimeout(() => resolve(data), 1000)\\n  })\\n\\nconst userNameAtom = atom(\'userName\', () => {\\n  const store = injectStore(\'Joe\')\\n\\n  const toggleUser = () => {\\n    const isJoe = store.getState() === \'Joe\'\\n    store.setState(\'loading...\') // lol, yes this is contrived\\n\\n    mockFetch(isJoe ? \'Bob\' : \'Joe\').then(val => store.setState(val))\\n  }\\n\\n  return api(store).setExports({ toggleUser })\\n})\\n\\nfunction Age() {\\n  const { toggleUser } = useAtomInstance(userNameAtom).exports\\n  const userName = useAtomValue(userNameAtom)\\n\\n  return (\\n    <>\\n      <div>Current User\'s Name: {userName}</div>\\n      <button onClick={toggleUser}>Change User</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"suspense"},"Suspense"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be used as suspending resources in React. To suspend, we simply pass a promise to a returned AtomApi\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setPromise()")," method:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"return api(val).setPromise(suspensePromise)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An atom that returns such an api will cause React to suspend until the promise resolves."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=creating-atoms/api-set-promise resultVar=App","live":true,"ecosystemId":"creating-atoms/api-set-promise","resultVar":"App"},"const mockFetch = data =>\\n  new Promise(resolve => {\\n    setTimeout(() => resolve(data), 1000)\\n  })\\n\\nconst ageAtom = atom(\'age\', () => {\\n  const store = injectStore(undefined, { subscribe: false })\\n\\n  // An inline side effect?? We\'ll cover this in the side effects walkthrough\\n  const promise = mockFetch(Math.floor(Math.random() * 100))\\n  promise.then(val => store.setState(val))\\n\\n  return api(store).setPromise(promise)\\n})\\n\\nfunction Age() {\\n  const instance = useAtomInstance(ageAtom)\\n  const age = useAtomValue(ageAtom)\\n\\n  return (\\n    <>\\n      <div>The Time Traveller\'s Age: {age}</div>\\n      <button onClick={() => instance.invalidate()}>Refresh</button>\\n    </>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <Suspense fallback={<div>Fetching Age...</div>}>\\n      <Age />\\n    </Suspense>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can also pass a promise directly to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"api()"),". This tells Zedux to take control over the atom\'s state and update it based on the promise."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=creating-atoms/api-promise resultVar=App","live":true,"ecosystemId":"creating-atoms/api-promise","resultVar":"App"},"const mockFetch = data =>\\n  new Promise(resolve => {\\n    setTimeout(() => resolve(data), 1000)\\n  })\\n\\nconst ageAtom = atom(\'age\', () => {\\n  const promise = mockFetch(Math.floor(Math.random() * 100))\\n\\n  // just pass the promise!\\n  return api(promise)\\n})\\n\\nfunction Age() {\\n  const instance = useAtomInstance(ageAtom)\\n\\n  // the promise result will be set as the state\'s `data` property.\\n  // You should recognize this if you know React Query.\\n  const { data } = useAtomValue(ageAtom)\\n\\n  return (\\n    <>\\n      <div>The Time Traveller\'s Age: {data}</div>\\n      <button onClick={() => instance.invalidate()}>Refresh</button>\\n    </>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <Suspense fallback={<div>Fetching Age...</div>}>\\n      <Age />\\n    </Suspense>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll cover much more about suspense in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/suspense"},"the suspense walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"AtomApis have more features that we\'ll cover eventually. Or check out the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomApi"},"AtomApi reference")," for all the power."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"ions"},"Ions"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ions are just atoms, but with a slightly different API. Ions are better suited for selector-type operations. Create them with the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ion")," factory:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { ion } from \'@zedux/react\'\\n\\nconst filteredTodosAtom = ion(\'filteredTodos\', ({ get }, isDone: boolean) =>\\n  get(todosAtom).filter(todo => todo.isDone === isDone)\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ions are only slightly different from normal atoms. They receive a special, Zedux-supplied ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/AtomGetters"},"AtomGetters")," object as their first parameter. Any parameters after that are the actual params of the atom. You can also get the AtomGetters object in normal (non-ion) atoms using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/injectors/injectAtomGetters"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectAtomGetters()")),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom, injectAtomGetters } from \'@zedux/react\'\\n\\nconst filteredTodosAtom = atom(\'filteredTodoos\', (isDone: boolean) => {\\n  const { get } = injectAtomGetters()\\n\\n  return get(todosAtom).filter(todo => todo.isDone === isDone)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Note that in either of these examples, we could have used ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomValue")," instead of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get"),". But ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"get")," and all the AtomGetters have some extra spice. See the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/types/AtomGetters"},"AtomGetters doc page")," for spiciness."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/factories/ion"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ion()")," API")," for more info."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"When should I use an ion instead of an atom?","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"You can make your own rules, but here\'s why ions exist:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Ions are like AtomSelectors (which we\'ll cover in the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"selectors"},"selectors walkthrough"),") in atom form - we recommend using them when you want a selector, but need more control over the memoization details or need to run side effects.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"atom()")," can take a config object."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Stale atoms can be destroyed automatically using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ttl"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"All atom instances have an underlying store. You can create this store yourself or let Zedux create it for you."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Injectors give you control over an atom\'s behavior - e.g. they can run side effects or memoize values."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Exports can be attached to an atom via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"api(value).setExports({ ... })")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atoms can cause React to suspend by passing a stable promise to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"api(value).setPromise(promise)"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atoms can be turned into simple React Query-esque \\"queries\\" by returning ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"api(promise)"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Ions are special atom/AtomSelector hybrids.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Next up we\'ll cover more ways to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"using-atoms"},"consume atoms"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1001\n')}}]);