"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4325],{367:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return l}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),i=["components"],s={id:"HierarchyDescriptor",title:"HierarchyDescriptor"},c=void 0,p={unversionedId:"api/types/HierarchyDescriptor",id:"api/types/HierarchyDescriptor",isDocsHomePage:!1,title:"HierarchyDescriptor",description:"The type passed to createStore() and to Store#use().",source:"@site/docs/api/types/HierarchyDescriptor.mdx",sourceDirName:"api/types",slug:"/api/types/HierarchyDescriptor",permalink:"/zedux/docs/api/types/HierarchyDescriptor",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/HierarchyDescriptor.mdx",tags:[],version:"current",frontMatter:{id:"HierarchyDescriptor",title:"HierarchyDescriptor"},sidebar:"react",previous:{title:"EvaluationReason",permalink:"/zedux/docs/api/types/EvaluationReason"},next:{title:"Reducer",permalink:"/zedux/docs/api/types/Reducer"}},u=[{value:"Definition",id:"definition",children:[],level:2}],d={toc:u};function l(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The type passed to ",(0,o.kt)("a",{parentName:"p",href:"../factories/createStore"},(0,o.kt)("inlineCode",{parentName:"a"},"createStore()"))," and to ",(0,o.kt)("a",{parentName:"p",href:"../classes/Store#use"},(0,o.kt)("inlineCode",{parentName:"a"},"Store#use()")),"."),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type Branch<T = any> = {\n  [K in keyof T]: HierarchyDescriptor<T[K]>\n}\n\ntype HierarchyDescriptor<State = any> =\n  | Branch<State>\n  | Store<State>\n  | Reducer<State>\n  | null\n")),(0,o.kt)("p",null,"A HierarchyDescriptor can be a store, a reducer, or an object containing stores, reducers, or more objects nested indefinitely."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@zedux/react'\n\nconst withStore = createStore(myStore)\nconst withReducer = createStore(myReducer)\nconst withObject = createStore({\n  storeState: myStore,\n  reducerState: myReducer\n})\nconst nested = createStore({\n  a: {\n    b: storeB,\n    c: storeC,\n    d: {\n      e: reducerE,\n      f: storeF\n    }\n  }\n})\n")),(0,o.kt)("p",null,"Any node in the HierarchyDescriptor can also be set to ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),". This indicates removal when passed to ",(0,o.kt)("a",{parentName:"p",href:"../classes/Store#use"},(0,o.kt)("inlineCode",{parentName:"a"},"Store#use()")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const myStore = createStore({\n  a: storeA,\n  b: storeB,\n})\n\nmyStore.use({\n  b: null // remove `b` from myStore\n})\n")))}l.isMDXComponent=!0}}]);