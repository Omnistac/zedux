"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9126],{2592:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return l}});var r=n(3117),a=n(102),c=(n(7294),n(3905)),i=["components"],o={id:"Reducer",title:"Reducer"},s=void 0,u={unversionedId:"api/types/Reducer",id:"api/types/Reducer",isDocsHomePage:!1,title:"Reducer",description:"In Zedux, reducers are exactly the same as in Redux and React. A reducer is just a function that receives the current state and an action and returns the new state.",source:"@site/docs/api/types/Reducer.mdx",sourceDirName:"api/types",slug:"/api/types/Reducer",permalink:"/zedux/docs/api/types/Reducer",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/Reducer.mdx",tags:[],version:"current",frontMatter:{id:"Reducer",title:"Reducer"},sidebar:"react",previous:{title:"HierarchyDescriptor",permalink:"/zedux/docs/api/types/HierarchyDescriptor"},next:{title:"SetStateInterceptor",permalink:"/zedux/docs/api/types/SetStateInterceptor"}},d=[{value:"Example",id:"example",children:[],level:2},{value:"Creation",id:"creation",children:[],level:2},{value:"Definition",id:"definition",children:[{value:"<code>currentState</code>",id:"currentstate",children:[],level:3},{value:"<code>action</code>",id:"action",children:[],level:3}],level:2}],p={toc:d};function l(e){var t=e.components,n=(0,a.Z)(e,i);return(0,c.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"In Zedux, reducers are exactly the same as in Redux and React. A reducer is just a function that receives the current state and an ",(0,c.kt)("a",{parentName:"p",href:"Action"},"action")," and returns the new state."),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"../classes/Store"},"Stores")," can be configured with reducers by passing a reducer to ",(0,c.kt)("a",{parentName:"p",href:"../factories/createStore"},(0,c.kt)("inlineCode",{parentName:"a"},"createStore()"))," or ",(0,c.kt)("a",{parentName:"p",href:"../classes/Store#use"},(0,c.kt)("inlineCode",{parentName:"a"},"store.use()")),"."),(0,c.kt)("h2",{id:"example"},"Example"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@zedux/react'\n\nconst counterReducer = (state = 0, action) => {\n  if (action.type === 'increment') {\n    return state + 1\n  }\n\n  if (action.type === 'decrement') {\n    return state - 1\n  }\n\n  return state\n}\n\nconst store = createStore(counterReducer)\n\nstore.getState() // 0\nstore.dispatch({ type: 'increment' }) // 1\nstore.dispatch({ type: 'increment' }) // 2\nstore.dispatch({ type: 'decrement' }) // 1\n")),(0,c.kt)("h2",{id:"creation"},"Creation"),(0,c.kt)("p",null,"While you can create reducers manually like we just did, Zedux exports a high-level ","[",(0,c.kt)("inlineCode",{parentName:"p"},"createReducer()"),"]"," factory for creating them easily:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer, createStore } from '@zedux/react'\n\nconst counterReducer = createReducer(0) // the initial state\n  .reduce('increment', state => state + 1)\n  .reduce('decrement', state => state - 1)\n\nconst store = createStore(counterReducer)\n\nstore.getState() // 0\nstore.dispatch({ type: 'increment' }) // 1\nstore.dispatch({ type: 'increment' }) // 2\nstore.dispatch({ type: 'decrement' }) // 1\n")),(0,c.kt)("h2",{id:"definition"},"Definition"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"(currentState, action) => newState\n")),(0,c.kt)("p",null,"Return the new state or the currentState if no change."),(0,c.kt)("h3",{id:"currentstate"},(0,c.kt)("inlineCode",{parentName:"h3"},"currentState")),(0,c.kt)("p",null,"Just exactly what it says... Can be any type. If creating reducers manually, be sure to default this value."),(0,c.kt)("h3",{id:"action"},(0,c.kt)("inlineCode",{parentName:"h3"},"action")),(0,c.kt)("p",null,"An ",(0,c.kt)("a",{parentName:"p",href:"Action"},"action object"),". The reducer should look at this action's ",(0,c.kt)("inlineCode",{parentName:"p"},"type")," property to determine what to do."))}l.isMDXComponent=!0}}]);