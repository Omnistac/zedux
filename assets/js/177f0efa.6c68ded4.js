"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4192],{3744:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return r},toc:function(){return d},default:function(){return m}});var a=n(3117),i=n(102),o=(n(7294),n(3905)),s=["components"],p={id:"ActionChain",title:"ActionChain"},c=void 0,r={unversionedId:"api/types/ActionChain",id:"api/types/ActionChain",isDocsHomePage:!1,title:"ActionChain",description:"The object accepted by store.dispatch(), thus also the object passed to instance.dispatch() and to DispatchInterceptors.",source:"@site/docs/api/types/ActionChain.mdx",sourceDirName:"api/types",slug:"/api/types/ActionChain",permalink:"/zedux/docs/api/types/ActionChain",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/ActionChain.mdx",tags:[],version:"current",frontMatter:{id:"ActionChain",title:"ActionChain"},sidebar:"react",previous:{title:"Action",permalink:"/zedux/docs/api/types/Action"},next:{title:"Actor",permalink:"/zedux/docs/api/types/Actor"}},d=[{value:"Definition",id:"definition",children:[],level:2},{value:"Examples",id:"examples",children:[],level:2}],l={toc:d};function m(t){var e=t.components,n=(0,i.Z)(t,s);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The object accepted by ",(0,o.kt)("a",{parentName:"p",href:"../classes/Store#dispatch"},(0,o.kt)("inlineCode",{parentName:"a"},"store.dispatch()")),", thus also the object passed to ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance#dispatch"},(0,o.kt)("inlineCode",{parentName:"a"},"instance.dispatch()"))," and to ",(0,o.kt)("a",{parentName:"p",href:"DispatchInterceptor"},"DispatchInterceptors"),"."),(0,o.kt)("p",null,"The ActionChain is the key to Zedux' ",(0,o.kt)("a",{parentName:"p",href:"/not-done"},"store composition model"),". ActionChains are just nested objects."),(0,o.kt)("p",null,"All objects except the innermost contain metadata. Zedux uses certain meta types to know whether actions came from a parent or child store."),(0,o.kt)("p",null,"The last node in the chain is a normal ",(0,o.kt)("a",{parentName:"p",href:"Action"},"Action object"),". An ActionChain that doesn't contain any metadata is thus simply an Action."),(0,o.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"ActionChains are ",(0,o.kt)("strong",{parentName:"p"},"not")," sent to ",(0,o.kt)("a",{parentName:"p",href:"Reducer"},"reducers"),". Zedux unwraps the ActionChain before passing the unwrapped action to the reducer layer."))),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface ActionMeta<Payload = any, Type extends string = string, Data = any> {\n  metaType: string\n  metaData?: Data\n  payload: ActionChain<Payload, Type>\n}\n\ntype ActionChain<Payload = any, Type extends string = string> =\n  | ActionMeta<Payload, Type>\n  | Action<Payload, Type>\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const justAnAction: ActionChain = {\n  type: 'todos/add',\n  payload: { text: 'be awesome' },\n}\n\nconst fromParent: ActionChain = {\n  metaType: '@@zedux/inherit',\n  payload: {\n    type: 'todos/add',\n    payload: { text: 'be awesome' },\n  },\n}\n\nconst fromChild: ActionChain = {\n  metaType: '@@zedux/delegate',\n  metaData: ['a', 'b'],\n  payload: {\n    type: 'todos/add',\n    payload: { text: 'be awesome' },\n  },\n}\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"../constants/metaTypes"},"Zedux' ",(0,o.kt)("inlineCode",{parentName:"a"},"metaTypes")),"."))}m.isMDXComponent=!0}}]);