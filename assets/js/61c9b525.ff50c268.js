"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[630],{2361:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var a=n(3117),s=n(102),r=(n(7294),n(3905)),i=n(3052),c=["components"],o={id:"injectAsyncEffect",title:"injectAsyncEffect"},l=void 0,p={unversionedId:"api/injectors/injectAsyncEffect",id:"api/injectors/injectAsyncEffect",isDocsHomePage:!1,title:"injectAsyncEffect",description:"An injector that runs a promise and creates a store to track the promise's state.",source:"@site/docs/api/injectors/injectAsyncEffect.mdx",sourceDirName:"api/injectors",slug:"/api/injectors/injectAsyncEffect",permalink:"/zedux/docs/api/injectors/injectAsyncEffect",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectAsyncEffect.mdx",tags:[],version:"current",frontMatter:{id:"injectAsyncEffect",title:"injectAsyncEffect"},sidebar:"react",previous:{title:"useGetInstance",permalink:"/zedux/docs/api/hooks/useGetInstance"},next:{title:"injectAtomInstance",permalink:"/zedux/docs/api/injectors/injectAtomInstance"}},u=[{value:"Example",id:"example",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"<code>callback</code>",id:"callback",children:[{value:"<code>cleanup</code>",id:"cleanup",children:[],level:4}],level:3},{value:"<code>deps</code>",id:"deps",children:[],level:3},{value:"<code>promise</code>",id:"promise",children:[],level:3},{value:"<code>asyncStore</code>",id:"asyncstore",children:[],level:3}],level:2}],d={toc:u};function m(e){var t=e.components,n=(0,s.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectAsyncEffect } from '@zedux/react'\n")),(0,r.kt)("p",null,"An ",(0,r.kt)("a",{parentName:"p",href:"../glossary#injector"},"injector")," that runs a promise and creates a store to track the promise's state."),(0,r.kt)("p",null,"This injector is very similar to ",(0,r.kt)("a",{parentName:"p",href:"injectEffect"},(0,r.kt)("inlineCode",{parentName:"a"},"injectEffect()")),", but instead of returning a cleanup function, the effect should return a promise. Since you don't return a cleanup function, a ",(0,r.kt)("inlineCode",{parentName:"p"},"cleanup")," function is passed to the effect that you can call, passing a callback that will be called on cleanup."),(0,r.kt)("p",null,"The state of the store returned by this injector is patterned after ",(0,r.kt)("a",{parentName:"p",href:"https://react-query.tanstack.com/reference/useQuery"},"React Query's query state"),"."),(0,r.kt)("p",null,"One of the primary uses of this injector is to obtain a stable promise reference that can be passed to ",(0,r.kt)("a",{parentName:"p",href:"../classes/AtomApi#setpromise"},(0,r.kt)("inlineCode",{parentName:"a"},"AtomApi#setPromise()"))," to trigger React suspense."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(i.u,{resultVar:"App",mdxType:"LiveEditor"},"\nconst suspendingAtom = atom('suspending', () => {\n  const [promise, asyncStore] = injectAsyncEffect(() => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve('Hello, World!')\n      }, 2000)\n    })\n  }, [])\n\n  return api(asyncStore).setPromise(promise)\n})\n\nfunction Child() {\n  const { data } = useAtomValue(suspendingAtom)\n\n  return <div>The value: {data}</div>\n}\n\nfunction App() {\n  return (\n    <Suspense fallback={<div>Suspending...</div>}>\n      <Child />\n    </Suspense>\n  )\n}\n"),(0,r.kt)("h2",{id:"signature"},"Signature"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"injectAsyncEffect(callback, deps?) => [promise, asyncStore]\n")),(0,r.kt)("p",null,"Returns a tuple of a promise and a store containing the status and data or error info of the promise."),(0,r.kt)("h3",{id:"callback"},(0,r.kt)("inlineCode",{parentName:"h3"},"callback")),(0,r.kt)("p",null,"The callback's signature is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"cleanup => promise\n")),(0,r.kt)("p",null,"The callback should return a promise."),(0,r.kt)("h4",{id:"cleanup"},(0,r.kt)("inlineCode",{parentName:"h4"},"cleanup")),(0,r.kt)("p",null,"A function you can call, passing a function that will be called when this effect is cleaned up. As with ",(0,r.kt)("inlineCode",{parentName:"p"},"injectEffect"),", cleanup happens whenever the ",(0,r.kt)("inlineCode",{parentName:"p"},"deps")," change or when this atom is destroyed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const [promise, asyncStore] = injectAsyncEffect(cleanup => {\n  const controller = new AbortController()\n\n  const usersPromise = fetch('/users', {\n    method: 'get',\n    controller.signal,\n  })\n\n  cleanup(() => controller.abort())\n\n  return usersPromise\n})\n")),(0,r.kt)("p",null,"If you call ",(0,r.kt)("inlineCode",{parentName:"p"},"cleanup")," asynchronously after the effect has already been cleaned up, the passed function will run immediately."),(0,r.kt)("h3",{id:"deps"},(0,r.kt)("inlineCode",{parentName:"h3"},"deps")),(0,r.kt)("p",null,"An array. Optional. If not passed, the effect will rerun every time this atom is reevaluated. Pass an empty array to only run the effect once. If any values are passed to this array, the effect will rerun every time any one of those values changes on a subsequent evaluation."),(0,r.kt)("h3",{id:"promise"},(0,r.kt)("inlineCode",{parentName:"h3"},"promise")),(0,r.kt)("p",null,"The first item in the returned tuple. This promise will be resolved the first time one of the callback's promises resolves - e.g. if the effect reruns before the previous promise has resolved, the previous promise will be discarded and ",(0,r.kt)("inlineCode",{parentName:"p"},"injectAsyncEffect")," will switch to listening to the new promise. The first time a promise resolves, this returned promise will be resolved with the result."),(0,r.kt)("p",null,"This promise is a stable reference - if the effect kicks off again after it's already resolved once, no new promise will be created."),(0,r.kt)("p",null,"This promise can be passed to ",(0,r.kt)("a",{parentName:"p",href:"../classes/AtomApi#setpromise"},(0,r.kt)("inlineCode",{parentName:"a"},"AtomApi#setpromise()")),"."),(0,r.kt)("h3",{id:"asyncstore"},(0,r.kt)("inlineCode",{parentName:"h3"},"asyncStore")),(0,r.kt)("p",null,"The second item in the returned tuple. See ",(0,r.kt)("a",{parentName:"p",href:"../types/AsyncStore"},"AsyncStore"),"."))}m.isMDXComponent=!0}}]);