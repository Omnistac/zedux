"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[7245],{1552:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'immer\',title:\'@zedux/immer\'};var contentTitle=undefined;var metadata={"unversionedId":"packages/immer","id":"packages/immer","title":"@zedux/immer","description":"The official Immer bindings for Zedux. This package exports a new ImmerStore class and a few helpers for insantiating it.","source":"@site/docs/packages/immer.mdx","sourceDirName":"packages","slug":"/packages/immer","permalink":"/zedux/docs/packages/immer","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/packages/immer.mdx","tags":[],"version":"current","frontMatter":{"id":"immer","title":"@zedux/immer"},"sidebar":"react","previous":{"title":"Glossary","permalink":"/zedux/docs/api/glossary"}};var assets={};var toc=[{value:\'ImmerStore\',id:\'immerstore\',level:2},{value:\'<code>.produce()</code>\',id:\'produce\',level:3},{value:\'<code>injectImmerStore()</code>\',id:\'injectimmerstore\',level:2},{value:\'<code>createImmerStore()</code>\',id:\'createimmerstore\',level:2},{value:\'Reducers\',id:\'reducers\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-sh"},"yarn add @zedux/immer\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The official ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://immerjs.github.io/immer/"},"Immer")," bindings for Zedux. This package exports a new ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ImmerStore")," class and a few helpers for insantiating it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"immerstore"},"ImmerStore"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This class extends ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Store"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"Store")," class")," and keeps all the functionality of normal stores. On top of that, it adds a single method:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"produce"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".produce()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Accepts a callback. Invokes\' Immer\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://immerjs.github.io/immer/produce"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"produce()"))," function to create a mutable draft state and commit changes made in the callback to the store\'s current state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = createImmerStore({ a: 1, b: 2 })\\n\\nstore.produce(state => state.b++)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://immerjs.github.io/immer/return"},"Unlike Immer\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"produce()")),", it doesn\'t matter what the callback returns. Zedux will ignore the return value. Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"store.setState()")," to overwrite the state of the store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"injectimmerstore"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"injectImmerStore()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The recommended way to create immer stores. This is a normal ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/glossary#injector"},"injector")," for use within atoms. Accepts two parameters:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"initialState")," - the initial state of the store"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"config")," - a config object with exactly the same properties and functionality as ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/injectors/injectStore#config"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectStore()"),"\'s config"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=immer/injectImmerStore-counter resultVar=Counter","live":true,"ecosystemId":"immer/injectImmerStore-counter","resultVar":"Counter"},"const initialState = { count: 0 }\\n\\nconst counterAtom = atom(\'counter\', () => {\\n  const store = injectImmerStore(initialState)\\n\\n  return api(store).setExports({\\n    decrement: () => store.produce(state => state.count--),\\n    increment: () => store.produce(state => state.count++),\\n    reset: () => store.setState(initialState),\\n  })\\n})\\n\\nfunction Counter() {\\n  const [state, { decrement, increment, reset }] = useAtomState(counterAtom)\\n\\n  return (\\n    <>\\n      <div>Count: {state.count}</div>\\n      <button onClick={decrement}>Decrement</button>\\n      <button onClick={increment}>Increment</button>\\n      <button onClick={reset}>Reset</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An injected ImmerStore that\'s returned from the atom state factory will be set as the atom instance\'s store, exposing the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".produce()")," method to consumers:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=immer/counter2 resultVar=Counter","live":true,"ecosystemId":"immer/counter2","resultVar":"Counter"},"const counterAtom = atom(\'counter\', () => {\\n  return injectImmerStore({ count: 0 })\\n})\\n\\nfunction Counter() {\\n  const instance = useAtomInstance(counterAtom)\\n  const state = useAtomValue(instance)\\n\\n  return (\\n    <>\\n      <div>Count: {state.count}</div>\\n      <button onClick={() => instance.store.produce(state => state.count--)}>\\n        Decrement\\n      </button>\\n      <button onClick={() => instance.store.produce(state => state.count++)}>\\n        Increment\\n      </button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"createimmerstore"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"createImmerStore()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A factory for creating ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ImmerStore")," class instances. Accepts a single ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"initialState")," parameter."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectStore(() => createImmerStore({ key: \'val\' }))\\n// is exactly the same as:\\nconst store = injectImmerStore({ key: \'val\' })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"reducers"},"Reducers"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Immer stores are currently zero-config only. We can add helpers to make Immer reducers if there\'s a demand for it. Reducer-driven stores are rare enough in Zedux, we\'re hoping this won\'t be necessary. But feel free to open an issue if you need this functionality!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Immer stores are still stores - they can be used anywhere a store can be used, including being composed inside a parent store. However, since they\'re zero-config only, they can\'t be given child stores.")));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1552\n')}}]);