"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[1849],{5692:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var n=a(3117),s=a(102),o=(a(7294),a(3905)),r=a(3052),i=["components"],l={id:"useAtomValue",title:"useAtomValue"},u=void 0,c={unversionedId:"api/hooks/useAtomValue",id:"api/hooks/useAtomValue",isDocsHomePage:!1,title:"useAtomValue",description:"A React hook that accepts an atom and its params and registers a dynamic graph dependency on the resolved atom instance, returning the value.",source:"@site/docs/api/hooks/useAtomValue.mdx",sourceDirName:"api/hooks",slug:"/api/hooks/useAtomValue",permalink:"/zedux/docs/api/hooks/useAtomValue",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/hooks/useAtomValue.mdx",tags:[],version:"current",frontMatter:{id:"useAtomValue",title:"useAtomValue"},sidebar:"react",previous:{title:"useAtomState",permalink:"/zedux/docs/api/hooks/useAtomState"},next:{title:"useEcosystem",permalink:"/zedux/docs/api/hooks/useEcosystem"}},d=[{value:"Example",id:"example",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"Overloads",id:"overloads",children:[],level:3},{value:"<code>atom</code>",id:"atom",children:[],level:3},{value:"<code>params</code>",id:"params",children:[],level:3},{value:"<code>instance</code>",id:"instance",children:[],level:3}],level:2}],m={toc:d};function p(e){var t=e.components,a=(0,s.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { useAtomValue } from '@zedux/react'\n")),(0,o.kt)("p",null,"A React hook that accepts an atom and its params and registers a ",(0,o.kt)("a",{parentName:"p",href:"../glossary#dynamic-graph-dependency"},"dynamic graph dependency")," on the resolved atom instance, returning the value."),(0,o.kt)("p",null,"The component that uses this hook will rerender whenever the resolved atom instance's state changes."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)(r.u,{resultVar:"Seconds",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', () => {\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nfunction Seconds() {\n  const state = useAtomValue(secondsAtom)\n\n  return <div>Seconds: {state}</div>\n}\n"),(0,o.kt)("p",null,"Miscellaneous:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const val = useAtomValue(myAtom)\nconst withParams = useAtomValue(myAtom, ['param 1', 'param 2'])\nconst fromInstance = useAtomValue(instance)\n")),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useAtomValue(atom, params?) => state\n")),(0,o.kt)("p",null,"Uses the atom + params combo to find an existing atom instance. If no instance is found, creates one. Returns the resolved atom instance's current state."),(0,o.kt)("h3",{id:"overloads"},"Overloads"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useAtomValue(instance) => state\n")),(0,o.kt)("h3",{id:"atom"},(0,o.kt)("inlineCode",{parentName:"h3"},"atom")),(0,o.kt)("p",null,"Required. The ",(0,o.kt)("a",{parentName:"p",href:"../classes/Atom"},"atom")," object whose key will be used to find an existing atom instance and whose definition will be used to create an atom instance if none exist yet."),(0,o.kt)("h3",{id:"params"},(0,o.kt)("inlineCode",{parentName:"h3"},"params")),(0,o.kt)("p",null,"Optional. An array of parameters that identify this atom instance. These params will be passed to the atom's ",(0,o.kt)("a",{parentName:"p",href:"../glossary#evaluator"},"evaluator function"),"."),(0,o.kt)("p",null,"TS users will be required to pass this for atoms that take params. If you don't use TS ... just don't forget to pass them."),(0,o.kt)("h3",{id:"instance"},(0,o.kt)("inlineCode",{parentName:"h3"},"instance")),(0,o.kt)("p",null,"Required (in this overload). An ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instance"),". Will register a dynamic dependency on the passed instance and return the instance's current value."))}p.isMDXComponent=!0}}]);