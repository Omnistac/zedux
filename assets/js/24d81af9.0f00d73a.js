"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[2677],{2716:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return m},default:function(){return p}});var a=n(3117),o=n(102),s=(n(7294),n(3905)),r=n(3052),i=["components"],c={id:"overview",title:"Overview"},l=void 0,d={unversionedId:"about/overview",id:"about/overview",isDocsHomePage:!1,title:"Overview",description:"Buckle in for a quick description and contrived example of every key feature of Zedux. The walkthrough will walk through this list in much more detail.",source:"@site/docs/about/overview.mdx",sourceDirName:"about",slug:"/about/overview",permalink:"/zedux/docs/about/overview",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/about/overview.mdx",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview"},sidebar:"react",previous:{title:"Introducing Zedux",permalink:"/zedux/docs/about/introduction"},next:{title:"Redux Comparison",permalink:"/zedux/docs/about/redux-comparison"}},m=[{value:"Atoms",id:"atoms",children:[{value:"Hooks",id:"hooks",children:[],level:3},{value:"Injectors",id:"injectors",children:[],level:3},{value:"EcosystemProvider",id:"ecosystemprovider",children:[],level:3},{value:"Ions",id:"ions",children:[],level:3},{value:"Flags",id:"flags",children:[],level:3},{value:"Exports",id:"exports",children:[],level:3}],level:2},{value:"Dependency Injection",id:"dependency-injection",children:[{value:"Composition",id:"composition",children:[],level:3},{value:"Overrides",id:"overrides",children:[],level:3}],level:2},{value:"Stores",id:"stores",children:[{value:"Redux-Style State",id:"redux-style-state",children:[],level:3},{value:"State Machines",id:"state-machines",children:[],level:3},{value:"Action Streams",id:"action-streams",children:[],level:3}],level:2},{value:"Caching",id:"caching",children:[{value:"Params",id:"params",children:[],level:3},{value:"Destruction",id:"destruction",children:[],level:3},{value:"Atom Instances",id:"atom-instances",children:[],level:3},{value:"Invalidation",id:"invalidation",children:[],level:3}],level:2},{value:"Side Effects",id:"side-effects",children:[{value:"Queries",id:"queries",children:[],level:3},{value:"Mutations",id:"mutations",children:[],level:3},{value:"Streams",id:"streams",children:[],level:3},{value:"<code>when()</code>",id:"when",children:[],level:3},{value:"Suspense",id:"suspense",children:[],level:3}],level:2},{value:"Advanced",id:"advanced",children:[{value:"Molecules",id:"molecules",children:[],level:3},{value:"Hydration",id:"hydration",children:[],level:3},{value:"Preloading",id:"preloading",children:[],level:3}],level:2},{value:"Dev Tools",id:"dev-tools",children:[{value:"<code>injectWhy()</code>",id:"injectwhy",children:[],level:3},{value:"Performance",id:"performance",children:[],level:3},{value:"State Hub",id:"state-hub",children:[],level:3}],level:2}],u={toc:m};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Buckle in for a quick description and contrived example of every key feature of Zedux. The ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/quick-start"},"walkthrough")," will walk through this list in much more detail."),(0,s.kt)("h2",{id:"atoms"},"Atoms"),(0,s.kt)("p",null,"Atoms are state containers."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { atom } from '@zedux/react'\n\nconst myFirstAtom = atom('myFirst', 'Hello, world!')\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/quick-start#meet-the-atoms"},"the quick start")," and ",(0,s.kt)("a",{parentName:"p",href:"../api/factories/atom"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,s.kt)("h3",{id:"hooks"},"Hooks"),(0,s.kt)("p",null,"Zedux exports various hooks for accessing and updating atom values."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useAtomInstance, useAtomState } from '@zedux/react'\n\nfunction MyComponent() {\n  const [state] = useAtomState(myFirstAtom)\n\n  return <div>A message from the universe: {state}</div>\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/using-atoms"},"the using atoms walkthrough"),"."),(0,s.kt)("h3",{id:"injectors"},"Injectors"),(0,s.kt)("p",null,"Injectors are like hooks for atoms."),(0,s.kt)(r.u,{resultVar:"Seconds",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', () => {\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nfunction Seconds() {\n  const state = useAtomValue(secondsAtom)\n\n  return <div>{state}</div>\n}\n"),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/creating-atoms#injectors"},"the creating atoms walkthrough")),(0,s.kt)("h3",{id:"ecosystemprovider"},"EcosystemProvider"),(0,s.kt)("p",null,"An optional ",(0,s.kt)("inlineCode",{parentName:"p"},"<EcosystemProvider />")," can be rendered at the top level of your app. All atom instances created in any children will be scoped to the EcosystemProvider."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { EcosystemProvider } from '@zedux/react'\n\nfunction App() {\n  return (\n    <EcosystemProvider>\n      <Routes />\n    </EcosystemProvider>\n  )\n}\n")),(0,s.kt)("p",null,"An ecosystem can also be created and used completely outside of React."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { ecosystem } from '@zedux/react'\n\nconst rootEcosystem = ecosystem({ id: 'root' })\n\nconst myAtomInstance = rootEcosystem.getInstance(myAtom, ['a param'])\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/dependency-injection"},"the Dependency Injection walkthrough"),", ",(0,s.kt)("a",{parentName:"p",href:"../api/components/EcosystemProvider"},(0,s.kt)("inlineCode",{parentName:"a"},"<EcosystemProvider />")),", and ",(0,s.kt)("a",{parentName:"p",href:"../api/classes/Ecosystem"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"Ecosystem")," class"),"."),(0,s.kt)("h3",{id:"ions"},"Ions"),(0,s.kt)("p",null,"Selector-type operations can be done with special atoms called ",(0,s.kt)("a",{parentName:"p",href:"../api/classes/Ion"},"ions"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { atom, ion } from '@zedux/react'\n\nconst bigListAtom = atom('bigList', Array(1000).fill('bigness'))\n\n// highlight-next-line\nconst smallListAtom = ion('smallList', ({ get }) => {\n  const bigList = get(bigListAtom)\n\n  return bigList.slice(0, 10)\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/creating-atoms"},"the creating atoms walkthrough")," and ",(0,s.kt)("a",{parentName:"p",href:"../api/classes/Ion"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"Ion")," class"),"."),(0,s.kt)("h3",{id:"flags"},"Flags"),(0,s.kt)("p",null,"Atoms can be given flags to raise warnings if they're run in invalid environments."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const axiosAtom = atom('axios', axios, {\n  flags: ['async'],\n  readonly: true,\n})\n\nfunction SomeComponent() {\n  const axios = axiosAtom.useValue()\n  ...\n}\n\nfunction TestApp() {\n  return (\n    <EcosystemProvider flags={[/* no flags */]}>\n      <SomeComponent />\n    </EcosystemProvider>\n  )\n}\n// logs warning: Unsafe atom \"axios\" encountered with flag \"async\"\n\nfunction DevApp() {\n  return (\n    <EcosystemProvider flags={['async']}>\n      <SomeComponent />\n    </EcosystemProvider>\n  )\n}\n// no warnings\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the testing guide")," and ",(0,s.kt)("a",{parentName:"p",href:"../api/classes/Ecosystem#flags"},"Ecosystem's ",(0,s.kt)("inlineCode",{parentName:"a"},".flags")," property"),"."),(0,s.kt)("h3",{id:"exports"},"Exports"),(0,s.kt)("p",null,"Atoms can expose variables to consumers."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { api, ion } from '@zedux/react'\n\nconst counterAtom = ion('counter', () => {\n  const store = injectStore(0)\n\n  return api(state).setExports({\n    decrement: () => store.setState(state => state - 1),\n    increment: () => store.setState(state => state + 1),\n  })\n})\n\nfunction Counter() {\n  const counter = useAtomValue(counterAtom)\n  const { decrement, increment } = useAtomInstance(counterAtom).exports\n\n  return (\n    <>\n      <div>Counter State: {counter}</div>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n    </>\n  )\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/creating-atoms"},"the creating atoms walkthrough")," and ",(0,s.kt)("a",{parentName:"p",href:"../api/classes/AtomApi"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"AtomApi")," class"),"."),(0,s.kt)("h2",{id:"dependency-injection"},"Dependency Injection"),(0,s.kt)("p",null,"Zedux atoms create a perfect environment for Inversion of Control."),(0,s.kt)("h3",{id:"composition"},"Composition"),(0,s.kt)("p",null,'Atoms can be composed of other atoms by "injecting" them.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const bigListAtom = atom('bigList', Array(1000).fill('fluff'))\n\nconst smallListAtom = atom('smallList', () => {\n  const [bigList] = injectAtomState(bigListAtom)\n\n  return bigList.slice(0, 10)\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/quick-start#dependency-injection"},"the quick start")," and ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/dependency-injection"},"the Dependency Injection walkthrough"),"."),(0,s.kt)("h3",{id:"overrides"},"Overrides"),(0,s.kt)("p",null,"Injected atoms can be overridden."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const fetchTodosAtom = atom('fetchTodos', () => {\n  // a theoretical custom injector for simplicity:\n  return injectFetch('/todos', [])\n})\n\nfunction Todos() {\n  const [todos] = useAtomState(fetchTodosAtom)\n\n  return <div>The todos: {todos.join(', ')}</div>\n}\n\n// In some test:\n// highlight-next-line\nconst fetchTodosTestAtom = fetchTodosAtom.override(['Todo 1', 'Todo 2'])\n\nfunction TestApp() {\n  return (\n    // highlight-next-line\n    <EcosystemProvider overrides={[fetchTodosTestAtom]}>\n      <Todos />\n    </EcosystemProvider>\n  )\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/dependency-injection"},"the Dependency Injection walkthrough"),"."),(0,s.kt)("h2",{id:"stores"},"Stores"),(0,s.kt)("p",null,"An atom's value can be a store."),(0,s.kt)(r.u,{resultVar:"BigComponent",mdxType:"LiveEditor"},"\nconst goBig = createActor('goBig')\n\nconst bigAtom = atom('big', () => {\n  const store = injectStore()\n\n  injectEffect(() => {\n    const { subscription } = when(store)\n      .receivesAction(goBig, () => alert('go home'))\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  return store\n})\n\nfunction BigComponent() {\n  const { dispatch } = useAtomInstance(bigAtom)\n\n  return <button onClick={() => dispatch(goBig())}>Go Big</button>\n}\n"),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/stores"},"the stores walkthrough")," and ",(0,s.kt)("a",{parentName:"p",href:"../api/classes/Store"},"the ",(0,s.kt)("inlineCode",{parentName:"a"},"Store")," class"),"."),(0,s.kt)("h3",{id:"redux-style-state"},"Redux-Style State"),(0,s.kt)("p",null,"Stores can be configured with Redux-style reducers."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createActor, createReducer, createStore } from '@zedux/react'\n\nconst addTodo = createActor<string>('addTodo')\n\nconst todosReducer = createReducer<string[]>([]).reduce(\n  addTodo,\n  (state, todo) => [...state, todo]\n)\n\nconst todosStore = createStore({ todos: todosReducer })\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/stores"},"the stores walkthrough"),", ",(0,s.kt)("a",{parentName:"p",href:"../api/factories/createActor"},(0,s.kt)("inlineCode",{parentName:"a"},"createActor()")),", ",(0,s.kt)("a",{parentName:"p",href:"../api/factories/createReducer"},(0,s.kt)("inlineCode",{parentName:"a"},"createReducer()")),", and ",(0,s.kt)("a",{parentName:"p",href:"../api/factories/createStore"},(0,s.kt)("inlineCode",{parentName:"a"},"createStore()")),"."),(0,s.kt)("h3",{id:"state-machines"},"State Machines"),(0,s.kt)("p",null,"Stores can be configured with simple state machines."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { createActor, createMachine, createStore, states } from '@zedux/react'\n\nconst timer = createActor('timer')\nconst [green, yellow, red] = states('green', 'yellow', 'red')\n\nconst stopLightMachine = createMachine(\n  green.on(timer, yellow), // \"green\" will be the initial state\n  yellow.on(timer, red),\n  red.on(timer, green)\n)\n\n// machines are just pure reducers\nconst stopLightStore = createStore(stopLightMachine)\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/state-machines"},"the state machines walkthrough"),"."),(0,s.kt)("h3",{id:"action-streams"},"Action Streams"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 The ",(0,s.kt)("inlineCode",{parentName:"p"},"useAction$")," API and ",(0,s.kt)("inlineCode",{parentName:"p"},"@zedux/react/rx")," library are under construction."))),(0,s.kt)("p",null,"One of the superpowers of Zedux stores is that they can be consumed as streams of actions."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { atom, createActor } from '@zedux/react'\nimport { filterByActor, useAction$ } from '@zedux/react/rx'\n\nconst updateRow = createActor<RowUpdateEvent>('updateRow')\nconst messageBusAtom = atom('messageBus', null)\n\nfunction BigTable() {\n  // highlight-next-line\n  const message$ = useAction$(messageBusAtom)\n  const tableRef = useRef()\n\n  useEffect(() => {\n    // highlight-next-line\n    const subscription = message$\n      .pipe(filterByActor(updateRow))\n      .subscribe(event => tableRef.current.updateRow(event.rowId, event))\n\n    return () => subscription.unsubscribe()\n  }, [])\n  ...\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/side-effects"},"the side effects walkthrough"),"."),(0,s.kt)("h2",{id:"caching"},"Caching"),(0,s.kt)("p",null,"When atoms are used, atom instances are created. These instances are like data caches. The cache can be controlled in many ways."),(0,s.kt)("h3",{id:"params"},"Params"),(0,s.kt)("p",null,"Atoms can take parameters. Different params cause new atom instances to be created."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const totallyUsefulAtom = atom(\n  'totallyUseful',\n  (usefulness: number) => usefulness * 10)\n)\n\nfunction MyComponent() {\n  const [totallyUsefulNumber] = totallyUsefulAtom.useState(4.2)\n  const [moreUsefulNumber] = totallyUsefulAtom.useState(0.314159)\n  ...\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/quick-start#params"},"the quick start")," and ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/using-atoms#instances"},"the using atoms walkthrough"),"."),(0,s.kt)("h3",{id:"destruction"},"Destruction"),(0,s.kt)("p",null,"Atom instances can be destroyed with ",(0,s.kt)("inlineCode",{parentName:"p"},"ttl")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"maxInstances"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const deathStarAtom = atom('deathStar', 'All The Sith', {\n  // destroy excess instances immediately when their ref count reaches 0\n  maxInstances: 1,\n  // destroy deathStarAtom instances 10 seconds after their ref count reaches 0\n  ttl: 10000,\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the lifecycles walkthrough")),(0,s.kt)("h3",{id:"atom-instances"},"Atom Instances"),(0,s.kt)("p",null,"Atom instances can be accessed directly."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const randomNumAtom = atom('randomNum', (max: number) =>\n  Math.floor(Math.random() * max)\n)\n\nfunction RandomNumber() {\n  const instance = useAtomInstance(randomNumAtom, [100])\n  const state = useAtomValue(instance) // don't have to re-pass params here\n\n  return (\n    <AtomInstanceProvider instance={instance}>\n      {/* The instance's cached value can be invalidated directly */}\n      <button onClick={() => instance.invalidate()}>Reevaluate atom</button>\n      <SomeChild />\n    </AtomInstanceProvider>\n  )\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/using-atoms#instances"},"the using atoms")," and ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/context"},"context")," walkthroughs."),(0,s.kt)("h3",{id:"invalidation"},"Invalidation"),(0,s.kt)("p",null,"Atoms can invalidate their own state using ",(0,s.kt)("inlineCode",{parentName:"p"},"injectInvalidate()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { injectInvalidate } from '@zedux/react'\n\nconst asyncAtom = atom('async', () => {\n  // can be called directly in a callback or effect to trigger a reevaluation\n  const invalidate = injectInvalidate()\n\n  // in some callback or effect:\n  invalidate()\n})\n")),(0,s.kt)("p",null,"Consumers can invalidate an atom's state using ",(0,s.kt)("inlineCode",{parentName:"p"},"instance.invalidate()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  const myInstance = myAtom.useInstance()\n\n  return <button onClick={() => myInstance.invalidate()}>Invalidate</button>\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../api/injectors/injectInvalidate"},(0,s.kt)("inlineCode",{parentName:"a"},"injectInvalidate()"))," and ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the cache management walkthrough")),(0,s.kt)("h2",{id:"side-effects"},"Side Effects"),(0,s.kt)("p",null,"Atoms are designed for executing and sharing promises and observables"),(0,s.kt)("h3",{id:"queries"},"Queries"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 The ",(0,s.kt)("inlineCode",{parentName:"p"},"@zedux/react/query")," package is under construction"))),(0,s.kt)("p",null,"React Query-style queries are just another type of atom:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { query, useQuery } from '@zedux/react/query'\n\nconst fetchUserQuery = query('fetchUser', async (id: string) => {\n  const API_URL = injectAtomSelector(configAtom, config => config.API_URL)\n\n  const result = await fetch(`${API_URL}/users/${id}`)\n  return result.json()\n})\n\nfunction UserProfile({ id }) {\n  const { data, error, isLoading } = useQuery(fetchUserQuery, [id])\n  ...\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},(0,s.kt)("inlineCode",{parentName:"a"},"query()"))," and ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/side-effects"},"the side effects walkthrough"),"."),(0,s.kt)("h3",{id:"mutations"},"Mutations"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 The ",(0,s.kt)("inlineCode",{parentName:"p"},"@zedux/react/query")," package is under construction"))),(0,s.kt)("p",null,"Zedux also has React Query-style mutations:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { mutation, useMutation } from '@zedux/react/query'\n\nconst updateUserMutation = mutation('updateUser', () => {\n  const API_URL = configAtom.injectSelector(config => config.API_URL)\n\n  return async (newUser: User) => {\n    const result = await axios.post(`${API_URL}/users`, newUser)\n    return result.json()\n  }\n})\n\nfunction ChangePassword() {\n  const { data, error, isLoading, mutate } = useMutation(updateUserMutation)\n  ...\n  mutate({ ...user, password: newPassword })\n}\n")),(0,s.kt)("h3",{id:"streams"},"Streams"),(0,s.kt)("p",null,"Atoms work well with streams, e.g. websockets and RxJS observables."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const socketAtom = atom('socket', () => io('ws://localhost:8080'))\n\nconst usersStreamAtom = ion('usersStream', ({ get }) => {\n  const socket = get(socketAtom)\n\n  const users$ = defer(() => of(socket.emit('start-users-stream'))).pipe(\n    mergeMap(() => fromEvent(socket, 'user')),\n    finalize(() => socket.emit('end-users-stream'))\n  )\n\n  return users$\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/side-effects"},"the side effects walkthrough"),"."),(0,s.kt)("h3",{id:"when"},(0,s.kt)("inlineCode",{parentName:"h3"},"when()")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"when")," is a powerful API for hooking into stores."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { when } from '@zedux/react'\n\nconst { subscription } = when(someStore)\n  .stateMatches(state => state.someKey === 'someVal', doSomething)\n  .receivesAction(someAction, logSomething)\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/side-effects"},"the side effects walkthrough"),"."),(0,s.kt)("h3",{id:"suspense"},"Suspense"),(0,s.kt)("p",null,"Atoms can be used as suspending resources in React concurrent mode."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { api, atom } from '@zedux/react'\n\nconst suspendingAtom = atom('suspending', () => {\n  return api(someVal).setPromise(somePromise)\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../walkthrough/suspense"},"the suspense walkthrough")),(0,s.kt)("h2",{id:"advanced"},"Advanced"),(0,s.kt)("h3",{id:"molecules"},"Molecules"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 Molecules and ",(0,s.kt)("inlineCode",{parentName:"p"},"injectAllInstances")," are under construction"))),(0,s.kt)("p",null,"Molecules are bidirectional accumulators of atoms."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { atom, injectAllInstances, injectStore, molecule } from '@zedux/react'\n\nconst formsMolecule = molecule('forms', () => {\n  const store = injectStore()\n\n  injectAllInstances((injectedAtom, instance) => {\n    store.use({\n      [injectedAtom.key]: {\n        [instance.keyHash]: instance.store,\n      },\n    })\n  })\n})\n\nconst registrationFormAtom = atom(\n  'registrationForm',\n  () => ({ email: '', password: '' }),\n  {\n    molecules: [formsMolecule],\n  }\n)\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the persistence walkthrough")," and ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},(0,s.kt)("inlineCode",{parentName:"a"},"molecule()"))),(0,s.kt)("h3",{id:"hydration"},"Hydration"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 ",(0,s.kt)("inlineCode",{parentName:"p"},"molecule")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"injectAllInstances")," is under construction"))),(0,s.kt)("p",null,"Hydrating initial atom state can be done with molecules."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"const persistenceMolecule = molecule('persistence', () => {\n  const persistedStuff = injectLocalStorage()\n\n  injectAllInstances((atom, instance) => {\n    const persistedState = persistedStuff[instance.keyHash]\n\n    if (persistedState) {\n      instance.store.setState(persistedState)\n    }\n  })\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the persistence walkthrough"),"."),(0,s.kt)("h3",{id:"preloading"},"Preloading"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 Molecules are under construction"))),(0,s.kt)("p",null,"Atoms (including molecules) can be preloaded to kickstart hydration, alleviate render waterfalls, and bootstrap data from outside Zedux."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { EcosystemProvider, useGetInstance } from '@zedux/react'\n\nfunction App() {\n  const loadStorage = useGetInstance(persistenceMolecule)\n\n  return (\n    <EcosystemProvider\n      preload={() => {\n        loadStorage()\n      }}\n    >\n      <Routes />\n    </EcosystemProvider>\n  )\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the persistence walkthrough"),"."),(0,s.kt)("h2",{id:"dev-tools"},"Dev Tools"),(0,s.kt)("p",null,"Zedux ships with several Dev X features out of the box. And more can be installed."),(0,s.kt)("h3",{id:"injectwhy"},(0,s.kt)("inlineCode",{parentName:"h3"},"injectWhy()")),(0,s.kt)("p",null,"Why Did This UpDaTe??!!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { atom, injectState, injectStore, injectWhy } from '@zedux/react'\n\nconst crazyAtom = atom('crazy', () => {\n  // say we have an atom that injects several state sources\n  const [state, setState] = injectState()\n  const store = injectStore()\n  const other = addTenAtom.injectValue()\n\n  // with such atoms it can be difficult to tell why state keeps updating\n  // injectWhy FTW!\n  // highlight-next-line\n  const lameExcuse = injectWhy()\n  console.log('why???', lameExcuse)\n})\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"../api/injectors/injectWhy"},(0,s.kt)("inlineCode",{parentName:"a"},"injectWhy()"))," and ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the dev tools walkthrough")),(0,s.kt)("h3",{id:"performance"},"Performance"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 Everything in this section is under construction"))),(0,s.kt)("p",null,"Use ",(0,s.kt)("inlineCode",{parentName:"p"},"getPerformanceSnapshot()")," to discover which atoms have high reevaluations, usages, stale instances, and memory."),(0,s.kt)("p",null,"Use the profiler to root out the cause of slowdowns."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { getPerformanceSnapshot, profiler } from '@zedux/react'\n\nconst snapshot = getPerformanceSnapshot()\n\nprofiler.startRecording()\nsetTimeout(() => {\n  const diff = profiler.stopRecording()\n}, 15000)\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the dev tools walkthrough")),(0,s.kt)("h3",{id:"state-hub"},"State Hub"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\ud83d\udea7 The ",(0,s.kt)("inlineCode",{parentName:"p"},"@zedux/react/state-hub")," package is under construction"))),(0,s.kt)("p",null,"Coming Soon! Will be available at ",(0,s.kt)("inlineCode",{parentName:"p"},"@zedux/react/state-hub"),". Provides UIs to easily make use of the dev, debugging, performance, and profiling tools. Plus it's pretty and has cool graphs."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { StateHub } from '@zedux/react/state-hub'\n\nfunction App() {\n  return (\n    <EcosystemProvider>\n      <StateHub />\n      <Routes />\n    </EcosystemProvider>\n  )\n}\n")),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"/not-done"},"the state hub walkthrough")))}p.isMDXComponent=!0}}]);