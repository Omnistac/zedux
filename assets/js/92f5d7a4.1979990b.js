"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[1483],{3975:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'state-machines\',title:\'State Machines\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/state-machines","id":"walkthrough/state-machines","title":"State Machines","description":"The state machine is one of the most important tools a statesmith can have in his belt. XState is the current king of the JavaScript state machine world. Zedux is not out to change that, in fact we may build an official XState Zedux integration soon.","source":"@site/docs/walkthrough/state-machines.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/state-machines","permalink":"/zedux/docs/walkthrough/state-machines","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/state-machines.mdx","tags":[],"version":"current","frontMatter":{"id":"state-machines","title":"State Machines"},"sidebar":"react","previous":{"title":"Resets","permalink":"/zedux/docs/walkthrough/resets"},"next":{"title":"Complex Params","permalink":"/zedux/docs/advanced/complex-params"}};var assets={};var toc=[{value:\'Creating a machine\',id:\'creating-a-machine\',level:2},{value:\'MachineStore\',id:\'machinestore\',level:2},{value:\'<code>.send()</code>\',id:\'send\',level:3},{value:\'<code>.is()</code>\',id:\'is\',level:3},{value:\'<code>.getValue()</code>\',id:\'getvalue\',level:3},{value:\'State Shape\',id:\'state-shape\',level:3},{value:\'Context\',id:\'context\',level:2},{value:\'<code>.getContext()</code>\',id:\'getcontext\',level:3},{value:\'<code>.setContext()</code>\',id:\'setcontext\',level:3},{value:\'<code>.setContextDeep()</code>\',id:\'setcontextdeep\',level:3},{value:\'Example\',id:\'example\',level:3},{value:\'Listeners\',id:\'listeners\',level:2},{value:\'<code>onEnter</code>\',id:\'onenter\',level:3},{value:\'<code>onLeave</code>\',id:\'onleave\',level:3},{value:\'<code>onTransition</code>\',id:\'ontransition\',level:3},{value:\'Contrived Example\',id:\'contrived-example\',level:2},{value:\'Guards\',id:\'guards\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The state machine is one of the most important tools a statesmith can have in his belt. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://xstate.js.org/"},"XState")," is the current king of the JavaScript state machine world. Zedux is not out to change that, in fact we may build an official XState Zedux integration soon."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"However, Zedux does provide a minimal state machine implementation out of the box. These state machines use a high-level, TypeScript-first design that\'s meant to handle simple cases extremely well. For more power, use XState."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"creating-a-machine"},"Creating a machine"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux provides a single high-level injector for creating automatically-typed state machines: ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMachineStore"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Pass a function to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMachineStore")," that accepts a single ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"state")," factory function and returns an array of states. The first state in the array becomes the initial state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom, injectMachineStore } from \'@zedux/react\'\\n\\nconst trafficLightAtom = atom(\'trafficLight\', () => {\\n  const store = injectMachineStore(state => [\\n    state(\'green\'), // <- the initial state\\n    state(\'yellow\'),\\n    state(\'red\'),\\n  ])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This creates a state machine with 3 states: ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"green"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"yellow"),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"red"),". ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"green")," is the initial state. But this machine is stuck in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"green")," forever! Let\'s give it transitions:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectMachineStore(state => [\\n  state(\'green\').on(\'timer\', \'yellow\'),\\n  state(\'yellow\').on(\'timer\', \'red\'),\\n  state(\'red\').on(\'timer\', \'green\'),\\n])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".on(event, nextState)")," to add transitions to the machine\'s states. Now the machine can transition from ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"green")," -> ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"yellow")," -> ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"red")," -> ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"green")," -> etc. in a loop. The machine will transition when it receives the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"timer")," event."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now ... how do we send that event to the machine?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"machinestore"},"MachineStore"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMachineStore()")," returns a special store called a MachineStore. MachineStore extends the Zedux Store class and adds some state machine functionality."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { injectMachineStore, MachineStore } from \'@zedux/react\'\\n\\nconst exampleAtom = atom(\'example\', () => {\\n  const store = injectMachineStore(() => [])\\n\\n  store instanceof MachineStore // true\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"While you can instantiate the MachineStore class yourself, it\'s highly recommended to use helpers like ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMachineStore()")," for the automatic TS types.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"send"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".send()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Use this to send events to the store, triggering state transitions:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=send-example resultVar=output","live":true,"ecosystemId":"send-example","resultVar":"output"},"const trafficLightAtom = atom(\'trafficLight\', () => {\\n  const store = injectMachineStore(state => [\\n    state(\'green\').on(\'timer\', \'yellow\'),\\n    state(\'yellow\').on(\'timer\', \'red\'),\\n    state(\'red\').on(\'timer\', \'green\'),\\n  ])\\n\\n  return store\\n})\\n\\nconst ecosystem = createEcosystem({ id: \'send-example\' })\\nconst { store } = ecosystem.getInstance(trafficLightAtom)\\n\\nconst initialState = store.getState()\\nstore.send(\'timer\')\\nconst nextState = store.getState()\\nconst output = { initialState, nextState }\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"The store returned from the state factory ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"is")," the atom instance\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".store"),". Since this example returned a MachineStore, you can access the machine\'s methods directly on the instance\'s store - e.g. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.store.send(\'timer\')"),". This has full TypeScript support too!")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For TypeScript users, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".send()")," only accepts strings that were specified as event names during machine creation. In this example, passing anything but the string ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'timer\'")," gives a TS error:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"send(\'time\') // Argument of type \'\\"time\\"\' is not assignable to parameter of type \'\\"timer\\"\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The machine will only transition if the current state has a transition specified for the passed event."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectMachineStore(state => [\\n  state(\'idle\').on(\'move\', \'animating\')\\n  state(\'animating\').on(\'finish\', \'idle\')\\n])\\n\\nstore.getValue() // \'idle\'\\nstore.send(\'finish\') // does nothing\\nstore.getValue() // \'idle\'\\nstore.send(\'move\')\\nstore.getValue() // \'animating\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"is"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".is()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns true if the machine\'s current state is the passed state string."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=is-example resultVar=output","live":true,"ecosystemId":"is-example","resultVar":"output"},"const trafficLightAtom = atom(\'trafficLight\', () => {\\n  const store = injectMachineStore(state => [\\n    state(\'green\').on(\'timer\', \'yellow\'),\\n    state(\'yellow\').on(\'timer\', \'red\'),\\n    state(\'red\').on(\'timer\', \'green\'),\\n  ])\\n\\n  return store\\n})\\n\\nconst ecosystem = createEcosystem({ id: \'is-example\' })\\n\\n// both .is and .send are bound function properties (destructuring is fine):\\nconst { is, send } = ecosystem.getInstance(trafficLightAtom).store\\n\\nsend(\'timer\')\\nsend(\'timer\')\\nconst output = is(\'red\')\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For TS users, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".is()")," only accepts strings that were specified as state names during machine creation. In this example, passing anything but the strings ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'green\'"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'yellow\'"),", or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'red\'")," gives a TS error:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"is(\'yello\') // Argument of type \'\\"yello\\"\' is not assignable to parameter of type \'\\"green\\" | \\"yellow\\" | \\"red\\"\'\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"getvalue"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".getValue()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns the machine\'s current string value:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"store.getValue() // green\\nstore.send(\'timer\')\\nstore.getValue() // yellow\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"state-shape"},"State Shape"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The MachineStore\'s state is an object like the following:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"store.getState()\\n// {\\n//   context: undefined,\\n//   value: \'green\',\\n// }\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".value")," is the current string state of the machine."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// These two lines are equivalent:\\nmachineStore.getState().value === \'green\'\\nmachineStore.is(\'green\')\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll look at ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".context")," next:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"context"},"Context"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"MachineStores can hold extra state, besides the value string. This extra state is called context. Context must be an object (or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"undefined"),")."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can pass the initial context as the 2nd param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMachineStore()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectMachineStore(statesFactory, initialContext)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"getcontext"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".getContext()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Returns the current context value. An alias for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"machineStore.getState().context"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// These two lines are equivalent:\\nmachineStore.getState().context\\nmachineStore.getContext()\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"setcontext"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".setContext()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Sets the store\'s context value. Accepts function overloads."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// These are equivalent:\\nmachineStore.setState(state => ({ ...state, context: newContext }))\\nmachineStore.setContext(newContext)\\nmachineStore.setContext(context => newContext)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"setcontextdeep"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".setContextDeep()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Deeply merges the passed context value into the existing context. Accepts function overloads."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// These are equivalent:\\nmachineStore.setStateDeep({ context: newContext })\\nmachineStore.setContextDeep(newContext)\\nmachineStore.setContextDeep(context => newContext)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"warning"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Just like ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setStateDeep()"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setContextDeep()")," is only for updating state - it cannot be used to delete keys. Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setContext")," for that.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"example"},"Example"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s an example using context to keep track of how many times a theme toggler toggles:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=state-machines/context resultVar=Theme","live":true,"ecosystemId":"state-machines/context","resultVar":"Theme"},"const themeAtom = atom(\'theme\', () => {\\n  const store = injectMachineStore(\\n    state => [\\n      state(\'light\').on(\'toggle\', \'dark\'),\\n      state(\'dark\').on(\'toggle\', \'light\'),\\n    ],\\n    { count: 0 },\\n    {\\n      onTransition: machine =>\\n        machine.setContext(context => ({ count: context.count + 1 })),\\n    }\\n  )\\n\\n  // you can alias store methods on exports for use in `useAtomState`:\\n  return api(store).setExports({ send: store.send })\\n})\\n\\nfunction Theme() {\\n  const [{ context, value }, { send }] = useAtomState(themeAtom)\\n\\n  return (\\n    <div style={value === \'dark\' ? { background: \'#444\', color: \'#fff\' } : {}}>\\n      <label>\\n        <input\\n          checked={value === \'dark\'}\\n          onChange={() => send(\'toggle\')}\\n          type=\\"checkbox\\"\\n        />\\n        <span>{value} mode</span>\\n      </label>\\n      <div>Toggle Count: {context.count}</div>\\n    </div>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This example also made use of an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onTransition")," function. This is called a listener."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"listeners"},"Listeners"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Listeners can be used to run side effects when the state machine transitions to a new state. There are 3 kinds: ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onEnter"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onLeave"),", and the universal ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onTransition"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"onenter"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"onEnter")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This listener is attached to individual states via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"state.onEnter()"),". Here\'s an example using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onEnter()")," to send a request when the machine enters the \'fetching\' state:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const requestStore = injectMachineStore(\\n  state => [\\n    state(\'idle\').on(\'fetch\', \'fetching\'),\\n    state(\'fetching\')\\n      .on(\'succeed\', \'success\')\\n      .on(\'fail\', \'failure\')\\n      .onEnter(async machine => {\\n        try {\\n          const data = await fetch(\'/todos\').then(data => data.json())\\n          machine.setContextDeep({ data })\\n          machine.send(\'succeed\')\\n        } catch (error) {\\n          machine.setContextDeep({ error })\\n          machine.send(\'fail\')\\n        }\\n      }),\\n  ],\\n  { data: null, error: null }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"For TS users: ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onEnter()")," has limited type support, since the machine\'s full type hasn\'t been inferred yet. The above example will work because ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onEnter()")," is placed after the two ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".on()")," calls for the \'fetching\' state. When you need access to better types, use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onTransition")," instead.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"onleave"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"onLeave")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This listener is attached to individual states via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"state.onLeave()"),". Here\'s an example using both ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onEnter()")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onLeave()")," to set and clear a timeout:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const timeoutStore = injectMachineStore(\\n  state => [\\n    state(\'idle\').on(\'startTimer\', \'waiting\'),\\n    state(\'waiting\')\\n      .on(\'cancel\', \'idle\')\\n      .on(\'timeout\', \'idle\')\\n      .onEnter(machine => {\\n        const handle = setTimeout(() => {\\n          machine.setContext({ handle: null })\\n          machine.send(\'timeout\')\\n        }, 1000)\\n\\n        machine.setContext({ handle })\\n      })\\n      .onLeave(async machine => {\\n        const { handle } = machine.getContext()\\n\\n        if (!handle) return\\n\\n        clearTimeout(handle)\\n        machine.setContext({ handle: null })\\n      }),\\n  ],\\n  { handle: null }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"For TS users: Like ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onEnter()"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".onLeave()")," has limited type support, since the machine\'s full type hasn\'t been inferred yet. When you need access to better types, use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onTransition")," instead.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ontransition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"onTransition")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is the catch-all listener that will be called every time the state machine transitions. This listener has full type support, so use this when ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onEnter")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onLeave")," types are insufficient."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The 3rd parameter to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMachineStore()")," is a config object:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectMachineStore(statesFactory, initialContext, config)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Pass ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onTransition")," as part of this config"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const toggleMachine = injectMachineStore(\\n  state => [state(\'on\').on(\'toggle\', \'off\'), state(\'off\').on(\'toggle\', \'on\')],\\n  { onTransition }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"contrived-example"},"Contrived Example"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The obligatory garage door state machine example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=state-machines/door resultVar=Machine","live":true,"ecosystemId":"state-machines/door","resultVar":"Machine"},"const doorAtom = atom(\'door\', () => {\\n  const store = injectMachineStore(\\n    state => {\\n      const startTimeout = machine => {\\n        const { handle } = machine.getContext()\\n\\n        if (handle) clearTimeout(handle)\\n\\n        const newHandle = setTimeout(() => {\\n          machine.setContext({ handle: null })\\n          machine.send(\'timeout\')\\n        }, 1000)\\n\\n        machine.setContext({ handle: newHandle })\\n      }\\n\\n      return [\\n        state(\'open\').on(\'click\', \'closing\'),\\n        state(\'opening\')\\n          .on(\'click\', \'closing\')\\n          .on(\'timeout\', \'open\')\\n          .onEnter(startTimeout),\\n        state(\'closed\').on(\'click\', \'opening\'),\\n        state(\'closing\')\\n          .on(\'click\', \'opening\')\\n          .on(\'timeout\', \'closed\')\\n          .onEnter(startTimeout),\\n      ]\\n    },\\n    { handle: null }\\n  )\\n\\n  return store\\n})\\n\\nfunction Machine() {\\n  const { value } = useAtomValue(doorAtom)\\n  const { send } = useAtomInstance(doorAtom).store\\n\\n  return (\\n    <>\\n      <div>State: {value}</div>\\n      <button onClick={() => send(\'click\')}>Fire Click</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"guards"},"Guards"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Guards are functions that conditionally prevent the machine from performing a valid transition. Guards can be set per-transition via the 3rd param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"state.on()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const maybeMoveStore = injectMachineStore(\\n  state => [state(\'idle\').on(\'move\', \'moving\', context => !context.isFrozen)],\\n  { isFrozen: false }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"These guards receive the machine\'s context as their only parameter. Return ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"true")," to allow the transition or any falsy value to prevent it. The above machine will only transition from ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"idle")," to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"moving")," if ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"context.isFrozen")," is falsy."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=state-machines/guards resultVar=Controls","live":true,"ecosystemId":"state-machines/guards","resultVar":"Controls"},"const maybeMovingAtom = atom(\'maybeMoving\', () => {\\n  const store = injectMachineStore(\\n    state => [\\n      // the guard! Prevent this transition if we\'re frozen:\\n      state(\'idle\').on(\'move\', \'moving\', context => !context.isFrozen),\\n      state(\'moving\')\\n        .on(\'stop\', \'idle\')\\n        .onEnter(machine => {\\n          setTimeout(() => machine.send(\'stop\'), 1000)\\n        }),\\n    ],\\n    { isFrozen: false }\\n  )\\n\\n  return api(store).setExports({\\n    toggleFreeze: () =>\\n      store.setContext(context => ({ isFrozen: !context.isFrozen })),\\n    is: store.is,\\n    move: () => store.send(\'move\'),\\n  })\\n})\\n\\nfunction Controls() {\\n  const [{ context }, { toggleFreeze, is, move }] = useAtomState(\\n    maybeMovingAtom\\n  )\\n\\n  return (\\n    <div>\\n      <div>- {context.isFrozen ? \'Frozen\' : \'All Systems Go\'} -</div>\\n      <div\\n        style={{\\n          background: \'cyan\',\\n          height: 50,\\n          left: 0,\\n          position: \'relative\',\\n          transition: \'all 1s\',\\n          width: 50,\\n          ...(is(\'moving\') && { left: 50 }),\\n        }}\\n      />\\n      <button onClick={toggleFreeze}>\\n        {context.isFrozen ? \'Unfreeze\' : \'Freeze\'}\\n      </button>\\n      <button onClick={move}>\\n        Move {context.isFrozen ? \'(Does Nothing)\' : \'\'}\\n      </button>\\n    </div>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can also configure the MachineStore with a universal guard via the config object:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"...\\nconst guard = (state, nextValue) => {\\n  // use the current state object and/or nextValue string to determine if the\\n  // transition should be allowed (return true if yes)\\n}\\nconst store = injectMachineStore(statesFactory, initialContext, { guard })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This guard receives the full current state (",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"{ context, value }"),") and the name of the pending transition state. Here\'s an example using a universal guard to pause the machine after allowing it to cycle back to the start:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=state-machines/guard resultVar=Cycler","live":true,"ecosystemId":"state-machines/guard","resultVar":"Cycler"},"const cyclingAtom = atom(\'cycling\', () => {\\n  const store = injectMachineStore(\\n    state => [\\n      state(\'a\').on(\'cycle\', \'b\'),\\n      state(\'b\').on(\'cycle\', \'c\'),\\n      state(\'c\').on(\'cycle\', \'a\'),\\n    ],\\n    { isPaused: false },\\n    {\\n      guard: (state, nextValue) => !state.context.isPaused || nextValue !== \'b\',\\n    }\\n  )\\n\\n  injectEffect(() => {\\n    const handle = setInterval(() => store.send(\'cycle\'), 1000)\\n\\n    return () => clearInterval(handle)\\n  }, [])\\n\\n  return api(store).setExports({\\n    togglePause: () =>\\n      store.setContext(context => ({ isPaused: !context.isPaused })),\\n  })\\n})\\n\\nfunction Cycler() {\\n  const [{ context, value }, { togglePause }] = useAtomState(cyclingAtom)\\n\\n  return (\\n    <div>\\n      <div>\\n        {value}{\' \'}\\n        {context.isPaused\\n          ? value === \'a\'\\n            ? \'(paused)\'\\n            : \'(finishing cycle...)\'\\n          : null}\\n      </div>\\n      <button onClick={togglePause}>\\n        {context.isPaused ? \'Resume\' : \'Pause\'}\\n      </button>\\n    </div>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectMachineStore()")," to create a MachineStore.",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"li"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"state.on()")," adds transitions between states."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"state.onEnter()")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"state.onLeave()")," add listeners to individual states."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Context is the MachineStore\'s \\"extra state\\". It must be an object (or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"undefined"),").",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"li"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Set initial context with the 2nd param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectMachineStore"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Get context with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"machineStore.getContext()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Set context with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"machineStore.setContext()")," or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"machineStore.setContextDeep()")))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use guards to prevent valid transitions."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Add a universal guard and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"onTransition")," listener via the 3rd param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectMachineStore"),".")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"That\'s about it for the key features of Zedux. You\'re ready to jump in and get building! Check out the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../advanced/complex-params"},"advanced guides")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Atom"},"API docs")," as needed. Happy coding!"));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3975\n')}}]);