"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4135],{7775:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return h}});var a=n(3117),i=n(102),s=(n(7294),n(3905)),r=n(3052),o=["components"],l={id:"injectWhy",title:"injectWhy"},c=void 0,u={unversionedId:"api/injectors/injectWhy",id:"api/injectors/injectWhy",isDocsHomePage:!1,title:"injectWhy",description:"An injector that tells you why an atom instance reevaluated. This injector is ignored on the first evaluation - it returns an empty array. On subsequent evaluations, this injector returns the full list of EvaluationReasons detailing why this atom reevaluated.",source:"@site/docs/api/injectors/injectWhy.mdx",sourceDirName:"api/injectors",slug:"/api/injectors/injectWhy",permalink:"/zedux/docs/api/injectors/injectWhy",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectWhy.mdx",tags:[],version:"current",frontMatter:{id:"injectWhy",title:"injectWhy"},sidebar:"react",previous:{title:"injectStore",permalink:"/zedux/docs/api/injectors/injectStore"},next:{title:"Action",permalink:"/zedux/docs/api/types/Action"}},d=[{value:"Examples",id:"examples",children:[],level:2},{value:"Signature",id:"signature",children:[],level:2}],p={toc:d};function h(e){var t=e.components,n=(0,i.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectWhy } from '@zedux/react'\n")),(0,s.kt)("p",null,"An ",(0,s.kt)("a",{parentName:"p",href:"../glossary#injector"},"injector")," that tells you why an atom instance reevaluated. This injector is ignored on the first evaluation - it returns an empty array. On subsequent evaluations, this injector returns the full list of ",(0,s.kt)("a",{parentName:"p",href:"../types/EvaluationReason"},"EvaluationReasons")," detailing why this atom reevaluated."),(0,s.kt)("p",null,"These reasons can be nested indefinitely. They can tell you abut a store state change many atoms deep in the dependency tree of this atom instance."),(0,s.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"We will ",(0,s.kt)("em",{parentName:"p"},"maybe")," only make ",(0,s.kt)("inlineCode",{parentName:"p"},"injectWhy")," usable in dev builds, as tracking evaluation reasons has some overhead. In prod, it will be a no-op that always returns an empty array."),(0,s.kt)("p",{parentName:"div"},"This change is not definite. We need to actually calculate the overhead and determine if the utility ",(0,s.kt)("inlineCode",{parentName:"p"},"injectWhy")," provides may be needed in prod."),(0,s.kt)("p",{parentName:"div"},"It may also be possible to create an ecosystem option to turn on evaluation reason tracking. Feedback welcome! Open an issue and let's discuss."))),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Getting the list of reasons."),(0,s.kt)(r.u,{resultVar:"Reasons",mdxType:"LiveEditor"},"\nconst reasonsAtom = atom('reasons', () => {\n  const store = injectStore(0, true) // subscribe to this store\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  const reasons = injectWhy()\n\n  return reasons\n})\n\nfunction Reasons() {\n  const reasons = useAtomValue(reasonsAtom)\n\n  return (\n    <>\n      <div>Last Evaluation Reasons:</div>\n      <pre>{JSON.stringify(reasons, null, 2)}</pre>\n    </>\n  )\n}\n"),(0,s.kt)("p",null,"If an atom's state is set multiple times synchronously, Zedux will batch those updates. In this case, ",(0,s.kt)("inlineCode",{parentName:"p"},"injectWhy")," can be used to get the list of intermediate state changes that ultimately resulted in this evaluation but that didn't individually cause separate evaluations."),(0,s.kt)(r.u,{resultVar:"Reasons",mdxType:"LiveEditor"},"\nconst reasonsAtom = atom('reasons', () => {\n  const store = injectStore(0, true) // subscribe to this store\n\n  const reasons = injectWhy()\n\n  const sawFive = reasons.some(reason => reason.newState === 5)\n  injectEffect(() => {\n    if (sawFive) alert('hah! I saw that 5 in there!')\n  }, [sawFive])\n\n  return store\n})\n\nfunction Reasons() {\n  const [state, setState] = useAtomState(reasonsAtom)\n\n  return (\n    <>\n      <div>State: {state}</div>\n      <button onClick={() => {\n        setState(currentState => currentState + 1)\n        setState(currentState => currentState + 1)\n        setState(currentState => currentState + 1)\n      }}>Fire 3 Updates</button>\n    </>\n  )\n}\n"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"injectWhy")," will return an empty array on the first evaluation. And that's the only time. Thus ",(0,s.kt)("inlineCode",{parentName:"p"},"injectWhy")," can be used to determine if this is the first evaluation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const reasons = injectWhy()\nif (!reasons.length) {\n  // it's the first evaluation!\n}\n")),(0,s.kt)("h2",{id:"signature"},"Signature"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"injectWhy() => EvaluationReasons\n")),(0,s.kt)("p",null,"Returns the list of ",(0,s.kt)("a",{parentName:"p",href:"../types/EvaluationReason"},"EvaluationReasons")," for this reevaluation. Will return an empty array if this is the first evaluation."))}h.isMDXComponent=!0}}]);