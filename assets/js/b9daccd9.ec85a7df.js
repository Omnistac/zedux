"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[8626],{2804:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return m},default:function(){return d}});var a=n(3117),s=n(102),o=(n(7294),n(3905)),r=n(3052),c=["components"],i={id:"useGetInstance",title:"useGetInstance"},l=void 0,u={unversionedId:"api/hooks/useGetInstance",id:"api/hooks/useGetInstance",isDocsHomePage:!1,title:"useGetInstance",description:"A React hook that returns a getInstance function. This getInstance function accepts an atom and its params and returns an atom instance. It's really an alias for ecosystem.getInstance().",source:"@site/docs/api/hooks/useGetInstance.mdx",sourceDirName:"api/hooks",slug:"/api/hooks/useGetInstance",permalink:"/zedux/docs/api/hooks/useGetInstance",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/hooks/useGetInstance.mdx",tags:[],version:"current",frontMatter:{id:"useGetInstance",title:"useGetInstance"},sidebar:"react",previous:{title:"useEcosystem",permalink:"/zedux/docs/api/hooks/useEcosystem"},next:{title:"injectAsyncEffect",permalink:"/zedux/docs/api/injectors/injectAsyncEffect"}},m=[{value:"Examples",id:"examples",children:[],level:2},{value:"Signature",id:"signature",children:[{value:"Overloads",id:"overloads",children:[],level:3},{value:"<code>atom</code>",id:"atom",children:[],level:3},{value:"<code>params</code>",id:"params",children:[],level:3}],level:2}],p={toc:m};function d(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { useGetInstance } from '@zedux/react'\n")),(0,o.kt)("p",null,"A React hook that returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"getInstance")," function. This ",(0,o.kt)("inlineCode",{parentName:"p"},"getInstance")," function accepts an atom and its params and returns an atom instance. It's really an alias for ",(0,o.kt)("a",{parentName:"p",href:"../classes/Ecosystem#getinstance"},(0,o.kt)("inlineCode",{parentName:"a"},"ecosystem.getInstance()")),"."),(0,o.kt)("p",null,"Use this to lazy-load atom instances. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"ecosystem.getInstance()")," instead to preload atoms in an ",(0,o.kt)("a",{parentName:"p",href:"../components/EcosystemProvider#preload"},"EcosystemProvider's ",(0,o.kt)("inlineCode",{parentName:"a"},"preload")," prop"),"."),(0,o.kt)("p",null,"Unlike the ",(0,o.kt)("inlineCode",{parentName:"p"},"getInstance")," function returned from ",(0,o.kt)("a",{parentName:"p",href:"../injectors/injectGetInstance"},(0,o.kt)("inlineCode",{parentName:"a"},"injectGetInstance()")),", this ",(0,o.kt)("inlineCode",{parentName:"p"},"getInstance")," function never registers any graph dependencies."),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)(r.u,{resultVar:"App",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', (startingNumber: number) => {\n  const store = injectStore(startingNumber)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nfunction First() {\n  const seconds = useAtomValue(secondsAtom, [0])\n\n  return <div>First State: {seconds}</div>\n}\n\nfunction Second() {\n  const seconds = useAtomValue(secondsAtom, [10])\n\n  return <div>Second State: {seconds}</div>\n}\n\nfunction App() {\n  const [isStarted, setIsStarted] = useState(false)\n  const [isFirst, setIsFirst] = useState(true)\n  const getInstance = useGetInstance()\n\n  const start = () => {\n    setIsStarted(true)\n\n    // preload both counters, so they start at the same time:\n    getInstance(secondsAtom, [0])\n    getInstance(secondsAtom, [10])\n  }\n\n  return (\n    <>\n      {!isStarted ? (\n        <button onClick={start}>Start Counting!</button>\n      ) : (\n        <>\n          {isFirst ? <First /> : <Second />}\n          <button onClick={() => setIsFirst(val => !val)}>Toggle View</button>\n        </>\n      )}\n    </>\n  )\n}\n"),(0,o.kt)("p",null,"Miscellaneous:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const getInstance = useGetInstance()\n\nconst staticInstance = getInstance(myAtom)\nconst withParams = getInstance(myAtom, ['param 1', 'param 2'])\n\n// passing an atom to `useGetInstance()`:\nconst getMyAtomInstance = useGetInstance(myAtom)\n\nconst instance = getMyAtomInstance()\nconst withParams = getMyAtomInstance(['param 1', 'param 2'])\n")),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useGetInstance() => getInstance\n")),(0,o.kt)("p",null,"The returned ",(0,o.kt)("inlineCode",{parentName:"p"},"getInstance")," function's signature is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getInstance(atom, params?) => instance\n")),(0,o.kt)("p",null,"Note that unlike ",(0,o.kt)("a",{parentName:"p",href:"../injectors/injectGetInstance"},(0,o.kt)("inlineCode",{parentName:"a"},"injectGetInstance()")),", there is no overload for passing an atom instance."),(0,o.kt)("h3",{id:"overloads"},"Overloads"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"useGetInstance(atom) => getAtomInstance\n")),(0,o.kt)("p",null,"In this overload, the returned ",(0,o.kt)("inlineCode",{parentName:"p"},"getAtomInstance")," function will be scoped to the passed atom and will only return instances of that atom. Its signature is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getAtomInstance(params?) => AtomInstance\n")),(0,o.kt)("h3",{id:"atom"},(0,o.kt)("inlineCode",{parentName:"h3"},"atom")),(0,o.kt)("p",null,"Required. An ",(0,o.kt)("a",{parentName:"p",href:"../classes/Atom"},"atom"),"."),(0,o.kt)("h3",{id:"params"},(0,o.kt)("inlineCode",{parentName:"h3"},"params")),(0,o.kt)("p",null,"Optional. An array of parameters that identify this atom instance. These params will be passed to the atom's ",(0,o.kt)("a",{parentName:"p",href:"../glossary#evaluator"},"evaluator function"),"."),(0,o.kt)("p",null,"TS users will be required to pass this for atoms that take params. If you don't use TS ... just don't forget to pass them."))}d.isMDXComponent=!0}}]);