"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[5006],{3905:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Zo": function() { return /* binding */ MDXProvider; },\n/* harmony export */   "kt": function() { return /* binding */ createElement; }\n/* harmony export */ });\n/* unused harmony exports MDXContext, useMDXComponents, withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === \'function\';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = \'mdxType\';\nvar DEFAULTS = {\n  inlineCode: \'code\',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components["".concat(parentName, ".").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = \'MDXCreateElement\';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === \'string\' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === \'string\' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, args);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3905\n')},7739:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'persistence\',title:\'Persistence\'};var contentTitle=undefined;var metadata={"unversionedId":"advanced/persistence","id":"advanced/persistence","title":"Persistence","description":"There are many ways to persist and restore state \\"snapshots\\" in Zedux. It can be done at the atom instance, ecosystem, or plugin level.","source":"@site/docs/advanced/persistence.mdx","sourceDirName":"advanced","slug":"/advanced/persistence","permalink":"/zedux/docs/advanced/persistence","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/advanced/persistence.mdx","tags":[],"version":"current","frontMatter":{"id":"persistence","title":"Persistence"},"sidebar":"react","previous":{"title":"Plugins","permalink":"/zedux/docs/advanced/plugins"},"next":{"title":"SSR","permalink":"/zedux/docs/advanced/ssr"}};var assets={};var toc=[{value:\'Single Atom\',id:\'single-atom\',level:2},{value:\'Ecosystem Persistence\',id:\'ecosystem-persistence\',level:2},{value:\'<code>ecosystem.dehydrate()</code>\',id:\'ecosystemdehydrate\',level:3},{value:\'<code>dehydrate</code> Atom Config\',id:\'dehydrate-atom-config\',level:3},{value:\'<code>ecosystem.hydrate()</code>\',id:\'ecosystemhydrate\',level:3},{value:\'<code>hydrate</code> Atom Config\',id:\'hydrate-atom-config\',level:3},{value:\'Store Hydration\',id:\'store-hydration\',level:2},{value:\'<code>manualHydration</code>\',id:\'manualhydration\',level:2},{value:\'<code>consumeHydrations</code>\',id:\'consumehydrations\',level:2},{value:\'Reactivity Via Plugins\',id:\'reactivity-via-plugins\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There are many ways to persist and restore state \\"snapshots\\" in Zedux. It can be done at the atom instance, ecosystem, or plugin level."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to persist and restore a single atom instance\'s state"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to dehydrate and rehydrate an entire ecosystem"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to transform non-serializable atom values"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"One of many ways to accomplish this with plugins"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"single-atom"},"Single Atom"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Let\'s start simple. We\'ll use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"localStorage")," for these examples, but you can use whatever means of storage you want."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To persist the state of a single atom, we could use a separate atom to handle the persist/restore functionality."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s an example using a separate ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"localStorageAtom")," that we give a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"key")," param, creating a different ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"localStorageAtom")," instance for every localStorage key we want to persist data to/from:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=persistence/separate-atom resultVar=Username","live":true,"ecosystemId":"persistence/separate-atom","resultVar":"Username"},"const localStorageAtom = atom(\'localStorage\', (key: string) => {\\n  const val = localStorage.getItem(key)\\n\\n  // we\'re using the function overload of `injectStore` to prevent JSON.parse\\n  // from running unnecesarily on reevaluations:\\n  const store = injectStore(() =>\\n    createStore(null, val ? JSON.parse(val) : undefined)\\n  )\\n\\n  const update = (newVal: any) => {\\n    store.setState(newVal)\\n    localStorage.setItem(key, JSON.stringify(newVal))\\n  }\\n\\n  return api(store).setExports({ update })\\n})\\n\\n// this atom\'s state now persists across page reloads:\\nconst usernameAtom = atom(\'username\', () => {\\n  const [storedName, { update }] = injectAtomState(localStorageAtom, [\\n    \'username1\', // <- the localStorage key\\n  ])\\n\\n  return api(storedName || \'\').setExports({ update })\\n})\\n\\nfunction Username() {\\n  const [state, { update }] = useAtomState(usernameAtom)\\n\\n  return (\\n    <div>\\n      <input onChange={event => update(event.target.value)} value={state} />\\n      <button onClick={() => location.reload()}>Refresh page</button>\\n    </div>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We could also use an injector."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=persistence/injector resultVar=Username","live":true,"ecosystemId":"persistence/injector","resultVar":"Username"},"const injectLocalStorage = (key: string, defaultVal: any) => {\\n  const val = localStorage.getItem(key)\\n\\n  // we\'re using the function overload of `injectStore` to prevent JSON.parse\\n  // from running unnecesarily on reevaluations:\\n  const store = injectStore(() =>\\n    createStore(null, val ? JSON.parse(val) : defaultVal)\\n  )\\n\\n  const update = (newVal: any) => {\\n    store.setState(newVal)\\n    localStorage.setItem(key, JSON.stringify(newVal))\\n  }\\n\\n  return [store, update] as const\\n}\\n\\n// this atom\'s state now persists across page reloads:\\nconst usernameAtom = atom(\'username\', () => {\\n  const [store, update] = injectLocalStorage(\'username2\', \'\')\\n\\n  return api(store).setExports({ update })\\n})\\n\\nfunction Username() {\\n  const [state, { update }] = useAtomState(usernameAtom)\\n\\n  return (\\n    <div>\\n      <input onChange={event => update(event.target.value)} value={state} />\\n      <button onClick={() => location.reload()}>Refresh page</button>\\n    </div>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Yep, these approaches are very similar."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"ecosystem-persistence"},"Ecosystem Persistence"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can get a snapshot of the state of all atoms in an ecosystem with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.inspectInstanceValues()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom, createEcosystem } from \'@zedux/react\'\\n\\nconst exampleAtom = atom(\'example\', () => \'Hello, world!\')\\nconst ecosystem = createEcosystem({ id: \'root\' })\\necosystem.getInstance(exampleAtom)\\n\\nconst snapshot = ecosystem.inspectInstanceValues() // { example: \'Hello, world!\' }\\nconst serialized = JSON.stringify(snapshot)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This may be all you need. However, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"inspectInstanceValues")," is very \\"dumb\\" - it doesn\'t do anything special to transform the state, it just returns it as-is. Since atoms can hold anything, you may have a situation where you\'re storing non-serializable values (namely functions) in atoms. Data types from Immutable.js, for example, require an extra step to serialize/deserialize values."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For these atoms you have two options:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Skip the non-serializable atom"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Transform the atom\'s value to something that can be serialized.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ecosystems have a method that\'s better suited for both of these:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ecosystemdehydrate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"ecosystem.dehydrate()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Like ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".inspectInstanceValues()"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".dehydrate()")," returns an object mapping atom instance keyHashes to their current value. But ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".dehydrate()")," does a little more magic."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can blacklist atoms you don\'t want to dehydrate by passing ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"exclude")," and/or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"excludeFlags")," options:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=excludes-example resultVar=snapshot","live":true,"ecosystemId":"excludes-example","resultVar":"snapshot"},"const skippedAtom = atom(\'skipped\', \':(\', { flags: [\'no-persist\'] })\\nconst alsoSkippedAtom = atom(\'alsoSkipped\', \':O\')\\nconst persistedAtom = atom(\'persisted\', \':)\')\\n\\nconst ecosystem = createEcosystem({ id: \'exludes-example\' })\\necosystem.getInstance(skippedAtom)\\necosystem.getInstance(alsoSkippedAtom)\\necosystem.getInstance(persistedAtom)\\n\\nconst snapshot = ecosystem.dehydrate({\\n  exclude: [alsoSkippedAtom],\\n  excludeFlags: [\'no-persist\'],\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Similarly, you can specify a whitelist of atoms you want to be dehydrated by passing ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"include")," and/or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"includeFlags")," options:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=includes-example resultVar=snapshot","live":true,"ecosystemId":"includes-example","resultVar":"snapshot"},"const skippedAtom = atom(\'skipped\', \':(\')\\nconst persistedAtom = atom(\'persisted\', \':)\', { flags: [\'persist\'] })\\nconst alsoPersistedAtom = atom(\'alsoPersisted\', \':D\')\\n\\nconst ecosystem = createEcosystem({ id: \'includes-example\' })\\necosystem.getInstance(skippedAtom)\\necosystem.getInstance(persistedAtom)\\necosystem.getInstance(alsoPersistedAtom)\\n\\nconst snapshot = ecosystem.dehydrate({\\n  include: [alsoPersistedAtom],\\n  includeFlags: [\'persist\'],\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Excludes take precedence over includes if you pass both."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"dehydrate-atom-config"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"dehydrate")," Atom Config"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be configured with a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"dehydrate")," config option:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', () => initialState, {\\n  dehydrate: state => transform(state),\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.dehydrate()")," calls ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"dehydrate")," when specified to transform the state of individual atom instances."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s an example of an atom whose value is a JS Map, which can\'t be directly stringified. We use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"dehydrate")," atom config option to tell Zedux how to transform this atom instance\'s state to a serializable value for dehydration:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=persistence/dehydrate resultVar=Dehydrator","live":true,"ecosystemId":"persistence/dehydrate","resultVar":"Dehydrator"},"const transformingAtom = atom(\\n  \'transforming\',\\n  () => {\\n    const store = injectStore(new Map([[\'counter\', 0]]))\\n\\n    injectEffect(() => {\\n      const handle = setInterval(() => {\\n        store.setState(state =>\\n          new Map(state).set(\'counter\', state.get(\'counter\') + 1)\\n        )\\n      }, 1000)\\n\\n      return () => clearInterval(handle)\\n    })\\n\\n    return store\\n  },\\n  // turn the map into a JS object for serialization:\\n  { dehydrate: state => Object.fromEntries(state.entries()) }\\n)\\n\\nfunction Dehydrator() {\\n  useAtomValue(transformingAtom) // just to instantiate it for this example\\n  const ecosystem = useEcosystem()\\n  const [dehydration, setDehydration] = useState()\\n\\n  return (\\n    <>\\n      <pre>{dehydration}</pre>\\n      <button\\n        onClick={() =>\\n          setDehydration(JSON.stringify(ecosystem.dehydrate(), null, 2))\\n        }\\n      >\\n        Dehydrate!\\n      </button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now calls to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.dehydrate()")," call the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"dehydrate")," atom config function to transform the state of all instances of the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"transforming")," atom."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ecosystemhydrate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"ecosystem.hydrate()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The inverse of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.dehydrate()"),". After you get a state snapshot, use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.hydrate()")," to restore it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=hydrate-example resultVar=output","live":true,"ecosystemId":"hydrate-example","resultVar":"output"},"const fooAtom = atom(\'foo\', 1)\\nconst barAtom = atom(\'bar\', 2)\\n\\nconst ecosystem = createEcosystem({ id: \'hydrate-example\' })\\nconst fooInstance = ecosystem.getInstance(fooAtom)\\nconst barInstance = ecosystem.getInstance(barAtom)\\n\\nconst snapshot1 = ecosystem.dehydrate()\\n\\nfooInstance.setState(3) // change foo\'s state from 1 to 3\\nconst snapshot2 = ecosystem.dehydrate()\\n\\necosystem.hydrate(snapshot1) // restore the initial snapshot\\nconst snapshot3 = ecosystem.dehydrate()\\n\\nconst output = { snapshot1, snapshot2, snapshot3 }\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"After hydration, any newly-initialized atom instances that have a matching key in the hydrated snapshot will receive their hydrated state after initializing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=atom-hydrate-example resultVar=snapshot","live":true,"ecosystemId":"atom-hydrate-example","resultVar":"snapshot"},"const hydrateMe = atom(\'hydrateMe\', (id: number) => {\\n  return injectStore(\'non-hydrated state\')\\n})\\n\\nconst ecosystem = createEcosystem({ id: \'atom-hydrate-example\' })\\necosystem.hydrate({ \'hydrateMe-[0]\': \'hydrated state\' })\\n\\n// these instances are created after hydration:\\necosystem.getInstance(hydrateMe, [0])\\necosystem.getInstance(hydrateMe, [1])\\n\\nconst snapshot = ecosystem.inspectInstanceValues()\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Hydration will also immediately update any existing atom instances with keyHashes in the snapshot. Pass ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"{ retroactive: false }")," as the second parameter to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.hydrate()")," to disable this. With this option, only instances that are created after hydration will have their state hydrated."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live ecosystemId=no-retroactive-example resultVar=snapshot","live":true,"ecosystemId":"no-retroactive-example","resultVar":"snapshot"},"const hydrateMe = atom(\'hydrateMe\', (id: number) => {\\n  return injectStore(\'non-hydrated state\')\\n})\\n\\nconst ecosystem = createEcosystem({ id: \'no-retroactive-example\' })\\n\\n// these instances are created before hydration, so won\'t be updated:\\necosystem.getInstance(hydrateMe, [0])\\necosystem.getInstance(hydrateMe, [1])\\n\\necosystem.hydrate({ \'hydrateMe-[0]\': \'hydrated state\' }, { retroactive: false })\\n\\nconst snapshot = ecosystem.inspectInstanceValues()\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"hydrate-atom-config"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"hydrate")," Atom Config"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be configured with a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"hydrate")," transformation function:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', initialState, {\\n  hydrate: rawVal => transform(rawVal),\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This can be used to transform dehydrated values back to non-serializable form. Let\'s return to our JS Map example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=persistence/hydrate resultVar=Dehydrator","live":true,"ecosystemId":"persistence/hydrate","resultVar":"Dehydrator"},"const transformingAtom = atom(\\n  \'transforming\',\\n  () => {\\n    const store = injectStore(new Map([[\'counter\', 0]]))\\n\\n    injectEffect(() => {\\n      const handle = setInterval(() => {\\n        store.setState(state =>\\n          new Map(state).set(\'counter\', state.get(\'counter\') + 1)\\n        )\\n      }, 1000)\\n\\n      return () => clearInterval(handle)\\n    })\\n\\n    return store\\n  },\\n  // transform the map to and from a JS object:\\n  {\\n    dehydrate: state => Object.fromEntries(state.entries()),\\n    hydrate: rawState => new Map(Object.entries(rawState)),\\n  }\\n)\\n\\nfunction Counter() {\\n  const map = useAtomValue(transformingAtom)\\n\\n  return <div>Counter: {map.get(\'counter\')}</div>\\n}\\n\\nfunction Dehydrator() {\\n  const ecosystem = useEcosystem()\\n  const [dehydration, setDehydration] = useState()\\n\\n  return (\\n    <>\\n      <Counter />\\n      <pre>{dehydration}</pre>\\n      <button\\n        onClick={() =>\\n          setDehydration(JSON.stringify(ecosystem.dehydrate(), null, 2))\\n        }\\n      >\\n        Dehydrate!\\n      </button>\\n      {dehydration && (\\n        <button onClick={() => ecosystem.hydrate(JSON.parse(dehydration))}>\\n          Hydrate!\\n        </button>\\n      )}\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"store-hydration"},"Store Hydration"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The default hydration flow hydrates the store after the atom instance\'s initial evaluation ends. This means that if your state factory\'s main store was injected without ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"subscribe: false"),", it will immediately trigger a second evaluation."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is usually fine. But of course you can control this behavior with 2 steps:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ol",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ol"},"Hydrate the injected store\'s state yourself."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ol"},"Tell Zedux not to automatically hydrate this atom.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To hydrate the store\'s state, use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"hydrate")," option of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/injectors/injectStore"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectStore")),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectStore(defaultValue, { hydrate: true })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The store\'s state will be set to the hydration matching the current atom instance, after passing it to the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"hydrate")," atom config option (if any) to transform the value. If there is no hydration for the current atom instance, passing ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"{ hydrate: true }")," does nothing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live resultVar=output","live":true,"resultVar":"output"},"const myAtom = atom(\\n  \'myKey\',\\n  () => {\\n    const store = injectStore(\'default\', { hydrate: true })\\n  },\\n  { hydrate: hydration => `${hydration} and transformed!` }\\n)\\n\\nconst ecosystem = createEcosystem({ id: \'hydrate-flow-example\' })\\necosystem.hydrate({ myKey: \'hydrated\' })\\n\\nconst output = ecosystem.get(myAtom)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When the function overload is used, the hydration will be passed to your ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"storeFactory")," function. It\'s up to you to use the hydration to set your store\'s initial state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const store = injectStore(\\n  hydration => createStore(null, hydration ?? defaultValue),\\n  { hydrate: true }\\n)\\n// (this specific example is exactly equivalent to:)\\nconst store = injectStore(defaultValue, { hydrate: true })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If there is no hydration, this parameter will be undefined."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now for the 2nd step:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"manualhydration"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"manualHydration")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Set this atom config option to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"true")," to prevent Zedux from automatically hydrating instances of the atom. You\'ll usually want to pair this with passing ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"hydrate: true")," to a single ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectStore")," in the atom\'s state factory."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\\n  \'example\',\\n  () => {\\n    const store = injectStore(defaultValue, { hydrate: true })\\n    const internalStore = injectStore() // can inject other, non-hydrated stores\\n\\n    return store // Zedux won\'t hydrate this store\'s state after init now\\n  },\\n  {\\n    manualHydration: true, // prevent automatic hydration\\n  }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"consumehydrations"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"consumeHydrations")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"By default, once a hydration has been set, it stays in the ecosystem forever. You can override the hydration with a new one. For example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"ecosystem.hydrate({ key: \'hydrated value\' })\\necosystem.hydrate({ key: \'different value\' }) // overrides the first hydration\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But there\'s no way to undo the hydration (currently). This means that every time an atom instance is destroyed/recreated it will be hydrated again. Sometimes you\'ll only want to hydrate once and then never again. You can accomplish this with the ecosystem-level and atom-level ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"consumeHydrations")," config option:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const ecosystem = createEcosystem({\\n  consumeHydrations: true,\\n  id: \'root\',\\n})\\n\\n// or\\n<EcosystemProvider consumeHydrations id=\\"root\\">\\n  {children}\\n</EcosystemProvider>\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"With this set at the ecosystem level, all atoms in the ecosystem will \\"consume\\" their hydration the first time they hydration is used, removing the hydration from the ecosystem. Set it at the atom level to override the ecosystem\'s behavior for a particular atom."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live resultVar=output","live":true,"resultVar":"output"},"const exampleAtom = atom(\\n  \'example\',\\n  () => injectStore(\'no hydration\', { hydrate: true }), // consume the hydration\\n  { consumeHydrations: true }\\n)\\n\\nconst ecosystem = createEcosystem({ id: \'consume-hydration-example\' })\\necosystem.hydrate({ example: \'hydrated state!\' })\\n\\nlet instance = ecosystem.getInstance(exampleAtom)\\nconst firstState = instance.getState()\\n\\ninstance.destroy()\\ninstance = ecosystem.getInstance(exampleAtom) // hydration is now gone\\n\\nconst secondState = instance.getState()\\nconst output = { firstState, secondState }\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Even though we\'re not using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"manualHydration"),", this example atom will not evaluate twice. The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectStore")," call will consume the hydration immediately, so it won\'t be there when Zedux tries to hydrate the store after the initial evaluation.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"With this flag set, hydrations will also be consumed for atom instances that are hydrated immediately when calling ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.hydrate()")," without ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"{ retroactive: false }"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"reactivity-via-plugins"},"Reactivity Via Plugins"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"localStorage")," single atom examples we gave at the beginning of this page were beautifully reactive - they would persist the atom\'s state immediately on state change. None of our ecosystem examples do that. We have to manually call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.dehydrate()")," e.g. in response to a button press or on an interval."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"By default, ecosystems don\'t receive any kind of update when individual atom instances change state. This is by design, for performance reasons. However, it is possible to turn this behavior on with plugins."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Make sure your plugin turns on the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"stateChanged")," mod."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { createEcosystem, ZeduxPlugin } from \'@zedux/react\'\\n\\nconst plugin = new ZeduxPlugin({\\n  registerEcosystem: ecosystem => {\\n    const subscription = ecosystem.modsMessageBus.subscribe({\\n      effects: ({ action }) => {\\n        if (action.type !== ZeduxPlugin.actions.stateChanged.type) return\\n\\n        const snapshot = ecosystem.dehydrate({ includeFlags: [\'persist\'] })\\n        localStorage.setItem(\'snapshot\', snapshot)\\n      },\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  },\\n})\\n\\nplugin.modsStore.setState({ stateChanged: true })\\n\\nconst ecosystem = createEcosystem({ id: \'root\' })\\necosystem.registerPlugin(plugin)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.dehydrate()")," to get a state snapshot of all or some of the atoms in the ecosystem.",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"li"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"dehydrate")," atom config option to transform the state of individual atoms to a serializable or shortened form."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.hydrate()")," to restore a state snapshot.",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"li"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"hydrate")," atom config option to transform hydrations for individual atoms."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"{ hydrate: true }")," ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectStore")," option sets the store\'s initial state to the hydrated value."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"manualHydration")," atom config option to prevent Zedux from automatically hydrating individual atoms."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"consumeHydrations")," atom config or ecosystem config options to prevent atoms from being hydrated again after being destroyed and recreated."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use a plugin with the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"stateChanged")," mod to reactively persist snapshots.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now we know the basics of persistence. Let\'s use these tools to implement ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"ssr"},"SSR"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7739\n')}}]);