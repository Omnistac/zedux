(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[1139],{3528:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return r},metadata:function(){return o},toc:function(){return c},default:function(){return d}});var a=n(4034),s=n(9973),i=(n(7294),n(3905)),r={id:"AsyncStore",title:"AsyncStore"},o={unversionedId:"api/types/AsyncStore",id:"api/types/AsyncStore",isDocsHomePage:!1,title:"AsyncStore",description:"An AsyncStore is a high-level, preconfigured Zedux store that tracks the status and data of an asynchronous operation. It comes configured with a state machine and other reducers that respond to the asyncUtils actions.",source:"@site/docs/api/types/AsyncStore.mdx",sourceDirName:"api/types",slug:"/api/types/AsyncStore",permalink:"/zedux/docs/api/types/AsyncStore",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/AsyncStore.mdx",version:"current",frontMatter:{id:"AsyncStore",title:"AsyncStore"},sidebar:"react",previous:{title:"Actor",permalink:"/zedux/docs/api/types/Actor"},next:{title:"AtomConfig",permalink:"/zedux/docs/api/types/AtomConfig"}},c=[{value:"Definition",id:"definition",children:[{value:"<code>data</code>",id:"data",children:[]},{value:"<code>error</code>",id:"error",children:[]},{value:"<code>isError</code>",id:"iserror",children:[]},{value:"<code>isIdle</code>",id:"isidle",children:[]},{value:"<code>isLoading</code>",id:"isloading",children:[]},{value:"<code>isSuccess</code>",id:"issuccess",children:[]},{value:"<code>prevStatus</code>",id:"prevstatus",children:[]},{value:"<code>status</code>",id:"status",children:[]}]}],l={toc:c};function d(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An AsyncStore is a high-level, preconfigured ",(0,i.kt)("a",{parentName:"p",href:"../classes/Store"},"Zedux store")," that tracks the status and data of an asynchronous operation. It comes configured with a ",(0,i.kt)("a",{parentName:"p",href:"../../walkthrough/state-machines"},"state machine")," and other reducers that respond to the ",(0,i.kt)("a",{parentName:"p",href:"../factories/createAsyncStore#actions"},"asyncUtils actions"),"."),(0,i.kt)("p",null,"An AsyncStore is created by and returned from ",(0,i.kt)("a",{parentName:"p",href:"../injectors/injectAsyncEffect"},(0,i.kt)("inlineCode",{parentName:"a"},"injectAsyncEffect"))," which controls the state of the store for you. You can also create and control these manually via ",(0,i.kt)("a",{parentName:"p",href:"../factories/createAsyncStore"},(0,i.kt)("inlineCode",{parentName:"a"},"asyncUtils.createAsyncStore()")),"."),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface AsyncState<T> {\n  data?: T\n  error?: Error\n  isError: boolean\n  isIdle: boolean\n  isLoading: boolean\n  isSuccess: boolean\n  prevStatus?: AsyncStatus\n  status: AsyncStatus\n}\n\nenum AsyncStatus {\n  Error = 'Error',\n  Idle = 'Idle',\n  Loading = 'Loading',\n  Success = 'Success',\n}\n\ntype AsyncStore<T> = Store<AsyncState<T>>\n")),(0,i.kt)("h3",{id:"data"},(0,i.kt)("inlineCode",{parentName:"h3"},"data")),(0,i.kt)("p",null,"Will be set to the async flow's result. If the async flow represents a promise, this is the resolved value."),(0,i.kt)("p",null,"When controlling an async store manually, set this by dispatching the ",(0,i.kt)("a",{parentName:"p",href:"../factories/createAsyncStore#loadsuccess"},(0,i.kt)("inlineCode",{parentName:"a"},"asyncUtils.actions.loadSuccess()"))," action to the store."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { asyncUtils } from '@zedux/react'\n\nconst store = asyncUtils.createAsyncStore()\nstore.dispatch(asyncUtils.actions.load()) // transition state machine\n\nmyPromise.then(value => {\n  store.dispatch(asyncUtils.actions.loadSuccess(value))\n})\n")),(0,i.kt)("h3",{id:"error"},(0,i.kt)("inlineCode",{parentName:"h3"},"error")),(0,i.kt)("p",null,"Will be set to any error thrown by the async flow. If the async flow represents a promise, this is the rejection reason."),(0,i.kt)("p",null,"When controlling an async store manually, set this by dispatching the ",(0,i.kt)("a",{parentName:"p",href:"../factories/createAsyncStore#loaderror"},(0,i.kt)("inlineCode",{parentName:"a"},"asyncUtils.actions.loadError()"))," action to the store."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { asyncUtils } from '@zedux/react'\n\nconst store = asyncUtils.createAsyncStore()\nstore.dispatch(asyncUtils.actions.load()) // transition state machine\n\nmyPromise.catch(err => {\n  store.dispatch(asyncUtils.actions.loadError(err))\n})\n")),(0,i.kt)("h3",{id:"iserror"},(0,i.kt)("inlineCode",{parentName:"h3"},"isError")),(0,i.kt)("p",null,"An alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"status === asyncUtils.states.Error"),". Will be set to true when the ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," state machine transitions from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Loading")," state to ",(0,i.kt)("inlineCode",{parentName:"p"},"Error")," and set to false when it transitions away."),(0,i.kt)("h3",{id:"isidle"},(0,i.kt)("inlineCode",{parentName:"h3"},"isIdle")),(0,i.kt)("p",null,"An alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"status === asyncUtils.states.Idle"),". Set to true initially. ",(0,i.kt)("inlineCode",{parentName:"p"},"injectAsyncEffect")," will transition the machine to ",(0,i.kt)("inlineCode",{parentName:"p"},"Loading")," before returning the store."),(0,i.kt)("h3",{id:"isloading"},(0,i.kt)("inlineCode",{parentName:"h3"},"isLoading")),(0,i.kt)("p",null,"An alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"status === asyncUtils.states.Loading"),". Will be set to true when the ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," state machine transitions from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Idle")," state to ",(0,i.kt)("inlineCode",{parentName:"p"},"Loading")," and set to false when it transitions away."),(0,i.kt)("h3",{id:"issuccess"},(0,i.kt)("inlineCode",{parentName:"h3"},"isSuccess")),(0,i.kt)("p",null,"An alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"status === asyncUtils.states.Success"),". Will be set to true when the ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," state machine transitions from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Loading")," state to ",(0,i.kt)("inlineCode",{parentName:"p"},"Success")," and set to false when it transitions away."),(0,i.kt)("h3",{id:"prevstatus"},(0,i.kt)("inlineCode",{parentName:"h3"},"prevStatus")),(0,i.kt)("p",null,"Will be set to the status enum value that the ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," state machine was in prior to reaching its current state. Will be ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," initially."),(0,i.kt)("h3",{id:"status"},(0,i.kt)("inlineCode",{parentName:"h3"},"status")),(0,i.kt)("p",null,"A state machine with the following transitions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const asyncMachine = createMachine<AsyncStatus>(\n  idleState.on(load, loadingState),\n  loadingState\n    .on(loadSuccess, successState)\n    .on(loadError, errorState)\n    .on(cancel, idleState),\n  successState.on(reset, idleState),\n  errorState.on(reset, idleState)\n)\n")),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"../factories/createAsyncStore#actions"},"async actions"),"."))}d.isMDXComponent=!0}}]);