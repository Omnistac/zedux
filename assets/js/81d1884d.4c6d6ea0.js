"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[3249],{6229:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'react-query-comparison\',title:\'React Query Comparison\'};var contentTitle=undefined;var metadata={"unversionedId":"about/react-query-comparison","id":"about/react-query-comparison","title":"React Query Comparison","description":"While Zedux doesn\'t (yet!) provide helpers for query operations (infinite scrolling, pagination, etc), Zedux is currently patterned after React Query more than any other library (yes, more than Redux or Recoil). React Query\'s cache management is unparalleled. So Zedux\' atomic model borrows a lot of ideas from it.","source":"@site/docs/about/react-query-comparison.mdx","sourceDirName":"about","slug":"/about/react-query-comparison","permalink":"/zedux/docs/about/react-query-comparison","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/about/react-query-comparison.mdx","tags":[],"version":"current","frontMatter":{"id":"react-query-comparison","title":"React Query Comparison"},"sidebar":"react","previous":{"title":"Redux Comparison","permalink":"/zedux/docs/about/redux-comparison"},"next":{"title":"Quick Start","permalink":"/zedux/docs/walkthrough/quick-start"}};var assets={};var toc=[{value:\'Queries\',id:\'queries\',level:2},{value:\'Dependent Queries\',id:\'dependent-queries\',level:2},{value:\'Mutations\',id:\'mutations\',level:2},{value:\'Invalidation\',id:\'invalidation\',level:2},{value:\'QueryClient\',id:\'queryclient\',level:2},{value:\'Stream Support\',id:\'stream-support\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"While Zedux doesn\'t (yet!) provide helpers for query operations (infinite scrolling, pagination, etc), Zedux is currently patterned after React Query more than any other library (yes, more than Redux or Recoil). React Query\'s cache management is unparalleled. So Zedux\' atomic model borrows a lot of ideas from it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"However, the purpose of Zedux is very different from React Query. React Query is designed around promises - managing their state, side effects, and result caches. Zedux is designed to manage both application state (a la Redux/Recoil) and cached server data. Zedux has ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"some")," special features for handling promises, but currently very little compared React Query."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"queries"},"Queries"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Structurally, Zedux ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Atom"},"atoms")," are very similar to React Query ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://react-query.tanstack.com/guides/queries"},"queries"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Query keys and atom keys are constructed from a \\"deterministic\\" hash of their parameters."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"For destroying stale instances: Atoms have ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/classes/Atom#ttl"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ttl")),". Queries have ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"cacheTime"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"For suspense: Atoms have ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/classes/AtomApi#setpromise"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},".setPromise()")),". Queries have ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"suspense"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"For tracking promise state: Zedux has query atoms and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/injectors/injectPromise"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectPromise()")),". Queries track promise state by default.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A side-by-side comparison, using suspense:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// React Query:\\nfunction usePosts() {\\n  return useQuery(\\n    \'posts\',\\n    async () => {\\n      const { data } = await axios.get(\'/posts\')\\n      return data\\n    },\\n    { suspense: true }\\n  )\\n}\\n// ... in a component:\\nconst { data } = usePosts()\\n\\n// Zedux:\\nconst postsAtom = atom(\'posts\', () => {\\n  const fetchPosts = async () => {\\n    const { data } = await axios.get(\'/posts\')\\n    return data\\n  }\\n\\n  // `return api(promise)` is how you make query atoms in Zedux\\n  return api(fetchPosts())\\n})\\n// ... in a component:\\nconst { data } = useAtomValue(postsAtom)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Note that atom state factories can\'t be asynchronous functions. This is because the function body is used to dynamically inject dependencies, building Zedux\' powerful DI graph."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"dependent-queries"},"Dependent Queries"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In React Query, it\'s up to components to specify query dependencies by passing the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"enabled")," option to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useQuery"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const { data: user } = useQuery([\'user\', email], getUserByEmail)\\n\\nconst userId = user?.id\\n\\nconst { isIdle, data: projects } = useQuery(\\n  [\'projects\', userId],\\n  getProjectsByUser,\\n  { enabled: !!userId }\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In Zedux, atoms are more autonomous. They specify their own dependencies."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const userProjectsAtom = atom(\'userProjects\', (email: string) => {\\n  const user = injectAtomValue(userByEmail, [email])\\n\\n  const userId = user?.id\\n\\n  return injectPromise(() => getProjectsByUser(userId), [userId])\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux doesn\'t have an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"idle")," state (currently). The above example would be ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"success")," until ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"userIdAtom")," updates with a value. If you need an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"idle")," state, open an issue and let\'s discuss!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"mutations"},"Mutations"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux doesn\'t have a concept of mutations. Mutation functions are typically exported from atoms, but many approaches are possible. Here\'s an example grouping query and mutation operations together in a single atom:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const usersAtom = atom(\'users\', () => {\\n  // a \\"query\\"\\n  const fetchUsers = async () => {\\n    const { data } = await axios.get(\'/users\')\\n    return data\\n  }\\n\\n  const promiseApi = injectPromise(fetchUsers, [])\\n\\n  // a \\"mutation\\"\\n  const updateUser = (id: string, user: User) => {\\n    // we could also easily add an optimistic update right here\\n    await axios.post(`/users/${id}`, user)\\n\\n    // we can do a full refetch (this mimics React Query most closely):\\n    promiseApi.store.setState(await fetchUsers()) // essentially an invalidation\\n    // or just update the record we know changed:\\n    promiseApi.store.setStateDeep({ [id]: user })\\n    // moving that above the .post() is all it takes to do an optimistic update\\n  }\\n\\n  // The query controls the state of this atom. The mutation is exported:\\n  return promiseApi.addExports({ updateUser })\\n})\\n// ... in a component:\\nconst [{ data }, { updateUser }] = useAtomState(usersAtom)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"invalidation"},"Invalidation"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Because of the mutation differences, Zedux and React Query also have very different concepts of invalidation. React Query is designed around invalidating caches manually with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"invalidateQueries()"),", especially after mutations."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux allows manual invalidation via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance#invalidate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"instance.invalidate()")),", but use cases for it are rare. Instead, the two approaches demonstrated in the above ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"usersAtom")," example are common ways to go about it:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Precisely update state and let updates cascade through the atom graph, automatically rerunning atom state factories/",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectEffect")," effects."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Manually rerun \\"query\\" functions like in the above ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"fetchUsers")," example and directly \\"invalidate\\" state via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"store.setState()"),".")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"queryclient"},"QueryClient"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem"},"ecosystems")," are patterned after React Query\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://react-query.tanstack.com/reference/QueryClient"},"QueryClient"),". They both create autonomous environments for managing ","[atoms|queries]"," that can be used outside React and are especially useful for testing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"stream-support"},"Stream Support"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"React Query can work with sockets without too much hassle. But React Query is designed for promises. Zedux atoms are designed to support any asynchronous architecture."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This means that (for now) Zedux doesn\'t provide any promise-specific helpers like React Query\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"onSuccess"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"refetchOnWindowFocus"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"retryDelay"),", etc. The upside is, working with sockets/data streaming paradigms is more natural with Zedux."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { atom, injectAtomValue, injectEffect, injectStore } from \'@zedux/react\'\\nimport { io } from \'socket.io-client\'\\n\\nconst socketAtom = atom(\'socket\', () => io())\\n\\nconst messagesAtom = atom(\'messages\', () => {\\n  const socket = injectAtomValue(socketAtom)\\n  const store = injectStore([])\\n\\n  injectEffect(() => {\\n    const handler = message => {\\n      store.setState(messages => [...messages, message])\\n    }\\n\\n    socket.on(\'message\', handler)\\n\\n    return () => socket.off(\'message\', handler)\\n  }, [socket])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is more flexible, but can require more boilerplate for promises. Most functionality can be abstracted, of course. We may provide a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"@zedux/query")," package someday that provides a full suite of tools for handling promises."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6229\n')}}]);