(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9540],{5532:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return c},default:function(){return d}});var a=n(4034),s=n(9973),r=(n(7294),n(3905)),o={id:"createAsyncStore",title:"createAsyncStore"},i={unversionedId:"api/factories/createAsyncStore",id:"api/factories/createAsyncStore",isDocsHomePage:!1,title:"createAsyncStore",description:"`ts",source:"@site/docs/api/factories/createAsyncStore.mdx",sourceDirName:"api/factories",slug:"/api/factories/createAsyncStore",permalink:"/zedux/docs/api/factories/createAsyncStore",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/factories/createAsyncStore.mdx",version:"current",frontMatter:{id:"createAsyncStore",title:"createAsyncStore"},sidebar:"react",previous:{title:"createActor",permalink:"/zedux/docs/api/factories/createActor"},next:{title:"createReducer",permalink:"/zedux/docs/api/factories/createReducer"}},c=[{value:"Definitions",id:"definitions",children:[]},{value:"<code>actions</code>",id:"actions",children:[{value:"<code>cancel</code>",id:"cancel",children:[]},{value:"<code>load</code>",id:"load",children:[]},{value:"<code>loadSuccess</code>",id:"loadsuccess",children:[]},{value:"<code>loadError</code>",id:"loaderror",children:[]},{value:"<code>reset</code>",id:"reset",children:[]}]},{value:"<code>createAsyncStore</code>",id:"createasyncstore",children:[]},{value:"<code>states</code>",id:"states",children:[]}],l={toc:c};function d(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { asyncUtils } from '@zedux/react'\n\nasyncUtils.createAsyncStore()\n")),(0,r.kt)("p",null,"A factory for creating ",(0,r.kt)("a",{parentName:"p",href:"../types/AsyncStore"},"AsyncStores"),". This factory lives on an exported ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncUtils")," namespace, along with the actions and states that can be used to change and inspect the state of async stores."),(0,r.kt)("h2",{id:"definitions"},"Definitions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"enum AsyncStatus {\n  Error = 'Error',\n  Idle = 'Idle',\n  Loading = 'Loading',\n  Success = 'Success',\n}\n\ninterface AsyncUtils {\n  actions: {\n    cancel: Action\n    load: Action\n    loadSuccess: Action<any>\n    loadError: Action<Error>\n    reset: Action\n  }\n  createAsyncStore: () => AsyncStore\n  states: AsyncStatus\n}\n")),(0,r.kt)("h2",{id:"actions"},(0,r.kt)("inlineCode",{parentName:"h2"},"actions")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncUtils.actions")," property contains many actions that can be used to change the state of the store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const store = asyncUtils.createAsyncStore()\n\n// transition `status` from `Idle` to `Loading`.\nstore.dispatch(asyncUtils.actions.load())\n")),(0,r.kt)("h3",{id:"cancel"},(0,r.kt)("inlineCode",{parentName:"h3"},"cancel")),(0,r.kt)("p",null,"Transitions the async store's ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," state machine from ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Idle"),". A subscriber can listen for this action and cancel requests."),(0,r.kt)("h3",{id:"load"},(0,r.kt)("inlineCode",{parentName:"h3"},"load")),(0,r.kt)("p",null,"Transitions the async store's ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," state machine from ",(0,r.kt)("inlineCode",{parentName:"p"},"Idle")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading"),"."),(0,r.kt)("h3",{id:"loadsuccess"},(0,r.kt)("inlineCode",{parentName:"h3"},"loadSuccess")),(0,r.kt)("p",null,"Transitions the async store's ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," state machine from ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Success"),". Sets the store's ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property to the action's payload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"asyncStore.dispatch(asyncUtils.actions.loadSuccess('yay!'))\nasyncStore.getState().data // 'yay!'\n")),(0,r.kt)("h3",{id:"loaderror"},(0,r.kt)("inlineCode",{parentName:"h3"},"loadError")),(0,r.kt)("p",null,"Transitions the async store's ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," state machine from ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Error"),". Sets the store's ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," property to the action's payload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"asyncStore.dispatch(asyncUtils.actions.loadError(new Error(':(')))\nasyncStore.getState().error.message // ':('\n")),(0,r.kt)("h3",{id:"reset"},(0,r.kt)("inlineCode",{parentName:"h3"},"reset")),(0,r.kt)("p",null,"Transitions the async store's ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," state machine from ",(0,r.kt)("inlineCode",{parentName:"p"},"Success")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Error")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Idle"),"."),(0,r.kt)("h2",{id:"createasyncstore"},(0,r.kt)("inlineCode",{parentName:"h2"},"createAsyncStore")),(0,r.kt)("p",null,"The actual factory. Doesn't take any parameters. Returns an ",(0,r.kt)("a",{parentName:"p",href:"../types/AsyncStore"},"AsyncStore"),"."),(0,r.kt)("h2",{id:"states"},(0,r.kt)("inlineCode",{parentName:"h2"},"states")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncUtils.states")," property is a reference to the ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncStatus")," enum. It has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"asyncUtils.states.Error")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"asyncUtils.states.Idle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"asyncUtils.states.Loading")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"asyncUtils.states.Success"))),(0,r.kt)("p",null,"These can be used to check the state of the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const asyncStore = asyncUtils.createAsyncStore()\n\nasyncStore.dispatch(asyncUtils.actions.load())\n\nasyncStore.getState().status === asyncUtils.states.Loading // true\n")))}d.isMDXComponent=!0}}]);