"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[312],{903:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'the-graph\',title:\'The Graph\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/the-graph","id":"walkthrough/the-graph","title":"The Graph","description":"As you use atoms inside an ecosystem, Zedux tracks dependencies and forms a graph that it uses to efficiently propagate state updates.","source":"@site/docs/walkthrough/the-graph.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/the-graph","permalink":"/zedux/docs/walkthrough/the-graph","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/the-graph.mdx","tags":[],"version":"current","frontMatter":{"id":"the-graph","title":"The Graph"},"sidebar":"react","previous":{"title":"Ecosystems","permalink":"/zedux/docs/walkthrough/ecosystems"},"next":{"title":"Overrides","permalink":"/zedux/docs/walkthrough/overrides"}};var assets={};var toc=[{value:\'Graph Basics\',id:\'graph-basics\',level:2},{value:\'Views\',id:\'views\',level:3},{value:\'Getting the Graph\',id:\'getting-the-graph\',level:2},{value:\'Edges\',id:\'edges\',level:2},{value:\'Dynamic Edges\',id:\'dynamic-edges\',level:3},{value:\'Static Edges\',id:\'static-edges\',level:3},{value:\'Other Properties\',id:\'other-properties\',level:3},{value:\'<code>useAtomValue</code>\',id:\'useatomvalue\',level:2},{value:\'<code>injectAtomValue</code>\',id:\'injectatomvalue\',level:2},{value:\'<code>injectAtomInstance</code>\',id:\'injectatominstance\',level:2},{value:\'Dynamicizing Edges\',id:\'dynamicizing-edges\',level:2},{value:\'Staticizing Edges\',id:\'staticizing-edges\',level:2},{value:\'Instances as Params\',id:\'instances-as-params\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As you use atoms inside an ecosystem, Zedux tracks dependencies and forms a graph that it uses to efficiently propagate state updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"What the graph looks like."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to view the graph."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"The difference between static and dynamic graph edges."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to create the different types of graph edges."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to turn static graph edges into dynamic ones."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"graph-basics"},"Graph Basics"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every node in an ecosystem\'s graph is either:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"An atom instance"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"An AtomSelector (we\'ll learn about these in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"selectors"},"the selectors walkthrough"),")")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"All external dependents like React components also create a \\"pseudo-node\\" that won\'t show up in most graph views."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every atom graph has one or more:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"\\"root\\" nodes - nodes that have no dependencies."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"\\"leaf\\" nodes - nodes that have no internal dependents.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Note that leaf nodes ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"can")," have external dependents (e.g. React components). We usually ignore these pseudo-nodes when inspecting the graph."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"views"},"Views"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When inspecting the graph, sometimes we want to traverse the graph starting from the root nodes, ending at the leaves. Other times we want to start at the leaf nodes and traverse up. And sometimes we want a more normalized structure for programmatically working with the graph."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux provides 3 simple graph \\"views\\" out of the box:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Top-Down - An object containing every root node in the graph. Each node\'s value is an object containing its dependents who, in turn, contain their dependents, and so on till the leaf nodes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Bottom-Up - The inverse of Top-Down. An object containing every leaf node in the graph. Each node\'s value is an object containing its dependencies who, in turn, contain their dependencies, and so on till the root nodes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Flat - An object containing every node in the graph in the top level (no nesting). Each node has a list of dependency strings and a list of dependent strings that point to other keys in the top-level object. This is the only view that shows pseudo-nodes.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"getting-the-graph"},"Getting the Graph"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.viewGraph(\'top-down\')"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.viewGraph(\'bottom-up\')"),", or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.viewGraph(\'flat\')"),". Flat is the default."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=the-graph/getting resultVar=Graph","live":true,"ecosystemId":"the-graph/getting","resultVar":"Graph"},"const parentAtom = atom(\'parent\', () => \'Hello, World!\')\\n\\nconst childAtom = atom(\'child\', () => {\\n  const [state] = injectAtomState(parentAtom)\\n  return state\\n})\\n\\nconst grandchildAtom = atom(\'grandchild\', () => {\\n  const [state] = injectAtomState(childAtom)\\n  return state\\n})\\n\\nfunction Graph() {\\n  useAtomState(grandchildAtom)\\n  const ecosystem = useEcosystem()\\n  const flatGraph = ecosystem.viewGraph(\'flat\') // this is the default\\n  const bottomUpGraph = ecosystem.viewGraph(\'bottom-up\')\\n  const topDownGraph = ecosystem.viewGraph(\'top-down\')\\n\\n  return (\\n    <>\\n      <div>Bottom-Up Graph:</div>\\n      <pre>{JSON.stringify(bottomUpGraph, null, 2)}</pre>\\n      <div>Top-Down Graph:</div>\\n      <pre>{JSON.stringify(topDownGraph, null, 2)}</pre>\\n      <div>Flat Graph (default):</div>\\n      <pre>{JSON.stringify(flatGraph, null, 2)}</pre>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"note"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Every ecosystem also has a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"._graph")," property that references an instance of the internal Graph class. This property is public, but underscore-prefixed to indicate that you ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"probably shouldn\'t")," use it, but can if you need.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"edges"},"Edges"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every time you inject an atom in another atom, you create a dependency on the injected atom. When this happens, Zedux draws an \\"edge\\" in the graph to connect the two nodes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Not all edges are created equal! Some dependencies behave differently depending on how the edge was created."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"dynamic-edges"},"Dynamic Edges"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an edge is dynamic, the dependent will update every time the dependency\'s state changes. This means that if the dependent is a React component, it will rerender every time the dependency\'s state changes. If the dependent is an atom instance or selector, it will reevaluate every time the dependency\'s state changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We already know one hook that creates dynamic edges, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const greetingAtom = atom(\'greeting\', \'Hello, World!\')\\n\\nfunction Greeting() {\\n  // this component will rerender every time greetingAtom\'s state changes\\n  const [greeting, setGreeting] = useAtomState(greetingAtom)\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In the quick start, we also learned about ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomState"),". This injector creates a dynamic edge between two atom instances."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const parentAtom = atom(\'parent\', \'foo\')\\n\\nconst childAtom = atom(\'child\', () => {\\n  // this atom will reevaluate every time parentAtom\'s state changes\\n  const [parent, setParent] = injectAtomState(parentAtom)\\n  ...\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"static-edges"},"Static Edges"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an edge is static, the dependent will ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"not")," update when the dependency\'s state changes. So... what\'s the point of a static edge then?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Static edges inform Zedux that someone depends on the injected atom instance. As long as an atom instance has any dependents, Zedux won\'t try to clean it up. We\'ll learn more about Zedux\' automatable cleanup in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"destruction"},"the destruction walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Static dependents ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"are")," informed when their dependency is force-destroyed. In this case, the static dependent actually will schedule a reevaluation or rerender to create a new instance. Again, we\'ll learn more in the destruction walkthrough."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Static dependents are also informed when their dependency\'s promise changes. More on promises in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense"},"the suspense walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We already know one hook that creates static edges, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const greetingAtom = atom(\'greeting\', \'Hello, World!\')\\n\\nfunction Greeting() {\\n  // this component will _not_ rerender when greetingInstance\'s state changes\\n  const greetingInstance = useAtomInstance(greetingAtom)\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"other-properties"},"Other Properties"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux also tracks whether an edge was created implicitly or explicitly and whether an edge was created internally or externally. You won\'t typically need to worry about these, though you might see them show up in dev tools (e.g. you might see an edge labelled as \\"implicit-internal-dynamic\\" or \\"explicit-external-static\\" or any combination of those flags)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"useatomvalue"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"useAtomValue")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It\'s about time we learned about this hook. This is the simplest way to create a dynamic graph edge in a React component."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { useAtomValue } from \'@zedux/react\'\\n\\nconst someAtom = atom(\'some\', () => \'my state\')\\n\\nfunction MyComponent() {\\n  // these two lines are exactly equivalent:\\n  const val = useAtomValue(someAtom)\\n  const [state] = useAtomState(someAtom)\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"injectatomvalue"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"injectAtomValue")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As you might have guessed, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomValue")," has an injector equivalent for easily creating dynamic graph edges in atoms."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=the-graph/injectAtomValue resultVar=Seconds","live":true,"ecosystemId":"the-graph/injectAtomValue","resultVar":"Seconds"},"const secondsAtom = atom(\'seconds\', () => {\\n  const store = injectStore(0)\\n\\n  injectEffect(() => {\\n    const intervalId = setInterval(() => {\\n      store.setState(state => state + 1)\\n    }, 1000)\\n\\n    return () => clearInterval(intervalId)\\n  }, [])\\n\\n  return store\\n})\\n\\nconst secondsTimesTwoAtom = atom(\'secondsTimesTwo\', () => {\\n  const seconds = injectAtomValue(secondsAtom)\\n\\n  return seconds * 2\\n})\\n\\nfunction Seconds() {\\n  const secondsTimesTwo = useAtomValue(secondsTimesTwoAtom)\\n\\n  return <div>Seconds * 2: {secondsTimesTwo}</div>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"injectatominstance"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"injectAtomInstance")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We learned about ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance")," in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-instances"},"the atom instances walkthrough")," and we just learned that it creates static graph edges. Well it\'s about time we saw this hook\'s injector equivalent."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomInstance")," is the simplest way to create static graph edges in atoms."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=the-graph/injectAtomInstance resultVar=App","live":true,"ecosystemId":"the-graph/injectAtomInstance","resultVar":"App"},"// we\'ll use params to create multiple instances of this atom:\\nconst counterAtom = atom(\'counter\', (id: string) => 0)\\n\\nconst controlsAtom = atom(\'controlsAtom\', () => {\\n  // create some static edges!\\n  const instanceA = injectAtomInstance(counterAtom, [\'a\'])\\n  const instanceB = injectAtomInstance(counterAtom, [\'b\'])\\n\\n  return api().setExports({\\n    incrementA: () => instanceA.setState(state => state + 1),\\n    incrementB: () => instanceB.setState(state => state + 1),\\n  })\\n})\\n\\nfunction Controls() {\\n  const { incrementA, incrementB } = useAtomInstance(controlsAtom).exports\\n\\n  return (\\n    <div>\\n      <button onClick={incrementA}>Increment A</button>\\n      <button onClick={incrementB}>Increment B</button>\\n    </div>\\n  )\\n}\\n\\nfunction Counter({ id }: { id: string }) {\\n  const counter = useAtomValue(counterAtom, [id])\\n\\n  return (\\n    <div>\\n      Counter {id.toUpperCase()}: {counter}\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Controls />\\n      <Counter id=\\"a\\" />\\n      <Counter id=\\"b\\" />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"dynamicizing-edges"},"Dynamicizing Edges"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(Yes, it\'s a word). Here\'s a common situation: You need an atom instance (e.g. to access its exports or promise), but want the component to rerender every time the atom instance\'s state changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Turns out, you can pass an atom instance directly to any hooks/injectors that expect atoms (",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomValue"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomValue"),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomState"),"). When you do this, Zedux upgrades the edge from static to dynamic."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"well...","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Inside atoms, the edge is upgraded. In React, Zedux adds another edge. This is because React doesn\'t currently provide a way to know that 2 hooks were used from the same component instance.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=the-graph/dynamicizing-edges resultVar=Todos","live":true,"ecosystemId":"the-graph/dynamicizing-edges","resultVar":"Todos"},"const todosAtom = atom(\'todos\', () => {\\n  const store = injectStore<string[]>([\'go\', \'fight\'])\\n\\n  const addTodo = (text: string) =>\\n    store.setState(state => (state.includes(text) ? state : [...state, text]))\\n\\n  const removeTodo = (text: string) =>\\n    store.setState(state => state.filter(todo => todo !== text))\\n\\n  return api(store).setExports({\\n    addTodo,\\n    removeTodo,\\n  })\\n})\\n\\nfunction Todos() {\\n  const [text, setText] = useState(\'\')\\n  const instance = useAtomInstance(todosAtom)\\n  const { addTodo, removeTodo } = instance.exports\\n\\n  // upgrade to a dynamic edge! (actually creates a new edge \'cause React)\\n  const todos = useAtomValue(instance)\\n\\n  return (\\n    <>\\n      <form\\n        onSubmit={event => {\\n          event.preventDefault()\\n\\n          if (!text) return\\n          addTodo(text)\\n          setText(\'\')\\n        }}\\n      >\\n        <input onChange={event => setText(event.target.value)} value={text} />\\n        <button type=\\"submit\\">Add Todo</button>\\n      </form>\\n      <h3>Todos:</h3>\\n      {todos.map(todo => (\\n        <div key={todo}>\\n          <span>{todo}</span>\\n          <button onClick={() => removeTodo(todo)}>Remove</button>\\n        </div>\\n      ))}\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(Yes, we just made a simple todo app in ~40 lines of code!)"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"staticizing-edges"},"Staticizing Edges"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"(",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"Also")," a word). ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomInstance")," also have overloads for passing atom instances."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can\'t downgrade an edge from dynamic to static. But sometimes you\'ll receive atom instances from outside the current component or atom. In this case, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance"),"/",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomInstance")," can be used to register a static graph edge (which is an upgrade from nothing!)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=the-graph/staticizing-edges resultVar=Parent","live":true,"ecosystemId":"the-graph/staticizing-edges","resultVar":"Parent"},"const complexParamsAtom = atom(\\n  \'complexParams\',\\n  (params: { some: { field: string } }) => {\\n    return params.some.field\\n  }\\n)\\n\\nfunction Child({\\n  instance,\\n}: {\\n  instance: AtomInstanceType<typeof complexParamsAtom>\\n}) {\\n  // give Child its own static graph edge on the instance:\\n  const instance = useAtomInstance(instance)\\n\\n  return <div>state: {instance.getState()}</div>\\n}\\n\\nfunction Parent() {\\n  const instance = useAtomInstance(complexParamsAtom, [\\n    { some: { field: \'hey, kid\' } },\\n  ])\\n\\n  return <Child instance={instance} />\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You won\'t typically need to do this."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"instances-as-params"},"Instances as Params"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As a general rule, all ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance#params"},"atom params")," must be serializable. There is one exception: You can pass an atom instance to another atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=dependency-injection/shout resultVar=Shout","live":true,"ecosystemId":"dependency-injection/shout","resultVar":"Shout"},"const normalAtom = atom(\\n  \'normal\',\\n  \'row, row, row your boat gently lest I scream\'\\n)\\n\\nconst shoutingAtom = atom(\'shouting\', (instance: AtomInstance<string>) => {\\n  const val = injectAtomValue(instance) // subscribe to updates\\n\\n  return val.toUpperCase()\\n})\\n\\nfunction Shout() {\\n  const instance = useAtomInstance(normalAtom)\\n  const shout = useAtomValue(shoutingAtom, [instance]) // just pass the instance\\n\\n  return <div>{shout}</div>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an atom instance receives another atom instance via params, it doesn\'t create any kind of dependency on that instance. This is usually fine: Whoever passed the instance is probably already registering their own dependency on the instance they\'re passing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In this example, we passed the instance to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomValue")," to create a dynamic dependency on the instance. We could have also used ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectAtomInstance")," to create a static dependency."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance#params"},"AtomInstance#params")," for more info."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"View the graph with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.viewGraph(\'top-down\' | \'bottom-up\' | \'flat\')")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create dynamic dependencies (or \\"edges\\") with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomState")," or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomValue")," and their injector equivalents."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create static dependencies with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomInstance"),"/",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"injectAtomInstance"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Upgrade an edge from static to dynamic by passing the instance to a dynamic hook/injector."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Instances can be passed directly to other atom instances via params.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We know enough hooks and injectors to get a pretty beastly graph going. It\'s time to learn how to manipulate the graph by swapping out nodes with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"overrides"},"ecosystem overrides"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///903\n')}}]);