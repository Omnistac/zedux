"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[5963],{1265:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'atom-instances\',title:\'Atom Instances\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/atom-instances","id":"walkthrough/atom-instances","title":"Atom Instances","description":"In the quick start, we learned that atoms are like classes. Whenever an atom is used, Zedux creates an \\"instance\\" of that atom and caches it.","source":"@site/docs/walkthrough/atom-instances.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/atom-instances","permalink":"/zedux/docs/walkthrough/atom-instances","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/atom-instances.mdx","tags":[],"version":"current","frontMatter":{"id":"atom-instances","title":"Atom Instances"},"sidebar":"react","previous":{"title":"Atom State","permalink":"/zedux/docs/walkthrough/atom-state"},"next":{"title":"Atom APIs","permalink":"/zedux/docs/walkthrough/atom-apis"}};var assets={};var toc=[{value:\'Atom Params\',id:\'atom-params\',level:2},{value:\'<code>useAtomInstance</code>\',id:\'useatominstance\',level:2},{value:\'Atom Instances\',id:\'atom-instances\',level:2},{value:\'<code>activeState</code>\',id:\'activestate\',level:3},{value:\'<code>atom</code>\',id:\'atom\',level:3},{value:\'<code>exports</code>\',id:\'exports\',level:3},{value:\'<code>params</code>\',id:\'params\',level:3},{value:\'<code>promise</code>\',id:\'promise\',level:3},{value:\'<code>store</code>\',id:\'store\',level:3},{value:\'<code>setState()</code>\',id:\'setstate\',level:3},{value:\'<code>.dispatch()</code>\',id:\'dispatch\',level:3},{value:\'<code>invalidate()</code>\',id:\'invalidate\',level:3},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In the quick start, we learned that atoms are like classes. Whenever an atom is used, Zedux creates an \\"instance\\" of that atom and caches it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How atom params work"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to get an atom instance itself"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"What atom instances look like"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-params"},"Atom Params"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When an atom takes params, Zedux creates a different atom instance for every \\"unique\\" set of params you pass. So how does Zedux determine \\"uniqueness\\"?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux doesn\'t compare object references. Internally, Zedux turns all params into a single string. This \\"hashing\\" is deterministic. If you know React Query, this should all sound familiar \'cause that\'s where we got the idea. Check out ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://react-query.tanstack.com/guides/query-keys#query-keys-are-hashed-deterministically"},"React Query\'s docs on this"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Let\'s look at some examples. Say we have this atom:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const myParamsAtom = atom(\'myParams\', (a: any, b: any) => {\\n  ...\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The following params are considered the same - Zedux will translate them to the exact same atom instance:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"useAtomState(myParamsAtom, [{ one, two }, three])\\nuseAtomState(myParamsAtom, [{ two, one }, three])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But the following params are all different (params order and array order matter):"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"useAtomState(myParamsAtom, [{ one, two }, three])\\nuseAtomState(myParamsAtom, [three, { one, two }])\\n\\nuseAtomState(myParamsAtom, [[one, two], three])\\nuseAtomState(myParamsAtom, [[two, one], three])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"useatominstance"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"useAtomInstance")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Up till now, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState")," has been our only way to interact with atoms. It\'s time we learned a new hook."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance")," is a lower-level hook than ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState")," that returns the entire atom instance. Importantly, unlike ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomState"),", it doesn\'t cause a rerender when the atom instance\'s state changes."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=atom-instances/useAtomInstance resultVar=App","live":true,"ecosystemId":"atom-instances/useAtomInstance","resultVar":"App"},"const counterAtom = atom(\'counter\', 0)\\n\\nfunction Static() {\\n  // useAtomInstance does _not_ trigger rerenders\\n  const greetingInstance = useAtomInstance(counterAtom)\\n\\n  return (\\n    <div>\\n      <button onClick={() => greetingInstance.setState(state => state + 1)}>\\n        Increment\\n      </button>\\n      <span> non-updating state: {greetingInstance.getState()}</span>\\n    </div>\\n  )\\n}\\n\\nfunction Dynamic() {\\n  // useAtomState triggers rerenders on state update\\n  const [counter, setState] = useAtomState(counterAtom)\\n\\n  return (\\n    <div>\\n      <button onClick={() => setState(state => state + 1)}>Increment</button>\\n      <span> state: {counter}</span>\\n    </div>\\n  )\\n}\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Static />\\n      <Dynamic />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Click the buttons a few times and you\'ll see the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Dynamic")," component update while the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Static")," component stays ... static, even though both buttons are doing exactly the same thing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This example is contrived - you shouldn\'t ever ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"read")," an atom\'s state in a component like this. But one of the primary uses of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomInstance")," is to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"set")," an atom\'s state without subscribing to state updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// subscribes:\\nconst [, setState] = useAtomState(myAtom)\\n...\\nsetState(newState)\\n\\n// doesn\'t subscribe:\\nconst instance = useAtomInstance(myAtom)\\n...\\ninstance.setState(newState)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Alright, we did a few things with the atom instance that we haven\'t seen before. Let\'s look at those now."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atom-instances"},"Atom Instances"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Every ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance"},"atom instance")," is just an object that contains the following methods/properties:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"activestate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"activeState")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A string. Every atom instance goes through a lifecycle:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("img",{alt:"Initializing -&gt; Active &lt;-&gt; Stale -&gt; Destroyed",src:(__webpack_require__(3096)/* ["default"] */ .Z),width:"1540",height:"572"})),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.activeState")," should typically be ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"\'Active\'")," on instances you use. We\'ll talk more about these in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"destruction"},"the destruction walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"atom"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"atom")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A reference to the atom that this atom instance is an instance of."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const exampleAtom = atom(\'example\', () => \'my state\')\\n...\\nconst instance = useAtomInstance(exampleAtom)\\ninstance.atom === exampleAtom // true\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"exports"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"exports")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An object containing the exports of the atom instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomInstance(myAtom)\\nconst { someExport } = instance.exports\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"These exports are constant - they are set the first time an atom instance evaluates and they will not change on subsequent evaluations. We\'ll learn how to set exports in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"the Atom API walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"params"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"params")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An array of the params of this atom instance, in the order passed"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const blogPostCommentAtom = atom(\\n  \'blogPostComment\',\\n  (blogPostId: string, commentId: string) => {\\n    ...\\n  }\\n)\\n...\\nconst instance = useAtomInstance(myAtom)\\nconst [blogPostId, commentId] = instance.params\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"promise"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"promise")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A reference to the current promise of the atom instance. Instance promises are used to kick off React suspense and inform other atoms when an atom instance\'s state is \\"ready\\"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomInstance(myAtom)\\n...\\ninstance.promise.then(() => /* instance is ready */)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We\'ll learn how to set promises in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"the Atom API walkthrough")," and how to use them with React suspense in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense"},"the suspense walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"store"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"store")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A reference to the atom instance\'s store. Every atom instance has one. If the atom\'s state factory returns a store, this will be a reference to that store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const storeAtom = atom(\'store\', () => {\\n  const store = injectStore(\'initial state\')\\n\\n  return store\\n})\\n\\nfunction MyComponent() {\\n  const instance = useAtomInstance(storeAtom)\\n  instance.store // <- this is the exact same store that we returned\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We learned a bit about stores in the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-state"},"atom state walkthrough"),". Quick recap:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"store.getState() // returns the current state of the store\\nstore.setState(\'new state\') // overwrites the store\'s state\\n\\n// recursively merge state into existing state:\\nstore.setStateDeep({ deeply: { merge: \'this state\' } })\\n\\n// function overloads - set new state based on current state\\nstore.setState(state => state + 1)\\nstore.setStateDeep(state => ({ someKey: state.someKey + 1 }))\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"setstate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"setState()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The most common way to set the state of an atom instance\'s store. An alias for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Store#setstate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},".store.setState()")),". Function overload supported."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = getInstance(myAtom)\\ninstance.setState(newState)\\ninstance.setState(currentState => newState)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"setState")," function returned by ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/hooks/useAtomState"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomState()"))," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/injectors/injectAtomState"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectAtomState()"))," is a wrapper around this function.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"dispatch"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},".dispatch()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Dispatches an action to the instance\'s store. An alias for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Store#dispatch"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},".store.dispatch()")),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = getInstance(myAtom)\\ninstance.dispatch({ type: \'some-type\', payload: \'some-payload\' })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"invalidate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"invalidate()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Call this to force the atom instance to reevaluate. Typically you should avoid impure or mutation-oriented patterns that require you to manually invalidate atom instances. But there are some useful invalidation patterns that we\'ll look at in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"resets"},"the resets walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=atom-instances/invalidate resultVar=RandomNum","live":true,"ecosystemId":"atom-instances/invalidate","resultVar":"RandomNum"},"const randomNumAtom = atom(\'randomNum\', () => Math.floor(Math.random() * 100))\\n\\nfunction RandomNum() {\\n  const instance = useAtomInstance(randomNumAtom)\\n  const value = useAtomValue(randomNumAtom)\\n\\n  return (\\n    <>\\n      <div>Random Number: {value}</div>\\n      <button onClick={() => instance.invalidate()}>Re-roll</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom params are hashed deterministically."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomInstance")," returns an atom instance without subscribing to state updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom instances have a lot of features. We\'ll cover more in the rest of this walkthrough.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"We learned that atom instances have ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"exports")," and a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"promise"),", but we still don\'t know how to create those. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"atom-apis"},"Let\'s fix that"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1265\n')},3096:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony default export */ __webpack_exports__["Z"] = (__webpack_require__.p + "assets/images/active-state-machine-eb791085acec841b6ad623bb719a4e56.png");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA5Ni5qcyIsIm1hcHBpbmdzIjoiQUFBQSx5REFBZSxxQkFBdUIsNEVBQTRFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL3N0YXRpYy9pbWcvZGlhZ3JhbXMvYWN0aXZlLXN0YXRlLW1hY2hpbmUucG5nPzc0NWYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZXMvYWN0aXZlLXN0YXRlLW1hY2hpbmUtZWI3OTEwODVhY2VjODQxYjZhZDYyM2JiNzE5YTRlNTYucG5nXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3096\n')}}]);