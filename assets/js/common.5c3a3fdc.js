(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[8592],{3905:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Zo": function() { return /* binding */ MDXProvider; },\n/* harmony export */   "kt": function() { return /* binding */ createElement; }\n/* harmony export */ });\n/* unused harmony exports MDXContext, useMDXComponents, withMDXComponents */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nvar isFunction = function isFunction(obj) {\n  return typeof obj === \'function\';\n};\n\nvar MDXContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});\nvar withMDXComponents = function withMDXComponents(Component) {\n  return function (props) {\n    var allComponents = useMDXComponents(props.components);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n      components: allComponents\n    }));\n  };\n};\nvar useMDXComponents = function useMDXComponents(components) {\n  var contextComponents = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);\n  var allComponents = contextComponents;\n\n  if (components) {\n    allComponents = isFunction(components) ? components(contextComponents) : _objectSpread2(_objectSpread2({}, contextComponents), components);\n  }\n\n  return allComponents;\n};\nvar MDXProvider = function MDXProvider(props) {\n  var allComponents = useMDXComponents(props.components);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider, {\n    value: allComponents\n  }, props.children);\n};\n\nvar TYPE_PROP_NAME = \'mdxType\';\nvar DEFAULTS = {\n  inlineCode: \'code\',\n  wrapper: function wrapper(_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, children);\n  }\n};\nvar MDXCreateElement = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {\n  var propComponents = props.components,\n      mdxType = props.mdxType,\n      originalType = props.originalType,\n      parentName = props.parentName,\n      etc = _objectWithoutProperties(props, ["components", "mdxType", "originalType", "parentName"]);\n\n  var components = useMDXComponents(propComponents);\n  var type = mdxType;\n  var Component = components["".concat(parentName, ".").concat(type)] || components[type] || DEFAULTS[type] || originalType;\n\n  if (propComponents) {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2(_objectSpread2({\n      ref: ref\n    }, etc), {}, {\n      components: propComponents\n    }));\n  }\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, _objectSpread2({\n    ref: ref\n  }, etc));\n});\nMDXCreateElement.displayName = \'MDXCreateElement\';\nfunction createElement (type, props) {\n  var args = arguments;\n  var mdxType = props && props.mdxType;\n\n  if (typeof type === \'string\' || mdxType) {\n    var argsLength = args.length;\n    var createElementArgArray = new Array(argsLength);\n    createElementArgArray[0] = MDXCreateElement;\n    var newProps = {};\n\n    for (var key in props) {\n      if (hasOwnProperty.call(props, key)) {\n        newProps[key] = props[key];\n      }\n    }\n\n    newProps.originalType = type;\n    newProps[TYPE_PROP_NAME] = typeof type === \'string\' ? type : mdxType;\n    createElementArgArray[1] = newProps;\n\n    for (var i = 2; i < argsLength; i++) {\n      createElementArgArray[i] = args[i];\n    }\n\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, createElementArgArray);\n  }\n\n  return react__WEBPACK_IMPORTED_MODULE_0__.createElement.apply(null, args);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3905\n')},6412:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"p\": function() { return /* binding */ usePrismTheme; }\n/* harmony export */ });\n/* harmony import */ var _contexts_colorMode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2949);\n/* harmony import */ var _utils_useThemeConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6668);\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *//**\n * Returns a color-mode-dependent Prism theme: whatever the user specified in\n * the config. Falls back to `palenight`.\n */function usePrismTheme(){var _useThemeConfig=(0,_utils_useThemeConfig__WEBPACK_IMPORTED_MODULE_0__/* .useThemeConfig */ .L)(),prism=_useThemeConfig.prism;var _useColorMode=(0,_contexts_colorMode__WEBPACK_IMPORTED_MODULE_1__/* .useColorMode */ .I)(),colorMode=_useColorMode.colorMode;var lightModeTheme=prism.theme;var darkModeTheme=prism.darkTheme||lightModeTheme;var prismTheme=colorMode==='dark'?darkModeTheme:lightModeTheme;return prismTheme;}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQxMi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztHQVdBOzs7R0FJTSxRQUFVRSxjQUFhLEdBQzNCLG9CQUFnQkQsOEVBQWMsRUFBRSxDQUF6QkUsS0FBSyxpQkFBTEEsS0FBSyxDQUNaLGtCQUFvQkgsMEVBQVksRUFBRSxDQUEzQkksU0FBUyxlQUFUQSxTQUFTLENBQ2hCLEdBQU1DLGVBQWMsQ0FBR0YsS0FBSyxDQUFDRyxLQUFLLENBQ2xDLEdBQU1DLGNBQWEsQ0FBR0osS0FBSyxDQUFDSyxTQUFTLEVBQUlILGNBQWMsQ0FDdkQsR0FBTUksV0FBVSxDQUFHTCxTQUFTLEdBQUssTUFBTSxDQUFHRyxhQUFhLENBQUdGLGNBQWMsQ0FFeEUsTUFBT0ksV0FBVSxDQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vLi4vc3JjL2hvb2tzL3VzZVByaXNtVGhlbWUudHM/ZDNhNSJdLCJuYW1lcyI6WyJ1c2VDb2xvck1vZGUiLCJ1c2VUaGVtZUNvbmZpZyIsInVzZVByaXNtVGhlbWUiLCJwcmlzbSIsImNvbG9yTW9kZSIsImxpZ2h0TW9kZVRoZW1lIiwidGhlbWUiLCJkYXJrTW9kZVRoZW1lIiwiZGFya1RoZW1lIiwicHJpc21UaGVtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6412\n")},9441:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "ck": function() { return /* reexport */ Item; },\n  "De": function() { return /* reexport */ Legend; },\n  "rU": function() { return /* reexport */ Link/* default */.Z; },\n  "pv": function() { return /* reexport */ Sandbox/* Sandbox */.p; },\n  "mQ": function() { return /* binding */ Tabs; },\n  "Ts": function() { return /* binding */ Ts; },\n  "x_": function() { return /* binding */ tab1; },\n  "s2": function() { return /* binding */ tab2; }\n});\n\n// UNUSED EXPORTS: TabItem, Tsx\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(7462);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./src/theme/CodeBlock/index.tsx + 18 modules\nvar theme_CodeBlock = __webpack_require__(9094);\n// EXTERNAL MODULE: ./node_modules/clsx/dist/clsx.m.js\nvar clsx_m = __webpack_require__(6010);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/scrollUtils.js\nvar scrollUtils = __webpack_require__(2466);\n// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js\nvar react_router = __webpack_require__(6550);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/historyUtils.js\nvar historyUtils = __webpack_require__(1980);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/jsUtils.js\nvar jsUtils = __webpack_require__(7392);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/storageUtils.js\nvar storageUtils = __webpack_require__(12);\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/tabsUtils.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */// A very rough duck type, but good enough to guard against mistakes while\n// allowing customization\nfunction isTabItem(comp){return\'value\'in comp.props;}function ensureValidChildren(children){return react.Children.map(children,function(child){if(/*#__PURE__*/(0,react.isValidElement)(child)&&isTabItem(child)){return child;}// child.type.name will give non-sensical values in prod because of\n// minification, but we assume it won\'t throw in prod.\nthrow new Error("Docusaurus error: Bad <Tabs> child <"+(// @ts-expect-error: guarding against unexpected cases\ntypeof child.type===\'string\'?child.type:child.type.name)+">: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique \\"value\\" prop.");});}function extractChildrenTabValues(children){return ensureValidChildren(children).map(function(_ref){var _ref$props=_ref.props,value=_ref$props.value,label=_ref$props.label,attributes=_ref$props.attributes,isDefault=_ref$props.default;return{value:value,label:label,attributes:attributes,default:isDefault};});}function ensureNoDuplicateValue(values){var dup=(0,jsUtils/* duplicates */.l)(values,function(a,b){return a.value===b.value;});if(dup.length>0){throw new Error("Docusaurus error: Duplicate values \\""+dup.map(function(a){return a.value;}).join(\', \')+"\\" found in <Tabs>. Every value needs to be unique.");}}function useTabValues(props){var valuesProp=props.values,children=props.children;return (0,react.useMemo)(function(){var values=valuesProp!=null?valuesProp:extractChildrenTabValues(children);ensureNoDuplicateValue(values);return values;},[valuesProp,children]);}function isValidValue(_ref2){var value=_ref2.value,tabValues=_ref2.tabValues;return tabValues.some(function(a){return a.value===value;});}function getInitialStateValue(_ref3){var _tabValues$find;var defaultValue=_ref3.defaultValue,tabValues=_ref3.tabValues;if(tabValues.length===0){throw new Error(\'Docusaurus error: the <Tabs> component requires at least one <TabItem> children component\');}if(defaultValue){// Warn user about passing incorrect defaultValue as prop.\nif(!isValidValue({value:defaultValue,tabValues:tabValues})){throw new Error("Docusaurus error: The <Tabs> has a defaultValue \\""+defaultValue+"\\" but none of its children has the corresponding value. Available values are: "+tabValues.map(function(a){return a.value;}).join(\', \')+". If you intend to show no default tab, use defaultValue={null} instead.");}return defaultValue;}var defaultTabValue=(_tabValues$find=tabValues.find(function(tabValue){return tabValue.default;}))!=null?_tabValues$find:tabValues[0];if(!defaultTabValue){throw new Error(\'Unexpected error: 0 tabValues\');}return defaultTabValue.value;}function getStorageKey(groupId){if(!groupId){return null;}return"docusaurus.tab."+groupId;}function getQueryStringKey(_ref4){var _ref4$queryString=_ref4.queryString,queryString=_ref4$queryString===void 0?false:_ref4$queryString,groupId=_ref4.groupId;if(typeof queryString===\'string\'){return queryString;}if(queryString===false){return null;}if(queryString===true&&!groupId){throw new Error("Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString=\\"my-search-param\\".");}return groupId!=null?groupId:null;}function useTabQueryString(_ref5){var _ref5$queryString=_ref5.queryString,queryString=_ref5$queryString===void 0?false:_ref5$queryString,groupId=_ref5.groupId;var history=(0,react_router/* useHistory */.k6)();var key=getQueryStringKey({queryString:queryString,groupId:groupId});var value=(0,historyUtils/* useQueryStringValue */._X)(key);var setValue=(0,react.useCallback)(function(newValue){if(!key){return;// no-op\n}var searchParams=new URLSearchParams(history.location.search);searchParams.set(key,newValue);history.replace(Object.assign({},history.location,{search:searchParams.toString()}));},[key,history]);return[value,setValue];}function useTabStorage(_ref6){var groupId=_ref6.groupId;var key=getStorageKey(groupId);var _useStorageSlot=(0,storageUtils/* useStorageSlot */.Nk)(key),value=_useStorageSlot[0],storageSlot=_useStorageSlot[1];var setValue=(0,react.useCallback)(function(newValue){if(!key){return;// no-op\n}storageSlot.set(newValue);},[key,storageSlot]);return[value,setValue];}function useTabs(props){var defaultValue=props.defaultValue,_props$queryString=props.queryString,queryString=_props$queryString===void 0?false:_props$queryString,groupId=props.groupId;var tabValues=useTabValues(props);var _useState=(0,react.useState)(function(){return getInitialStateValue({defaultValue:defaultValue,tabValues:tabValues});}),selectedValue=_useState[0],setSelectedValue=_useState[1];var _useTabQueryString=useTabQueryString({queryString:queryString,groupId:groupId}),queryStringValue=_useTabQueryString[0],setQueryString=_useTabQueryString[1];var _useTabStorage=useTabStorage({groupId:groupId}),storageValue=_useTabStorage[0],setStorageValue=_useTabStorage[1];// We sync valid querystring/storage value to state on change + hydration\nvar valueToSync=function(){var value=queryStringValue!=null?queryStringValue:storageValue;if(!isValidValue({value:value,tabValues:tabValues})){return null;}return value;}();// Sync in a layout/sync effect is important, for useScrollPositionBlocker\n// See https://github.com/facebook/docusaurus/issues/8625\n(0,react.useLayoutEffect)(function(){if(valueToSync){setSelectedValue(valueToSync);}},[valueToSync]);var selectValue=(0,react.useCallback)(function(newValue){if(!isValidValue({value:newValue,tabValues:tabValues})){throw new Error("Can\'t select invalid tab value="+newValue);}setSelectedValue(newValue);setQueryString(newValue);setStorageValue(newValue);},[setQueryString,setStorageValue,tabValues]);return{selectedValue:selectedValue,selectValue:selectValue,tabValues:tabValues};}\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/useIsBrowser.js\nvar useIsBrowser = __webpack_require__(2389);\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var styles_module = ({"tabList":"tabList__CuJ","tabItem":"tabItem_LNqP"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/Tabs/index.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */function TabList(_ref){var className=_ref.className,block=_ref.block,selectedValue=_ref.selectedValue,selectValue=_ref.selectValue,tabValues=_ref.tabValues;var tabRefs=[];var _useScrollPositionBlo=(0,scrollUtils/* useScrollPositionBlocker */.o5)(),blockElementScrollPositionUntilNextRender=_useScrollPositionBlo.blockElementScrollPositionUntilNextRender;var handleTabChange=function handleTabChange(event){var newTab=event.currentTarget;var newTabIndex=tabRefs.indexOf(newTab);var newTabValue=tabValues[newTabIndex].value;if(newTabValue!==selectedValue){blockElementScrollPositionUntilNextRender(newTab);selectValue(newTabValue);}};var handleKeydown=function handleKeydown(event){var _focusElement;var focusElement=null;switch(event.key){case\'Enter\':{handleTabChange(event);break;}case\'ArrowRight\':{var _tabRefs$nextTab;var nextTab=tabRefs.indexOf(event.currentTarget)+1;focusElement=(_tabRefs$nextTab=tabRefs[nextTab])!=null?_tabRefs$nextTab:tabRefs[0];break;}case\'ArrowLeft\':{var _tabRefs$prevTab;var prevTab=tabRefs.indexOf(event.currentTarget)-1;focusElement=(_tabRefs$prevTab=tabRefs[prevTab])!=null?_tabRefs$prevTab:tabRefs[tabRefs.length-1];break;}default:break;}(_focusElement=focusElement)==null?void 0:_focusElement.focus();};return/*#__PURE__*/react.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,clsx_m/* default */.Z)(\'tabs\',{\'tabs--block\':block},className)},tabValues.map(function(_ref2){var value=_ref2.value,label=_ref2.label,attributes=_ref2.attributes;return/*#__PURE__*/react.createElement("li",(0,esm_extends/* default */.Z)({// TODO extract TabListItem\nrole:"tab",tabIndex:selectedValue===value?0:-1,"aria-selected":selectedValue===value,key:value,ref:function ref(tabControl){return tabRefs.push(tabControl);},onKeyDown:handleKeydown,onClick:handleTabChange},attributes,{className:(0,clsx_m/* default */.Z)(\'tabs__item\',styles_module.tabItem,attributes==null?void 0:attributes.className,{\'tabs__item--active\':selectedValue===value})}),label!=null?label:value);}));}function TabContent(_ref3){var lazy=_ref3.lazy,children=_ref3.children,selectedValue=_ref3.selectedValue;// eslint-disable-next-line no-param-reassign\nchildren=Array.isArray(children)?children:[children];if(lazy){var selectedTabItem=children.find(function(tabItem){return tabItem.props.value===selectedValue;});if(!selectedTabItem){// fail-safe or fail-fast? not sure what\'s best here\nreturn null;}return/*#__PURE__*/(0,react.cloneElement)(selectedTabItem,{className:\'margin-top--md\'});}return/*#__PURE__*/react.createElement("div",{className:"margin-top--md"},children.map(function(tabItem,i){return/*#__PURE__*/(0,react.cloneElement)(tabItem,{key:i,hidden:tabItem.props.value!==selectedValue});}));}function TabsComponent(props){var tabs=useTabs(props);return/*#__PURE__*/react.createElement("div",{className:(0,clsx_m/* default */.Z)(\'tabs-container\',styles_module.tabList)},/*#__PURE__*/react.createElement(TabList,(0,esm_extends/* default */.Z)({},props,tabs)),/*#__PURE__*/react.createElement(TabContent,(0,esm_extends/* default */.Z)({},props,tabs)));}function Tabs_Tabs(props){var isBrowser=(0,useIsBrowser/* default */.Z)();return/*#__PURE__*/react.createElement(TabsComponent// Remount tabs after hydration\n// Temporary fix for https://github.com/facebook/docusaurus/issues/5653\n,(0,esm_extends/* default */.Z)({key:String(isBrowser)},props));}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var TabItem_styles_module = ({"tabItem":"tabItem_Ymn6"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/TabItem/index.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */function TabItem(_ref){var children=_ref.children,hidden=_ref.hidden,className=_ref.className;return/*#__PURE__*/react.createElement("div",{role:"tabpanel",className:(0,clsx_m/* default */.Z)(TabItem_styles_module.tabItem,className),hidden:hidden},children);}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js\nvar taggedTemplateLiteralLoose = __webpack_require__(1880);\n// EXTERNAL MODULE: ./src/ssc/index.tsx\nvar ssc = __webpack_require__(8880);\n;// CONCATENATED MODULE: ./src/components/Legend/Legend.tsx\nvar _templateObject,_templateObject2,_templateObject3;var ItemDesc=ssc/* default.div */.ZP.div(_templateObject||(_templateObject=(0,taggedTemplateLiteralLoose/* default */.Z)(["\\n  padding: 1rem;\\n"])));var ItemName=ssc/* default.div */.ZP.div(_templateObject2||(_templateObject2=(0,taggedTemplateLiteralLoose/* default */.Z)(["\\n  padding: 1rem;\\n"])));var Wrapper=ssc/* default.div */.ZP.div(_templateObject3||(_templateObject3=(0,taggedTemplateLiteralLoose/* default */.Z)(["\\n  border-radius: 5px;\\n  box-shadow: 4px 4px 8px 1px #0004;\\n  display: grid;\\n  grid-template-columns: auto minmax(0, 4fr);\\n  margin: 0 -0.8rem var(--ifm-paragraph-margin-bottom);\\n"])));var Legend=function Legend(_ref){var children=_ref.children;return/*#__PURE__*/react.createElement(Wrapper,null,children);};var prefixContext=/*#__PURE__*/(0,react.createContext)(\'\');var Item=function Item(_ref2){var children=_ref2.children,name=_ref2.name;var prefix=(0,react.useContext)(prefixContext);var id=prefix+name.toLowerCase().replace(/[^a-z]/g,\'\');return/*#__PURE__*/react.createElement(react.Fragment,null,/*#__PURE__*/react.createElement(ItemName,{className:"anchor anchorWithStickyNavbar_node_modules-@docusaurus-theme-classic-lib-theme-Heading-styles-module",id:id},name===\'Returns\'?name:/*#__PURE__*/react.createElement("code",null,name),/*#__PURE__*/react.createElement("a",{className:"hash-link",href:"#"+id})),/*#__PURE__*/react.createElement(ItemDesc,null,/*#__PURE__*/react.createElement(prefixContext.Provider,{value:id+"__"},children)));};\n// EXTERNAL MODULE: ./src/theme/CodeBlock/Sandbox.tsx + 45 modules\nvar Sandbox = __webpack_require__(6630);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/Link.js + 1 modules\nvar Link = __webpack_require__(9960);\n;// CONCATENATED MODULE: ./src/all.tsx\nvar Tsx=function Tsx(props){return/*#__PURE__*/React.createElement(CodeBlock,_extends({language:"tsx"},props));};var Ts=function Ts(props){return/*#__PURE__*/react.createElement(theme_CodeBlock/* default */.Z,(0,esm_extends/* default */.Z)({language:"ts"},props));};var Tabs=function Tabs(_ref){var children=_ref.children;return/*#__PURE__*/react.createElement(Tabs_Tabs,{groupId:"definition-view"},children);};var tab1=function tab1(children){return/*#__PURE__*/react.createElement(TabItem,{label:"Simplified",value:"simplified"},/*#__PURE__*/react.createElement(Ts,null,children));};var tab2=function tab2(children){return/*#__PURE__*/react.createElement(TabItem,{label:"TypeScript",value:"typescript"},/*#__PURE__*/react.createElement(Ts,null,children));};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9441\n')},6630:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"p\": function() { return /* binding */ Sandbox; }\n});\n\n// NAMESPACE OBJECT: ../packages/immer/src/index.ts\nvar src_namespaceObject = {};\n__webpack_require__.r(src_namespaceObject);\n__webpack_require__.d(src_namespaceObject, {\n  \"ImmerStore\": function() { return ImmerStore; },\n  \"createImmerStore\": function() { return createImmerStore; },\n  \"injectImmerStore\": function() { return injectImmerStore; }\n});\n\n// NAMESPACE OBJECT: ../packages/react/src/index.ts\nvar react_src_namespaceObject = {};\n__webpack_require__.r(react_src_namespaceObject);\n__webpack_require__.d(react_src_namespaceObject, {\n  \"Atom\": function() { return Atom/* Atom */.h; },\n  \"AtomApi\": function() { return AtomApi/* AtomApi */.u; },\n  \"AtomBase\": function() { return AtomBase/* AtomBase */.H; },\n  \"AtomInstance\": function() { return AtomInstance/* AtomInstance */.p; },\n  \"AtomInstanceBase\": function() { return AtomInstanceBase/* AtomInstanceBase */.T; },\n  \"AtomInstanceProvider\": function() { return AtomInstanceProvider; },\n  \"Ecosystem\": function() { return Ecosystem/* Ecosystem */.q; },\n  \"EcosystemProvider\": function() { return EcosystemProvider; },\n  \"Ion\": function() { return Ion; },\n  \"MachineStore\": function() { return MachineStore; },\n  \"Store\": function() { return createStore/* Store */.y; },\n  \"ZeduxPlugin\": function() { return ZeduxPlugin; },\n  \"actionFactory\": function() { return actionFactory/* actionFactory */.B; },\n  \"addMeta\": function() { return meta/* addMeta */.k; },\n  \"api\": function() { return api/* api */.h; },\n  \"atom\": function() { return atom/* atom */.c; },\n  \"createEcosystem\": function() { return createEcosystem/* createEcosystem */.q; },\n  \"createInjector\": function() { return createInjector/* createInjector */.v; },\n  \"createReducer\": function() { return createReducer; },\n  \"createStore\": function() { return createStore/* createStore */.M; },\n  \"getEcosystem\": function() { return store/* getEcosystem */.$$; },\n  \"getMetaData\": function() { return meta/* getMetaData */.g2; },\n  \"hasMeta\": function() { return meta/* hasMeta */.yF; },\n  \"injectAtomGetters\": function() { return injectAtomGetters; },\n  \"injectAtomInstance\": function() { return injectAtomInstance; },\n  \"injectAtomSelector\": function() { return injectAtomSelector; },\n  \"injectAtomState\": function() { return injectAtomState; },\n  \"injectAtomValue\": function() { return injectAtomValue; },\n  \"injectCallback\": function() { return injectCallback; },\n  \"injectEffect\": function() { return injectEffect/* injectEffect */.o; },\n  \"injectInvalidate\": function() { return injectInvalidate; },\n  \"injectMachineStore\": function() { return injectMachineStore; },\n  \"injectMemo\": function() { return injectMemo; },\n  \"injectPromise\": function() { return injectPromise; },\n  \"injectRef\": function() { return injectRef/* injectRef */.i; },\n  \"injectStore\": function() { return injectStore/* injectStore */.F; },\n  \"injectWhy\": function() { return injectWhy; },\n  \"internalStore\": function() { return store/* internalStore */.Do; },\n  \"internalTypes\": function() { return constants/* internalTypes */.P; },\n  \"ion\": function() { return ion; },\n  \"is\": function() { return is.is; },\n  \"removeAllMeta\": function() { return meta/* removeAllMeta */.vU; },\n  \"removeMeta\": function() { return meta/* removeMeta */.hM; },\n  \"setInternalStore\": function() { return store/* setInternalStore */.LW; },\n  \"useAtomConsumer\": function() { return useAtomConsumer; },\n  \"useAtomInstance\": function() { return useAtomInstance/* useAtomInstance */.Q; },\n  \"useAtomSelector\": function() { return useAtomSelector; },\n  \"useAtomState\": function() { return useAtomState; },\n  \"useAtomValue\": function() { return useAtomValue; },\n  \"useEcosystem\": function() { return useEcosystem/* useEcosystem */.l; },\n  \"wipe\": function() { return store/* wipe */.Ej; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(7462);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4578);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/construct.js + 1 modules\nvar construct = __webpack_require__(8852);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js + 2 modules\nvar createForOfIteratorHelperLoose = __webpack_require__(7855);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/hooks/usePrismTheme.js\nvar usePrismTheme = __webpack_require__(6412);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/useDocusaurusContext.js\nvar useDocusaurusContext = __webpack_require__(2263);\n// EXTERNAL MODULE: ./node_modules/prismjs/prism.js\nvar prism = __webpack_require__(5660);\nvar prism_default = /*#__PURE__*/__webpack_require__.n(prism);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-jsx.js\nvar prism_jsx = __webpack_require__(2356);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-typescript.js\nvar prism_typescript = __webpack_require__(6836);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-tsx.js\nvar prism_tsx = __webpack_require__(1029);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n;// CONCATENATED MODULE: ./node_modules/is-plain-object/dist/is-plain-object.mjs\n/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/immer/dist/immer.esm.mjs\nfunction n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if(false){ var i, o; }throw Error(\"[Immer] minified error nr: \"+n+(t.length?\" \"+t.map((function(n){return\"'\"+n+\"'\"})).join(\",\"):\"\")+\". Find the full error at: https://bit.ly/3cXEKWf\")}function r(n){return!!n&&!!n[Q]}function t(n){var r;return!!n&&(function(n){if(!n||\"object\"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,\"constructor\")&&r.constructor;return t===Object||\"function\"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!(null===(r=n.constructor)||void 0===r?void 0:r[L])||s(n)||v(n))}function e(t){return r(t)||n(23,t),t[Q].t}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&\"symbol\"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0),n)}function h(){n(2)}function y(n){return null==n||\"object\"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r)}function _(){return true||0,U}function j(n,r){r&&(b(\"Patches\"),n.u=[],n.s=[],n.v=r)}function O(n){g(n),n.p.forEach(S),n.p=null}function g(n){n===U&&(U=n.l)}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b(\"ES5\").S(e,r,o),o?(i[Q].P&&(O(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b(\"Patches\").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x(n,o,!1),t&&n.u&&b(\"Patches\").R(e,t,n.u,n.s)}return e.o}function A(e,i,o,a,c,s){if( false&&0,r(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!r(v))return;e.m=!1}if(t(c)&&!y(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c)}}function x(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d(r,t)}function z(n,r){var t=n[Q];return(t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function k(n){n.P||(n.P=!0,n.l&&k(n.l))}function E(n){n.o||(n.o=l(n.t))}function R(n,r,t){var e=s(r)?b(\"MapSet\").N(r,t):v(r)?b(\"MapSet\").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b(\"ES5\").J(r,t);return(t?t.A:_()).p.push(e),e}function D(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b(\"ES5\").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1}else e=F(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t))})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function N(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return false&&0,en.get(r,n)},set:function(r){var t=this[Q]; false&&0,en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t)}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return!0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return!0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}function f(r){r.O&&n(3,JSON.stringify(p(r)))}var s={};m(\"ES5\",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,\"\"+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&\"object\"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.D,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)))})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t))}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}function T(){function e(n){if(!t(n))return n;if(Array.isArray(n))return n.map(e);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],e(n[1])]})));if(v(n))return new Set(Array.from(n).map(e));var r=Object.create(Object.getPrototypeOf(n));for(var i in n)r[i]=e(n[i]);return u(n,L)&&(r[L]=n[L]),r}function f(n){return r(n)?e(n):n}var c=\"add\";m(\"Patches\",{$:function(r,t){return t.forEach((function(t){for(var i=t.path,u=t.op,f=r,s=0;s<i.length-1;s++){var v=o(f),p=\"\"+i[s];0!==v&&1!==v||\"__proto__\"!==p&&\"constructor\"!==p||n(24),\"function\"==typeof f&&\"prototype\"===p&&n(24),\"object\"!=typeof(f=a(f,p))&&n(15,i.join(\"/\"))}var l=o(f),d=e(t.value),h=i[i.length-1];switch(u){case\"replace\":switch(l){case 2:return f.set(h,d);case 3:n(16);default:return f[h]=d}case c:switch(l){case 1:return\"-\"===h?f.push(d):f.splice(h,0,d);case 2:return f.set(h,d);case 3:return f.add(d);default:return f[h]=d}case\"remove\":switch(l){case 1:return f.splice(h,1);case 2:return f.delete(h);case 3:return f.delete(t.value);default:return delete f[h]}default:n(17,u)}})),r},R:function(n,r,t,e){switch(n.i){case 0:case 4:case 2:return function(n,r,t,e){var o=n.t,s=n.o;i(n.D,(function(n,i){var v=a(o,n),p=a(s,n),l=i?u(o,n)?\"replace\":c:\"remove\";if(v!==p||\"replace\"!==l){var d=r.concat(n);t.push(\"remove\"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:\"remove\",path:d}:\"remove\"===l?{op:c,path:d,value:f(v)}:{op:\"replace\",path:d,value:f(v)})}}))}(n,r,t,e);case 5:case 1:return function(n,r,t,e){var i=n.t,o=n.D,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,t];t=s[0],e=s[1]}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=r.concat([v]);t.push({op:\"replace\",path:p,value:f(u[v])}),e.push({op:\"replace\",path:p,value:f(i[v])})}for(var l=i.length;l<u.length;l++){var d=r.concat([l]);t.push({op:c,path:d,value:f(u[l])})}i.length<u.length&&e.push({op:\"replace\",path:r.concat([\"length\"]),value:i.length})}(n,r,t,e);case 3:return function(n,r,t,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=r.concat([u]);t.push({op:\"remove\",path:i,value:n}),e.unshift({op:c,path:i,value:n})}u++})),u=0,o.forEach((function(n){if(!i.has(n)){var o=r.concat([u]);t.push({op:c,path:o,value:n}),e.unshift({op:\"remove\",path:o,value:n})}u++}))}(n,r,t,e)}},M:function(n,r,t,e){t.push({op:\"replace\",path:[],value:r===H?void 0:r}),e.push({op:\"replace\",path:[],value:n})}})}function C(){function r(n,r){function t(){this.constructor=n}a(n,r),n.prototype=(t.prototype=r.prototype,new t)}function e(n){n.o||(n.D=new Map,n.o=new Map(n.t))}function o(n){n.o||(n.o=new Set,n.t.forEach((function(r){if(t(r)){var e=R(n.A.h,r,n);n.p.set(r,e),n.o.add(e)}else n.o.add(r)})))}function u(r){r.O&&n(3,JSON.stringify(p(r)))}var a=function(n,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)},f=function(){function n(n,r){return this[Q]={i:2,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,D:void 0,t:n,k:this,C:!1,O:!1},this}r(n,Map);var o=n.prototype;return Object.defineProperty(o,\"size\",{get:function(){return p(this[Q]).size}}),o.has=function(n){return p(this[Q]).has(n)},o.set=function(n,r){var t=this[Q];return u(t),p(t).has(n)&&p(t).get(n)===r||(e(t),k(t),t.D.set(n,!0),t.o.set(n,r),t.D.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),e(r),k(r),r.t.has(n)?r.D.set(n,!1):r.D.delete(n),r.o.delete(n),!0},o.clear=function(){var n=this[Q];u(n),p(n).size&&(e(n),k(n),n.D=new Map,i(n.t,(function(r){n.D.set(r,!1)})),n.o.clear())},o.forEach=function(n,r){var t=this;p(this[Q]).forEach((function(e,i){n.call(r,t.get(i),i,t)}))},o.get=function(n){var r=this[Q];u(r);var i=p(r).get(n);if(r.I||!t(i))return i;if(i!==r.t.get(n))return i;var o=R(r.A.h,i,r);return e(r),r.o.set(n,o),o},o.keys=function(){return p(this[Q]).keys()},o.values=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.values()},n.next=function(){var n=t.next();return n.done?n:{done:!1,value:r.get(n.value)}},n},o.entries=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.entries()},n.next=function(){var n=t.next();if(n.done)return n;var e=r.get(n.value);return{done:!1,value:[n.value,e]}},n},o[V]=function(){return this.entries()},n}(),c=function(){function n(n,r){return this[Q]={i:3,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,O:!1,C:!1},this}r(n,Set);var t=n.prototype;return Object.defineProperty(t,\"size\",{get:function(){return p(this[Q]).size}}),t.has=function(n){var r=this[Q];return u(r),r.o?!!r.o.has(n)||!(!r.p.has(n)||!r.o.has(r.p.get(n))):r.t.has(n)},t.add=function(n){var r=this[Q];return u(r),this.has(n)||(o(r),k(r),r.o.add(n)),this},t.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),o(r),k(r),r.o.delete(n)||!!r.p.has(n)&&r.o.delete(r.p.get(n))},t.clear=function(){var n=this[Q];u(n),p(n).size&&(o(n),k(n),n.o.clear())},t.values=function(){var n=this[Q];return u(n),o(n),n.o.values()},t.entries=function(){var n=this[Q];return u(n),o(n),n.o.entries()},t.keys=function(){return this.values()},t[V]=function(){return this.values()},t.forEach=function(n,r){for(var t=this.values(),e=t.next();!e.done;)n.call(r,e.value,e.value,this),e=t.next()},n}();m(\"MapSet\",{N:function(n,r){return new f(n,r)},T:function(n,r){return new c(n,r)}})}function J(){N(),C(),T()}function K(n){return n}function $(n){return n}var G,U,W=\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol(\"x\"),X=\"undefined\"!=typeof Map,q=\"undefined\"!=typeof Set,B=\"undefined\"!=typeof Proxy&&void 0!==Proxy.revocable&&\"undefined\"!=typeof Reflect,H=W?Symbol.for(\"immer-nothing\"):((G={})[\"immer-nothing\"]=!0,G),L=W?Symbol.for(\"immer-draftable\"):\"__$immer_draftable\",Q=W?Symbol.for(\"immer-state\"):\"__$immer_state\",V=\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\",Y={0:\"Illegal state\",1:\"Immer drafts cannot have computed properties\",2:\"This object has been frozen and should not be mutated\",3:function(n){return\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \"+n},4:\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",5:\"Immer forbids circular references\",6:\"The first or second argument to `produce` must be a function\",7:\"The third argument to `produce` must be a function or undefined\",8:\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",9:\"First argument to `finishDraft` must be a draft returned by `createDraft`\",10:\"The given draft is already finalized\",11:\"Object.defineProperty() cannot be used on an Immer draft\",12:\"Object.setPrototypeOf() cannot be used on an Immer draft\",13:\"Immer only supports deleting array indices\",14:\"Immer only supports setting array indices and the 'length' property\",15:function(n){return\"Cannot apply patch, path doesn't resolve: \"+n},16:'Sets cannot have \"replace\" patches.',17:function(n){return\"Unsupported patch operation: \"+n},18:function(n){return\"The plugin for '\"+n+\"' has not been loaded into Immer. To enable the plugin, import and call `enable\"+n+\"()` when initializing your application.\"},20:\"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",21:function(n){return\"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\"+n+\"'\"},22:function(n){return\"'current' expects a draft, got: \"+n},23:function(n){return\"'original' expects a draft, got: \"+n},24:\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"},Z=\"\"+Object.prototype.constructor,nn=\"undefined\"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?\"value\"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return!0;E(n),k(n)}return n.o[r]===t&&\"number\"!=typeof t&&(void 0!==t||r in n.o)||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E(n),k(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||\"length\"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),on.deleteProperty=function(r,t){return false&&0,on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return false&&0,en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.F=!0,this.produce=function(r,i,o){if(\"function\"==typeof r&&\"function\"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if(\"function\"!=typeof i&&n(6),void 0!==o&&\"function\"!=typeof o&&n(7),t(r)){var c=w(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?O(c):g(c)}return\"undefined\"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||\"object\"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.F&&d(f,!0),o){var p=[],l=[];b(\"Patches\").M(r,f,p,l),o(p,l)}return f}n(21,r)},this.produceWithPatches=function(n,r){if(\"function\"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return\"undefined\"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},\"boolean\"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),\"boolean\"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(r,t){var e=r&&r[Q]; false&&(0);var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n},i.setUseProxies=function(r){r&&!B&&n(20),this.g=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&\"replace\"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b(\"Patches\").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce,cn=an.produceWithPatches.bind(an),sn=an.setAutoFreeze.bind(an),vn=an.setUseProxies.bind(an),pn=an.applyPatches.bind(an),ln=an.createDraft.bind(an),dn=an.finishDraft.bind(an);/* harmony default export */ var immer_esm = ((/* unused pure expression or super */ null && (fn)));\n//# sourceMappingURL=immer.esm.js.map\n\n;// CONCATENATED MODULE: ./node_modules/slate/dist/index.es.js\n\n\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DIRTY_PATHS = new WeakMap();\nvar DIRTY_PATH_KEYS = new WeakMap();\nvar FLUSHING = new WeakMap();\nvar NORMALIZING = new WeakMap();\nvar PATH_REFS = new WeakMap();\nvar POINT_REFS = new WeakMap();\nvar RANGE_REFS = new WeakMap();\n\nfunction ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar nextEditorId = 0;\n/**\r\n * Create a new Slate `Editor` object.\r\n */\n\nvar createEditor = () => {\n  var editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    id: nextEditorId++,\n    isInline: () => false,\n    isVoid: () => false,\n    markableVoid: () => false,\n    onChange: () => {},\n    apply: op => {\n      for (var ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op);\n      }\n\n      for (var _ref of Editor.pointRefs(editor)) {\n        PointRef.transform(_ref, op);\n      }\n\n      for (var _ref2 of Editor.rangeRefs(editor)) {\n        RangeRef.transform(_ref2, op);\n      }\n\n      var oldDirtyPaths = DIRTY_PATHS.get(editor) || [];\n      var oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set();\n      var dirtyPaths;\n      var dirtyPathKeys;\n\n      var add = path => {\n        if (path) {\n          var key = path.join(',');\n\n          if (!dirtyPathKeys.has(key)) {\n            dirtyPathKeys.add(key);\n            dirtyPaths.push(path);\n          }\n        }\n      };\n\n      if (Path.operationCanTransformPath(op)) {\n        dirtyPaths = [];\n        dirtyPathKeys = new Set();\n\n        for (var path of oldDirtyPaths) {\n          var newPath = Path.transform(path, op);\n          add(newPath);\n        }\n      } else {\n        dirtyPaths = oldDirtyPaths;\n        dirtyPathKeys = oldDirtyPathKeys;\n      }\n\n      var newDirtyPaths = editor.getDirtyPaths(op);\n\n      for (var _path of newDirtyPaths) {\n        add(_path);\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths);\n      DIRTY_PATH_KEYS.set(editor, dirtyPathKeys);\n      Transforms.transform(editor, op);\n      editor.operations.push(op);\n      Editor.normalize(editor); // Clear any formats applied to the cursor if the selection changes.\n\n      if (op.type === 'set_selection') {\n        editor.marks = null;\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true);\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false);\n          editor.onChange();\n          editor.operations = [];\n        });\n      }\n    },\n    addMark: (key, value) => {\n      var {\n        selection,\n        markableVoid\n      } = editor;\n\n      if (selection) {\n        var match = (node, path) => {\n          if (!Text.isText(node)) {\n            return false; // marks can only be applied to text\n          }\n\n          var [parentNode, parentPath] = Editor.parent(editor, path);\n          return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);\n        };\n\n        var expandedSelection = index_es_Range.isExpanded(selection);\n        var markAcceptingVoidSelected = false;\n\n        if (!expandedSelection) {\n          var [selectedNode, selectedPath] = Editor.node(editor, selection);\n\n          if (selectedNode && match(selectedNode, selectedPath)) {\n            var [parentNode] = Editor.parent(editor, selectedPath);\n            markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);\n          }\n        }\n\n        if (expandedSelection || markAcceptingVoidSelected) {\n          Transforms.setNodes(editor, {\n            [key]: value\n          }, {\n            match,\n            split: true,\n            voids: true\n          });\n        } else {\n          var marks = _objectSpread$9(_objectSpread$9({}, Editor.marks(editor) || {}), {}, {\n            [key]: value\n          });\n\n          editor.marks = marks;\n\n          if (!FLUSHING.get(editor)) {\n            editor.onChange();\n          }\n        }\n      }\n    },\n    deleteBackward: unit => {\n      var {\n        selection\n      } = editor;\n\n      if (selection && index_es_Range.isCollapsed(selection)) {\n        Transforms.delete(editor, {\n          unit,\n          reverse: true\n        });\n      }\n    },\n    deleteForward: unit => {\n      var {\n        selection\n      } = editor;\n\n      if (selection && index_es_Range.isCollapsed(selection)) {\n        Transforms.delete(editor, {\n          unit\n        });\n      }\n    },\n    deleteFragment: direction => {\n      var {\n        selection\n      } = editor;\n\n      if (selection && index_es_Range.isExpanded(selection)) {\n        Transforms.delete(editor, {\n          reverse: direction === 'backward'\n        });\n      }\n    },\n    getFragment: () => {\n      var {\n        selection\n      } = editor;\n\n      if (selection) {\n        return Node.fragment(editor, selection);\n      }\n\n      return [];\n    },\n    insertBreak: () => {\n      Transforms.splitNodes(editor, {\n        always: true\n      });\n    },\n    insertSoftBreak: () => {\n      Transforms.splitNodes(editor, {\n        always: true\n      });\n    },\n    insertFragment: fragment => {\n      Transforms.insertFragment(editor, fragment);\n    },\n    insertNode: node => {\n      Transforms.insertNodes(editor, node);\n    },\n    insertText: text => {\n      var {\n        selection,\n        marks\n      } = editor;\n\n      if (selection) {\n        if (marks) {\n          var node = _objectSpread$9({\n            text\n          }, marks);\n\n          Transforms.insertNodes(editor, node);\n        } else {\n          Transforms.insertText(editor, text);\n        }\n\n        editor.marks = null;\n      }\n    },\n    normalizeNode: entry => {\n      var [node, path] = entry; // There are no core normalizations for text nodes.\n\n      if (Text.isText(node)) {\n        return;\n      } // Ensure that block and inline nodes have at least one text child.\n\n\n      if (Element.isElement(node) && node.children.length === 0) {\n        var child = {\n          text: ''\n        };\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true\n        });\n        return;\n      } // Determine whether the node should have block or inline children.\n\n\n      var shouldHaveInlines = Editor.isEditor(node) ? false : Element.isElement(node) && (editor.isInline(node) || node.children.length === 0 || Text.isText(node.children[0]) || editor.isInline(node.children[0])); // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n\n      var n = 0;\n\n      for (var i = 0; i < node.children.length; i++, n++) {\n        var currentNode = Node.get(editor, path);\n        if (Text.isText(currentNode)) continue;\n        var _child = node.children[i];\n        var prev = currentNode.children[n - 1];\n        var isLast = i === node.children.length - 1;\n        var isInlineOrText = Text.isText(_child) || Element.isElement(_child) && editor.isInline(_child); // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n),\n            voids: true\n          });\n          n--;\n        } else if (Element.isElement(_child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(_child)) {\n            if (prev == null || !Text.isText(prev)) {\n              var newChild = {\n                text: ''\n              };\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true\n              });\n              n++;\n            } else if (isLast) {\n              var _newChild = {\n                text: ''\n              };\n              Transforms.insertNodes(editor, _newChild, {\n                at: path.concat(n + 1),\n                voids: true\n              });\n              n++;\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(_child, prev, {\n              loose: true\n            })) {\n              Transforms.mergeNodes(editor, {\n                at: path.concat(n),\n                voids: true\n              });\n              n--;\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true\n              });\n              n--;\n            } else if (_child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true\n              });\n              n--;\n            }\n          }\n        }\n      }\n    },\n    removeMark: key => {\n      var {\n        selection\n      } = editor;\n\n      if (selection) {\n        var match = (node, path) => {\n          if (!Text.isText(node)) {\n            return false; // marks can only be applied to text\n          }\n\n          var [parentNode, parentPath] = Editor.parent(editor, path);\n          return !editor.isVoid(parentNode) || editor.markableVoid(parentNode);\n        };\n\n        var expandedSelection = index_es_Range.isExpanded(selection);\n        var markAcceptingVoidSelected = false;\n\n        if (!expandedSelection) {\n          var [selectedNode, selectedPath] = Editor.node(editor, selection);\n\n          if (selectedNode && match(selectedNode, selectedPath)) {\n            var [parentNode] = Editor.parent(editor, selectedPath);\n            markAcceptingVoidSelected = parentNode && editor.markableVoid(parentNode);\n          }\n        }\n\n        if (expandedSelection || markAcceptingVoidSelected) {\n          Transforms.unsetNodes(editor, key, {\n            match,\n            split: true,\n            voids: true\n          });\n        } else {\n          var marks = _objectSpread$9({}, Editor.marks(editor) || {});\n\n          delete marks[key];\n          editor.marks = marks;\n\n          if (!FLUSHING.get(editor)) {\n            editor.onChange();\n          }\n        }\n      }\n    },\n\n    /**\r\n     * Get the \"dirty\" paths generated from an operation.\r\n     */\n    getDirtyPaths: op => {\n      switch (op.type) {\n        case 'insert_text':\n        case 'remove_text':\n        case 'set_node':\n          {\n            var {\n              path\n            } = op;\n            return Path.levels(path);\n          }\n\n        case 'insert_node':\n          {\n            var {\n              node,\n              path: _path2\n            } = op;\n            var levels = Path.levels(_path2);\n            var descendants = Text.isText(node) ? [] : Array.from(Node.nodes(node), _ref3 => {\n              var [, p] = _ref3;\n              return _path2.concat(p);\n            });\n            return [...levels, ...descendants];\n          }\n\n        case 'merge_node':\n          {\n            var {\n              path: _path3\n            } = op;\n            var ancestors = Path.ancestors(_path3);\n            var previousPath = Path.previous(_path3);\n            return [...ancestors, previousPath];\n          }\n\n        case 'move_node':\n          {\n            var {\n              path: _path4,\n              newPath\n            } = op;\n\n            if (Path.equals(_path4, newPath)) {\n              return [];\n            }\n\n            var oldAncestors = [];\n            var newAncestors = [];\n\n            for (var ancestor of Path.ancestors(_path4)) {\n              var p = Path.transform(ancestor, op);\n              oldAncestors.push(p);\n            }\n\n            for (var _ancestor of Path.ancestors(newPath)) {\n              var _p = Path.transform(_ancestor, op);\n\n              newAncestors.push(_p);\n            }\n\n            var newParent = newAncestors[newAncestors.length - 1];\n            var newIndex = newPath[newPath.length - 1];\n            var resultPath = newParent.concat(newIndex);\n            return [...oldAncestors, ...newAncestors, resultPath];\n          }\n\n        case 'remove_node':\n          {\n            var {\n              path: _path5\n            } = op;\n\n            var _ancestors = Path.ancestors(_path5);\n\n            return [..._ancestors];\n          }\n\n        case 'split_node':\n          {\n            var {\n              path: _path6\n            } = op;\n\n            var _levels = Path.levels(_path6);\n\n            var nextPath = Path.next(_path6);\n            return [..._levels, nextPath];\n          }\n\n        default:\n          {\n            return [];\n          }\n      }\n    }\n  };\n  return editor;\n};\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n// Character (grapheme cluster) boundaries are determined according to\n// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n//\n// References:\n//\n// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n\n/**\r\n * Get the distance to the end of the first character in a string of text.\r\n */\nvar getCharacterDistance = function getCharacterDistance(str) {\n  var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var isLTR = !isRTL;\n  var codepoints = isRTL ? codepointsIteratorRTL(str) : str;\n  var left = CodepointType.None;\n  var right = CodepointType.None;\n  var distance = 0; // Evaluation of these conditions are deferred.\n\n  var gb11 = null; // Is GB11 applicable?\n\n  var gb12Or13 = null; // Is GB12 or GB13 applicable?\n\n  for (var char of codepoints) {\n    var code = char.codePointAt(0);\n    if (!code) break;\n    var type = getCodepointType(char, code);\n    [left, right] = isLTR ? [right, type] : [type, left];\n\n    if (intersects(left, CodepointType.ZWJ) && intersects(right, CodepointType.ExtPict)) {\n      if (isLTR) {\n        gb11 = endsWithEmojiZWJ(str.substring(0, distance));\n      } else {\n        gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance));\n      }\n\n      if (!gb11) break;\n    }\n\n    if (intersects(left, CodepointType.RI) && intersects(right, CodepointType.RI)) {\n      if (gb12Or13 !== null) {\n        gb12Or13 = !gb12Or13;\n      } else {\n        if (isLTR) {\n          gb12Or13 = true;\n        } else {\n          gb12Or13 = endsWithOddNumberOfRIs(str.substring(0, str.length - distance));\n        }\n      }\n\n      if (!gb12Or13) break;\n    }\n\n    if (left !== CodepointType.None && right !== CodepointType.None && isBoundaryPair(left, right)) {\n      break;\n    }\n\n    distance += char.length;\n  }\n\n  return distance || 1;\n};\nvar SPACE = /\\s/;\nvar PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\nvar CHAMELEON = /['\\u2018\\u2019]/;\n/**\r\n * Get the distance to the end of the first word in a string of text.\r\n */\n\nvar getWordDistance = function getWordDistance(text) {\n  var isRTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var dist = 0;\n  var started = false;\n\n  while (text.length > 0) {\n    var charDist = getCharacterDistance(text, isRTL);\n    var [char, remaining] = splitByCharacterDistance(text, charDist, isRTL);\n\n    if (isWordCharacter(char, remaining, isRTL)) {\n      started = true;\n      dist += charDist;\n    } else if (!started) {\n      dist += charDist;\n    } else {\n      break;\n    }\n\n    text = remaining;\n  }\n\n  return dist;\n};\n/**\r\n * Split a string in two parts at a given distance starting from the end when\r\n * `isRTL` is set to `true`.\r\n */\n\nvar splitByCharacterDistance = (str, dist, isRTL) => {\n  if (isRTL) {\n    var at = str.length - dist;\n    return [str.slice(at, str.length), str.slice(0, at)];\n  }\n\n  return [str.slice(0, dist), str.slice(dist)];\n};\n/**\r\n * Check if a character is a word character. The `remaining` argument is used\r\n * because sometimes you must read subsequent characters to truly determine it.\r\n */\n\nvar isWordCharacter = function isWordCharacter(char, remaining) {\n  var isRTL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (SPACE.test(char)) {\n    return false;\n  } // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n\n\n  if (CHAMELEON.test(char)) {\n    var charDist = getCharacterDistance(remaining, isRTL);\n    var [nextChar, nextRemaining] = splitByCharacterDistance(remaining, charDist, isRTL);\n\n    if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n      return true;\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false;\n  }\n\n  return true;\n};\n/**\r\n * Iterate on codepoints from right to left.\r\n */\n\n\nvar codepointsIteratorRTL = function* codepointsIteratorRTL(str) {\n  var end = str.length - 1;\n\n  for (var i = 0; i < str.length; i++) {\n    var char1 = str.charAt(end - i);\n\n    if (isLowSurrogate(char1.charCodeAt(0))) {\n      var char2 = str.charAt(end - i - 1);\n\n      if (isHighSurrogate(char2.charCodeAt(0))) {\n        yield char2 + char1;\n        i++;\n        continue;\n      }\n    }\n\n    yield char1;\n  }\n};\n/**\r\n * Is `charCode` a high surrogate.\r\n *\r\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n */\n\nvar isHighSurrogate = charCode => {\n  return charCode >= 0xd800 && charCode <= 0xdbff;\n};\n/**\r\n * Is `charCode` a low surrogate.\r\n *\r\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\r\n */\n\n\nvar isLowSurrogate = charCode => {\n  return charCode >= 0xdc00 && charCode <= 0xdfff;\n};\n\nvar CodepointType;\n\n(function (CodepointType) {\n  CodepointType[CodepointType[\"None\"] = 0] = \"None\";\n  CodepointType[CodepointType[\"Extend\"] = 1] = \"Extend\";\n  CodepointType[CodepointType[\"ZWJ\"] = 2] = \"ZWJ\";\n  CodepointType[CodepointType[\"RI\"] = 4] = \"RI\";\n  CodepointType[CodepointType[\"Prepend\"] = 8] = \"Prepend\";\n  CodepointType[CodepointType[\"SpacingMark\"] = 16] = \"SpacingMark\";\n  CodepointType[CodepointType[\"L\"] = 32] = \"L\";\n  CodepointType[CodepointType[\"V\"] = 64] = \"V\";\n  CodepointType[CodepointType[\"T\"] = 128] = \"T\";\n  CodepointType[CodepointType[\"LV\"] = 256] = \"LV\";\n  CodepointType[CodepointType[\"LVT\"] = 512] = \"LVT\";\n  CodepointType[CodepointType[\"ExtPict\"] = 1024] = \"ExtPict\";\n  CodepointType[CodepointType[\"Any\"] = 2048] = \"Any\";\n})(CodepointType || (CodepointType = {}));\n\nvar reExtend = /^(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])$/;\nvar rePrepend = /^(?:[\\u0600-\\u0605\\u06DD\\u070F\\u0890\\u0891\\u08E2\\u0D4E]|\\uD804[\\uDCBD\\uDCCD\\uDDC2\\uDDC3]|\\uD806[\\uDD3F\\uDD41\\uDE3A\\uDE84-\\uDE89]|\\uD807\\uDD46)$/;\nvar reSpacingMark = /^(?:[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BF\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0\\u0CC1\\u0CC3\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0D02\\u0D03\\u0D3F\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82\\u0D83\\u0DD0\\u0DD1\\u0DD8-\\u0DDE\\u0DF2\\u0DF3\\u0E33\\u0EB3\\u0F3E\\u0F3F\\u0F7F\\u1031\\u103B\\u103C\\u1056\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF7\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]|\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD45\\uDD46\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDDCE\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB1\\uDCB2\\uDCB9\\uDCBB\\uDCBC\\uDCBE\\uDCC1\\uDDB0\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF26]|\\uD806[\\uDC2C-\\uDC2E\\uDC38\\uDD31-\\uDD35\\uDD37\\uDD38\\uDD3D\\uDD40\\uDD42\\uDDD1-\\uDDD3\\uDDDC-\\uDDDF\\uDDE4\\uDE39\\uDE57\\uDE58\\uDE97]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4\\uDD8A-\\uDD8E\\uDD93\\uDD94\\uDD96\\uDEF5\\uDEF6]|\\uD81B[\\uDF51-\\uDF87\\uDFF0\\uDFF1]|\\uD834[\\uDD66\\uDD6D])$/;\nvar reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/;\nvar reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/;\nvar reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/;\nvar reLV = /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/;\nvar reLVT = /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/;\nvar reExtPict = /^(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])$/;\n\nvar getCodepointType = (char, code) => {\n  var type = CodepointType.Any;\n\n  if (char.search(reExtend) !== -1) {\n    type |= CodepointType.Extend;\n  }\n\n  if (code === 0x200d) {\n    type |= CodepointType.ZWJ;\n  }\n\n  if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n    type |= CodepointType.RI;\n  }\n\n  if (char.search(rePrepend) !== -1) {\n    type |= CodepointType.Prepend;\n  }\n\n  if (char.search(reSpacingMark) !== -1) {\n    type |= CodepointType.SpacingMark;\n  }\n\n  if (char.search(reL) !== -1) {\n    type |= CodepointType.L;\n  }\n\n  if (char.search(reV) !== -1) {\n    type |= CodepointType.V;\n  }\n\n  if (char.search(reT) !== -1) {\n    type |= CodepointType.T;\n  }\n\n  if (char.search(reLV) !== -1) {\n    type |= CodepointType.LV;\n  }\n\n  if (char.search(reLVT) !== -1) {\n    type |= CodepointType.LVT;\n  }\n\n  if (char.search(reExtPict) !== -1) {\n    type |= CodepointType.ExtPict;\n  }\n\n  return type;\n};\n\nfunction intersects(x, y) {\n  return (x & y) !== 0;\n}\n\nvar NonBoundaryPairs = [// GB6\n[CodepointType.L, CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT], // GB7\n[CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T], // GB8\n[CodepointType.LVT | CodepointType.T, CodepointType.T], // GB9\n[CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ], // GB9a\n[CodepointType.Any, CodepointType.SpacingMark], // GB9b\n[CodepointType.Prepend, CodepointType.Any], // GB11\n[CodepointType.ZWJ, CodepointType.ExtPict], // GB12 and GB13\n[CodepointType.RI, CodepointType.RI]];\n\nfunction isBoundaryPair(left, right) {\n  return NonBoundaryPairs.findIndex(r => intersects(left, r[0]) && intersects(right, r[1])) === -1;\n}\n\nvar endingEmojiZWJ = /(?:[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2605\\u2607-\\u2612\\u2614-\\u2685\\u2690-\\u2705\\u2708-\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC00-\\uDCFF\\uDD0D-\\uDD0F\\uDD2F\\uDD6C-\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDAD-\\uDDE5\\uDE01-\\uDE0F\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE3C-\\uDE3F\\uDE49-\\uDFFA]|\\uD83D[\\uDC00-\\uDD3D\\uDD46-\\uDE4F\\uDE80-\\uDEFF\\uDF74-\\uDF7F\\uDFD5-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDEFF]|\\uD83F[\\uDC00-\\uDFFD])(?:[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09BE\\u09C1-\\u09C4\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3E\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE\\u0BC0\\u0BCD\\u0BD7\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC2\\u0CC6\\u0CCC\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D3E\\u0D41-\\u0D44\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DCF\\u0DD2-\\u0DD4\\u0DD6\\u0DDF\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1AC0\\u1B00-\\u1B03\\u1B34-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFF9E\\uFF9F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDEAB\\uDEAC\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDDCF\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF3E\\uDF40\\uDF57\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB0\\uDCB3-\\uDCB8\\uDCBA\\uDCBD\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDAF\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDD30\\uDD3B\\uDD3C\\uDD3E\\uDD43\\uDDD4-\\uDDD7\\uDDDA\\uDDDB\\uDDE0\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF4F\\uDF8F-\\uDF92\\uDFE4]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65\\uDD67-\\uDD69\\uDD6E-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A\\uDD30-\\uDD36\\uDEEC-\\uDEEF]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uD83C[\\uDFFB-\\uDFFF]|\\uDB40[\\uDC20-\\uDC7F\\uDD00-\\uDDEF])*\\u200D$/;\n\nvar endsWithEmojiZWJ = str => {\n  return str.search(endingEmojiZWJ) !== -1;\n};\n\nvar endingRIs = /(?:\\uD83C[\\uDDE6-\\uDDFF])+$/g;\n\nvar endsWithOddNumberOfRIs = str => {\n  var match = str.match(endingRIs);\n\n  if (match === null) {\n    return false;\n  } else {\n    // A RI is represented by a surrogate pair.\n    var numRIs = match[0].length / 2;\n    return numRIs % 2 === 1;\n  }\n};\n\n/**\r\n * Shared the function with isElementType utility\r\n */\n\nvar isElement = value => {\n  return isPlainObject(value) && Node.isNodeList(value.children) && !Editor.isEditor(value);\n}; // eslint-disable-next-line no-redeclare\n\n\nvar Element = {\n  /**\r\n   * Check if a value implements the 'Ancestor' interface.\r\n   */\n  isAncestor(value) {\n    return isPlainObject(value) && Node.isNodeList(value.children);\n  },\n\n  /**\r\n   * Check if a value implements the `Element` interface.\r\n   */\n  isElement,\n\n  /**\r\n   * Check if a value is an array of `Element` objects.\r\n   */\n  isElementList(value) {\n    return Array.isArray(value) && value.every(val => Element.isElement(val));\n  },\n\n  /**\r\n   * Check if a set of props is a partial of Element.\r\n   */\n  isElementProps(props) {\n    return props.children !== undefined;\n  },\n\n  /**\r\n   * Check if a value implements the `Element` interface and has elementKey with selected value.\r\n   * Default it check to `type` key value\r\n   */\n  isElementType: function isElementType(value, elementVal) {\n    var elementKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'type';\n    return isElement(value) && value[elementKey] === elementVal;\n  },\n\n  /**\r\n   * Check if an element matches set of properties.\r\n   *\r\n   * Note: this checks custom properties, and it does not ensure that any\r\n   * children are equivalent.\r\n   */\n  matches(element, props) {\n    for (var key in props) {\n      if (key === 'children') {\n        continue;\n      }\n\n      if (element[key] !== props[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n};\n\nvar _excluded$4 = [\"text\"],\n    _excluded2$3 = [\"text\"];\n\nfunction ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar IS_EDITOR_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare\n\nvar Editor = {\n  /**\r\n   * Get the ancestor above a location in the document.\r\n   */\n  above(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var path = Editor.path(editor, at);\n    var reverse = mode === 'lowest';\n\n    for (var [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse\n    })) {\n      if (Text.isText(n)) return;\n\n      if (index_es_Range.isRange(at)) {\n        if (Path.isAncestor(p, at.anchor.path) && Path.isAncestor(p, at.focus.path)) {\n          return [n, p];\n        }\n      } else {\n        if (!Path.equals(path, p)) {\n          return [n, p];\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Add a custom property to the leaf text nodes in the current selection.\r\n   *\r\n   * If the selection is currently collapsed, the marks will be added to the\r\n   * `editor.marks` property instead, and applied when text is inserted next.\r\n   */\n  addMark(editor, key, value) {\n    editor.addMark(key, value);\n  },\n\n  /**\r\n   * Get the point after a location.\r\n   */\n  after(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var anchor = Editor.point(editor, at, {\n      edge: 'end'\n    });\n    var focus = Editor.end(editor, []);\n    var range = {\n      anchor,\n      focus\n    };\n    var {\n      distance = 1\n    } = options;\n    var d = 0;\n    var target;\n\n    for (var p of Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {\n      at: range\n    }))) {\n      if (d > distance) {\n        break;\n      }\n\n      if (d !== 0) {\n        target = p;\n      }\n\n      d++;\n    }\n\n    return target;\n  },\n\n  /**\r\n   * Get the point before a location.\r\n   */\n  before(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var anchor = Editor.start(editor, []);\n    var focus = Editor.point(editor, at, {\n      edge: 'start'\n    });\n    var range = {\n      anchor,\n      focus\n    };\n    var {\n      distance = 1\n    } = options;\n    var d = 0;\n    var target;\n\n    for (var p of Editor.positions(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {\n      at: range,\n      reverse: true\n    }))) {\n      if (d > distance) {\n        break;\n      }\n\n      if (d !== 0) {\n        target = p;\n      }\n\n      d++;\n    }\n\n    return target;\n  },\n\n  /**\r\n   * Delete content in the editor backward from the current selection.\r\n   */\n  deleteBackward(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      unit = 'character'\n    } = options;\n    editor.deleteBackward(unit);\n  },\n\n  /**\r\n   * Delete content in the editor forward from the current selection.\r\n   */\n  deleteForward(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      unit = 'character'\n    } = options;\n    editor.deleteForward(unit);\n  },\n\n  /**\r\n   * Delete the content in the current selection.\r\n   */\n  deleteFragment(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      direction = 'forward'\n    } = options;\n    editor.deleteFragment(direction);\n  },\n\n  /**\r\n   * Get the start and end points of a location.\r\n   */\n  edges(editor, at) {\n    return [Editor.start(editor, at), Editor.end(editor, at)];\n  },\n\n  /**\r\n   * Get the end point of a location.\r\n   */\n  end(editor, at) {\n    return Editor.point(editor, at, {\n      edge: 'end'\n    });\n  },\n\n  /**\r\n   * Get the first node at a location.\r\n   */\n  first(editor, at) {\n    var path = Editor.path(editor, at, {\n      edge: 'start'\n    });\n    return Editor.node(editor, path);\n  },\n\n  /**\r\n   * Get the fragment at a location.\r\n   */\n  fragment(editor, at) {\n    var range = Editor.range(editor, at);\n    var fragment = Node.fragment(editor, range);\n    return fragment;\n  },\n\n  /**\r\n   * Check if a node has block children.\r\n   */\n  hasBlocks(editor, element) {\n    return element.children.some(n => Editor.isBlock(editor, n));\n  },\n\n  /**\r\n   * Check if a node has inline and text children.\r\n   */\n  hasInlines(editor, element) {\n    return element.children.some(n => Text.isText(n) || Editor.isInline(editor, n));\n  },\n\n  /**\r\n   * Check if a node has text children.\r\n   */\n  hasTexts(editor, element) {\n    return element.children.every(n => Text.isText(n));\n  },\n\n  /**\r\n   * Insert a block break at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertBreak(editor) {\n    editor.insertBreak();\n  },\n\n  /**\r\n   * Insert a soft break at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertSoftBreak(editor) {\n    editor.insertSoftBreak();\n  },\n\n  /**\r\n   * Insert a fragment at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertFragment(editor, fragment) {\n    editor.insertFragment(fragment);\n  },\n\n  /**\r\n   * Insert a node at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertNode(editor, node) {\n    editor.insertNode(node);\n  },\n\n  /**\r\n   * Insert text at the current selection.\r\n   *\r\n   * If the selection is currently expanded, it will be deleted first.\r\n   */\n  insertText(editor, text) {\n    editor.insertText(text);\n  },\n\n  /**\r\n   * Check if a value is a block `Element` object.\r\n   */\n  isBlock(editor, value) {\n    return Element.isElement(value) && !editor.isInline(value);\n  },\n\n  /**\r\n   * Check if a value is an `Editor` object.\r\n   */\n  isEditor(value) {\n    var cachedIsEditor = IS_EDITOR_CACHE.get(value);\n\n    if (cachedIsEditor !== undefined) {\n      return cachedIsEditor;\n    }\n\n    if (!isPlainObject(value)) {\n      return false;\n    }\n\n    var isEditor = typeof value.addMark === 'function' && typeof value.apply === 'function' && typeof value.deleteBackward === 'function' && typeof value.deleteForward === 'function' && typeof value.deleteFragment === 'function' && typeof value.insertBreak === 'function' && typeof value.insertSoftBreak === 'function' && typeof value.insertFragment === 'function' && typeof value.insertNode === 'function' && typeof value.insertText === 'function' && typeof value.isInline === 'function' && typeof value.isVoid === 'function' && typeof value.normalizeNode === 'function' && typeof value.onChange === 'function' && typeof value.removeMark === 'function' && typeof value.getDirtyPaths === 'function' && (value.marks === null || isPlainObject(value.marks)) && (value.selection === null || index_es_Range.isRange(value.selection)) && Node.isNodeList(value.children) && Operation.isOperationList(value.operations);\n    IS_EDITOR_CACHE.set(value, isEditor);\n    return isEditor;\n  },\n\n  /**\r\n   * Check if a point is the end point of a location.\r\n   */\n  isEnd(editor, point, at) {\n    var end = Editor.end(editor, at);\n    return Point.equals(point, end);\n  },\n\n  /**\r\n   * Check if a point is an edge of a location.\r\n   */\n  isEdge(editor, point, at) {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at);\n  },\n\n  /**\r\n   * Check if an element is empty, accounting for void nodes.\r\n   */\n  isEmpty(editor, element) {\n    var {\n      children\n    } = element;\n    var [first] = children;\n    return children.length === 0 || children.length === 1 && Text.isText(first) && first.text === '' && !editor.isVoid(element);\n  },\n\n  /**\r\n   * Check if a value is an inline `Element` object.\r\n   */\n  isInline(editor, value) {\n    return Element.isElement(value) && editor.isInline(value);\n  },\n\n  /**\r\n   * Check if the editor is currently normalizing after each operation.\r\n   */\n  isNormalizing(editor) {\n    var isNormalizing = NORMALIZING.get(editor);\n    return isNormalizing === undefined ? true : isNormalizing;\n  },\n\n  /**\r\n   * Check if a point is the start point of a location.\r\n   */\n  isStart(editor, point, at) {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false;\n    }\n\n    var start = Editor.start(editor, at);\n    return Point.equals(point, start);\n  },\n\n  /**\r\n   * Check if a value is a void `Element` object.\r\n   */\n  isVoid(editor, value) {\n    return Element.isElement(value) && editor.isVoid(value);\n  },\n\n  /**\r\n   * Get the last node at a location.\r\n   */\n  last(editor, at) {\n    var path = Editor.path(editor, at, {\n      edge: 'end'\n    });\n    return Editor.node(editor, path);\n  },\n\n  /**\r\n   * Get the leaf text node at a location.\r\n   */\n  leaf(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var node = Node.leaf(editor, path);\n    return [node, path];\n  },\n\n  /**\r\n   * Iterate through all of the levels at a location.\r\n   */\n  *levels(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      at = editor.selection,\n      reverse = false,\n      voids = false\n    } = options;\n    var {\n      match\n    } = options;\n\n    if (match == null) {\n      match = () => true;\n    }\n\n    if (!at) {\n      return;\n    }\n\n    var levels = [];\n    var path = Editor.path(editor, at);\n\n    for (var [n, p] of Node.levels(editor, path)) {\n      if (!match(n, p)) {\n        continue;\n      }\n\n      levels.push([n, p]);\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break;\n      }\n    }\n\n    if (reverse) {\n      levels.reverse();\n    }\n\n    yield* levels;\n  },\n\n  /**\r\n   * Get the marks that would be added to text at the current selection.\r\n   */\n  marks(editor) {\n    var {\n      marks,\n      selection\n    } = editor;\n\n    if (!selection) {\n      return null;\n    }\n\n    if (marks) {\n      return marks;\n    }\n\n    if (index_es_Range.isExpanded(selection)) {\n      var [match] = Editor.nodes(editor, {\n        match: Text.isText\n      });\n\n      if (match) {\n        var [_node] = match;\n\n        var _rest = _objectWithoutProperties(_node, _excluded$4);\n\n        return _rest;\n      } else {\n        return {};\n      }\n    }\n\n    var {\n      anchor\n    } = selection;\n    var {\n      path\n    } = anchor;\n    var [node] = Editor.leaf(editor, path);\n\n    if (anchor.offset === 0) {\n      var prev = Editor.previous(editor, {\n        at: path,\n        match: Text.isText\n      });\n      var markedVoid = Editor.above(editor, {\n        match: n => Editor.isVoid(editor, n) && editor.markableVoid(n)\n      });\n\n      if (!markedVoid) {\n        var block = Editor.above(editor, {\n          match: n => Editor.isBlock(editor, n)\n        });\n\n        if (prev && block) {\n          var [prevNode, prevPath] = prev;\n          var [, blockPath] = block;\n\n          if (Path.isAncestor(blockPath, prevPath)) {\n            node = prevNode;\n          }\n        }\n      }\n    }\n\n    var rest = _objectWithoutProperties(node, _excluded2$3);\n\n    return rest;\n  },\n\n  /**\r\n   * Get the matching node in the branch of the document after a location.\r\n   */\n  next(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match,\n      at = editor.selection\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var pointAfterLocation = Editor.after(editor, at, {\n      voids\n    });\n    if (!pointAfterLocation) return;\n    var [, to] = Editor.last(editor, []);\n    var span = [pointAfterLocation.path, to];\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(\"Cannot get the next node from the root node!\");\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        var [parent] = Editor.parent(editor, at);\n\n        match = n => parent.children.includes(n);\n      } else {\n        match = () => true;\n      }\n    }\n\n    var [next] = Editor.nodes(editor, {\n      at: span,\n      match,\n      mode,\n      voids\n    });\n    return next;\n  },\n\n  /**\r\n   * Get the node at a location.\r\n   */\n  node(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var node = Node.get(editor, path);\n    return [node, path];\n  },\n\n  /**\r\n   * Iterate through all of the nodes in the Editor.\r\n   */\n  *nodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false\n    } = options;\n    var {\n      match\n    } = options;\n\n    if (!match) {\n      match = () => true;\n    }\n\n    if (!at) {\n      return;\n    }\n\n    var from;\n    var to;\n\n    if (Span.isSpan(at)) {\n      from = at[0];\n      to = at[1];\n    } else {\n      var first = Editor.path(editor, at, {\n        edge: 'start'\n      });\n      var last = Editor.path(editor, at, {\n        edge: 'end'\n      });\n      from = reverse ? last : first;\n      to = reverse ? first : last;\n    }\n\n    var nodeEntries = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: _ref => {\n        var [n] = _ref;\n        return voids ? false : Editor.isVoid(editor, n);\n      }\n    });\n    var matches = [];\n    var hit;\n\n    for (var [node, path] of nodeEntries) {\n      var isLower = hit && Path.compare(path, hit[1]) === 0; // In highest mode any node lower than the last hit is not a match.\n\n      if (mode === 'highest' && isLower) {\n        continue;\n      }\n\n      if (!match(node, path)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return;\n        } else {\n          continue;\n        }\n      } // If there's a match and it's lower than the last, update the hit.\n\n\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path];\n        continue;\n      } // In lowest mode we emit the last hit, once it's guaranteed lowest.\n\n\n      var emit = mode === 'lowest' ? hit : [node, path];\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit);\n        } else {\n          yield emit;\n        }\n      }\n\n      hit = [node, path];\n    } // Since lowest is always emitting one behind, catch up at the end.\n\n\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit);\n      } else {\n        yield hit;\n      }\n    } // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n\n\n    if (universal) {\n      yield* matches;\n    }\n  },\n\n  /**\r\n   * Normalize any dirty objects in the editor.\r\n   */\n  normalize(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      force = false\n    } = options;\n\n    var getDirtyPaths = editor => {\n      return DIRTY_PATHS.get(editor) || [];\n    };\n\n    var getDirtyPathKeys = editor => {\n      return DIRTY_PATH_KEYS.get(editor) || new Set();\n    };\n\n    var popDirtyPath = editor => {\n      var path = getDirtyPaths(editor).pop();\n      var key = path.join(',');\n      getDirtyPathKeys(editor).delete(key);\n      return path;\n    };\n\n    if (!Editor.isNormalizing(editor)) {\n      return;\n    }\n\n    if (force) {\n      var allPaths = Array.from(Node.nodes(editor), _ref2 => {\n        var [, p] = _ref2;\n        return p;\n      });\n      var allPathKeys = new Set(allPaths.map(p => p.join(',')));\n      DIRTY_PATHS.set(editor, allPaths);\n      DIRTY_PATH_KEYS.set(editor, allPathKeys);\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return;\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      /*\r\n        Fix dirty elements with no children.\r\n        editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\r\n        Running an initial pass avoids the catch-22 race condition.\r\n      */\n      for (var dirtyPath of getDirtyPaths(editor)) {\n        if (Node.has(editor, dirtyPath)) {\n          var entry = Editor.node(editor, dirtyPath);\n          var [node, _] = entry;\n          /*\r\n            The default normalizer inserts an empty text node in this scenario, but it can be customised.\r\n            So there is some risk here.\r\n                       As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\r\n            by definition adding children to an empty node can't cause other paths to change.\r\n          */\n\n          if (Element.isElement(node) && node.children.length === 0) {\n            editor.normalizeNode(entry);\n          }\n        }\n      }\n\n      var max = getDirtyPaths(editor).length * 42; // HACK: better way?\n\n      var m = 0;\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(\"\\n            Could not completely normalize the editor after \".concat(max, \" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\\n          \"));\n        }\n\n        var _dirtyPath = popDirtyPath(editor); // If the node doesn't exist in the tree, it does not need to be normalized.\n\n\n        if (Node.has(editor, _dirtyPath)) {\n          var _entry = Editor.node(editor, _dirtyPath);\n\n          editor.normalizeNode(_entry);\n        }\n\n        m++;\n      }\n    });\n  },\n\n  /**\r\n   * Get the parent node of a location.\r\n   */\n  parent(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var path = Editor.path(editor, at, options);\n    var parentPath = Path.parent(path);\n    var entry = Editor.node(editor, parentPath);\n    return entry;\n  },\n\n  /**\r\n   * Get the path of a location.\r\n   */\n  path(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      depth,\n      edge\n    } = options;\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        var [, firstPath] = Node.first(editor, at);\n        at = firstPath;\n      } else if (edge === 'end') {\n        var [, lastPath] = Node.last(editor, at);\n        at = lastPath;\n      }\n    }\n\n    if (index_es_Range.isRange(at)) {\n      if (edge === 'start') {\n        at = index_es_Range.start(at);\n      } else if (edge === 'end') {\n        at = index_es_Range.end(at);\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path);\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path;\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth);\n    }\n\n    return at;\n  },\n\n  hasPath(editor, path) {\n    return Node.has(editor, path);\n  },\n\n  /**\r\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\r\n   * operations are applied to the editor.\r\n   */\n  pathRef(editor, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      affinity = 'forward'\n    } = options;\n    var ref = {\n      current: path,\n      affinity,\n\n      unref() {\n        var {\n          current\n        } = ref;\n        var pathRefs = Editor.pathRefs(editor);\n        pathRefs.delete(ref);\n        ref.current = null;\n        return current;\n      }\n\n    };\n    var refs = Editor.pathRefs(editor);\n    refs.add(ref);\n    return ref;\n  },\n\n  /**\r\n   * Get the set of currently tracked path refs of the editor.\r\n   */\n  pathRefs(editor) {\n    var refs = PATH_REFS.get(editor);\n\n    if (!refs) {\n      refs = new Set();\n      PATH_REFS.set(editor, refs);\n    }\n\n    return refs;\n  },\n\n  /**\r\n   * Get the start or end point of a location.\r\n   */\n  point(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      edge = 'start'\n    } = options;\n\n    if (Path.isPath(at)) {\n      var path;\n\n      if (edge === 'end') {\n        var [, lastPath] = Node.last(editor, at);\n        path = lastPath;\n      } else {\n        var [, firstPath] = Node.first(editor, at);\n        path = firstPath;\n      }\n\n      var node = Node.get(editor, path);\n\n      if (!Text.isText(node)) {\n        throw new Error(\"Cannot get the \".concat(edge, \" point in the node at path [\").concat(at, \"] because it has no \").concat(edge, \" text node.\"));\n      }\n\n      return {\n        path,\n        offset: edge === 'end' ? node.text.length : 0\n      };\n    }\n\n    if (index_es_Range.isRange(at)) {\n      var [start, end] = index_es_Range.edges(at);\n      return edge === 'start' ? start : end;\n    }\n\n    return at;\n  },\n\n  /**\r\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\r\n   * operations are applied to the editor.\r\n   */\n  pointRef(editor, point) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      affinity = 'forward'\n    } = options;\n    var ref = {\n      current: point,\n      affinity,\n\n      unref() {\n        var {\n          current\n        } = ref;\n        var pointRefs = Editor.pointRefs(editor);\n        pointRefs.delete(ref);\n        ref.current = null;\n        return current;\n      }\n\n    };\n    var refs = Editor.pointRefs(editor);\n    refs.add(ref);\n    return ref;\n  },\n\n  /**\r\n   * Get the set of currently tracked point refs of the editor.\r\n   */\n  pointRefs(editor) {\n    var refs = POINT_REFS.get(editor);\n\n    if (!refs) {\n      refs = new Set();\n      POINT_REFS.set(editor, refs);\n    }\n\n    return refs;\n  },\n\n  /**\r\n   * Return all the positions in `at` range where a `Point` can be placed.\r\n   *\r\n   * By default, moves forward by individual offsets at a time, but\r\n   * the `unit` option can be used to to move by character, word, line, or block.\r\n   *\r\n   * The `reverse` option can be used to change iteration direction.\r\n   *\r\n   * Note: By default void nodes are treated as a single point and iteration\r\n   * will not happen inside their content unless you pass in true for the\r\n   * `voids` option, then iteration will occur.\r\n   */\n  *positions(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      at = editor.selection,\n      unit = 'offset',\n      reverse = false,\n      voids = false\n    } = options;\n\n    if (!at) {\n      return;\n    }\n    /**\r\n     * Algorithm notes:\r\n     *\r\n     * Each step `distance` is dynamic depending on the underlying text\r\n     * and the `unit` specified.  Each step, e.g., a line or word, may\r\n     * span multiple text nodes, so we iterate through the text both on\r\n     * two levels in step-sync:\r\n     *\r\n     * `leafText` stores the text on a text leaf level, and is advanced\r\n     * through using the counters `leafTextOffset` and `leafTextRemaining`.\r\n     *\r\n     * `blockText` stores the text on a block level, and is shortened\r\n     * by `distance` every time it is advanced.\r\n     *\r\n     * We only maintain a window of one blockText and one leafText because\r\n     * a block node always appears before all of its leaf nodes.\r\n     */\n\n\n    var range = Editor.range(editor, at);\n    var [start, end] = index_es_Range.edges(range);\n    var first = reverse ? end : start;\n    var isNewBlock = false;\n    var blockText = '';\n    var distance = 0; // Distance for leafText to catch up to blockText.\n\n    var leafTextRemaining = 0;\n    var leafTextOffset = 0; // Iterate through all nodes in range, grabbing entire textual content\n    // of block nodes in blockText, and text nodes in leafText.\n    // Exploits the fact that nodes are sequenced in such a way that we first\n    // encounter the block node, then all of its text nodes, so when iterating\n    // through the blockText and leafText we just need to remember a window of\n    // one block node and leaf node, respectively.\n\n    for (var [node, path] of Editor.nodes(editor, {\n      at,\n      reverse,\n      voids\n    })) {\n      /*\r\n       * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\r\n       */\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, so by default we will always\n        // yield their first point. If the `voids` option is set to true,\n        // then we will iterate over their content.\n        if (!voids && editor.isVoid(node)) {\n          yield Editor.start(editor, path);\n          continue;\n        } // Inline element nodes are ignored as they don't themselves\n        // contribute to `blockText` or `leafText` - their parent and\n        // children do.\n\n\n        if (editor.isInline(node)) continue; // Block element node - set `blockText` to its text content.\n\n        if (Editor.hasInlines(editor, node)) {\n          // We always exhaust block nodes before encountering a new one:\n          //   console.assert(blockText === '',\n          //     `blockText='${blockText}' - `+\n          //     `not exhausted before new block node`, path)\n          // Ensure range considered is capped to `range`, in the\n          // start/end edge cases where block extends beyond range.\n          // Equivalent to this, but presumably more performant:\n          //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n          //   blockRange = Range.intersection(range, blockRange) // intersect\n          //   blockText = Editor.string(editor, blockRange, { voids })\n          var e = Path.isAncestor(path, end.path) ? end : Editor.end(editor, path);\n          var s = Path.isAncestor(path, start.path) ? start : Editor.start(editor, path);\n          blockText = Editor.string(editor, {\n            anchor: s,\n            focus: e\n          }, {\n            voids\n          });\n          isNewBlock = true;\n        }\n      }\n      /*\r\n       * TEXT LEAF NODE - Iterate through text content, yielding\r\n       * positions every `distance` offset according to `unit`.\r\n       */\n\n\n      if (Text.isText(node)) {\n        var isFirst = Path.equals(path, first.path); // Proof that we always exhaust text nodes before encountering a new one:\n        //   console.assert(leafTextRemaining <= 0,\n        //     `leafTextRemaining=${leafTextRemaining} - `+\n        //     `not exhausted before new leaf text node`, path)\n        // Reset `leafText` counters for new text node.\n\n        if (isFirst) {\n          leafTextRemaining = reverse ? first.offset : node.text.length - first.offset;\n          leafTextOffset = first.offset; // Works for reverse too.\n        } else {\n          leafTextRemaining = node.text.length;\n          leafTextOffset = reverse ? leafTextRemaining : 0;\n        } // Yield position at the start of node (potentially).\n\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield {\n            path,\n            offset: leafTextOffset\n          };\n          isNewBlock = false;\n        } // Yield positions every (dynamically calculated) `distance` offset.\n\n\n        while (true) {\n          // If `leafText` has caught up with `blockText` (distance=0),\n          // and if blockText is exhausted, break to get another block node,\n          // otherwise advance blockText forward by the new `distance`.\n          if (distance === 0) {\n            if (blockText === '') break;\n            distance = calcDistance(blockText, unit, reverse); // Split the string at the previously found distance and use the\n            // remaining string for the next iteration.\n\n            blockText = splitByCharacterDistance(blockText, distance, reverse)[1];\n          } // Advance `leafText` by the current `distance`.\n\n\n          leafTextOffset = reverse ? leafTextOffset - distance : leafTextOffset + distance;\n          leafTextRemaining = leafTextRemaining - distance; // If `leafText` is exhausted, break to get a new leaf node\n          // and set distance to the overflow amount, so we'll (maybe)\n          // catch up to blockText in the next leaf text node.\n\n          if (leafTextRemaining < 0) {\n            distance = -leafTextRemaining;\n            break;\n          } // Successfully walked `distance` offsets through `leafText`\n          // to catch up with `blockText`, so we can reset `distance`\n          // and yield this position in this node.\n\n\n          distance = 0;\n          yield {\n            path,\n            offset: leafTextOffset\n          };\n        }\n      }\n    } // Proof that upon completion, we've exahusted both leaf and block text:\n    //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n    //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n    // Helper:\n    // Return the distance in offsets for a step of size `unit` on given string.\n\n\n    function calcDistance(text, unit, reverse) {\n      if (unit === 'character') {\n        return getCharacterDistance(text, reverse);\n      } else if (unit === 'word') {\n        return getWordDistance(text, reverse);\n      } else if (unit === 'line' || unit === 'block') {\n        return text.length;\n      }\n\n      return 1;\n    }\n  },\n\n  /**\r\n   * Get the matching node in the branch of the document before a location.\r\n   */\n  previous(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      mode = 'lowest',\n      voids = false\n    } = options;\n    var {\n      match,\n      at = editor.selection\n    } = options;\n\n    if (!at) {\n      return;\n    }\n\n    var pointBeforeLocation = Editor.before(editor, at, {\n      voids\n    });\n\n    if (!pointBeforeLocation) {\n      return;\n    }\n\n    var [, to] = Editor.first(editor, []); // The search location is from the start of the document to the path of\n    // the point before the location passed in\n\n    var span = [pointBeforeLocation.path, to];\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(\"Cannot get the previous node from the root node!\");\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        var [parent] = Editor.parent(editor, at);\n\n        match = n => parent.children.includes(n);\n      } else {\n        match = () => true;\n      }\n    }\n\n    var [previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids\n    });\n    return previous;\n  },\n\n  /**\r\n   * Get a range of a location.\r\n   */\n  range(editor, at, to) {\n    if (index_es_Range.isRange(at) && !to) {\n      return at;\n    }\n\n    var start = Editor.start(editor, at);\n    var end = Editor.end(editor, to || at);\n    return {\n      anchor: start,\n      focus: end\n    };\n  },\n\n  /**\r\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\r\n   * operations are applied to the editor.\r\n   */\n  rangeRef(editor, range) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      affinity = 'forward'\n    } = options;\n    var ref = {\n      current: range,\n      affinity,\n\n      unref() {\n        var {\n          current\n        } = ref;\n        var rangeRefs = Editor.rangeRefs(editor);\n        rangeRefs.delete(ref);\n        ref.current = null;\n        return current;\n      }\n\n    };\n    var refs = Editor.rangeRefs(editor);\n    refs.add(ref);\n    return ref;\n  },\n\n  /**\r\n   * Get the set of currently tracked range refs of the editor.\r\n   */\n  rangeRefs(editor) {\n    var refs = RANGE_REFS.get(editor);\n\n    if (!refs) {\n      refs = new Set();\n      RANGE_REFS.set(editor, refs);\n    }\n\n    return refs;\n  },\n\n  /**\r\n   * Remove a custom property from all of the leaf text nodes in the current\r\n   * selection.\r\n   *\r\n   * If the selection is currently collapsed, the removal will be stored on\r\n   * `editor.marks` and applied to the text inserted next.\r\n   */\n  removeMark(editor, key) {\n    editor.removeMark(key);\n  },\n\n  /**\r\n   * Manually set if the editor should currently be normalizing.\r\n   *\r\n   * Note: Using this incorrectly can leave the editor in an invalid state.\r\n   *\r\n   */\n  setNormalizing(editor, isNormalizing) {\n    NORMALIZING.set(editor, isNormalizing);\n  },\n\n  /**\r\n   * Get the start point of a location.\r\n   */\n  start(editor, at) {\n    return Editor.point(editor, at, {\n      edge: 'start'\n    });\n  },\n\n  /**\r\n   * Get the text string content of a location.\r\n   *\r\n   * Note: by default the text of void nodes is considered to be an empty\r\n   * string, regardless of content, unless you pass in true for the voids option\r\n   */\n  string(editor, at) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      voids = false\n    } = options;\n    var range = Editor.range(editor, at);\n    var [start, end] = index_es_Range.edges(range);\n    var text = '';\n\n    for (var [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n      voids\n    })) {\n      var t = node.text;\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset);\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset);\n      }\n\n      text += t;\n    }\n\n    return text;\n  },\n\n  /**\r\n   * Convert a range into a non-hanging one.\r\n   */\n  unhangRange(editor, range) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      voids = false\n    } = options;\n    var [start, end] = index_es_Range.edges(range); // PERF: exit early if we can guarantee that the range isn't hanging.\n\n    if (start.offset !== 0 || end.offset !== 0 || index_es_Range.isCollapsed(range) || Path.hasPrevious(end.path)) {\n      return range;\n    }\n\n    var endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n      voids\n    });\n    var blockPath = endBlock ? endBlock[1] : [];\n    var first = Editor.start(editor, start);\n    var before = {\n      anchor: first,\n      focus: end\n    };\n    var skip = true;\n\n    for (var [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids\n    })) {\n      if (skip) {\n        skip = false;\n        continue;\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = {\n          path,\n          offset: node.text.length\n        };\n        break;\n      }\n    }\n\n    return {\n      anchor: start,\n      focus: end\n    };\n  },\n\n  /**\r\n   * Match a void node in the current branch of the editor.\r\n   */\n  void(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Editor.above(editor, _objectSpread$8(_objectSpread$8({}, options), {}, {\n      match: n => Editor.isVoid(editor, n)\n    }));\n  },\n\n  /**\r\n   * Call a function, deferring normalization until after it completes.\r\n   */\n  withoutNormalizing(editor, fn) {\n    var value = Editor.isNormalizing(editor);\n    Editor.setNormalizing(editor, false);\n\n    try {\n      fn();\n    } finally {\n      Editor.setNormalizing(editor, value);\n    }\n\n    Editor.normalize(editor);\n  }\n\n};\n\nvar Location = {\n  /**\r\n   * Check if a value implements the `Location` interface.\r\n   */\n  isLocation(value) {\n    return Path.isPath(value) || Point.isPoint(value) || index_es_Range.isRange(value);\n  }\n\n}; // eslint-disable-next-line no-redeclare\n\nvar Span = {\n  /**\r\n   * Check if a value implements the `Span` interface.\r\n   */\n  isSpan(value) {\n    return Array.isArray(value) && value.length === 2 && value.every(Path.isPath);\n  }\n\n};\n\nvar _excluded$3 = [\"children\"],\n    _excluded2$2 = [\"text\"];\nvar IS_NODE_LIST_CACHE = new WeakMap(); // eslint-disable-next-line no-redeclare\n\nvar Node = {\n  /**\r\n   * Get the node at a specific path, asserting that it's an ancestor node.\r\n   */\n  ancestor(root, path) {\n    var node = Node.get(root, path);\n\n    if (Text.isText(node)) {\n      throw new Error(\"Cannot get the ancestor node at path [\".concat(path, \"] because it refers to a text node instead: \").concat(Scrubber.stringify(node)));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Return a generator of all the ancestor nodes above a specific path.\r\n   *\r\n   * By default the order is top-down, from highest to lowest ancestor in\r\n   * the tree, but you can pass the `reverse: true` option to go bottom-up.\r\n   */\n  *ancestors(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    for (var p of Path.ancestors(path, options)) {\n      var n = Node.ancestor(root, p);\n      var entry = [n, p];\n      yield entry;\n    }\n  },\n\n  /**\r\n   * Get the child of a node at a specific index.\r\n   */\n  child(root, index) {\n    if (Text.isText(root)) {\n      throw new Error(\"Cannot get the child of a text node: \".concat(Scrubber.stringify(root)));\n    }\n\n    var c = root.children[index];\n\n    if (c == null) {\n      throw new Error(\"Cannot get child at index `\".concat(index, \"` in node: \").concat(Scrubber.stringify(root)));\n    }\n\n    return c;\n  },\n\n  /**\r\n   * Iterate over the children of a node at a specific path.\r\n   */\n  *children(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      reverse = false\n    } = options;\n    var ancestor = Node.ancestor(root, path);\n    var {\n      children\n    } = ancestor;\n    var index = reverse ? children.length - 1 : 0;\n\n    while (reverse ? index >= 0 : index < children.length) {\n      var child = Node.child(ancestor, index);\n      var childPath = path.concat(index);\n      yield [child, childPath];\n      index = reverse ? index - 1 : index + 1;\n    }\n  },\n\n  /**\r\n   * Get an entry for the common ancesetor node of two paths.\r\n   */\n  common(root, path, another) {\n    var p = Path.common(path, another);\n    var n = Node.get(root, p);\n    return [n, p];\n  },\n\n  /**\r\n   * Get the node at a specific path, asserting that it's a descendant node.\r\n   */\n  descendant(root, path) {\n    var node = Node.get(root, path);\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\"Cannot get the descendant node at path [\".concat(path, \"] because it refers to the root editor node instead: \").concat(Scrubber.stringify(node)));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Return a generator of all the descendant node entries inside a root node.\r\n   */\n  *descendants(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path];\n      }\n    }\n  },\n\n  /**\r\n   * Return a generator of all the element nodes inside a root node. Each iteration\r\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\r\n   * root node is an element it will be included in the iteration as well.\r\n   */\n  *elements(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path];\n      }\n    }\n  },\n\n  /**\r\n   * Extract props from a Node.\r\n   */\n  extractProps(node) {\n    if (Element.isAncestor(node)) {\n      var properties = _objectWithoutProperties(node, _excluded$3);\n\n      return properties;\n    } else {\n      var properties = _objectWithoutProperties(node, _excluded2$2);\n\n      return properties;\n    }\n  },\n\n  /**\r\n   * Get the first node entry in a root node from a path.\r\n   */\n  first(root, path) {\n    var p = path.slice();\n    var n = Node.get(root, p);\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break;\n      } else {\n        n = n.children[0];\n        p.push(0);\n      }\n    }\n\n    return [n, p];\n  },\n\n  /**\r\n   * Get the sliced fragment represented by a range inside a root node.\r\n   */\n  fragment(root, range) {\n    if (Text.isText(root)) {\n      throw new Error(\"Cannot get a fragment starting from a root text node: \".concat(Scrubber.stringify(root)));\n    }\n\n    var newRoot = fn({\n      children: root.children\n    }, r => {\n      var [start, end] = index_es_Range.edges(range);\n      var nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: _ref => {\n          var [, path] = _ref;\n          return !index_es_Range.includes(range, path);\n        }\n      });\n\n      for (var [, path] of nodeEntries) {\n        if (!index_es_Range.includes(range, path)) {\n          var parent = Node.parent(r, path);\n          var index = path[path.length - 1];\n          parent.children.splice(index, 1);\n        }\n\n        if (Path.equals(path, end.path)) {\n          var leaf = Node.leaf(r, path);\n          leaf.text = leaf.text.slice(0, end.offset);\n        }\n\n        if (Path.equals(path, start.path)) {\n          var _leaf = Node.leaf(r, path);\n\n          _leaf.text = _leaf.text.slice(start.offset);\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null;\n      }\n    });\n    return newRoot.children;\n  },\n\n  /**\r\n   * Get the descendant node referred to by a specific path. If the path is an\r\n   * empty array, it refers to the root node itself.\r\n   */\n  get(root, path) {\n    var node = root;\n\n    for (var i = 0; i < path.length; i++) {\n      var p = path[i];\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\"Cannot find a descendant at path [\".concat(path, \"] in node: \").concat(Scrubber.stringify(root)));\n      }\n\n      node = node.children[p];\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Check if a descendant node exists at a specific path.\r\n   */\n  has(root, path) {\n    var node = root;\n\n    for (var i = 0; i < path.length; i++) {\n      var p = path[i];\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false;\n      }\n\n      node = node.children[p];\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Check if a value implements the `Node` interface.\r\n   */\n  isNode(value) {\n    return Text.isText(value) || Element.isElement(value) || Editor.isEditor(value);\n  },\n\n  /**\r\n   * Check if a value is a list of `Node` objects.\r\n   */\n  isNodeList(value) {\n    if (!Array.isArray(value)) {\n      return false;\n    }\n\n    var cachedResult = IS_NODE_LIST_CACHE.get(value);\n\n    if (cachedResult !== undefined) {\n      return cachedResult;\n    }\n\n    var isNodeList = value.every(val => Node.isNode(val));\n    IS_NODE_LIST_CACHE.set(value, isNodeList);\n    return isNodeList;\n  },\n\n  /**\r\n   * Get the last node entry in a root node from a path.\r\n   */\n  last(root, path) {\n    var p = path.slice();\n    var n = Node.get(root, p);\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break;\n      } else {\n        var i = n.children.length - 1;\n        n = n.children[i];\n        p.push(i);\n      }\n    }\n\n    return [n, p];\n  },\n\n  /**\r\n   * Get the node at a specific path, ensuring it's a leaf text node.\r\n   */\n  leaf(root, path) {\n    var node = Node.get(root, path);\n\n    if (!Text.isText(node)) {\n      throw new Error(\"Cannot get the leaf node at path [\".concat(path, \"] because it refers to a non-leaf node: \").concat(Scrubber.stringify(node)));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Return a generator of the in a branch of the tree, from a specific path.\r\n   *\r\n   * By default the order is top-down, from highest to lowest node in the tree,\r\n   * but you can pass the `reverse: true` option to go bottom-up.\r\n   */\n  *levels(root, path) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    for (var p of Path.levels(path, options)) {\n      var n = Node.get(root, p);\n      yield [n, p];\n    }\n  },\n\n  /**\r\n   * Check if a node matches a set of props.\r\n   */\n  matches(node, props) {\n    return Element.isElement(node) && Element.isElementProps(props) && Element.matches(node, props) || Text.isText(node) && Text.isTextProps(props) && Text.matches(node, props);\n  },\n\n  /**\r\n   * Return a generator of all the node entries of a root node. Each entry is\r\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\r\n   * position inside the root node.\r\n   */\n  *nodes(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      pass,\n      reverse = false\n    } = options;\n    var {\n      from = [],\n      to\n    } = options;\n    var visited = new Set();\n    var p = [];\n    var n = root;\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break;\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p];\n      } // If we're allowed to go downward and we haven't descended yet, do.\n\n\n      if (!visited.has(n) && !Text.isText(n) && n.children.length !== 0 && (pass == null || pass([n, p]) === false)) {\n        visited.add(n);\n        var nextIndex = reverse ? n.children.length - 1 : 0;\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length];\n        }\n\n        p = p.concat(nextIndex);\n        n = Node.get(root, p);\n        continue;\n      } // If we're at the root and we can't go down, we're done.\n\n\n      if (p.length === 0) {\n        break;\n      } // If we're going forward...\n\n\n      if (!reverse) {\n        var newPath = Path.next(p);\n\n        if (Node.has(root, newPath)) {\n          p = newPath;\n          n = Node.get(root, p);\n          continue;\n        }\n      } // If we're going backward...\n\n\n      if (reverse && p[p.length - 1] !== 0) {\n        var _newPath = Path.previous(p);\n\n        p = _newPath;\n        n = Node.get(root, p);\n        continue;\n      } // Otherwise we're going upward...\n\n\n      p = Path.parent(p);\n      n = Node.get(root, p);\n      visited.add(n);\n    }\n  },\n\n  /**\r\n   * Get the parent of a node at a specific path.\r\n   */\n  parent(root, path) {\n    var parentPath = Path.parent(path);\n    var p = Node.get(root, parentPath);\n\n    if (Text.isText(p)) {\n      throw new Error(\"Cannot get the parent of path [\".concat(path, \"] because it does not exist in the root.\"));\n    }\n\n    return p;\n  },\n\n  /**\r\n   * Get the concatenated text string of a node's content.\r\n   *\r\n   * Note that this will not include spaces or line breaks between block nodes.\r\n   * It is not a user-facing string, but a string for performing offset-related\r\n   * computations for a node.\r\n   */\n  string(node) {\n    if (Text.isText(node)) {\n      return node.text;\n    } else {\n      return node.children.map(Node.string).join('');\n    }\n  },\n\n  /**\r\n   * Return a generator of all leaf text nodes in a root node.\r\n   */\n  *texts(root) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for (var [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path];\n      }\n    }\n  }\n\n};\n\nfunction ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Operation = {\n  /**\r\n   * Check of a value is a `NodeOperation` object.\r\n   */\n  isNodeOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_node');\n  },\n\n  /**\r\n   * Check of a value is an `Operation` object.\r\n   */\n  isOperation(value) {\n    if (!isPlainObject(value)) {\n      return false;\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node);\n\n      case 'insert_text':\n        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n\n      case 'merge_node':\n        return typeof value.position === 'number' && Path.isPath(value.path) && isPlainObject(value.properties);\n\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath);\n\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node);\n\n      case 'remove_text':\n        return typeof value.offset === 'number' && typeof value.text === 'string' && Path.isPath(value.path);\n\n      case 'set_node':\n        return Path.isPath(value.path) && isPlainObject(value.properties) && isPlainObject(value.newProperties);\n\n      case 'set_selection':\n        return value.properties === null && index_es_Range.isRange(value.newProperties) || value.newProperties === null && index_es_Range.isRange(value.properties) || isPlainObject(value.properties) && isPlainObject(value.newProperties);\n\n      case 'split_node':\n        return Path.isPath(value.path) && typeof value.position === 'number' && isPlainObject(value.properties);\n\n      default:\n        return false;\n    }\n  },\n\n  /**\r\n   * Check if a value is a list of `Operation` objects.\r\n   */\n  isOperationList(value) {\n    return Array.isArray(value) && value.every(val => Operation.isOperation(val));\n  },\n\n  /**\r\n   * Check of a value is a `SelectionOperation` object.\r\n   */\n  isSelectionOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_selection');\n  },\n\n  /**\r\n   * Check of a value is a `TextOperation` object.\r\n   */\n  isTextOperation(value) {\n    return Operation.isOperation(value) && value.type.endsWith('_text');\n  },\n\n  /**\r\n   * Invert an operation, returning a new operation that will exactly undo the\r\n   * original when applied.\r\n   */\n  inverse(op) {\n    switch (op.type) {\n      case 'insert_node':\n        {\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            type: 'remove_node'\n          });\n        }\n\n      case 'insert_text':\n        {\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            type: 'remove_text'\n          });\n        }\n\n      case 'merge_node':\n        {\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            type: 'split_node',\n            path: Path.previous(op.path)\n          });\n        }\n\n      case 'move_node':\n        {\n          var {\n            newPath,\n            path\n          } = op; // PERF: in this case the move operation is a no-op anyways.\n\n          if (Path.equals(newPath, path)) {\n            return op;\n          } // If the move happens completely within a single parent the path and\n          // newPath are stable with respect to each other.\n\n\n          if (Path.isSibling(path, newPath)) {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              path: newPath,\n              newPath: path\n            });\n          } // If the move does not happen within a single parent it is possible\n          // for the move to impact the true path to the location where the node\n          // was removed from and where it was inserted. We have to adjust for this\n          // and find the original path. We can accomplish this (only in non-sibling)\n          // moves by looking at the impact of the move operation on the node\n          // after the original move path.\n\n\n          var inversePath = Path.transform(path, op);\n          var inverseNewPath = Path.transform(Path.next(path), op);\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            path: inversePath,\n            newPath: inverseNewPath\n          });\n        }\n\n      case 'remove_node':\n        {\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            type: 'insert_node'\n          });\n        }\n\n      case 'remove_text':\n        {\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            type: 'insert_text'\n          });\n        }\n\n      case 'set_node':\n        {\n          var {\n            properties,\n            newProperties\n          } = op;\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            properties: newProperties,\n            newProperties: properties\n          });\n        }\n\n      case 'set_selection':\n        {\n          var {\n            properties: _properties,\n            newProperties: _newProperties\n          } = op;\n\n          if (_properties == null) {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              properties: _newProperties,\n              newProperties: null\n            });\n          } else if (_newProperties == null) {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              properties: null,\n              newProperties: _properties\n            });\n          } else {\n            return _objectSpread$7(_objectSpread$7({}, op), {}, {\n              properties: _newProperties,\n              newProperties: _properties\n            });\n          }\n        }\n\n      case 'split_node':\n        {\n          return _objectSpread$7(_objectSpread$7({}, op), {}, {\n            type: 'merge_node',\n            path: Path.next(op.path)\n          });\n        }\n    }\n  }\n\n};\n\n// eslint-disable-next-line no-redeclare\nvar Path = {\n  /**\r\n   * Get a list of ancestor paths for a given path.\r\n   *\r\n   * The paths are sorted from shallowest to deepest ancestor. However, if the\r\n   * `reverse: true` option is passed, they are reversed.\r\n   */\n  ancestors(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var paths = Path.levels(path, options);\n\n    if (reverse) {\n      paths = paths.slice(1);\n    } else {\n      paths = paths.slice(0, -1);\n    }\n\n    return paths;\n  },\n\n  /**\r\n   * Get the common ancestor path of two paths.\r\n   */\n  common(path, another) {\n    var common = [];\n\n    for (var i = 0; i < path.length && i < another.length; i++) {\n      var av = path[i];\n      var bv = another[i];\n\n      if (av !== bv) {\n        break;\n      }\n\n      common.push(av);\n    }\n\n    return common;\n  },\n\n  /**\r\n   * Compare a path to another, returning an integer indicating whether the path\r\n   * was before, at, or after the other.\r\n   *\r\n   * Note: Two paths of unequal length can still receive a `0` result if one is\r\n   * directly above or below the other. If you want exact matching, use\r\n   * [[Path.equals]] instead.\r\n   */\n  compare(path, another) {\n    var min = Math.min(path.length, another.length);\n\n    for (var i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1;\n      if (path[i] > another[i]) return 1;\n    }\n\n    return 0;\n  },\n\n  /**\r\n   * Check if a path ends after one of the indexes in another.\r\n   */\n  endsAfter(path, another) {\n    var i = path.length - 1;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    var av = path[i];\n    var bv = another[i];\n    return Path.equals(as, bs) && av > bv;\n  },\n\n  /**\r\n   * Check if a path ends at one of the indexes in another.\r\n   */\n  endsAt(path, another) {\n    var i = path.length;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    return Path.equals(as, bs);\n  },\n\n  /**\r\n   * Check if a path ends before one of the indexes in another.\r\n   */\n  endsBefore(path, another) {\n    var i = path.length - 1;\n    var as = path.slice(0, i);\n    var bs = another.slice(0, i);\n    var av = path[i];\n    var bv = another[i];\n    return Path.equals(as, bs) && av < bv;\n  },\n\n  /**\r\n   * Check if a path is exactly equal to another.\r\n   */\n  equals(path, another) {\n    return path.length === another.length && path.every((n, i) => n === another[i]);\n  },\n\n  /**\r\n   * Check if the path of previous sibling node exists\r\n   */\n  hasPrevious(path) {\n    return path[path.length - 1] > 0;\n  },\n\n  /**\r\n   * Check if a path is after another.\r\n   */\n  isAfter(path, another) {\n    return Path.compare(path, another) === 1;\n  },\n\n  /**\r\n   * Check if a path is an ancestor of another.\r\n   */\n  isAncestor(path, another) {\n    return path.length < another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is before another.\r\n   */\n  isBefore(path, another) {\n    return Path.compare(path, another) === -1;\n  },\n\n  /**\r\n   * Check if a path is a child of another.\r\n   */\n  isChild(path, another) {\n    return path.length === another.length + 1 && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is equal to or an ancestor of another.\r\n   */\n  isCommon(path, another) {\n    return path.length <= another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is a descendant of another.\r\n   */\n  isDescendant(path, another) {\n    return path.length > another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check if a path is the parent of another.\r\n   */\n  isParent(path, another) {\n    return path.length + 1 === another.length && Path.compare(path, another) === 0;\n  },\n\n  /**\r\n   * Check is a value implements the `Path` interface.\r\n   */\n  isPath(value) {\n    return Array.isArray(value) && (value.length === 0 || typeof value[0] === 'number');\n  },\n\n  /**\r\n   * Check if a path is a sibling of another.\r\n   */\n  isSibling(path, another) {\n    if (path.length !== another.length) {\n      return false;\n    }\n\n    var as = path.slice(0, -1);\n    var bs = another.slice(0, -1);\n    var al = path[path.length - 1];\n    var bl = another[another.length - 1];\n    return al !== bl && Path.equals(as, bs);\n  },\n\n  /**\r\n   * Get a list of paths at every level down to a path. Note: this is the same\r\n   * as `Path.ancestors`, but including the path itself.\r\n   *\r\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\r\n   * true` option is passed, they are reversed.\r\n   */\n  levels(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var list = [];\n\n    for (var i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i));\n    }\n\n    if (reverse) {\n      list.reverse();\n    }\n\n    return list;\n  },\n\n  /**\r\n   * Given a path, get the path to the next sibling node.\r\n   */\n  next(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the next path of a root path [\".concat(path, \"], because it has no next index.\"));\n    }\n\n    var last = path[path.length - 1];\n    return path.slice(0, -1).concat(last + 1);\n  },\n\n  /**\r\n   * Returns whether this operation can affect paths or not. Used as an\r\n   * optimization when updating dirty paths during normalization\r\n   *\r\n   * NOTE: This *must* be kept in sync with the implementation of 'transform'\r\n   * below\r\n   */\n  operationCanTransformPath(operation) {\n    switch (operation.type) {\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n      case 'move_node':\n        return true;\n\n      default:\n        return false;\n    }\n  },\n\n  /**\r\n   * Given a path, return a new path referring to the parent node above it.\r\n   */\n  parent(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the parent path of the root path [\".concat(path, \"].\"));\n    }\n\n    return path.slice(0, -1);\n  },\n\n  /**\r\n   * Given a path, get the path to the previous sibling node.\r\n   */\n  previous(path) {\n    if (path.length === 0) {\n      throw new Error(\"Cannot get the previous path of a root path [\".concat(path, \"], because it has no previous index.\"));\n    }\n\n    var last = path[path.length - 1];\n\n    if (last <= 0) {\n      throw new Error(\"Cannot get the previous path of a first child path [\".concat(path, \"] because it would result in a negative index.\"));\n    }\n\n    return path.slice(0, -1).concat(last - 1);\n  },\n\n  /**\r\n   * Get a path relative to an ancestor.\r\n   */\n  relative(path, ancestor) {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\"Cannot get the relative path of [\".concat(path, \"] inside ancestor [\").concat(ancestor, \"], because it is not above or equal to the path.\"));\n    }\n\n    return path.slice(ancestor.length);\n  },\n\n  /**\r\n   * Transform a path by an operation.\r\n   */\n  transform(path, operation) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!path) return null; // PERF: use destructing instead of immer\n\n    var p = [...path];\n    var {\n      affinity = 'forward'\n    } = options; // PERF: Exit early if the operation is guaranteed not to have an effect.\n\n    if (path.length === 0) {\n      return p;\n    }\n\n    switch (operation.type) {\n      case 'insert_node':\n        {\n          var {\n            path: op\n          } = operation;\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p) || Path.isAncestor(op, p)) {\n            p[op.length - 1] += 1;\n          }\n\n          break;\n        }\n\n      case 'remove_node':\n        {\n          var {\n            path: _op\n          } = operation;\n\n          if (Path.equals(_op, p) || Path.isAncestor(_op, p)) {\n            return null;\n          } else if (Path.endsBefore(_op, p)) {\n            p[_op.length - 1] -= 1;\n          }\n\n          break;\n        }\n\n      case 'merge_node':\n        {\n          var {\n            path: _op2,\n            position\n          } = operation;\n\n          if (Path.equals(_op2, p) || Path.endsBefore(_op2, p)) {\n            p[_op2.length - 1] -= 1;\n          } else if (Path.isAncestor(_op2, p)) {\n            p[_op2.length - 1] -= 1;\n            p[_op2.length] += position;\n          }\n\n          break;\n        }\n\n      case 'split_node':\n        {\n          var {\n            path: _op3,\n            position: _position\n          } = operation;\n\n          if (Path.equals(_op3, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1;\n            } else if (affinity === 'backward') ; else {\n              return null;\n            }\n          } else if (Path.endsBefore(_op3, p)) {\n            p[_op3.length - 1] += 1;\n          } else if (Path.isAncestor(_op3, p) && path[_op3.length] >= _position) {\n            p[_op3.length - 1] += 1;\n            p[_op3.length] -= _position;\n          }\n\n          break;\n        }\n\n      case 'move_node':\n        {\n          var {\n            path: _op4,\n            newPath: onp\n          } = operation; // If the old and new path are the same, it's a no-op.\n\n          if (Path.equals(_op4, onp)) {\n            return p;\n          }\n\n          if (Path.isAncestor(_op4, p) || Path.equals(_op4, p)) {\n            var copy = onp.slice();\n\n            if (Path.endsBefore(_op4, onp) && _op4.length < onp.length) {\n              copy[_op4.length - 1] -= 1;\n            }\n\n            return copy.concat(p.slice(_op4.length));\n          } else if (Path.isSibling(_op4, onp) && (Path.isAncestor(onp, p) || Path.equals(onp, p))) {\n            if (Path.endsBefore(_op4, p)) {\n              p[_op4.length - 1] -= 1;\n            } else {\n              p[_op4.length - 1] += 1;\n            }\n          } else if (Path.endsBefore(onp, p) || Path.equals(onp, p) || Path.isAncestor(onp, p)) {\n            if (Path.endsBefore(_op4, p)) {\n              p[_op4.length - 1] -= 1;\n            }\n\n            p[onp.length - 1] += 1;\n          } else if (Path.endsBefore(_op4, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1;\n            }\n\n            p[_op4.length - 1] -= 1;\n          }\n\n          break;\n        }\n    }\n\n    return p;\n  }\n\n};\n\nvar PathRef = {\n  /**\r\n   * Transform the path ref's current value by an operation.\r\n   */\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n\n    if (current == null) {\n      return;\n    }\n\n    var path = Path.transform(current, op, {\n      affinity\n    });\n    ref.current = path;\n\n    if (path == null) {\n      ref.unref();\n    }\n  }\n\n};\n\nfunction ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Point = {\n  /**\r\n   * Compare a point to another, returning an integer indicating whether the\r\n   * point was before, at, or after the other.\r\n   */\n  compare(point, another) {\n    var result = Path.compare(point.path, another.path);\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1;\n      if (point.offset > another.offset) return 1;\n      return 0;\n    }\n\n    return result;\n  },\n\n  /**\r\n   * Check if a point is after another.\r\n   */\n  isAfter(point, another) {\n    return Point.compare(point, another) === 1;\n  },\n\n  /**\r\n   * Check if a point is before another.\r\n   */\n  isBefore(point, another) {\n    return Point.compare(point, another) === -1;\n  },\n\n  /**\r\n   * Check if a point is exactly equal to another.\r\n   */\n  equals(point, another) {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return point.offset === another.offset && Path.equals(point.path, another.path);\n  },\n\n  /**\r\n   * Check if a value implements the `Point` interface.\r\n   */\n  isPoint(value) {\n    return isPlainObject(value) && typeof value.offset === 'number' && Path.isPath(value.path);\n  },\n\n  /**\r\n   * Transform a point by an operation.\r\n   */\n  transform(point, op) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return fn(point, p => {\n      if (p === null) {\n        return null;\n      }\n\n      var {\n        affinity = 'forward'\n      } = options;\n      var {\n        path,\n        offset\n      } = p;\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node':\n          {\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n\n        case 'insert_text':\n          {\n            if (Path.equals(op.path, path) && (op.offset < offset || op.offset === offset && affinity === 'forward')) {\n              p.offset += op.text.length;\n            }\n\n            break;\n          }\n\n        case 'merge_node':\n          {\n            if (Path.equals(op.path, path)) {\n              p.offset += op.position;\n            }\n\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n\n        case 'remove_text':\n          {\n            if (Path.equals(op.path, path) && op.offset <= offset) {\n              p.offset -= Math.min(offset - op.offset, op.text.length);\n            }\n\n            break;\n          }\n\n        case 'remove_node':\n          {\n            if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n              return null;\n            }\n\n            p.path = Path.transform(path, op, options);\n            break;\n          }\n\n        case 'split_node':\n          {\n            if (Path.equals(op.path, path)) {\n              if (op.position === offset && affinity == null) {\n                return null;\n              } else if (op.position < offset || op.position === offset && affinity === 'forward') {\n                p.offset -= op.position;\n                p.path = Path.transform(path, op, _objectSpread$6(_objectSpread$6({}, options), {}, {\n                  affinity: 'forward'\n                }));\n              }\n            } else {\n              p.path = Path.transform(path, op, options);\n            }\n\n            break;\n          }\n      }\n    });\n  }\n\n};\n\nvar PointRef = {\n  /**\r\n   * Transform the point ref's current value by an operation.\r\n   */\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n\n    if (current == null) {\n      return;\n    }\n\n    var point = Point.transform(current, op, {\n      affinity\n    });\n    ref.current = point;\n\n    if (point == null) {\n      ref.unref();\n    }\n  }\n\n};\n\nvar _excluded$2 = [\"anchor\", \"focus\"];\n\nfunction ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar index_es_Range = {\n  /**\r\n   * Get the start and end points of a range, in the order in which they appear\r\n   * in the document.\r\n   */\n  edges(range) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      reverse = false\n    } = options;\n    var {\n      anchor,\n      focus\n    } = range;\n    return index_es_Range.isBackward(range) === reverse ? [anchor, focus] : [focus, anchor];\n  },\n\n  /**\r\n   * Get the end point of a range.\r\n   */\n  end(range) {\n    var [, end] = index_es_Range.edges(range);\n    return end;\n  },\n\n  /**\r\n   * Check if a range is exactly equal to another.\r\n   */\n  equals(range, another) {\n    return Point.equals(range.anchor, another.anchor) && Point.equals(range.focus, another.focus);\n  },\n\n  /**\r\n   * Check if a range includes a path, a point or part of another range.\r\n   */\n  includes(range, target) {\n    if (index_es_Range.isRange(target)) {\n      if (index_es_Range.includes(range, target.anchor) || index_es_Range.includes(range, target.focus)) {\n        return true;\n      }\n\n      var [rs, re] = index_es_Range.edges(range);\n      var [ts, te] = index_es_Range.edges(target);\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te);\n    }\n\n    var [start, end] = index_es_Range.edges(range);\n    var isAfterStart = false;\n    var isBeforeEnd = false;\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0;\n      isBeforeEnd = Point.compare(target, end) <= 0;\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0;\n      isBeforeEnd = Path.compare(target, end.path) <= 0;\n    }\n\n    return isAfterStart && isBeforeEnd;\n  },\n\n  /**\r\n   * Get the intersection of a range with another.\r\n   */\n  intersection(range, another) {\n    var rest = _objectWithoutProperties(range, _excluded$2);\n\n    var [s1, e1] = index_es_Range.edges(range);\n    var [s2, e2] = index_es_Range.edges(another);\n    var start = Point.isBefore(s1, s2) ? s2 : s1;\n    var end = Point.isBefore(e1, e2) ? e1 : e2;\n\n    if (Point.isBefore(end, start)) {\n      return null;\n    } else {\n      return _objectSpread$5({\n        anchor: start,\n        focus: end\n      }, rest);\n    }\n  },\n\n  /**\r\n   * Check if a range is backward, meaning that its anchor point appears in the\r\n   * document _after_ its focus point.\r\n   */\n  isBackward(range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Point.isAfter(anchor, focus);\n  },\n\n  /**\r\n   * Check if a range is collapsed, meaning that both its anchor and focus\r\n   * points refer to the exact same position in the document.\r\n   */\n  isCollapsed(range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Point.equals(anchor, focus);\n  },\n\n  /**\r\n   * Check if a range is expanded.\r\n   *\r\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\r\n   */\n  isExpanded(range) {\n    return !index_es_Range.isCollapsed(range);\n  },\n\n  /**\r\n   * Check if a range is forward.\r\n   *\r\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\r\n   */\n  isForward(range) {\n    return !index_es_Range.isBackward(range);\n  },\n\n  /**\r\n   * Check if a value implements the [[Range]] interface.\r\n   */\n  isRange(value) {\n    return isPlainObject(value) && Point.isPoint(value.anchor) && Point.isPoint(value.focus);\n  },\n\n  /**\r\n   * Iterate through all of the point entries in a range.\r\n   */\n  *points(range) {\n    yield [range.anchor, 'anchor'];\n    yield [range.focus, 'focus'];\n  },\n\n  /**\r\n   * Get the start point of a range.\r\n   */\n  start(range) {\n    var [start] = index_es_Range.edges(range);\n    return start;\n  },\n\n  /**\r\n   * Transform a range by an operation.\r\n   */\n  transform(range, op) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return fn(range, r => {\n      if (r === null) {\n        return null;\n      }\n\n      var {\n        affinity = 'inward'\n      } = options;\n      var affinityAnchor;\n      var affinityFocus;\n\n      if (affinity === 'inward') {\n        // If the range is collapsed, make sure to use the same affinity to\n        // avoid the two points passing each other and expanding in the opposite\n        // direction\n        var isCollapsed = index_es_Range.isCollapsed(r);\n\n        if (index_es_Range.isForward(r)) {\n          affinityAnchor = 'forward';\n          affinityFocus = isCollapsed ? affinityAnchor : 'backward';\n        } else {\n          affinityAnchor = 'backward';\n          affinityFocus = isCollapsed ? affinityAnchor : 'forward';\n        }\n      } else if (affinity === 'outward') {\n        if (index_es_Range.isForward(r)) {\n          affinityAnchor = 'backward';\n          affinityFocus = 'forward';\n        } else {\n          affinityAnchor = 'forward';\n          affinityFocus = 'backward';\n        }\n      } else {\n        affinityAnchor = affinity;\n        affinityFocus = affinity;\n      }\n\n      var anchor = Point.transform(r.anchor, op, {\n        affinity: affinityAnchor\n      });\n      var focus = Point.transform(r.focus, op, {\n        affinity: affinityFocus\n      });\n\n      if (!anchor || !focus) {\n        return null;\n      }\n\n      r.anchor = anchor;\n      r.focus = focus;\n    });\n  }\n\n};\n\nvar RangeRef = {\n  /**\r\n   * Transform the range ref's current value by an operation.\r\n   */\n  transform(ref, op) {\n    var {\n      current,\n      affinity\n    } = ref;\n\n    if (current == null) {\n      return;\n    }\n\n    var path = index_es_Range.transform(current, op, {\n      affinity\n    });\n    ref.current = path;\n\n    if (path == null) {\n      ref.unref();\n    }\n  }\n\n};\n\nvar _scrubber = undefined;\n/**\r\n * This interface implements a stringify() function, which is used by Slate\r\n * internally when generating exceptions containing end user data. Developers\r\n * using Slate may call Scrubber.setScrubber() to alter the behavior of this\r\n * stringify() function.\r\n *\r\n * For example, to prevent the cleartext logging of 'text' fields within Nodes:\r\n *\r\n *    import { Scrubber } from 'slate';\r\n *    Scrubber.setScrubber((key, val) => {\r\n *      if (key === 'text') return '...scrubbed...'\r\n *      return val\r\n *    });\r\n *\r\n */\n// eslint-disable-next-line no-redeclare\n\nvar Scrubber = {\n  setScrubber(scrubber) {\n    _scrubber = scrubber;\n  },\n\n  stringify(value) {\n    return JSON.stringify(value, _scrubber);\n  }\n\n};\n\n/*\r\n  Custom deep equal comparison for Slate nodes.\r\n\n  We don't need general purpose deep equality;\r\n  Slate only supports plain values, Arrays, and nested objects.\r\n  Complex values nested inside Arrays are not supported.\r\n\n  Slate objects are designed to be serialised, so\r\n  missing keys are deliberately normalised to undefined.\r\n */\n\nvar isDeepEqual = (node, another) => {\n  for (var key in node) {\n    var a = node[key];\n    var b = another[key];\n\n    if (isPlainObject(a) && isPlainObject(b)) {\n      if (!isDeepEqual(a, b)) return false;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false;\n\n      for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n      }\n    } else if (a !== b) {\n      return false;\n    }\n  }\n  /*\r\n    Deep object equality is only necessary in one direction; in the reverse direction\r\n    we are only looking for keys that are missing.\r\n    As above, undefined keys are normalised to missing.\r\n  */\n\n\n  for (var _key in another) {\n    if (node[_key] === undefined && another[_key] !== undefined) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar _excluded$1 = [\"text\"],\n    _excluded2$1 = [\"anchor\", \"focus\"];\n\nfunction ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Text = {\n  /**\r\n   * Check if two text nodes are equal.\r\n   *\r\n   * When loose is set, the text is not compared. This is\r\n   * used to check whether sibling text nodes can be merged.\r\n   */\n  equals(text, another) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      loose = false\n    } = options;\n\n    function omitText(obj) {\n      var rest = _objectWithoutProperties(obj, _excluded$1);\n\n      return rest;\n    }\n\n    return isDeepEqual(loose ? omitText(text) : text, loose ? omitText(another) : another);\n  },\n\n  /**\r\n   * Check if a value implements the `Text` interface.\r\n   */\n  isText(value) {\n    return isPlainObject(value) && typeof value.text === 'string';\n  },\n\n  /**\r\n   * Check if a value is a list of `Text` objects.\r\n   */\n  isTextList(value) {\n    return Array.isArray(value) && value.every(val => Text.isText(val));\n  },\n\n  /**\r\n   * Check if some props are a partial of Text.\r\n   */\n  isTextProps(props) {\n    return props.text !== undefined;\n  },\n\n  /**\r\n   * Check if an text matches set of properties.\r\n   *\r\n   * Note: this is for matching custom properties, and it does not ensure that\r\n   * the `text` property are two nodes equal.\r\n   */\n  matches(text, props) {\n    for (var key in props) {\n      if (key === 'text') {\n        continue;\n      }\n\n      if (!text.hasOwnProperty(key) || text[key] !== props[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\r\n   * Get the leaves for a text node given decorations.\r\n   */\n  decorations(node, decorations) {\n    var leaves = [_objectSpread$4({}, node)];\n\n    for (var dec of decorations) {\n      var rest = _objectWithoutProperties(dec, _excluded2$1);\n\n      var [start, end] = index_es_Range.edges(dec);\n      var next = [];\n      var leafEnd = 0;\n      var decorationStart = start.offset;\n      var decorationEnd = end.offset;\n\n      for (var leaf of leaves) {\n        var {\n          length\n        } = leaf.text;\n        var leafStart = leafEnd;\n        leafEnd += length; // If the range encompasses the entire leaf, add the range.\n\n        if (decorationStart <= leafStart && leafEnd <= decorationEnd) {\n          Object.assign(leaf, rest);\n          next.push(leaf);\n          continue;\n        } // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n\n\n        if (decorationStart !== decorationEnd && (decorationStart === leafEnd || decorationEnd === leafStart) || decorationStart > leafEnd || decorationEnd < leafStart || decorationEnd === leafStart && leafStart !== 0) {\n          next.push(leaf);\n          continue;\n        } // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n\n\n        var middle = leaf;\n        var before = void 0;\n        var after = void 0;\n\n        if (decorationEnd < leafEnd) {\n          var off = decorationEnd - leafStart;\n          after = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n            text: middle.text.slice(off)\n          });\n          middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n            text: middle.text.slice(0, off)\n          });\n        }\n\n        if (decorationStart > leafStart) {\n          var _off = decorationStart - leafStart;\n\n          before = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n            text: middle.text.slice(0, _off)\n          });\n          middle = _objectSpread$4(_objectSpread$4({}, middle), {}, {\n            text: middle.text.slice(_off)\n          });\n        }\n\n        Object.assign(middle, rest);\n\n        if (before) {\n          next.push(before);\n        }\n\n        next.push(middle);\n\n        if (after) {\n          next.push(after);\n        }\n      }\n\n      leaves = next;\n    }\n\n    return leaves;\n  }\n\n};\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar applyToDraft = (editor, selection, op) => {\n  switch (op.type) {\n    case 'insert_node':\n      {\n        var {\n          path,\n          node\n        } = op;\n        var parent = Node.parent(editor, path);\n        var index = path[path.length - 1];\n\n        if (index > parent.children.length) {\n          throw new Error(\"Cannot apply an \\\"insert_node\\\" operation at path [\".concat(path, \"] because the destination is past the end of the node.\"));\n        }\n\n        parent.children.splice(index, 0, node);\n\n        if (selection) {\n          for (var [point, key] of index_es_Range.points(selection)) {\n            selection[key] = Point.transform(point, op);\n          }\n        }\n\n        break;\n      }\n\n    case 'insert_text':\n      {\n        var {\n          path: _path,\n          offset,\n          text\n        } = op;\n        if (text.length === 0) break;\n\n        var _node = Node.leaf(editor, _path);\n\n        var before = _node.text.slice(0, offset);\n\n        var after = _node.text.slice(offset);\n\n        _node.text = before + text + after;\n\n        if (selection) {\n          for (var [_point, _key] of index_es_Range.points(selection)) {\n            selection[_key] = Point.transform(_point, op);\n          }\n        }\n\n        break;\n      }\n\n    case 'merge_node':\n      {\n        var {\n          path: _path2\n        } = op;\n\n        var _node2 = Node.get(editor, _path2);\n\n        var prevPath = Path.previous(_path2);\n        var prev = Node.get(editor, prevPath);\n\n        var _parent = Node.parent(editor, _path2);\n\n        var _index = _path2[_path2.length - 1];\n\n        if (Text.isText(_node2) && Text.isText(prev)) {\n          prev.text += _node2.text;\n        } else if (!Text.isText(_node2) && !Text.isText(prev)) {\n          prev.children.push(..._node2.children);\n        } else {\n          throw new Error(\"Cannot apply a \\\"merge_node\\\" operation at path [\".concat(_path2, \"] to nodes of different interfaces: \").concat(Scrubber.stringify(_node2), \" \").concat(Scrubber.stringify(prev)));\n        }\n\n        _parent.children.splice(_index, 1);\n\n        if (selection) {\n          for (var [_point2, _key2] of index_es_Range.points(selection)) {\n            selection[_key2] = Point.transform(_point2, op);\n          }\n        }\n\n        break;\n      }\n\n    case 'move_node':\n      {\n        var {\n          path: _path3,\n          newPath\n        } = op;\n\n        if (Path.isAncestor(_path3, newPath)) {\n          throw new Error(\"Cannot move a path [\".concat(_path3, \"] to new path [\").concat(newPath, \"] because the destination is inside itself.\"));\n        }\n\n        var _node3 = Node.get(editor, _path3);\n\n        var _parent2 = Node.parent(editor, _path3);\n\n        var _index2 = _path3[_path3.length - 1]; // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n\n        _parent2.children.splice(_index2, 1);\n\n        var truePath = Path.transform(_path3, op);\n        var newParent = Node.get(editor, Path.parent(truePath));\n        var newIndex = truePath[truePath.length - 1];\n        newParent.children.splice(newIndex, 0, _node3);\n\n        if (selection) {\n          for (var [_point3, _key3] of index_es_Range.points(selection)) {\n            selection[_key3] = Point.transform(_point3, op);\n          }\n        }\n\n        break;\n      }\n\n    case 'remove_node':\n      {\n        var {\n          path: _path4\n        } = op;\n        var _index3 = _path4[_path4.length - 1];\n\n        var _parent3 = Node.parent(editor, _path4);\n\n        _parent3.children.splice(_index3, 1); // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n\n\n        if (selection) {\n          for (var [_point4, _key4] of index_es_Range.points(selection)) {\n            var result = Point.transform(_point4, op);\n\n            if (selection != null && result != null) {\n              selection[_key4] = result;\n            } else {\n              var _prev = void 0;\n\n              var next = void 0;\n\n              for (var [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, _path4) === -1) {\n                  _prev = [n, p];\n                } else {\n                  next = [n, p];\n                  break;\n                }\n              }\n\n              var preferNext = false;\n\n              if (_prev && next) {\n                if (Path.equals(next[1], _path4)) {\n                  preferNext = !Path.hasPrevious(next[1]);\n                } else {\n                  preferNext = Path.common(_prev[1], _path4).length < Path.common(next[1], _path4).length;\n                }\n              }\n\n              if (_prev && !preferNext) {\n                _point4.path = _prev[1];\n                _point4.offset = _prev[0].text.length;\n              } else if (next) {\n                _point4.path = next[1];\n                _point4.offset = 0;\n              } else {\n                selection = null;\n              }\n            }\n          }\n        }\n\n        break;\n      }\n\n    case 'remove_text':\n      {\n        var {\n          path: _path5,\n          offset: _offset,\n          text: _text\n        } = op;\n        if (_text.length === 0) break;\n\n        var _node4 = Node.leaf(editor, _path5);\n\n        var _before = _node4.text.slice(0, _offset);\n\n        var _after = _node4.text.slice(_offset + _text.length);\n\n        _node4.text = _before + _after;\n\n        if (selection) {\n          for (var [_point5, _key5] of index_es_Range.points(selection)) {\n            selection[_key5] = Point.transform(_point5, op);\n          }\n        }\n\n        break;\n      }\n\n    case 'set_node':\n      {\n        var {\n          path: _path6,\n          properties,\n          newProperties\n        } = op;\n\n        if (_path6.length === 0) {\n          throw new Error(\"Cannot set properties on the root node!\");\n        }\n\n        var _node5 = Node.get(editor, _path6);\n\n        for (var _key6 in newProperties) {\n          if (_key6 === 'children' || _key6 === 'text') {\n            throw new Error(\"Cannot set the \\\"\".concat(_key6, \"\\\" property of nodes!\"));\n          }\n\n          var value = newProperties[_key6];\n\n          if (value == null) {\n            delete _node5[_key6];\n          } else {\n            _node5[_key6] = value;\n          }\n        } // properties that were previously defined, but are now missing, must be deleted\n\n\n        for (var _key7 in properties) {\n          if (!newProperties.hasOwnProperty(_key7)) {\n            delete _node5[_key7];\n          }\n        }\n\n        break;\n      }\n\n    case 'set_selection':\n      {\n        var {\n          newProperties: _newProperties\n        } = op;\n\n        if (_newProperties == null) {\n          selection = _newProperties;\n        } else {\n          if (selection == null) {\n            if (!index_es_Range.isRange(_newProperties)) {\n              throw new Error(\"Cannot apply an incomplete \\\"set_selection\\\" operation properties \".concat(Scrubber.stringify(_newProperties), \" when there is no current selection.\"));\n            }\n\n            selection = _objectSpread$3({}, _newProperties);\n          }\n\n          for (var _key8 in _newProperties) {\n            var _value = _newProperties[_key8];\n\n            if (_value == null) {\n              if (_key8 === 'anchor' || _key8 === 'focus') {\n                throw new Error(\"Cannot remove the \\\"\".concat(_key8, \"\\\" selection property\"));\n              }\n\n              delete selection[_key8];\n            } else {\n              selection[_key8] = _value;\n            }\n          }\n        }\n\n        break;\n      }\n\n    case 'split_node':\n      {\n        var {\n          path: _path7,\n          position,\n          properties: _properties\n        } = op;\n\n        if (_path7.length === 0) {\n          throw new Error(\"Cannot apply a \\\"split_node\\\" operation at path [\".concat(_path7, \"] because the root node cannot be split.\"));\n        }\n\n        var _node6 = Node.get(editor, _path7);\n\n        var _parent4 = Node.parent(editor, _path7);\n\n        var _index4 = _path7[_path7.length - 1];\n        var newNode;\n\n        if (Text.isText(_node6)) {\n          var _before2 = _node6.text.slice(0, position);\n\n          var _after2 = _node6.text.slice(position);\n\n          _node6.text = _before2;\n          newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {\n            text: _after2\n          });\n        } else {\n          var _before3 = _node6.children.slice(0, position);\n\n          var _after3 = _node6.children.slice(position);\n\n          _node6.children = _before3;\n          newNode = _objectSpread$3(_objectSpread$3({}, _properties), {}, {\n            children: _after3\n          });\n        }\n\n        _parent4.children.splice(_index4 + 1, 0, newNode);\n\n        if (selection) {\n          for (var [_point6, _key9] of index_es_Range.points(selection)) {\n            selection[_key9] = Point.transform(_point6, op);\n          }\n        }\n\n        break;\n      }\n  }\n\n  return selection;\n}; // eslint-disable-next-line no-redeclare\n\n\nvar GeneralTransforms = {\n  /**\r\n   * Transform the editor by an operation.\r\n   */\n  transform(editor, op) {\n    editor.children = ln(editor.children);\n    var selection = editor.selection && ln(editor.selection);\n\n    try {\n      selection = applyToDraft(editor, selection, op);\n    } finally {\n      editor.children = dn(editor.children);\n\n      if (selection) {\n        editor.selection = r(selection) ? dn(selection) : selection;\n      } else {\n        editor.selection = null;\n      }\n    }\n  }\n\n};\n\nvar _excluded = [\"text\"],\n    _excluded2 = [\"children\"];\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar NodeTransforms = {\n  /**\r\n   * Insert nodes at a specific location in the Editor.\r\n   */\n  insertNodes(editor, nodes) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        hanging = false,\n        voids = false,\n        mode = 'lowest'\n      } = options;\n      var {\n        at,\n        match,\n        select\n      } = options;\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes];\n      }\n\n      if (nodes.length === 0) {\n        return;\n      }\n\n      var [node] = nodes; // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection;\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, []);\n        } else {\n          at = [0];\n        }\n\n        select = true;\n      }\n\n      if (select == null) {\n        select = false;\n      }\n\n      if (index_es_Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at, {\n            voids\n          });\n        }\n\n        if (index_es_Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var [, end] = index_es_Range.edges(at);\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at\n          });\n          at = pointRef.unref();\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n);\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n);\n          } else {\n            match = n => Editor.isBlock(editor, n);\n          }\n        }\n\n        var [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids\n        });\n\n        if (entry) {\n          var [, _matchPath] = entry;\n          var pathRef = Editor.pathRef(editor, _matchPath);\n          var isAtEnd = Editor.isEnd(editor, at, _matchPath);\n          Transforms.splitNodes(editor, {\n            at,\n            match,\n            mode,\n            voids\n          });\n          var path = pathRef.unref();\n          at = isAtEnd ? Path.next(path) : path;\n        } else {\n          return;\n        }\n      }\n\n      var parentPath = Path.parent(at);\n      var index = at[at.length - 1];\n\n      if (!voids && Editor.void(editor, {\n        at: parentPath\n      })) {\n        return;\n      }\n\n      for (var _node of nodes) {\n        var _path = parentPath.concat(index);\n\n        index++;\n        editor.apply({\n          type: 'insert_node',\n          path: _path,\n          node: _node\n        });\n        at = Path.next(at);\n      }\n\n      at = Path.previous(at);\n\n      if (select) {\n        var point = Editor.end(editor, at);\n\n        if (point) {\n          Transforms.select(editor, point);\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Lift nodes at a specific location upwards in the document tree, splitting\r\n   * their parent in two if necessary.\r\n   */\n  liftNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false\n      } = options;\n      var {\n        match\n      } = options;\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (!at) {\n        return;\n      }\n\n      var matches = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(matches, _ref => {\n        var [, p] = _ref;\n        return Editor.pathRef(editor, p);\n      });\n\n      for (var pathRef of pathRefs) {\n        var path = pathRef.unref();\n\n        if (path.length < 2) {\n          throw new Error(\"Cannot lift node at a path [\".concat(path, \"] because it has a depth of less than `2`.\"));\n        }\n\n        var parentNodeEntry = Editor.node(editor, Path.parent(path));\n        var [parent, parentPath] = parentNodeEntry;\n        var index = path[path.length - 1];\n        var {\n          length\n        } = parent.children;\n\n        if (length === 1) {\n          var toPath = Path.next(parentPath);\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: toPath,\n            voids\n          });\n          Transforms.removeNodes(editor, {\n            at: parentPath,\n            voids\n          });\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: parentPath,\n            voids\n          });\n        } else if (index === length - 1) {\n          var _toPath = Path.next(parentPath);\n\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: _toPath,\n            voids\n          });\n        } else {\n          var splitPath = Path.next(path);\n\n          var _toPath2 = Path.next(parentPath);\n\n          Transforms.splitNodes(editor, {\n            at: splitPath,\n            voids\n          });\n          Transforms.moveNodes(editor, {\n            at: path,\n            to: _toPath2,\n            voids\n          });\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Merge a node at a location with the previous node of the same depth,\r\n   * removing any empty containing nodes after the merge if necessary.\r\n   */\n  mergeNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        match,\n        at = editor.selection\n      } = options;\n      var {\n        hanging = false,\n        voids = false,\n        mode = 'lowest'\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          var [parent] = Editor.parent(editor, at);\n\n          match = n => parent.children.includes(n);\n        } else {\n          match = n => Editor.isBlock(editor, n);\n        }\n      }\n\n      if (!hanging && index_es_Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n\n      if (index_es_Range.isRange(at)) {\n        if (index_es_Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var [, end] = index_es_Range.edges(at);\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at\n          });\n          at = pointRef.unref();\n\n          if (options.at == null) {\n            Transforms.select(editor, at);\n          }\n        }\n      }\n\n      var [current] = Editor.nodes(editor, {\n        at,\n        match,\n        voids,\n        mode\n      });\n      var prev = Editor.previous(editor, {\n        at,\n        match,\n        voids,\n        mode\n      });\n\n      if (!current || !prev) {\n        return;\n      }\n\n      var [node, path] = current;\n      var [prevNode, prevPath] = prev;\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return;\n      }\n\n      var newPath = Path.next(prevPath);\n      var commonPath = Path.common(path, prevPath);\n      var isPreviousSibling = Path.isSibling(path, prevPath);\n      var levels = Array.from(Editor.levels(editor, {\n        at: path\n      }), _ref2 => {\n        var [n] = _ref2;\n        return n;\n      }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n\n      var emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n => levels.includes(n) && hasSingleChildNest(editor, n)\n      });\n      var emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1]);\n      var properties;\n      var position; // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        var rest = _objectWithoutProperties(node, _excluded);\n\n        position = prevNode.text.length;\n        properties = rest;\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        var rest = _objectWithoutProperties(node, _excluded2);\n\n        position = prevNode.children.length;\n        properties = rest;\n      } else {\n        throw new Error(\"Cannot merge the node at path [\".concat(path, \"] with the previous sibling because it is not the same kind: \").concat(Scrubber.stringify(node), \" \").concat(Scrubber.stringify(prevNode)));\n      } // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n\n\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, {\n          at: path,\n          to: newPath,\n          voids\n        });\n      } // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n\n\n      if (emptyRef) {\n        Transforms.removeNodes(editor, {\n          at: emptyRef.current,\n          voids\n        });\n      } // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      // if prevNode is first child in parent,don't remove it.\n\n\n      if (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode) || Text.isText(prevNode) && prevNode.text === '' && prevPath[prevPath.length - 1] !== 0) {\n        Transforms.removeNodes(editor, {\n          at: prevPath,\n          voids\n        });\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties\n        });\n      }\n\n      if (emptyRef) {\n        emptyRef.unref();\n      }\n    });\n  },\n\n  /**\r\n   * Move the nodes at a location to a new location.\r\n   */\n  moveNodes(editor, options) {\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false\n      } = options;\n      var {\n        match\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      var toRef = Editor.pathRef(editor, to);\n      var targets = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(targets, _ref3 => {\n        var [, p] = _ref3;\n        return Editor.pathRef(editor, p);\n      });\n\n      for (var pathRef of pathRefs) {\n        var path = pathRef.unref();\n        var newPath = toRef.current;\n\n        if (path.length !== 0) {\n          editor.apply({\n            type: 'move_node',\n            path,\n            newPath\n          });\n        }\n\n        if (toRef.current && Path.isSibling(newPath, path) && Path.isAfter(newPath, path)) {\n          // When performing a sibling move to a later index, the path at the destination is shifted\n          // to before the insertion point instead of after. To ensure our group of nodes are inserted\n          // in the correct order we increment toRef to account for that\n          toRef.current = Path.next(toRef.current);\n        }\n      }\n\n      toRef.unref();\n    });\n  },\n\n  /**\r\n   * Remove the nodes at a specific location in the document.\r\n   */\n  removeNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        hanging = false,\n        voids = false,\n        mode = 'lowest'\n      } = options;\n      var {\n        at = editor.selection,\n        match\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (!hanging && index_es_Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n\n      var depths = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(depths, _ref4 => {\n        var [, p] = _ref4;\n        return Editor.pathRef(editor, p);\n      });\n\n      for (var pathRef of pathRefs) {\n        var path = pathRef.unref();\n\n        if (path) {\n          var [node] = Editor.node(editor, path);\n          editor.apply({\n            type: 'remove_node',\n            path,\n            node\n          });\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Set new properties on the nodes at a location.\r\n   */\n  setNodes(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        match,\n        at = editor.selection,\n        compare,\n        merge\n      } = options;\n      var {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (!hanging && index_es_Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at, {\n          voids\n        });\n      }\n\n      if (split && index_es_Range.isRange(at)) {\n        if (index_es_Range.isCollapsed(at) && Editor.leaf(editor, at.anchor)[0].text.length > 0) {\n          // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n          // set that won't get normalized away\n          return;\n        }\n\n        var rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward'\n        });\n        var [start, end] = index_es_Range.edges(at);\n        var splitMode = mode === 'lowest' ? 'lowest' : 'highest';\n        var endAtEndOfNode = Editor.isEnd(editor, end, end.path);\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n          always: !endAtEndOfNode\n        });\n        var startAtStartOfNode = Editor.isStart(editor, start, start.path);\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n          always: !startAtStartOfNode\n        });\n        at = rangeRef.unref();\n\n        if (options.at == null) {\n          Transforms.select(editor, at);\n        }\n      }\n\n      if (!compare) {\n        compare = (prop, nodeProp) => prop !== nodeProp;\n      }\n\n      for (var [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      })) {\n        var properties = {};\n        var newProperties = {}; // You can't set properties on the editor node.\n\n        if (path.length === 0) {\n          continue;\n        }\n\n        var hasChanges = false;\n\n        for (var k in props) {\n          if (k === 'children' || k === 'text') {\n            continue;\n          }\n\n          if (compare(props[k], node[k])) {\n            hasChanges = true; // Omit new properties from the old properties list\n\n            if (node.hasOwnProperty(k)) properties[k] = node[k]; // Omit properties that have been removed from the new properties list\n\n            if (merge) {\n              if (props[k] != null) newProperties[k] = merge(node[k], props[k]);\n            } else {\n              if (props[k] != null) newProperties[k] = props[k];\n            }\n          }\n        }\n\n        if (hasChanges) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties\n          });\n        }\n      }\n    });\n  },\n\n  /**\r\n   * Split the nodes at a specific location.\r\n   */\n  splitNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        mode = 'lowest',\n        voids = false\n      } = options;\n      var {\n        match,\n        at = editor.selection,\n        height = 0,\n        always = false\n      } = options;\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n);\n      }\n\n      if (index_es_Range.isRange(at)) {\n        at = deleteRange(editor, at);\n      } // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n\n\n      if (Path.isPath(at)) {\n        var path = at;\n        var point = Editor.point(editor, path);\n        var [parent] = Editor.parent(editor, path);\n\n        match = n => n === parent;\n\n        height = point.path.length - path.length + 1;\n        at = point;\n        always = true;\n      }\n\n      if (!at) {\n        return;\n      }\n\n      var beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward'\n      });\n      var afterRef;\n\n      try {\n        var [highest] = Editor.nodes(editor, {\n          at,\n          match,\n          mode,\n          voids\n        });\n\n        if (!highest) {\n          return;\n        }\n\n        var voidMatch = Editor.void(editor, {\n          at,\n          mode: 'highest'\n        });\n        var nudge = 0;\n\n        if (!voids && voidMatch) {\n          var [voidNode, voidPath] = voidMatch;\n\n          if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n            var after = Editor.after(editor, voidPath);\n\n            if (!after) {\n              var text = {\n                text: ''\n              };\n              var afterPath = Path.next(voidPath);\n              Transforms.insertNodes(editor, text, {\n                at: afterPath,\n                voids\n              });\n              after = Editor.point(editor, afterPath);\n            }\n\n            at = after;\n            always = true;\n          }\n\n          var siblingHeight = at.path.length - voidPath.length;\n          height = siblingHeight + 1;\n          always = true;\n        }\n\n        afterRef = Editor.pointRef(editor, at);\n        var depth = at.path.length - height;\n        var [, highestPath] = highest;\n        var lowestPath = at.path.slice(0, depth);\n        var position = height === 0 ? at.offset : at.path[depth] + nudge;\n\n        for (var [node, _path2] of Editor.levels(editor, {\n          at: lowestPath,\n          reverse: true,\n          voids\n        })) {\n          var split = false;\n\n          if (_path2.length < highestPath.length || _path2.length === 0 || !voids && Editor.isVoid(editor, node)) {\n            break;\n          }\n\n          var _point = beforeRef.current;\n          var isEnd = Editor.isEnd(editor, _point, _path2);\n\n          if (always || !beforeRef || !Editor.isEdge(editor, _point, _path2)) {\n            split = true;\n            var properties = Node.extractProps(node);\n            editor.apply({\n              type: 'split_node',\n              path: _path2,\n              position,\n              properties\n            });\n          }\n\n          position = _path2[_path2.length - 1] + (split || isEnd ? 1 : 0);\n        }\n\n        if (options.at == null) {\n          var _point2 = afterRef.current || Editor.end(editor, []);\n\n          Transforms.select(editor, _point2);\n        }\n      } finally {\n        var _afterRef;\n\n        beforeRef.unref();\n        (_afterRef = afterRef) === null || _afterRef === void 0 ? void 0 : _afterRef.unref();\n      }\n    });\n  },\n\n  /**\r\n   * Unset properties on the nodes at a location.\r\n   */\n  unsetNodes(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!Array.isArray(props)) {\n      props = [props];\n    }\n\n    var obj = {};\n\n    for (var key of props) {\n      obj[key] = null;\n    }\n\n    Transforms.setNodes(editor, obj, options);\n  },\n\n  /**\r\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\r\n   * necessary to ensure that only the content in the range is unwrapped.\r\n   */\n  unwrapNodes(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        mode = 'lowest',\n        split = false,\n        voids = false\n      } = options;\n      var {\n        at = editor.selection,\n        match\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        match = Path.isPath(at) ? matchPath(editor, at) : n => Editor.isBlock(editor, n);\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at);\n      }\n\n      var rangeRef = index_es_Range.isRange(at) ? Editor.rangeRef(editor, at) : null;\n      var matches = Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids\n      });\n      var pathRefs = Array.from(matches, _ref5 => {\n        var [, p] = _ref5;\n        return Editor.pathRef(editor, p);\n      } // unwrapNode will call liftNode which does not support splitting the node when nested.\n      // If we do not reverse the order and call it from top to the bottom, it will remove all blocks\n      // that wrap target node. So we reverse the order.\n      ).reverse();\n\n      var _loop = function _loop(pathRef) {\n        var path = pathRef.unref();\n        var [node] = Editor.node(editor, path);\n        var range = Editor.range(editor, path);\n\n        if (split && rangeRef) {\n          range = index_es_Range.intersection(rangeRef.current, range);\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => Element.isAncestor(node) && node.children.includes(n),\n          voids\n        });\n      };\n\n      for (var pathRef of pathRefs) {\n        _loop(pathRef);\n      }\n\n      if (rangeRef) {\n        rangeRef.unref();\n      }\n    });\n  },\n\n  /**\r\n   * Wrap the nodes at a location in a new container node, splitting the edges\r\n   * of the range first to ensure that only the content in the range is wrapped.\r\n   */\n  wrapNodes(editor, element) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        mode = 'lowest',\n        split = false,\n        voids = false\n      } = options;\n      var {\n        match,\n        at = editor.selection\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at);\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n);\n        } else {\n          match = n => Editor.isBlock(editor, n);\n        }\n      }\n\n      if (split && index_es_Range.isRange(at)) {\n        var [start, end] = index_es_Range.edges(at);\n        var rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward'\n        });\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          voids\n        });\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          voids\n        });\n        at = rangeRef.unref();\n\n        if (options.at == null) {\n          Transforms.select(editor, at);\n        }\n      }\n\n      var roots = Array.from(Editor.nodes(editor, {\n        at,\n        match: editor.isInline(element) ? n => Editor.isBlock(editor, n) : n => Editor.isEditor(n),\n        mode: 'lowest',\n        voids\n      }));\n\n      for (var [, rootPath] of roots) {\n        var a = index_es_Range.isRange(at) ? index_es_Range.intersection(at, Editor.range(editor, rootPath)) : at;\n\n        if (!a) {\n          continue;\n        }\n\n        var matches = Array.from(Editor.nodes(editor, {\n          at: a,\n          match,\n          mode,\n          voids\n        }));\n\n        if (matches.length > 0) {\n          var _ret = function () {\n            var [first] = matches;\n            var last = matches[matches.length - 1];\n            var [, firstPath] = first;\n            var [, lastPath] = last;\n\n            if (firstPath.length === 0 && lastPath.length === 0) {\n              // if there's no matching parent - usually means the node is an editor - don't do anything\n              return \"continue\";\n            }\n\n            var commonPath = Path.equals(firstPath, lastPath) ? Path.parent(firstPath) : Path.common(firstPath, lastPath);\n            var range = Editor.range(editor, firstPath, lastPath);\n            var commonNodeEntry = Editor.node(editor, commonPath);\n            var [commonNode] = commonNodeEntry;\n            var depth = commonPath.length + 1;\n            var wrapperPath = Path.next(lastPath.slice(0, depth));\n\n            var wrapper = _objectSpread$2(_objectSpread$2({}, element), {}, {\n              children: []\n            });\n\n            Transforms.insertNodes(editor, wrapper, {\n              at: wrapperPath,\n              voids\n            });\n            Transforms.moveNodes(editor, {\n              at: range,\n              match: n => Element.isAncestor(commonNode) && commonNode.children.includes(n),\n              to: wrapperPath.concat(0),\n              voids\n            });\n          }();\n\n          if (_ret === \"continue\") continue;\n        }\n      }\n    });\n  }\n\n};\n\nvar hasSingleChildNest = (editor, node) => {\n  if (Element.isElement(node)) {\n    var element = node;\n\n    if (Editor.isVoid(editor, node)) {\n      return true;\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0]);\n    } else {\n      return false;\n    }\n  } else if (Editor.isEditor(node)) {\n    return false;\n  } else {\n    return true;\n  }\n};\n/**\r\n * Convert a range into a point by deleting it's content.\r\n */\n\n\nvar deleteRange = (editor, range) => {\n  if (index_es_Range.isCollapsed(range)) {\n    return range.anchor;\n  } else {\n    var [, end] = index_es_Range.edges(range);\n    var pointRef = Editor.pointRef(editor, end);\n    Transforms.delete(editor, {\n      at: range\n    });\n    return pointRef.unref();\n  }\n};\n\nvar matchPath = (editor, path) => {\n  var [node] = Editor.node(editor, path);\n  return n => n === node;\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar SelectionTransforms = {\n  /**\r\n   * Collapse the selection.\r\n   */\n  collapse(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      edge = 'anchor'\n    } = options;\n    var {\n      selection\n    } = editor;\n\n    if (!selection) {\n      return;\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor);\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus);\n    } else if (edge === 'start') {\n      var [start] = index_es_Range.edges(selection);\n      Transforms.select(editor, start);\n    } else if (edge === 'end') {\n      var [, end] = index_es_Range.edges(selection);\n      Transforms.select(editor, end);\n    }\n  },\n\n  /**\r\n   * Unset the selection.\r\n   */\n  deselect(editor) {\n    var {\n      selection\n    } = editor;\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null\n      });\n    }\n  },\n\n  /**\r\n   * Move the selection's point forward or backward.\r\n   */\n  move(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var {\n      selection\n    } = editor;\n    var {\n      distance = 1,\n      unit = 'character',\n      reverse = false\n    } = options;\n    var {\n      edge = null\n    } = options;\n\n    if (!selection) {\n      return;\n    }\n\n    if (edge === 'start') {\n      edge = index_es_Range.isBackward(selection) ? 'focus' : 'anchor';\n    }\n\n    if (edge === 'end') {\n      edge = index_es_Range.isBackward(selection) ? 'anchor' : 'focus';\n    }\n\n    var {\n      anchor,\n      focus\n    } = selection;\n    var opts = {\n      distance,\n      unit\n    };\n    var props = {};\n\n    if (edge == null || edge === 'anchor') {\n      var point = reverse ? Editor.before(editor, anchor, opts) : Editor.after(editor, anchor, opts);\n\n      if (point) {\n        props.anchor = point;\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      var _point = reverse ? Editor.before(editor, focus, opts) : Editor.after(editor, focus, opts);\n\n      if (_point) {\n        props.focus = _point;\n      }\n    }\n\n    Transforms.setSelection(editor, props);\n  },\n\n  /**\r\n   * Set the selection to a new value.\r\n   */\n  select(editor, target) {\n    var {\n      selection\n    } = editor;\n    target = Editor.range(editor, target);\n\n    if (selection) {\n      Transforms.setSelection(editor, target);\n      return;\n    }\n\n    if (!index_es_Range.isRange(target)) {\n      throw new Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(Scrubber.stringify(target)));\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target\n    });\n  },\n\n  /**\r\n   * Set new properties on one of the selection's points.\r\n   */\n  setPoint(editor, props) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      selection\n    } = editor;\n    var {\n      edge = 'both'\n    } = options;\n\n    if (!selection) {\n      return;\n    }\n\n    if (edge === 'start') {\n      edge = index_es_Range.isBackward(selection) ? 'focus' : 'anchor';\n    }\n\n    if (edge === 'end') {\n      edge = index_es_Range.isBackward(selection) ? 'anchor' : 'focus';\n    }\n\n    var {\n      anchor,\n      focus\n    } = selection;\n    var point = edge === 'anchor' ? anchor : focus;\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: _objectSpread$1(_objectSpread$1({}, point), props)\n    });\n  },\n\n  /**\r\n   * Set new properties on the selection.\r\n   */\n  setSelection(editor, props) {\n    var {\n      selection\n    } = editor;\n    var oldProps = {};\n    var newProps = {};\n\n    if (!selection) {\n      return;\n    }\n\n    for (var k in props) {\n      if (k === 'anchor' && props.anchor != null && !Point.equals(props.anchor, selection.anchor) || k === 'focus' && props.focus != null && !Point.equals(props.focus, selection.focus) || k !== 'anchor' && k !== 'focus' && props[k] !== selection[k]) {\n        oldProps[k] = selection[k];\n        newProps[k] = props[k];\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps\n      });\n    }\n  }\n\n};\n\nvar TextTransforms = {\n  /**\r\n   * Delete content in the editor.\r\n   */\n  delete(editor) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false\n      } = options;\n      var {\n        at = editor.selection,\n        hanging = false\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      var isCollapsed = false;\n\n      if (index_es_Range.isRange(at) && index_es_Range.isCollapsed(at)) {\n        isCollapsed = true;\n        at = at.anchor;\n      }\n\n      if (Point.isPoint(at)) {\n        var furthestVoid = Editor.void(editor, {\n          at,\n          mode: 'highest'\n        });\n\n        if (!voids && furthestVoid) {\n          var [, voidPath] = furthestVoid;\n          at = voidPath;\n        } else {\n          var opts = {\n            unit,\n            distance\n          };\n          var target = reverse ? Editor.before(editor, at, opts) || Editor.start(editor, []) : Editor.after(editor, at, opts) || Editor.end(editor, []);\n          at = {\n            anchor: at,\n            focus: target\n          };\n          hanging = true;\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, {\n          at,\n          voids\n        });\n        return;\n      }\n\n      if (index_es_Range.isCollapsed(at)) {\n        return;\n      }\n\n      if (!hanging) {\n        var [, _end] = index_es_Range.edges(at);\n        var endOfDoc = Editor.end(editor, []);\n\n        if (!Point.equals(_end, endOfDoc)) {\n          at = Editor.unhangRange(editor, at, {\n            voids\n          });\n        }\n      }\n\n      var [start, end] = index_es_Range.edges(at);\n      var startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids\n      });\n      var endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids\n      });\n      var isAcrossBlocks = startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1]);\n      var isSingleText = Path.equals(start.path, end.path);\n      var startVoid = voids ? null : Editor.void(editor, {\n        at: start,\n        mode: 'highest'\n      });\n      var endVoid = voids ? null : Editor.void(editor, {\n        at: end,\n        mode: 'highest'\n      }); // If the start or end points are inside an inline void, nudge them out.\n\n      if (startVoid) {\n        var before = Editor.before(editor, start);\n\n        if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n          start = before;\n        }\n      }\n\n      if (endVoid) {\n        var after = Editor.after(editor, end);\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after;\n        }\n      } // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n\n\n      var matches = [];\n      var lastPath;\n\n      for (var entry of Editor.nodes(editor, {\n        at,\n        voids\n      })) {\n        var [node, path] = entry;\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue;\n        }\n\n        if (!voids && Editor.isVoid(editor, node) || !Path.isCommon(path, start.path) && !Path.isCommon(path, end.path)) {\n          matches.push(entry);\n          lastPath = path;\n        }\n      }\n\n      var pathRefs = Array.from(matches, _ref => {\n        var [, p] = _ref;\n        return Editor.pathRef(editor, p);\n      });\n      var startRef = Editor.pointRef(editor, start);\n      var endRef = Editor.pointRef(editor, end);\n      var removedText = '';\n\n      if (!isSingleText && !startVoid) {\n        var _point = startRef.current;\n        var [_node] = Editor.leaf(editor, _point);\n        var {\n          path: _path\n        } = _point;\n        var {\n          offset\n        } = start;\n\n        var text = _node.text.slice(offset);\n\n        if (text.length > 0) {\n          editor.apply({\n            type: 'remove_text',\n            path: _path,\n            offset,\n            text\n          });\n          removedText = text;\n        }\n      }\n\n      pathRefs.reverse().map(r => r.unref()).filter(r => r !== null).forEach(p => Transforms.removeNodes(editor, {\n        at: p,\n        voids\n      }));\n\n      if (!endVoid) {\n        var _point2 = endRef.current;\n        var [_node2] = Editor.leaf(editor, _point2);\n        var {\n          path: _path2\n        } = _point2;\n\n        var _offset = isSingleText ? start.offset : 0;\n\n        var _text = _node2.text.slice(_offset, end.offset);\n\n        if (_text.length > 0) {\n          editor.apply({\n            type: 'remove_text',\n            path: _path2,\n            offset: _offset,\n            text: _text\n          });\n          removedText = _text;\n        }\n      }\n\n      if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids\n        });\n      } // For Thai script, deleting N character(s) backward should delete\n      // N code point(s) instead of an entire grapheme cluster.\n      // Therefore, the remaining code points should be inserted back.\n\n\n      if (isCollapsed && reverse && unit === 'character' && removedText.length > 1 && removedText.match(/[\\u0E00-\\u0E7F]+/)) {\n        Transforms.insertText(editor, removedText.slice(0, removedText.length - distance));\n      }\n\n      var startUnref = startRef.unref();\n      var endUnref = endRef.unref();\n      var point = reverse ? startUnref || endUnref : endUnref || startUnref;\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point);\n      }\n    });\n  },\n\n  /**\r\n   * Insert a fragment at a specific location in the editor.\r\n   */\n  insertFragment(editor, fragment) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        hanging = false,\n        voids = false\n      } = options;\n      var {\n        at = editor.selection\n      } = options;\n\n      if (!fragment.length) {\n        return;\n      }\n\n      if (!at) {\n        return;\n      } else if (index_es_Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at, {\n            voids\n          });\n        }\n\n        if (index_es_Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var [, end] = index_es_Range.edges(at);\n\n          if (!voids && Editor.void(editor, {\n            at: end\n          })) {\n            return;\n          }\n\n          var pointRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at\n          });\n          at = pointRef.unref();\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at);\n      }\n\n      if (!voids && Editor.void(editor, {\n        at\n      })) {\n        return;\n      } // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n\n\n      var inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n\n      if (inlineElementMatch) {\n        var [, _inlinePath] = inlineElementMatch;\n\n        if (Editor.isEnd(editor, at, _inlinePath)) {\n          var after = Editor.after(editor, _inlinePath);\n          at = after;\n        } else if (Editor.isStart(editor, at, _inlinePath)) {\n          var before = Editor.before(editor, _inlinePath);\n          at = before;\n        }\n      }\n\n      var blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids\n      });\n      var [, blockPath] = blockMatch;\n      var isBlockStart = Editor.isStart(editor, at, blockPath);\n      var isBlockEnd = Editor.isEnd(editor, at, blockPath);\n      var isBlockEmpty = isBlockStart && isBlockEnd;\n      var mergeStart = !isBlockStart || isBlockStart && isBlockEnd;\n      var mergeEnd = !isBlockEnd;\n      var [, firstPath] = Node.first({\n        children: fragment\n      }, []);\n      var [, lastPath] = Node.last({\n        children: fragment\n      }, []);\n      var matches = [];\n\n      var matcher = _ref2 => {\n        var [n, p] = _ref2;\n        var isRoot = p.length === 0;\n\n        if (isRoot) {\n          return false;\n        }\n\n        if (isBlockEmpty) {\n          return true;\n        }\n\n        if (mergeStart && Path.isAncestor(p, firstPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n          return false;\n        }\n\n        if (mergeEnd && Path.isAncestor(p, lastPath) && Element.isElement(n) && !editor.isVoid(n) && !editor.isInline(n)) {\n          return false;\n        }\n\n        return true;\n      };\n\n      for (var entry of Node.nodes({\n        children: fragment\n      }, {\n        pass: matcher\n      })) {\n        if (matcher(entry)) {\n          matches.push(entry);\n        }\n      }\n\n      var starts = [];\n      var middles = [];\n      var ends = [];\n      var starting = true;\n      var hasBlocks = false;\n\n      for (var [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false;\n          hasBlocks = true;\n          middles.push(node);\n        } else if (starting) {\n          starts.push(node);\n        } else {\n          ends.push(node);\n        }\n      }\n\n      var [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n      var [, inlinePath] = inlineMatch;\n      var isInlineStart = Editor.isStart(editor, at, inlinePath);\n      var isInlineEnd = Editor.isEnd(editor, at, inlinePath);\n      var middleRef = Editor.pathRef(editor, isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath);\n      var endRef = Editor.pathRef(editor, isInlineEnd ? Path.next(inlinePath) : inlinePath);\n      Transforms.splitNodes(editor, {\n        at,\n        match: n => hasBlocks ? Editor.isBlock(editor, n) : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        always: hasBlocks && (!isBlockStart || starts.length > 0) && (!isBlockEnd || ends.length > 0),\n        voids\n      });\n      var startRef = Editor.pathRef(editor, !isInlineStart || isInlineStart && isInlineEnd ? Path.next(inlinePath) : inlinePath);\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n\n      if (isBlockEmpty && !starts.length && middles.length && !ends.length) {\n        Transforms.delete(editor, {\n          at: blockPath,\n          voids\n        });\n      }\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids\n      });\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids\n      });\n\n      if (!options.at) {\n        var path;\n\n        if (ends.length > 0 && endRef.current) {\n          path = Path.previous(endRef.current);\n        } else if (middles.length > 0 && middleRef.current) {\n          path = Path.previous(middleRef.current);\n        } else if (startRef.current) {\n          path = Path.previous(startRef.current);\n        }\n\n        if (path) {\n          var _end2 = Editor.end(editor, path);\n\n          Transforms.select(editor, _end2);\n        }\n      }\n\n      startRef.unref();\n      middleRef.unref();\n      endRef.unref();\n    });\n  },\n\n  /**\r\n   * Insert a string of text in the Editor.\r\n   */\n  insertText(editor, text) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    Editor.withoutNormalizing(editor, () => {\n      var {\n        voids = false\n      } = options;\n      var {\n        at = editor.selection\n      } = options;\n\n      if (!at) {\n        return;\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at);\n      }\n\n      if (index_es_Range.isRange(at)) {\n        if (index_es_Range.isCollapsed(at)) {\n          at = at.anchor;\n        } else {\n          var end = index_es_Range.end(at);\n\n          if (!voids && Editor.void(editor, {\n            at: end\n          })) {\n            return;\n          }\n\n          var start = index_es_Range.start(at);\n          var startRef = Editor.pointRef(editor, start);\n          var endRef = Editor.pointRef(editor, end);\n          Transforms.delete(editor, {\n            at,\n            voids\n          });\n          var startPoint = startRef.unref();\n          var endPoint = endRef.unref();\n          at = startPoint || endPoint;\n          Transforms.setSelection(editor, {\n            anchor: at,\n            focus: at\n          });\n        }\n      }\n\n      if (!voids && Editor.void(editor, {\n        at\n      })) {\n        return;\n      }\n\n      var {\n        path,\n        offset\n      } = at;\n      if (text.length > 0) editor.apply({\n        type: 'insert_text',\n        path,\n        offset,\n        text\n      });\n    });\n  }\n\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar Transforms = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, GeneralTransforms), NodeTransforms), SelectionTransforms), TextTransforms);\n\n\n//# sourceMappingURL=index.es.js.map\n\n;// CONCATENATED MODULE: ./node_modules/slate-history/dist/index.es.js\n\n\n\nvar History = {\n  /**\r\n   * Check if a value is a `History` object.\r\n   */\n  isHistory(value) {\n    return isPlainObject(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || Operation.isOperationList(value.redos[0].operations)) && (value.undos.length === 0 || Operation.isOperationList(value.undos[0].operations));\n  }\n\n};\n\n/**\r\n * Weakmaps for attaching state to the editor.\r\n */\n\nvar HISTORY = new WeakMap();\nvar SAVING = new WeakMap();\nvar MERGING = new WeakMap(); // eslint-disable-next-line no-redeclare\n\nvar HistoryEditor = {\n  /**\r\n   * Check if a value is a `HistoryEditor` object.\r\n   */\n  isHistoryEditor(value) {\n    return History.isHistory(value.history) && Editor.isEditor(value);\n  },\n\n  /**\r\n   * Get the merge flag's current value.\r\n   */\n  isMerging(editor) {\n    return MERGING.get(editor);\n  },\n\n  /**\r\n   * Get the saving flag's current value.\r\n   */\n  isSaving(editor) {\n    return SAVING.get(editor);\n  },\n\n  /**\r\n   * Redo to the previous saved state.\r\n   */\n  redo(editor) {\n    editor.redo();\n  },\n\n  /**\r\n   * Undo to the previous saved state.\r\n   */\n  undo(editor) {\n    editor.undo();\n  },\n\n  /**\r\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\r\n   * the new operations into previous save point in the history.\r\n   */\n  withoutMerging(editor, fn) {\n    var prev = HistoryEditor.isMerging(editor);\n    MERGING.set(editor, false);\n    fn();\n    MERGING.set(editor, prev);\n  },\n\n  /**\r\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\r\n   * their operations into the history.\r\n   */\n  withoutSaving(editor, fn) {\n    var prev = HistoryEditor.isSaving(editor);\n    SAVING.set(editor, false);\n    fn();\n    SAVING.set(editor, prev);\n  }\n\n};\n\n/**\r\n * The `withHistory` plugin keeps track of the operation history of a Slate\r\n * editor as operations are applied to it, using undo and redo stacks.\r\n *\r\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\r\n * this plugin.\r\n *\r\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\r\n */\n\nvar withHistory = editor => {\n  var e = editor;\n  var {\n    apply\n  } = e;\n  e.history = {\n    undos: [],\n    redos: []\n  };\n\n  e.redo = () => {\n    var {\n      history\n    } = e;\n    var {\n      redos\n    } = history;\n\n    if (redos.length > 0) {\n      var batch = redos[redos.length - 1];\n\n      if (batch.selectionBefore) {\n        Transforms.setSelection(e, batch.selectionBefore);\n      }\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (var op of batch.operations) {\n            e.apply(op);\n          }\n        });\n      });\n      history.redos.pop();\n      history.undos.push(batch);\n    }\n  };\n\n  e.undo = () => {\n    var {\n      history\n    } = e;\n    var {\n      undos\n    } = history;\n\n    if (undos.length > 0) {\n      var batch = undos[undos.length - 1];\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          var inverseOps = batch.operations.map(Operation.inverse).reverse();\n\n          for (var op of inverseOps) {\n            e.apply(op);\n          }\n\n          if (batch.selectionBefore) {\n            Transforms.setSelection(e, batch.selectionBefore);\n          }\n        });\n      });\n      history.redos.push(batch);\n      history.undos.pop();\n    }\n  };\n\n  e.apply = op => {\n    var {\n      operations,\n      history\n    } = e;\n    var {\n      undos\n    } = history;\n    var lastBatch = undos[undos.length - 1];\n    var lastOp = lastBatch && lastBatch.operations[lastBatch.operations.length - 1];\n    var save = HistoryEditor.isSaving(e);\n    var merge = HistoryEditor.isMerging(e);\n\n    if (save == null) {\n      save = shouldSave(op);\n    }\n\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false;\n        } else if (operations.length !== 0) {\n          merge = true;\n        } else {\n          merge = shouldMerge(op, lastOp);\n        }\n      }\n\n      if (lastBatch && merge) {\n        lastBatch.operations.push(op);\n      } else {\n        var batch = {\n          operations: [op],\n          selectionBefore: e.selection\n        };\n        undos.push(batch);\n      }\n\n      while (undos.length > 100) {\n        undos.shift();\n      }\n\n      history.redos = [];\n    }\n\n    apply(op);\n  };\n\n  return e;\n};\n/**\r\n * Check whether to merge an operation into the previous operation.\r\n */\n\nvar shouldMerge = (op, prev) => {\n  if (prev && op.type === 'insert_text' && prev.type === 'insert_text' && op.offset === prev.offset + prev.text.length && Path.equals(op.path, prev.path)) {\n    return true;\n  }\n\n  if (prev && op.type === 'remove_text' && prev.type === 'remove_text' && op.offset + op.text.length === prev.offset && Path.equals(op.path, prev.path)) {\n    return true;\n  }\n\n  return false;\n};\n/**\r\n * Check whether an operation needs to be saved to the history.\r\n */\n\n\nvar shouldSave = (op, prev) => {\n  if (op.type === 'set_selection') {\n    return false;\n  }\n\n  return true;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n\n// EXTERNAL MODULE: ./node_modules/direction/index.js\nvar direction = __webpack_require__(6907);\nvar direction_default = /*#__PURE__*/__webpack_require__.n(direction);\n// EXTERNAL MODULE: ./node_modules/lodash/debounce.js\nvar debounce = __webpack_require__(3279);\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce);\n// EXTERNAL MODULE: ./node_modules/lodash/throttle.js\nvar throttle = __webpack_require__(3493);\nvar throttle_default = /*#__PURE__*/__webpack_require__.n(throttle);\n;// CONCATENATED MODULE: ./node_modules/compute-scroll-into-view/dist/index.mjs\nfunction dist_t(t){return\"object\"==typeof t&&null!=t&&1===t.nodeType}function dist_e(t,e){return(!e||\"hidden\"!==t)&&\"visible\"!==t&&\"clip\"!==t}function dist_n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return dist_e(r.overflowY,n)||dist_e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return!1}function dist_r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}var dist_i=function(e,i){var o=window,l=i.scrollMode,d=i.block,f=i.inline,h=i.boundary,u=i.skipOverflowHiddenElements,s=\"function\"==typeof h?h:function(t){return t!==h};if(!dist_t(e))throw new TypeError(\"Invalid target\");for(var a,c,g=document.scrollingElement||document.documentElement,p=[],m=e;dist_t(m)&&s(m);){if((m=null==(c=(a=m).parentElement)?a.getRootNode().host||null:c)===g){p.push(m);break}null!=m&&m===document.body&&dist_n(m)&&!dist_n(document.documentElement)||null!=m&&dist_n(m,u)&&p.push(m)}for(var w=o.visualViewport?o.visualViewport.width:innerWidth,v=o.visualViewport?o.visualViewport.height:innerHeight,W=window.scrollX||pageXOffset,H=window.scrollY||pageYOffset,b=e.getBoundingClientRect(),y=b.height,E=b.width,M=b.top,V=b.right,x=b.bottom,I=b.left,C=\"start\"===d||\"nearest\"===d?M:\"end\"===d?x:M+y/2,R=\"center\"===f?I+E/2:\"end\"===f?V:I,T=[],k=0;k<p.length;k++){var B=p[k],D=B.getBoundingClientRect(),O=D.height,X=D.width,Y=D.top,L=D.right,S=D.bottom,j=D.left;if(\"if-needed\"===l&&M>=0&&I>=0&&x<=v&&V<=w&&M>=Y&&x<=S&&I>=j&&V<=L)return T;var N=getComputedStyle(B),q=parseInt(N.borderLeftWidth,10),z=parseInt(N.borderTopWidth,10),A=parseInt(N.borderRightWidth,10),F=parseInt(N.borderBottomWidth,10),G=0,J=0,K=\"offsetWidth\"in B?B.offsetWidth-B.clientWidth-q-A:0,P=\"offsetHeight\"in B?B.offsetHeight-B.clientHeight-z-F:0,Q=\"offsetWidth\"in B?0===B.offsetWidth?0:X/B.offsetWidth:0,U=\"offsetHeight\"in B?0===B.offsetHeight?0:O/B.offsetHeight:0;if(g===B)G=\"start\"===d?C:\"end\"===d?C-v:\"nearest\"===d?dist_r(H,H+v,v,z,F,H+C,H+C+y,y):C-v/2,J=\"start\"===f?R:\"center\"===f?R-w/2:\"end\"===f?R-w:dist_r(W,W+w,w,q,A,W+R,W+R+E,E),G=Math.max(0,G+H),J=Math.max(0,J+W);else{G=\"start\"===d?C-Y-z:\"end\"===d?C-S+F+P:\"nearest\"===d?dist_r(Y,S,O,z,F+P,C,C+y,y):C-(Y+O/2)+P/2,J=\"start\"===f?R-j-q:\"center\"===f?R-(j+X/2)+K/2:\"end\"===f?R-L+A+K:dist_r(j,L,X,q,A+K,R,R+E,E);var Z=B.scrollLeft,$=B.scrollTop;C+=$-(G=Math.max(0,Math.min($+G/U,B.scrollHeight-O/U+P))),R+=Z-(J=Math.max(0,Math.min(Z+J/Q,B.scrollWidth-X/Q+K)))}T.push({el:B,top:G,left:J})}return T};\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/scroll-into-view-if-needed/es/index.js\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n      top = _ref.top,\n      left = _ref.left;\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n  if (isOptionsObject(options)) {\n    return options;\n  }\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? dist_i(target, options) : []);\n  }\n  if (!isTargetAttached) {\n    return;\n  }\n  var computeOptions = getOptions(options);\n  return defaultBehavior(dist_i(target, computeOptions), computeOptions.behavior);\n}\n/* harmony default export */ var es = (scrollIntoView);\n// EXTERNAL MODULE: ./node_modules/is-hotkey/lib/index.js\nvar lib = __webpack_require__(8156);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(3935);\n;// CONCATENATED MODULE: ./node_modules/slate-react/dist/index.es.js\n\n\n\n\n\n\n\n\n\nfunction index_es_defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction index_es_objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction index_es_objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = index_es_objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n/**\r\n * An auto-incrementing identifier for keys.\r\n */\nvar index_es_n = 0;\n/**\r\n * A class that keeps track of a key string. We use a full class here because we\r\n * want to be able to use them as keys in `WeakMap` objects.\r\n */\n\nclass Key {\n  constructor() {\n    this.id = \"\".concat(index_es_n++);\n  }\n\n}\n\n/**\r\n * Two weak maps that allow us rebuild a path given a node. They are populated\r\n * at render time such that after a render occurs we can always backtrack.\r\n */\nvar NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\r\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\r\n * are used to resolve DOM event-related logic into Slate actions.\r\n */\n\nvar EDITOR_TO_WINDOW = new WeakMap();\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar EDITOR_TO_PLACEHOLDER_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\nvar EDITOR_TO_KEY_TO_ELEMENT = new WeakMap();\nvar EDITOR_TO_STYLE_ELEMENT = new WeakMap();\n/**\r\n * Weak maps for storing editor-related state.\r\n */\n\nvar IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\nvar IS_COMPOSING = new WeakMap();\nvar EDITOR_TO_USER_SELECTION = new WeakMap();\n/**\r\n * Weak map for associating the context `onChange` context with the plugin.\r\n */\n\nvar EDITOR_TO_ON_CHANGE = new WeakMap();\n/**\r\n * Weak maps for saving pending state on composition stage.\r\n */\n\nvar EDITOR_TO_SCHEDULE_FLUSH = new WeakMap();\nvar EDITOR_TO_PENDING_INSERTION_MARKS = new WeakMap();\nvar EDITOR_TO_USER_MARKS = new WeakMap();\n/**\r\n * Android input handling specific weak-maps\r\n */\n\nvar EDITOR_TO_PENDING_DIFFS = new WeakMap();\nvar EDITOR_TO_PENDING_ACTION = new WeakMap();\nvar EDITOR_TO_PENDING_SELECTION = new WeakMap();\nvar EDITOR_TO_FORCE_RENDER = new WeakMap();\n/**\r\n * Symbols.\r\n */\n\nvar PLACEHOLDER_SYMBOL = Symbol('placeholder');\nvar MARK_PLACEHOLDER_SYMBOL = Symbol('mark-placeholder');\n\n/**\r\n * Types.\r\n */\nvar DOMText = globalThis.Text;\n/**\r\n * Returns the host window of a DOM node\r\n */\n\nvar getDefaultView = value => {\n  return value && value.ownerDocument && value.ownerDocument.defaultView || null;\n};\n/**\r\n * Check if a DOM node is a comment node.\r\n */\n\nvar isDOMComment = value => {\n  return isDOMNode(value) && value.nodeType === 8;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\nvar isDOMElement = value => {\n  return isDOMNode(value) && value.nodeType === 1;\n};\n/**\r\n * Check if a value is a DOM node.\r\n */\n\nvar isDOMNode = value => {\n  var window = getDefaultView(value);\n  return !!window && value instanceof window.Node;\n};\n/**\r\n * Check if a value is a DOM selection.\r\n */\n\nvar isDOMSelection = value => {\n  var window = value && value.anchorNode && getDefaultView(value.anchorNode);\n  return !!window && value instanceof window.Selection;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\nvar isDOMText = value => {\n  return isDOMNode(value) && value.nodeType === 3;\n};\n/**\r\n * Checks whether a paste event is a plaintext-only event.\r\n */\n\nvar isPlainTextOnlyPaste = event => {\n  return event.clipboardData && event.clipboardData.getData('text/plain') !== '' && event.clipboardData.types.length === 1;\n};\n/**\r\n * Normalize a DOM point so that it always refers to a text node.\r\n */\n\nvar normalizeDOMPoint = domPoint => {\n  var [node, offset] = domPoint; // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n\n  if (isDOMElement(node) && node.childNodes.length) {\n    var isLast = offset === node.childNodes.length;\n    var index = isLast ? offset - 1 : offset;\n    [node, index] = getEditableChildAndIndex(node, index, isLast ? 'backward' : 'forward'); // If the editable child found is in front of input offset, we instead seek to its end\n\n    isLast = index < offset; // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n\n    while (isDOMElement(node) && node.childNodes.length) {\n      var i = isLast ? node.childNodes.length - 1 : 0;\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward');\n    } // Determine the new offset inside the text node.\n\n\n    offset = isLast && node.textContent != null ? node.textContent.length : 0;\n  } // Return the node and offset.\n\n\n  return [node, offset];\n};\n/**\r\n * Determines wether the active element is nested within a shadowRoot\r\n */\n\nvar hasShadowRoot = () => {\n  return !!(window.document.activeElement && window.document.activeElement.shadowRoot);\n};\n/**\r\n * Get the nearest editable child and index at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\nvar getEditableChildAndIndex = (parent, index, direction) => {\n  var {\n    childNodes\n  } = parent;\n  var child = childNodes[index];\n  var i = index;\n  var triedForward = false;\n  var triedBackward = false; // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n\n  while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute('contenteditable') === 'false') {\n    if (triedForward && triedBackward) {\n      break;\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true;\n      i = index - 1;\n      direction = 'backward';\n      continue;\n    }\n\n    if (i < 0) {\n      triedBackward = true;\n      i = index + 1;\n      direction = 'forward';\n      continue;\n    }\n\n    child = childNodes[i];\n    index = i;\n    i += direction === 'forward' ? 1 : -1;\n  }\n\n  return [child, index];\n};\n/**\r\n * Get the nearest editable child at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\nvar getEditableChild = (parent, index, direction) => {\n  var [child] = getEditableChildAndIndex(parent, index, direction);\n  return child;\n};\n/**\r\n * Get a plaintext representation of the content of a node, accounting for block\r\n * elements which get a newline appended.\r\n *\r\n * The domNode must be attached to the DOM.\r\n */\n\nvar getPlainText = domNode => {\n  var text = '';\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue;\n  }\n\n  if (isDOMElement(domNode)) {\n    for (var childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode);\n    }\n\n    var display = getComputedStyle(domNode).getPropertyValue('display');\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n';\n    }\n  }\n\n  return text;\n};\n/**\r\n * Get x-slate-fragment attribute from data-slate-fragment\r\n */\n\nvar catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m;\nvar getSlateFragmentAttribute = dataTransfer => {\n  var htmlData = dataTransfer.getData('text/html');\n  var [, fragment] = htmlData.match(catchSlateFragment) || [];\n  return fragment;\n};\n/**\r\n * Check whether a mutation originates from a editable element inside the editor.\r\n */\n\nvar isTrackedMutation = (editor, mutation, batch) => {\n  var {\n    target\n  } = mutation;\n\n  if (isDOMElement(target) && target.matches('[contentEditable=\"false\"]')) {\n    return false;\n  }\n\n  var {\n    document\n  } = ReactEditor.getWindow(editor);\n\n  if (document.contains(target)) {\n    return ReactEditor.hasDOMNode(editor, target, {\n      editable: true\n    });\n  }\n\n  var parentMutation = batch.find(_ref => {\n    var {\n      addedNodes,\n      removedNodes\n    } = _ref;\n\n    for (var node of addedNodes) {\n      if (node === target || node.contains(target)) {\n        return true;\n      }\n    }\n\n    for (var _node of removedNodes) {\n      if (_node === target || _node.contains(target)) {\n        return true;\n      }\n    }\n  });\n\n  if (!parentMutation || parentMutation === mutation) {\n    return false;\n  } // Target add/remove is tracked. Track the mutation if we track the parent mutation.\n\n\n  return isTrackedMutation(editor, parentMutation, batch);\n};\n\nvar IS_REACT_VERSION_17_OR_ABOVE = parseInt(react.version.split('.')[0], 10) >= 17;\nvar IS_IOS = typeof navigator !== 'undefined' && typeof window !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);\nvar IS_ANDROID = typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_SAFARI = typeof navigator !== 'undefined' && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent); // \"modern\" Edge was released at 79.x\n\nvar IS_EDGE_LEGACY = typeof navigator !== 'undefined' && /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])(?:\\.)/i.test(navigator.userAgent);\nvar IS_CHROME = typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent); // Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\n\nvar IS_CHROME_LEGACY = typeof navigator !== 'undefined' && /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])(?:\\.)/i.test(navigator.userAgent); // Firefox did not support `beforeInput` until `v87`.\n\nvar IS_FIREFOX_LEGACY = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])(?:\\.)).*/i.test(navigator.userAgent); // qq browser\n\nvar IS_QQBROWSER = typeof navigator !== 'undefined' && /.*QQBrowser/.test(navigator.userAgent); // UC mobile browser\n\nvar IS_UC_MOBILE = typeof navigator !== 'undefined' && /.*UCBrowser/.test(navigator.userAgent); // Wechat browser\n\nvar IS_WECHATBROWSER = typeof navigator !== 'undefined' && /.*Wechat/.test(navigator.userAgent); // Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\n\nvar CAN_USE_DOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined'); // COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\n\nvar HAS_BEFORE_INPUT_SUPPORT = !IS_CHROME_LEGACY && !IS_EDGE_LEGACY && // globalThis is undefined in older browsers\ntypeof globalThis !== 'undefined' && globalThis.InputEvent && // @ts-ignore The `getTargetRanges` property isn't recognized.\ntypeof globalThis.InputEvent.prototype.getTargetRanges === 'function';\n\nvar ReactEditor = {\n  /**\r\n   * Check if the user is currently composing inside the editor.\r\n   */\n  isComposing(editor) {\n    return !!IS_COMPOSING.get(editor);\n  },\n\n  /**\r\n   * Return the host window of the current editor.\r\n   */\n  getWindow(editor) {\n    var window = EDITOR_TO_WINDOW.get(editor);\n\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor');\n    }\n\n    return window;\n  },\n\n  /**\r\n   * Find a key for a Slate node.\r\n   */\n  findKey(editor, node) {\n    var key = NODE_TO_KEY.get(node);\n\n    if (!key) {\n      key = new Key();\n      NODE_TO_KEY.set(node, key);\n    }\n\n    return key;\n  },\n\n  /**\r\n   * Find the path of Slate node.\r\n   */\n  findPath(editor, node) {\n    var path = [];\n    var child = node;\n\n    while (true) {\n      var parent = NODE_TO_PARENT.get(child);\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path;\n        } else {\n          break;\n        }\n      }\n\n      var i = NODE_TO_INDEX.get(child);\n\n      if (i == null) {\n        break;\n      }\n\n      path.unshift(i);\n      child = parent;\n    }\n\n    throw new Error(\"Unable to find the path for Slate node: \".concat(Scrubber.stringify(node)));\n  },\n\n  /**\r\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\r\n   */\n  findDocumentOrShadowRoot(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n\n    if ((root instanceof Document || root instanceof ShadowRoot) && root.getSelection != null) {\n      return root;\n    }\n\n    return el.ownerDocument;\n  },\n\n  /**\r\n   * Check if the editor is focused.\r\n   */\n  isFocused(editor) {\n    return !!IS_FOCUSED.get(editor);\n  },\n\n  /**\r\n   * Check if the editor is in read-only mode.\r\n   */\n  isReadOnly(editor) {\n    return !!IS_READ_ONLY.get(editor);\n  },\n\n  /**\r\n   * Blur the editor.\r\n   */\n  blur(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, false);\n\n    if (root.activeElement === el) {\n      el.blur();\n    }\n  },\n\n  /**\r\n   * Focus the editor.\r\n   */\n  focus(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, true);\n\n    if (root.activeElement !== el) {\n      el.focus({\n        preventScroll: true\n      });\n    }\n  },\n\n  /**\r\n   * Deselect the editor.\r\n   */\n  deselect(editor) {\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges();\n    }\n\n    if (selection) {\n      Transforms.deselect(editor);\n    }\n  },\n\n  /**\r\n   * Check if a DOM node is within the editor.\r\n   */\n  hasDOMNode(editor, target) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var {\n      editable = false\n    } = options;\n    var editorEl = ReactEditor.toDOMNode(editor, editor);\n    var targetEl; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n\n    try {\n      targetEl = isDOMElement(target) ? target : target.parentElement;\n    } catch (err) {\n      if (!err.message.includes('Permission denied to access property \"nodeType\"')) {\n        throw err;\n      }\n    }\n\n    if (!targetEl) {\n      return false;\n    }\n\n    return targetEl.closest(\"[data-slate-editor]\") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === 'boolean' && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n    // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n    targetEl.closest('[contenteditable=\"false\"]') === editorEl || !!targetEl.getAttribute('data-slate-zero-width'));\n  },\n\n  /**\r\n   * Insert data from a `DataTransfer` into the editor.\r\n   */\n  insertData(editor, data) {\n    editor.insertData(data);\n  },\n\n  /**\r\n   * Insert fragment data from a `DataTransfer` into the editor.\r\n   */\n  insertFragmentData(editor, data) {\n    return editor.insertFragmentData(data);\n  },\n\n  /**\r\n   * Insert text data from a `DataTransfer` into the editor.\r\n   */\n  insertTextData(editor, data) {\n    return editor.insertTextData(data);\n  },\n\n  /**\r\n   * Sets data from the currently selected fragment on a `DataTransfer`.\r\n   */\n  setFragmentData(editor, data, originEvent) {\n    editor.setFragmentData(data, originEvent);\n  },\n\n  /**\r\n   * Find the native DOM element from a Slate node.\r\n   */\n  toDOMNode(editor, node) {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    var domNode = Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n\n    if (!domNode) {\n      throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(Scrubber.stringify(node)));\n    }\n\n    return domNode;\n  },\n\n  /**\r\n   * Find a native DOM selection point from a Slate point.\r\n   */\n  toDOMPoint(editor, point) {\n    var [node] = Editor.node(editor, point.path);\n    var el = ReactEditor.toDOMNode(editor, node);\n    var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n\n    if (Editor[\"void\"](editor, {\n      at: point\n    })) {\n      point = {\n        path: point.path,\n        offset: 0\n      };\n    } // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n\n\n    var selector = \"[data-slate-string], [data-slate-zero-width]\";\n    var texts = Array.from(el.querySelectorAll(selector));\n    var start = 0;\n\n    for (var i = 0; i < texts.length; i++) {\n      var text = texts[i];\n      var domNode = text.childNodes[0];\n\n      if (domNode == null || domNode.textContent == null) {\n        continue;\n      }\n\n      var {\n        length\n      } = domNode.textContent;\n      var attr = text.getAttribute('data-slate-length');\n      var trueLength = attr == null ? length : parseInt(attr, 10);\n      var end = start + trueLength; // Prefer putting the selection inside the mark placeholder to ensure\n      // composed text is displayed with the correct marks.\n\n      var nextText = texts[i + 1];\n\n      if (point.offset === end && nextText !== null && nextText !== void 0 && nextText.hasAttribute('data-slate-mark-placeholder')) {\n        var _nextText$textContent;\n\n        var domText = nextText.childNodes[0];\n        domPoint = [// COMPAT: If we don't explicity set the dom point to be on the actual\n        // dom text element, chrome will put the selection behind the actual dom\n        // text element, causing domRange.getBoundingClientRect() calls on a collapsed\n        // selection to return incorrect zero values (https://bugs.chromium.org/p/chromium/issues/detail?id=435438)\n        // which will cause issues when scrolling to it.\n        domText instanceof DOMText ? domText : nextText, (_nextText$textContent = nextText.textContent) !== null && _nextText$textContent !== void 0 && _nextText$textContent.startsWith('\\uFEFF') ? 1 : 0];\n        break;\n      }\n\n      if (point.offset <= end) {\n        var offset = Math.min(length, Math.max(0, point.offset - start));\n        domPoint = [domNode, offset];\n        break;\n      }\n\n      start = end;\n    }\n\n    if (!domPoint) {\n      throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(Scrubber.stringify(point)));\n    }\n\n    return domPoint;\n  },\n\n  /**\r\n   * Find a native DOM range from a Slate `range`.\r\n   *\r\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\r\n   *\r\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\r\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\r\n   */\n  toDOMRange(editor, range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    var isBackward = index_es_Range.isBackward(range);\n    var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n    var domFocus = index_es_Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n    var window = ReactEditor.getWindow(editor);\n    var domRange = window.document.createRange();\n    var [startNode, startOffset] = isBackward ? domFocus : domAnchor;\n    var [endNode, endOffset] = isBackward ? domAnchor : domFocus; // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n\n    var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;\n    var isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width');\n    var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;\n    var isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width');\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);\n    return domRange;\n  },\n\n  /**\r\n   * Find a Slate node from a native DOM `element`.\r\n   */\n  toSlateNode(editor, domNode) {\n    var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(\"[data-slate-node]\");\n    }\n\n    var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n\n    if (!node) {\n      throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n    }\n\n    return node;\n  },\n\n  /**\r\n   * Get the target range from a DOM `event`.\r\n   */\n  findEventRange(editor, event) {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent;\n    }\n\n    var {\n      clientX: x,\n      clientY: y,\n      target\n    } = event;\n\n    if (x == null || y == null) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    }\n\n    var node = ReactEditor.toSlateNode(editor, event.target);\n    var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n\n    if (Editor.isVoid(editor, node)) {\n      var rect = target.getBoundingClientRect();\n      var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n      var edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end'\n      });\n      var point = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);\n\n      if (point) {\n        var _range = Editor.range(editor, point);\n\n        return _range;\n      }\n    } // Else resolve a range from the caret position where the drop occured.\n\n\n    var domRange;\n    var {\n      document\n    } = ReactEditor.getWindow(editor); // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y);\n    } else {\n      var position = document.caretPositionFromPoint(x, y);\n\n      if (position) {\n        domRange = document.createRange();\n        domRange.setStart(position.offsetNode, position.offset);\n        domRange.setEnd(position.offsetNode, position.offset);\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    } // Resolve a Slate range from the DOM range.\n\n\n    var range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      suppressThrow: false\n    });\n    return range;\n  },\n\n  /**\r\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\r\n   */\n  toSlatePoint(editor, domPoint, options) {\n    var {\n      exactMatch,\n      suppressThrow\n    } = options;\n    var [nearestNode, nearestOffset] = exactMatch ? domPoint : normalizeDOMPoint(domPoint);\n    var parentNode = nearestNode.parentNode;\n    var textNode = null;\n    var offset = 0;\n\n    if (parentNode) {\n      var _domNode$textContent, _domNode$textContent2;\n\n      var editorEl = ReactEditor.toDOMNode(editor, editor);\n      var potentialVoidNode = parentNode.closest('[data-slate-void=\"true\"]'); // Need to ensure that the closest void node is actually a void node\n      // within this editor, and not a void node within some parent editor. This can happen\n      // if this editor is within a void node of another editor (\"nested editors\", like in\n      // the \"Editable Voids\" example on the docs site).\n\n      var voidNode = potentialVoidNode && editorEl.contains(potentialVoidNode) ? potentialVoidNode : null;\n      var leafNode = parentNode.closest('[data-slate-leaf]');\n      var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n\n        if (textNode) {\n          var window = ReactEditor.getWindow(editor);\n          var range = window.document.createRange();\n          range.setStart(textNode, 0);\n          range.setEnd(nearestNode, nearestOffset);\n          var contents = range.cloneContents();\n          var removals = [...Array.prototype.slice.call(contents.querySelectorAll('[data-slate-zero-width]')), ...Array.prototype.slice.call(contents.querySelectorAll('[contenteditable=false]'))];\n          removals.forEach(el => {\n            // COMPAT: While composing at the start of a text node, some keyboards put\n            // the text content inside the zero width space.\n            if (IS_ANDROID && !exactMatch && el.hasAttribute('data-slate-zero-width') && el.textContent.length > 0 && el.textContext !== '\\uFEFF') {\n              if (el.textContent.startsWith('\\uFEFF')) {\n                el.textContent = el.textContent.slice(1);\n              }\n\n              return;\n            }\n\n            el.parentNode.removeChild(el);\n          }); // COMPAT: Edge has a bug where Range.prototype.toString() will\n          // convert \\n into \\r\\n. The bug causes a loop when slate-react\n          // attempts to reposition its cursor to match the native position. Use\n          // textContent.length instead.\n          // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n\n          offset = contents.textContent.length;\n          domNode = textNode;\n        }\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent and taking the\n        // first one that isn't inside a nested editor.\n        var leafNodes = voidNode.querySelectorAll('[data-slate-leaf]');\n\n        for (var index = 0; index < leafNodes.length; index++) {\n          var current = leafNodes[index];\n\n          if (ReactEditor.hasDOMNode(editor, current)) {\n            leafNode = current;\n            break;\n          }\n        } // COMPAT: In read-only editors the leaf is not rendered.\n\n\n        if (!leafNode) {\n          offset = 1;\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]');\n          domNode = leafNode;\n          offset = domNode.textContent.length;\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent.length;\n          });\n        }\n      }\n\n      if (domNode && offset === domNode.textContent.length && // COMPAT: Android IMEs might remove the zero width space while composing,\n      // and we don't add it for line-breaks.\n      IS_ANDROID && domNode.getAttribute('data-slate-zero-width') === 'z' && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.startsWith('\\uFEFF') && (parentNode.hasAttribute('data-slate-zero-width') || IS_FIREFOX && (_domNode$textContent2 = domNode.textContent) !== null && _domNode$textContent2 !== void 0 && _domNode$textContent2.endsWith('\\n\\n'))) {\n        offset--;\n      }\n    }\n\n    if (IS_ANDROID && !textNode && !exactMatch) {\n      var node = parentNode.hasAttribute('data-slate-node') ? parentNode : parentNode.closest('[data-slate-node]');\n\n      if (node && ReactEditor.hasDOMNode(editor, node, {\n        editable: true\n      })) {\n        var _slateNode = ReactEditor.toSlateNode(editor, node);\n\n        var {\n          path: _path,\n          offset: _offset\n        } = Editor.start(editor, ReactEditor.findPath(editor, _slateNode));\n\n        if (!node.querySelector('[data-slate-leaf]')) {\n          _offset = nearestOffset;\n        }\n\n        return {\n          path: _path,\n          offset: _offset\n        };\n      }\n    }\n\n    if (!textNode) {\n      if (suppressThrow) {\n        return null;\n      }\n\n      throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n    } // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n\n\n    var slateNode = ReactEditor.toSlateNode(editor, textNode);\n    var path = ReactEditor.findPath(editor, slateNode);\n    return {\n      path,\n      offset\n    };\n  },\n\n  /**\r\n   * Find a Slate range from a DOM range or selection.\r\n   */\n  toSlateRange(editor, domRange, options) {\n    var {\n      exactMatch,\n      suppressThrow\n    } = options;\n    var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;\n    var anchorNode;\n    var anchorOffset;\n    var focusNode;\n    var focusOffset;\n    var isCollapsed;\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode;\n        anchorOffset = domRange.anchorOffset;\n        focusNode = domRange.focusNode;\n        focusOffset = domRange.focusOffset; // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;\n        } else {\n          isCollapsed = domRange.isCollapsed;\n        }\n      } else {\n        anchorNode = domRange.startContainer;\n        anchorOffset = domRange.startOffset;\n        focusNode = domRange.endContainer;\n        focusOffset = domRange.endOffset;\n        isCollapsed = domRange.collapsed;\n      }\n    }\n\n    if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n      throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n    }\n\n    var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {\n      exactMatch,\n      suppressThrow\n    });\n\n    if (!anchor) {\n      return null;\n    }\n\n    var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {\n      exactMatch,\n      suppressThrow\n    });\n\n    if (!focus) {\n      return null;\n    }\n\n    var range = {\n      anchor: anchor,\n      focus: focus\n    }; // if the selection is a hanging range that ends in a void\n    // and the DOM focus is an Element\n    // (meaning that the selection ends before the element)\n    // unhang the range to avoid mistakenly including the void\n\n    if (index_es_Range.isExpanded(range) && index_es_Range.isForward(range) && isDOMElement(focusNode) && Editor[\"void\"](editor, {\n      at: range.focus,\n      mode: 'highest'\n    })) {\n      range = Editor.unhangRange(editor, range, {\n        voids: true\n      });\n    }\n\n    return range;\n  },\n\n  hasRange(editor, range) {\n    var {\n      anchor,\n      focus\n    } = range;\n    return Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path);\n  },\n\n  /**\r\n   * Check if the target is in the editor.\r\n   */\n  hasTarget(editor, target) {\n    return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);\n  },\n\n  /**\r\n   * Check if the target is editable and in the editor.\r\n   */\n  hasEditableTarget(editor, target) {\n    return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n      editable: true\n    });\n  },\n\n  /**\r\n   * Check if the target can be selectable\r\n   */\n  hasSelectableTarget(editor, target) {\n    return ReactEditor.hasEditableTarget(editor, target) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, target);\n  },\n\n  /**\r\n   * Check if the target is inside void and in an non-readonly editor.\r\n   */\n  isTargetInsideNonReadonlyVoid(editor, target) {\n    if (IS_READ_ONLY.get(editor)) return false;\n    var slateNode = ReactEditor.hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);\n    return Editor.isVoid(editor, slateNode);\n  },\n\n  /**\r\n   * Experimental and android specific: Flush all pending diffs and cancel composition at the next possible time.\r\n   */\n  androidScheduleFlush(editor) {\n    var _EDITOR_TO_SCHEDULE_F;\n\n    (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(editor)) === null || _EDITOR_TO_SCHEDULE_F === void 0 ? void 0 : _EDITOR_TO_SCHEDULE_F();\n  },\n\n  /**\r\n   * Experimental and android specific: Get pending diffs\r\n   */\n  androidPendingDiffs(editor) {\n    return EDITOR_TO_PENDING_DIFFS.get(editor);\n  }\n\n};\n\n/**\r\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\r\n */\n\nvar useIsomorphicLayoutEffect = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\n\nvar index_es_excluded$3 = [\"anchor\", \"focus\"],\n    index_es_excluded2$1 = [\"anchor\", \"focus\"];\nvar shallowCompare = (obj1, obj2) => Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every(key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]);\n/**\r\n * Check if a list of decorator ranges are equal to another.\r\n *\r\n * PERF: this requires the two lists to also have the ranges inside them in the\r\n * same order, but this is an okay constraint for us since decorations are\r\n * kept in order, and the odd case where they aren't is okay to re-render for.\r\n */\n\nvar isDecoratorRangeListEqual = (list, another) => {\n  if (list.length !== another.length) {\n    return false;\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var range = list[i];\n    var other = another[i];\n\n    var rangeOwnProps = index_es_objectWithoutProperties(range, index_es_excluded$3);\n\n    var otherOwnProps = index_es_objectWithoutProperties(other, index_es_excluded2$1);\n\n    if (!index_es_Range.equals(range, other) || range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] || !shallowCompare(rangeOwnProps, otherOwnProps)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\r\n * Leaf content strings.\r\n */\n\nvar index_es_String = props => {\n  var {\n    isLast,\n    leaf,\n    parent,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = Path.parent(path);\n  var isMarkPlaceholder = leaf[MARK_PLACEHOLDER_SYMBOL] === true; // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/react.createElement(ZeroWidthString, {\n      length: Node.string(parent).length\n    });\n  } // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n\n\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/react.createElement(ZeroWidthString, {\n      isLineBreak: true,\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  } // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n\n\n  if (leaf.text === '') {\n    return /*#__PURE__*/react.createElement(ZeroWidthString, {\n      isMarkPlaceholder: isMarkPlaceholder\n    });\n  } // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n\n\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/react.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n\n  return /*#__PURE__*/react.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\r\n * Leaf strings with text in them.\r\n */\n\n\nvar TextString = props => {\n  var {\n    text,\n    isTrailing = false\n  } = props;\n  var ref = (0,react.useRef)(null);\n\n  var getTextContent = () => {\n    return \"\".concat(text !== null && text !== void 0 ? text : '').concat(isTrailing ? '\\n' : '');\n  }; // This is the actual text rendering boundary where we interface with the DOM\n  // The text is not rendered as part of the virtual DOM, as since we handle basic character insertions natively,\n  // updating the DOM is not a one way dataflow anymore. What we need here is not reconciliation and diffing\n  // with previous version of the virtual DOM, but rather diffing with the actual DOM element, and replace the DOM <span> content\n  // exactly if and only if its current content does not match our current virtual DOM.\n  // Otherwise the DOM TextNode would always be replaced by React as the user types, which interferes with native text features,\n  // eg makes native spellcheck opt out from checking the text node.\n  // useLayoutEffect: updating our span before browser paint\n\n\n  useIsomorphicLayoutEffect(() => {\n    // null coalescing text to make sure we're not outputing \"null\" as a string in the extreme case it is nullish at runtime\n    var textWithTrailing = getTextContent();\n\n    if (ref.current && ref.current.textContent !== textWithTrailing) {\n      ref.current.textContent = textWithTrailing;\n    } // intentionally not specifying dependencies, so that this effect runs on every render\n    // as this effectively replaces \"specifying the text in the virtual DOM under the <span> below\" on each render\n\n  }); // Render text content immediately if it's the first-time render\n  // Ensure that text content is rendered on server-side rendering\n\n  if (!ref.current) {\n    return /*#__PURE__*/react.createElement(\"span\", {\n      \"data-slate-string\": true,\n      ref: ref\n    }, getTextContent());\n  } // the span is intentionally same on every render in virtual DOM, actual rendering happens in the layout effect above\n\n\n  return /*#__PURE__*/react.createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref\n  });\n};\n/**\r\n * Leaf strings without text, render as zero-width strings.\r\n */\n\n\nvar ZeroWidthString = props => {\n  var {\n    length = 0,\n    isLineBreak = false,\n    isMarkPlaceholder = false\n  } = props;\n  var attributes = {\n    'data-slate-zero-width': isLineBreak ? 'n' : 'z',\n    'data-slate-length': length\n  };\n\n  if (isMarkPlaceholder) {\n    attributes['data-slate-mark-placeholder'] = true;\n  }\n\n  return /*#__PURE__*/react.createElement(\"span\", Object.assign({}, attributes), !IS_ANDROID || !isLineBreak ? '\\uFEFF' : null, isLineBreak ? /*#__PURE__*/react.createElement(\"br\", null) : null);\n};\n\n/**\r\n * A React context for sharing the editor object.\r\n */\n\nvar EditorContext = /*#__PURE__*/(0,react.createContext)(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlateStatic = () => {\n  var editor = (0,react.useContext)(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n\n/**\r\n * Individual leaves in a text node with unique formatting.\r\n */\n\nvar Leaf = props => {\n  var {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = props => /*#__PURE__*/react.createElement(DefaultLeaf, Object.assign({}, props))\n  } = props;\n  var placeholderRef = (0,react.useRef)(null);\n  var editor = useSlateStatic();\n  var placeholderResizeObserver = (0,react.useRef)(null);\n  (0,react.useEffect)(() => {\n    return () => {\n      if (placeholderResizeObserver.current) {\n        placeholderResizeObserver.current.disconnect();\n      }\n    };\n  }, []);\n  (0,react.useEffect)(() => {\n    var placeholderEl = placeholderRef === null || placeholderRef === void 0 ? void 0 : placeholderRef.current;\n\n    if (placeholderEl) {\n      EDITOR_TO_PLACEHOLDER_ELEMENT.set(editor, placeholderEl);\n    } else {\n      EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n    }\n\n    if (placeholderResizeObserver.current) {\n      // Update existing observer.\n      placeholderResizeObserver.current.disconnect();\n      if (placeholderEl) placeholderResizeObserver.current.observe(placeholderEl);\n    } else if (placeholderEl) {\n      // Create a new observer and observe the placeholder element.\n      placeholderResizeObserver.current = new ResizeObserver(_ref => {\n        var [{\n          target\n        }] = _ref;\n        var styleElement = EDITOR_TO_STYLE_ELEMENT.get(editor);\n\n        if (styleElement) {\n          // Make the min-height the height of the placeholder.\n          var minHeight = \"\".concat(target.clientHeight, \"px\");\n          styleElement.innerHTML = \":where([data-slate-editor-id=\\\"\".concat(editor.id, \"\\\"]) { min-height: \").concat(minHeight, \"; }\");\n        }\n      });\n      placeholderResizeObserver.current.observe(placeholderEl);\n    }\n\n    if (!placeholderEl) {\n      // No placeholder element, so no need for a resize observer.\n      var styleElement = EDITOR_TO_STYLE_ELEMENT.get(editor);\n\n      if (styleElement) {\n        // No min-height if there is no placeholder.\n        styleElement.innerHTML = '';\n      }\n    }\n\n    return () => {\n      EDITOR_TO_PLACEHOLDER_ELEMENT.delete(editor);\n    };\n  }, [placeholderRef, leaf]);\n  var children = /*#__PURE__*/react.createElement(index_es_String, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none'\n        },\n        contentEditable: false,\n        ref: placeholderRef\n      }\n    };\n    children = /*#__PURE__*/react.createElement(react.Fragment, null, renderPlaceholder(placeholderProps), children);\n  } // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n\n\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes,\n    children,\n    leaf,\n    text\n  });\n};\n\nvar MemoizedLeaf = /*#__PURE__*/react.memo(Leaf, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && Text.equals(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];\n});\nvar DefaultLeaf = props => {\n  var {\n    attributes,\n    children\n  } = props;\n  return /*#__PURE__*/react.createElement(\"span\", Object.assign({}, attributes), children);\n};\n\n/**\r\n * Text.\r\n */\n\nvar index_es_Text = props => {\n  var {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text\n  } = props;\n  var editor = useSlateStatic();\n  var ref = (0,react.useRef)(null);\n  var leaves = Text.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/react.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  } // Update element-related weak maps with the DOM element ref.\n\n\n  useIsomorphicLayoutEffect(() => {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n\n    if (ref.current) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(text, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(text);\n    }\n  });\n  return /*#__PURE__*/react.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: ref\n  }, children);\n};\n\nvar MemoizedText = /*#__PURE__*/react.memo(index_es_Text, (prev, next) => {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && isDecoratorRangeListEqual(next.decorations, prev.decorations);\n});\n\n/**\r\n * Element.\r\n */\n\nvar index_es_Element = props => {\n  var {\n    decorations,\n    element,\n    renderElement = p => /*#__PURE__*/react.createElement(DefaultElement, Object.assign({}, p)),\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var ref = (0,react.useCallback)(ref => {\n    // Update element-related weak maps with the DOM element ref.\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n\n    if (ref) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref);\n      NODE_TO_ELEMENT.set(element, ref);\n      ELEMENT_TO_NODE.set(ref, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.delete(key);\n      NODE_TO_ELEMENT.delete(element);\n    }\n  }, [editor, key, element]);\n  var children = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  }); // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n\n  var attributes = {\n    'data-slate-node': 'element',\n    ref\n  };\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  } // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n\n\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    var text = Node.string(element);\n    var dir = direction_default()(text);\n\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  } // If it's a void node, wrap the children in extra void-specific elements.\n\n\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n\n    var Tag = isInline ? 'span' : 'div';\n    var [[_text]] = Node.texts(element);\n    children = /*#__PURE__*/react.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/react.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    NODE_TO_INDEX.set(_text, 0);\n    NODE_TO_PARENT.set(_text, element);\n  }\n\n  return renderElement({\n    attributes,\n    children,\n    element\n  });\n};\n\nvar MemoizedElement = /*#__PURE__*/react.memo(index_es_Element, (prev, next) => {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isDecoratorRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && index_es_Range.equals(prev.selection, next.selection));\n});\n/**\r\n * The default element renderer.\r\n */\n\nvar DefaultElement = props => {\n  var {\n    attributes,\n    children,\n    element\n  } = props;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/react.createElement(Tag, Object.assign({}, attributes, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\r\n * A React context for sharing the `decorate` prop of the editable.\r\n */\n\nvar DecorateContext = /*#__PURE__*/(0,react.createContext)(() => []);\n/**\r\n * Get the current `decorate` prop of the editable.\r\n */\n\nvar useDecorate = () => {\n  return (0,react.useContext)(DecorateContext);\n};\n\n/**\r\n * A React context for sharing the `selected` state of an element.\r\n */\n\nvar SelectedContext = /*#__PURE__*/(0,react.createContext)(false);\n/**\r\n * Get the current `selected` state of an element.\r\n */\n\nvar useSelected = () => {\n  return useContext(SelectedContext);\n};\n\n/**\r\n * Children.\r\n */\n\nvar useChildren = props => {\n  var {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection\n  } = props;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = Element.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = Editor.range(editor, p);\n    var sel = selection && index_es_Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n\n    for (var dec of decorations) {\n      var d = index_es_Range.intersection(dec, range);\n\n      if (d) {\n        ds.push(d);\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push( /*#__PURE__*/react.createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/react.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push( /*#__PURE__*/react.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  }\n\n  return children;\n};\n\n/**\r\n * A React context for sharing the `readOnly` state of the editor.\r\n */\n\nvar ReadOnlyContext = /*#__PURE__*/(0,react.createContext)(false);\n/**\r\n * Get the current `readOnly` state of the editor.\r\n */\n\nvar useReadOnly = () => {\n  return (0,react.useContext)(ReadOnlyContext);\n};\n\nvar SlateContext = /*#__PURE__*/(0,react.createContext)(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlate = () => {\n  var context = (0,react.useContext)(SlateContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n\n  var {\n    editor\n  } = context;\n  return editor;\n};\nvar useSlateWithV = () => {\n  var context = useContext(SlateContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return context;\n};\n\nvar TRIPLE_CLICK = 3;\n\n/**\r\n * Hotkey mappings for each platform.\r\n */\n\nvar HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  insertSoftBreak: 'shift+enter',\n  splitBlock: 'enter',\n  undo: 'mod+z'\n};\nvar APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t'\n};\nvar WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z']\n};\n/**\r\n * Create a platform-aware hotkey checker.\r\n */\n\nvar create = key => {\n  var generic = HOTKEYS[key];\n  var apple = APPLE_HOTKEYS[key];\n  var windows = WINDOWS_HOTKEYS[key];\n  var isGeneric = generic && (0,lib/* isKeyHotkey */.TB)(generic);\n  var isApple = apple && (0,lib/* isKeyHotkey */.TB)(apple);\n  var isWindows = windows && (0,lib/* isKeyHotkey */.TB)(windows);\n  return event => {\n    if (isGeneric && isGeneric(event)) return true;\n    if (IS_APPLE && isApple && isApple(event)) return true;\n    if (!IS_APPLE && isWindows && isWindows(event)) return true;\n    return false;\n  };\n};\n/**\r\n * Hotkeys.\r\n */\n\n\nvar Hotkeys = {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSoftBreak: create('insertSoftBreak'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo')\n};\n\nvar createRestoreDomManager = (editor, receivedUserInput) => {\n  var bufferedMutations = [];\n\n  var clear = () => {\n    bufferedMutations = [];\n  };\n\n  var registerMutations = mutations => {\n    if (!receivedUserInput.current) {\n      return;\n    }\n\n    var trackedMutations = mutations.filter(mutation => isTrackedMutation(editor, mutation, mutations));\n    bufferedMutations.push(...trackedMutations);\n  };\n\n  function restoreDOM() {\n    bufferedMutations.reverse().forEach(mutation => {\n      if (mutation.type === 'characterData') {\n        mutation.target.textContent = mutation.oldValue;\n        return;\n      }\n\n      mutation.removedNodes.forEach(node => {\n        mutation.target.insertBefore(node, mutation.nextSibling);\n      });\n      mutation.addedNodes.forEach(node => {\n        mutation.target.removeChild(node);\n      });\n    }); // Clear buffered mutations to ensure we don't undo them twice\n\n    clear();\n  }\n\n  return {\n    registerMutations,\n    restoreDOM,\n    clear\n  };\n};\n\nvar MUTATION_OBSERVER_CONFIG$1 = {\n  subtree: true,\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true\n}; // We have to use a class component here since we rely on `getSnapshotBeforeUpdate` which has no FC equivalent\n// to run code synchronously immediately before react commits the component update to the DOM.\n\nclass RestoreDOMComponent extends react.Component {\n  constructor() {\n    super(...arguments);\n    this.context = null;\n    this.manager = null;\n    this.mutationObserver = null;\n  }\n\n  observe() {\n    var _this$mutationObserve;\n\n    var {\n      node\n    } = this.props;\n\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n\n    (_this$mutationObserve = this.mutationObserver) === null || _this$mutationObserve === void 0 ? void 0 : _this$mutationObserve.observe(node.current, MUTATION_OBSERVER_CONFIG$1);\n  }\n\n  componentDidMount() {\n    var {\n      receivedUserInput\n    } = this.props;\n    var editor = this.context;\n    this.manager = createRestoreDomManager(editor, receivedUserInput);\n    this.mutationObserver = new MutationObserver(this.manager.registerMutations);\n    this.observe();\n  }\n\n  getSnapshotBeforeUpdate() {\n    var _this$mutationObserve2, _this$mutationObserve3, _this$manager2;\n\n    var pendingMutations = (_this$mutationObserve2 = this.mutationObserver) === null || _this$mutationObserve2 === void 0 ? void 0 : _this$mutationObserve2.takeRecords();\n\n    if (pendingMutations !== null && pendingMutations !== void 0 && pendingMutations.length) {\n      var _this$manager;\n\n      (_this$manager = this.manager) === null || _this$manager === void 0 ? void 0 : _this$manager.registerMutations(pendingMutations);\n    }\n\n    (_this$mutationObserve3 = this.mutationObserver) === null || _this$mutationObserve3 === void 0 ? void 0 : _this$mutationObserve3.disconnect();\n    (_this$manager2 = this.manager) === null || _this$manager2 === void 0 ? void 0 : _this$manager2.restoreDOM();\n    return null;\n  }\n\n  componentDidUpdate() {\n    var _this$manager3;\n\n    (_this$manager3 = this.manager) === null || _this$manager3 === void 0 ? void 0 : _this$manager3.clear();\n    this.observe();\n  }\n\n  componentWillUnmount() {\n    var _this$mutationObserve4;\n\n    (_this$mutationObserve4 = this.mutationObserver) === null || _this$mutationObserve4 === void 0 ? void 0 : _this$mutationObserve4.disconnect();\n  }\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nRestoreDOMComponent.contextType = EditorContext;\nvar RestoreDOM = IS_ANDROID ? RestoreDOMComponent : _ref => {\n  var {\n    children\n  } = _ref;\n  return /*#__PURE__*/react.createElement(react.Fragment, null, children);\n};\n\n/**\r\n * Check whether a text diff was applied in a way we can perform the pending action on /\r\n * recover the pending selection.\r\n */\n\nfunction verifyDiffState(editor, textDiff) {\n  var {\n    path,\n    diff\n  } = textDiff;\n\n  if (!Editor.hasPath(editor, path)) {\n    return false;\n  }\n\n  var node = Node.get(editor, path);\n\n  if (!Text.isText(node)) {\n    return false;\n  }\n\n  if (diff.start !== node.text.length || diff.text.length === 0) {\n    return node.text.slice(diff.start, diff.start + diff.text.length) === diff.text;\n  }\n\n  var nextPath = Path.next(path);\n\n  if (!Editor.hasPath(editor, nextPath)) {\n    return false;\n  }\n\n  var nextNode = Node.get(editor, nextPath);\n  return Text.isText(nextNode) && nextNode.text.startsWith(diff.text);\n}\n\nfunction applyStringDiff(text) {\n  for (var _len = arguments.length, diffs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    diffs[_key - 1] = arguments[_key];\n  }\n\n  return diffs.reduce((text, diff) => text.slice(0, diff.start) + diff.text + text.slice(diff.end), text);\n}\n\nfunction longestCommonPrefixLength(str, another) {\n  var length = Math.min(str.length, another.length);\n\n  for (var i = 0; i < length; i++) {\n    if (str.charAt(i) !== another.charAt(i)) {\n      return i;\n    }\n  }\n\n  return length;\n}\n\nfunction longestCommonSuffixLength(str, another, max) {\n  var length = Math.min(str.length, another.length, max);\n\n  for (var i = 0; i < length; i++) {\n    if (str.charAt(str.length - i - 1) !== another.charAt(another.length - i - 1)) {\n      return i;\n    }\n  }\n\n  return length;\n}\n/**\r\n * Remove redundant changes from the diff so that it spans the minimal possible range\r\n */\n\n\nfunction normalizeStringDiff(targetText, diff) {\n  var {\n    start,\n    end,\n    text\n  } = diff;\n  var removedText = targetText.slice(start, end);\n  var prefixLength = longestCommonPrefixLength(removedText, text);\n  var max = Math.min(removedText.length - prefixLength, text.length - prefixLength);\n  var suffixLength = longestCommonSuffixLength(removedText, text, max);\n  var normalized = {\n    start: start + prefixLength,\n    end: end - suffixLength,\n    text: text.slice(prefixLength, text.length - suffixLength)\n  };\n\n  if (normalized.start === normalized.end && normalized.text.length === 0) {\n    return null;\n  }\n\n  return normalized;\n}\n/**\r\n * Return a string diff that is equivalent to applying b after a spanning the range of\r\n * both changes\r\n */\n\nfunction mergeStringDiffs(targetText, a, b) {\n  var start = Math.min(a.start, b.start);\n  var overlap = Math.max(0, Math.min(a.start + a.text.length, b.end) - b.start);\n  var applied = applyStringDiff(targetText, a, b);\n  var sliceEnd = Math.max(b.start + b.text.length, a.start + a.text.length + (a.start + a.text.length > b.start ? b.text.length : 0) - overlap);\n  var text = applied.slice(start, sliceEnd);\n  var end = Math.max(a.end, b.end - a.text.length + (a.end - a.start));\n  return normalizeStringDiff(targetText, {\n    start,\n    end,\n    text\n  });\n}\n/**\r\n * Get the slate range the text diff spans.\r\n */\n\nfunction targetRange(textDiff) {\n  var {\n    path,\n    diff\n  } = textDiff;\n  return {\n    anchor: {\n      path,\n      offset: diff.start\n    },\n    focus: {\n      path,\n      offset: diff.end\n    }\n  };\n}\n/**\r\n * Normalize a 'pending point' a.k.a a point based on the dom state before applying\r\n * the pending diffs. Since the pending diffs might have been inserted with different\r\n * marks we have to 'walk' the offset from the starting position to ensure we still\r\n * have a valid point inside the document\r\n */\n\nfunction normalizePoint(editor, point) {\n  var {\n    path,\n    offset\n  } = point;\n\n  if (!Editor.hasPath(editor, path)) {\n    return null;\n  }\n\n  var leaf = Node.get(editor, path);\n\n  if (!Text.isText(leaf)) {\n    return null;\n  }\n\n  var parentBlock = Editor.above(editor, {\n    match: n => Editor.isBlock(editor, n),\n    at: path\n  });\n\n  if (!parentBlock) {\n    return null;\n  }\n\n  while (offset > leaf.text.length) {\n    var entry = Editor.next(editor, {\n      at: path,\n      match: Text.isText\n    });\n\n    if (!entry || !Path.isDescendant(entry[1], parentBlock[1])) {\n      return null;\n    }\n\n    offset -= leaf.text.length;\n    leaf = entry[0];\n    path = entry[1];\n  }\n\n  return {\n    path,\n    offset\n  };\n}\n/**\r\n * Normalize a 'pending selection' to ensure it's valid in the current document state.\r\n */\n\nfunction normalizeRange(editor, range) {\n  var anchor = normalizePoint(editor, range.anchor);\n\n  if (!anchor) {\n    return null;\n  }\n\n  if (index_es_Range.isCollapsed(range)) {\n    return {\n      anchor,\n      focus: anchor\n    };\n  }\n\n  var focus = normalizePoint(editor, range.focus);\n\n  if (!focus) {\n    return null;\n  }\n\n  return {\n    anchor,\n    focus\n  };\n}\nfunction transformPendingPoint(editor, point, op) {\n  var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(editor);\n  var textDiff = pendingDiffs === null || pendingDiffs === void 0 ? void 0 : pendingDiffs.find(_ref => {\n    var {\n      path\n    } = _ref;\n    return Path.equals(path, point.path);\n  });\n\n  if (!textDiff || point.offset <= textDiff.diff.start) {\n    return Point.transform(point, op, {\n      affinity: 'backward'\n    });\n  }\n\n  var {\n    diff\n  } = textDiff; // Point references location inside the diff => transform the point based on the location\n  // the diff will be applied to and add the offset inside the diff.\n\n  if (point.offset <= diff.start + diff.text.length) {\n    var _anchor = {\n      path: point.path,\n      offset: diff.start\n    };\n\n    var _transformed = Point.transform(_anchor, op, {\n      affinity: 'backward'\n    });\n\n    if (!_transformed) {\n      return null;\n    }\n\n    return {\n      path: _transformed.path,\n      offset: _transformed.offset + point.offset - diff.start\n    };\n  } // Point references location after the diff\n\n\n  var anchor = {\n    path: point.path,\n    offset: point.offset - diff.text.length + diff.end - diff.start\n  };\n  var transformed = Point.transform(anchor, op, {\n    affinity: 'backward'\n  });\n\n  if (!transformed) {\n    return null;\n  }\n\n  if (op.type === 'split_node' && Path.equals(op.path, point.path) && anchor.offset < op.position && diff.start < op.position) {\n    return transformed;\n  }\n\n  return {\n    path: transformed.path,\n    offset: transformed.offset + diff.text.length - diff.end + diff.start\n  };\n}\nfunction transformPendingRange(editor, range, op) {\n  var anchor = transformPendingPoint(editor, range.anchor, op);\n\n  if (!anchor) {\n    return null;\n  }\n\n  if (index_es_Range.isCollapsed(range)) {\n    return {\n      anchor,\n      focus: anchor\n    };\n  }\n\n  var focus = transformPendingPoint(editor, range.focus, op);\n\n  if (!focus) {\n    return null;\n  }\n\n  return {\n    anchor,\n    focus\n  };\n}\nfunction transformTextDiff(textDiff, op) {\n  var {\n    path,\n    diff,\n    id\n  } = textDiff;\n\n  switch (op.type) {\n    case 'insert_text':\n      {\n        if (!Path.equals(op.path, path) || op.offset >= diff.end) {\n          return textDiff;\n        }\n\n        if (op.offset <= diff.start) {\n          return {\n            diff: {\n              start: op.text.length + diff.start,\n              end: op.text.length + diff.end,\n              text: diff.text\n            },\n            id,\n            path\n          };\n        }\n\n        return {\n          diff: {\n            start: diff.start,\n            end: diff.end + op.text.length,\n            text: diff.text\n          },\n          id,\n          path\n        };\n      }\n\n    case 'remove_text':\n      {\n        if (!Path.equals(op.path, path) || op.offset >= diff.end) {\n          return textDiff;\n        }\n\n        if (op.offset + op.text.length <= diff.start) {\n          return {\n            diff: {\n              start: diff.start - op.text.length,\n              end: diff.end - op.text.length,\n              text: diff.text\n            },\n            id,\n            path\n          };\n        }\n\n        return {\n          diff: {\n            start: diff.start,\n            end: diff.end - op.text.length,\n            text: diff.text\n          },\n          id,\n          path\n        };\n      }\n\n    case 'split_node':\n      {\n        if (!Path.equals(op.path, path) || op.position >= diff.end) {\n          return {\n            diff,\n            id,\n            path: Path.transform(path, op, {\n              affinity: 'backward'\n            })\n          };\n        }\n\n        if (op.position > diff.start) {\n          return {\n            diff: {\n              start: diff.start,\n              end: Math.min(op.position, diff.end),\n              text: diff.text\n            },\n            id,\n            path\n          };\n        }\n\n        return {\n          diff: {\n            start: diff.start - op.position,\n            end: diff.end - op.position,\n            text: diff.text\n          },\n          id,\n          path: Path.transform(path, op, {\n            affinity: 'forward'\n          })\n        };\n      }\n\n    case 'merge_node':\n      {\n        if (!Path.equals(op.path, path)) {\n          return {\n            diff,\n            id,\n            path: Path.transform(path, op)\n          };\n        }\n\n        return {\n          diff: {\n            start: diff.start + op.position,\n            end: diff.end + op.position,\n            text: diff.text\n          },\n          id,\n          path: Path.transform(path, op)\n        };\n      }\n  }\n\n  var newPath = Path.transform(path, op);\n\n  if (!newPath) {\n    return null;\n  }\n\n  return {\n    diff,\n    path: newPath,\n    id\n  };\n}\n\nfunction index_es_ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction index_es_objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { index_es_ownKeys$3(Object(source), true).forEach(function (key) { index_es_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { index_es_ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n// When using keyboard English association function, conpositionEnd triggered too fast, resulting in after `insertText` still maintain association state.\n\nvar RESOLVE_DELAY = 25; // Time with no user interaction before the current user action is considered as done.\n\nvar FLUSH_DELAY = 200; // Replace with `const debug = console.log` to debug\n\nvar debug = function debug() {};\n\nfunction createAndroidInputManager(_ref) {\n  var {\n    editor,\n    scheduleOnDOMSelectionChange,\n    onDOMSelectionChange\n  } = _ref;\n  var flushing = false;\n  var compositionEndTimeoutId = null;\n  var flushTimeoutId = null;\n  var actionTimeoutId = null;\n  var idCounter = 0;\n  var insertPositionHint = false;\n\n  var applyPendingSelection = () => {\n    var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(editor);\n    EDITOR_TO_PENDING_SELECTION.delete(editor);\n\n    if (pendingSelection) {\n      var {\n        selection\n      } = editor;\n      var normalized = normalizeRange(editor, pendingSelection);\n\n      if (normalized && (!selection || !index_es_Range.equals(normalized, selection))) {\n        Transforms.select(editor, normalized);\n      }\n    }\n  };\n\n  var performAction = () => {\n    var action = EDITOR_TO_PENDING_ACTION.get(editor);\n    EDITOR_TO_PENDING_ACTION.delete(editor);\n\n    if (!action) {\n      return;\n    }\n\n    if (action.at) {\n      var target = Point.isPoint(action.at) ? normalizePoint(editor, action.at) : normalizeRange(editor, action.at);\n\n      if (!target) {\n        return;\n      }\n\n      var _targetRange = Editor.range(editor, target);\n\n      if (!editor.selection || !index_es_Range.equals(editor.selection, _targetRange)) {\n        Transforms.select(editor, target);\n      }\n    }\n\n    action.run();\n  };\n\n  var flush = () => {\n    var _EDITOR_TO_PENDING_DI;\n\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n\n    if (actionTimeoutId) {\n      clearTimeout(actionTimeoutId);\n      actionTimeoutId = null;\n    }\n\n    if (!hasPendingDiffs() && !hasPendingAction()) {\n      applyPendingSelection();\n      return;\n    }\n\n    if (!flushing) {\n      flushing = true;\n      setTimeout(() => flushing = false);\n    }\n\n    if (hasPendingAction()) {\n      flushing = 'action';\n    }\n\n    var selectionRef = editor.selection && Editor.rangeRef(editor, editor.selection, {\n      affinity: 'forward'\n    });\n    EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n    debug('flush', EDITOR_TO_PENDING_ACTION.get(editor), EDITOR_TO_PENDING_DIFFS.get(editor));\n    var scheduleSelectionChange = !!((_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length);\n    var diff;\n\n    while (diff = (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI2 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI2[0]) {\n      var _EDITOR_TO_PENDING_DI2, _EDITOR_TO_PENDING_DI3;\n\n      var pendingMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n\n      if (pendingMarks !== undefined) {\n        EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n        editor.marks = pendingMarks;\n      }\n\n      if (pendingMarks && insertPositionHint === false) {\n        insertPositionHint = null;\n      }\n\n      var range = targetRange(diff);\n\n      if (!editor.selection || !index_es_Range.equals(editor.selection, range)) {\n        Transforms.select(editor, range);\n      }\n\n      if (diff.diff.text) {\n        Editor.insertText(editor, diff.diff.text);\n      } else {\n        Editor.deleteFragment(editor);\n      } // Remove diff only after we have applied it to account for it when transforming\n      // pending ranges.\n\n\n      EDITOR_TO_PENDING_DIFFS.set(editor, (_EDITOR_TO_PENDING_DI3 = EDITOR_TO_PENDING_DIFFS.get(editor)) === null || _EDITOR_TO_PENDING_DI3 === void 0 ? void 0 : _EDITOR_TO_PENDING_DI3.filter(_ref2 => {\n        var {\n          id\n        } = _ref2;\n        return id !== diff.id;\n      }));\n\n      if (!verifyDiffState(editor, diff)) {\n        scheduleSelectionChange = false;\n        EDITOR_TO_PENDING_ACTION.delete(editor);\n        EDITOR_TO_USER_MARKS.delete(editor);\n        flushing = 'action'; // Ensure we don't restore the pending user (dom) selection\n        // since the document and dom state do not match.\n\n        EDITOR_TO_PENDING_SELECTION.delete(editor);\n        scheduleOnDOMSelectionChange.cancel();\n        onDOMSelectionChange.cancel();\n        selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n      }\n    }\n\n    var selection = selectionRef === null || selectionRef === void 0 ? void 0 : selectionRef.unref();\n\n    if (selection && !EDITOR_TO_PENDING_SELECTION.get(editor) && (!editor.selection || !index_es_Range.equals(selection, editor.selection))) {\n      Transforms.select(editor, selection);\n    }\n\n    if (hasPendingAction()) {\n      performAction();\n      return;\n    } // COMPAT: The selectionChange event is fired after the action is performed,\n    // so we have to manually schedule it to ensure we don't 'throw away' the selection\n    // while rendering if we have pending changes.\n\n\n    if (scheduleSelectionChange) {\n      scheduleOnDOMSelectionChange();\n    }\n\n    scheduleOnDOMSelectionChange.flush();\n    onDOMSelectionChange.flush();\n    applyPendingSelection();\n    var userMarks = EDITOR_TO_USER_MARKS.get(editor);\n    EDITOR_TO_USER_MARKS.delete(editor);\n\n    if (userMarks !== undefined) {\n      editor.marks = userMarks;\n      editor.onChange();\n    }\n  };\n\n  var handleCompositionEnd = _event => {\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n    }\n\n    compositionEndTimeoutId = setTimeout(() => {\n      IS_COMPOSING.set(editor, false);\n      flush();\n    }, RESOLVE_DELAY);\n  };\n\n  var handleCompositionStart = _event => {\n    IS_COMPOSING.set(editor, true);\n\n    if (compositionEndTimeoutId) {\n      clearTimeout(compositionEndTimeoutId);\n      compositionEndTimeoutId = null;\n    }\n  };\n\n  var updatePlaceholderVisibility = function updatePlaceholderVisibility() {\n    var forceHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var placeholderElement = EDITOR_TO_PLACEHOLDER_ELEMENT.get(editor);\n\n    if (!placeholderElement) {\n      return;\n    }\n\n    if (hasPendingDiffs() || forceHide) {\n      placeholderElement.style.display = 'none';\n      return;\n    }\n\n    placeholderElement.style.removeProperty('display');\n  };\n\n  var storeDiff = (path, diff) => {\n    var _EDITOR_TO_PENDING_DI4;\n    var pendingDiffs = (_EDITOR_TO_PENDING_DI4 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI4 !== void 0 ? _EDITOR_TO_PENDING_DI4 : [];\n    EDITOR_TO_PENDING_DIFFS.set(editor, pendingDiffs);\n    var target = Node.leaf(editor, path);\n    var idx = pendingDiffs.findIndex(change => Path.equals(change.path, path));\n\n    if (idx < 0) {\n      var normalized = normalizeStringDiff(target.text, diff);\n\n      if (normalized) {\n        pendingDiffs.push({\n          path,\n          diff,\n          id: idCounter++\n        });\n      }\n\n      updatePlaceholderVisibility();\n      return;\n    }\n\n    var merged = mergeStringDiffs(target.text, pendingDiffs[idx].diff, diff);\n\n    if (!merged) {\n      pendingDiffs.splice(idx, 1);\n      updatePlaceholderVisibility();\n      return;\n    }\n\n    pendingDiffs[idx] = index_es_objectSpread$3(index_es_objectSpread$3({}, pendingDiffs[idx]), {}, {\n      diff: merged\n    });\n  };\n\n  var scheduleAction = function scheduleAction(run) {\n    var {\n      at\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    insertPositionHint = false;\n    EDITOR_TO_PENDING_SELECTION.delete(editor);\n    scheduleOnDOMSelectionChange.cancel();\n    onDOMSelectionChange.cancel();\n\n    if (hasPendingAction()) {\n      flush();\n    }\n\n    EDITOR_TO_PENDING_ACTION.set(editor, {\n      at,\n      run\n    }); // COMPAT: When deleting before a non-contenteditable element chrome only fires a beforeinput,\n    // (no input) and doesn't perform any dom mutations. Without a flush timeout we would never flush\n    // in this case and thus never actually perform the action.\n\n    actionTimeoutId = setTimeout(flush);\n  };\n\n  var handleDOMBeforeInput = event => {\n    var _targetRange2;\n\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n\n    var {\n      inputType: type\n    } = event;\n    var targetRange = null;\n    var data = event.dataTransfer || event.data || undefined;\n\n    if (insertPositionHint !== false && type !== 'insertText' && type !== 'insertCompositionText') {\n      insertPositionHint = false;\n    }\n\n    var [nativeTargetRange] = event.getTargetRanges();\n\n    if (nativeTargetRange) {\n      targetRange = ReactEditor.toSlateRange(editor, nativeTargetRange, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    } // COMPAT: SelectionChange event is fired after the action is performed, so we\n    // have to manually get the selection here to ensure it's up-to-date.\n\n\n    var window = ReactEditor.getWindow(editor);\n    var domSelection = window.getSelection();\n\n    if (!targetRange && domSelection) {\n      nativeTargetRange = domSelection;\n      targetRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: true\n      });\n    }\n\n    targetRange = (_targetRange2 = targetRange) !== null && _targetRange2 !== void 0 ? _targetRange2 : editor.selection;\n\n    if (!targetRange) {\n      return;\n    }\n\n    if (index_es_Range.isExpanded(targetRange) && type.startsWith('delete')) {\n      var [start, end] = index_es_Range.edges(targetRange);\n      var leaf = Node.leaf(editor, start.path);\n\n      if (leaf.text.length === start.offset && end.offset === 0) {\n        var next = Editor.next(editor, {\n          at: start.path,\n          match: Text.isText\n        });\n\n        if (next && Path.equals(next[1], end.path)) {\n          targetRange = {\n            anchor: end,\n            focus: end\n          };\n        }\n      }\n    }\n\n    if (index_es_Range.isExpanded(targetRange) && type.startsWith('delete')) {\n      if (Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n        var [_start, _end] = index_es_Range.edges(targetRange);\n        return storeDiff(targetRange.anchor.path, {\n          text: '',\n          end: _end.offset,\n          start: _start.offset\n        });\n      }\n\n      var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n      return scheduleAction(() => Editor.deleteFragment(editor, {\n        direction\n      }), {\n        at: targetRange\n      });\n    }\n\n    switch (type) {\n      case 'deleteByComposition':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        {\n          return scheduleAction(() => Editor.deleteFragment(editor), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteContent':\n      case 'deleteContentForward':\n        {\n          var {\n            anchor\n          } = targetRange;\n\n          if (index_es_Range.isCollapsed(targetRange)) {\n            var targetNode = Node.leaf(editor, anchor.path);\n\n            if (anchor.offset < targetNode.text.length) {\n              return storeDiff(anchor.path, {\n                text: '',\n                start: anchor.offset,\n                end: anchor.offset + 1\n              });\n            }\n          }\n\n          return scheduleAction(() => Editor.deleteForward(editor), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteContentBackward':\n        {\n          var _nativeTargetRange;\n\n          var {\n            anchor: _anchor\n          } = targetRange; // If we have a mismatch between the native and slate selection being collapsed\n          // we are most likely deleting a zero-width placeholder and thus should perform it\n          // as an action to ensure correct behavior (mostly happens with mark placeholders)\n\n          var nativeCollapsed = isDOMSelection(nativeTargetRange) ? nativeTargetRange.isCollapsed : !!((_nativeTargetRange = nativeTargetRange) !== null && _nativeTargetRange !== void 0 && _nativeTargetRange.collapsed);\n\n          if (nativeCollapsed && index_es_Range.isCollapsed(targetRange) && _anchor.offset > 0) {\n            return storeDiff(_anchor.path, {\n              text: '',\n              start: _anchor.offset - 1,\n              end: _anchor.offset\n            });\n          }\n\n          return scheduleAction(() => Editor.deleteBackward(editor), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteEntireSoftLine':\n        {\n          return scheduleAction(() => {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n          }, {\n            at: targetRange\n          });\n        }\n\n      case 'deleteHardLineBackward':\n        {\n          return scheduleAction(() => Editor.deleteBackward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteSoftLineBackward':\n        {\n          return scheduleAction(() => Editor.deleteBackward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteHardLineForward':\n        {\n          return scheduleAction(() => Editor.deleteForward(editor, {\n            unit: 'block'\n          }), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteSoftLineForward':\n        {\n          return scheduleAction(() => Editor.deleteForward(editor, {\n            unit: 'line'\n          }), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteWordBackward':\n        {\n          return scheduleAction(() => Editor.deleteBackward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n\n      case 'deleteWordForward':\n        {\n          return scheduleAction(() => Editor.deleteForward(editor, {\n            unit: 'word'\n          }), {\n            at: targetRange\n          });\n        }\n\n      case 'insertLineBreak':\n        {\n          return scheduleAction(() => Editor.insertSoftBreak(editor), {\n            at: targetRange\n          });\n        }\n\n      case 'insertParagraph':\n        {\n          return scheduleAction(() => Editor.insertBreak(editor), {\n            at: targetRange\n          });\n        }\n\n      case 'insertCompositionText':\n      case 'deleteCompositionText':\n      case 'insertFromComposition':\n      case 'insertFromDrop':\n      case 'insertFromPaste':\n      case 'insertFromYank':\n      case 'insertReplacementText':\n      case 'insertText':\n        {\n          if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n            return scheduleAction(() => ReactEditor.insertData(editor, data), {\n              at: targetRange\n            });\n          }\n\n          if (typeof data === 'string' && data.includes('\\n')) {\n            return scheduleAction(() => Editor.insertSoftBreak(editor), {\n              at: index_es_Range.end(targetRange)\n            });\n          }\n\n          var text = data !== null && data !== void 0 ? data : ''; // COMPAT: If we are writing inside a placeholder, the ime inserts the text inside\n          // the placeholder itself and thus includes the zero-width space inside edit events.\n\n          if (EDITOR_TO_PENDING_INSERTION_MARKS.get(editor)) {\n            text = text.replace('\\uFEFF', '');\n          }\n\n          if (Path.equals(targetRange.anchor.path, targetRange.focus.path)) {\n            var [_start2, _end2] = index_es_Range.edges(targetRange);\n            var diff = {\n              start: _start2.offset,\n              end: _end2.offset,\n              text\n            }; // COMPAT: Swiftkey has a weird bug where the target range of the 2nd word\n            // inserted after a mark placeholder is inserted with an anchor offset off by 1.\n            // So writing 'some text' will result in 'some ttext'. Luckily all 'normal' insert\n            // text events are fired with the correct target ranges, only the final 'insertComposition'\n            // isn't, so we can adjust the target range start offset if we are confident this is the\n            // swiftkey insert causing the issue.\n\n            if (text && insertPositionHint && type === 'insertCompositionText') {\n              var hintPosition = insertPositionHint.start + insertPositionHint.text.search(/\\S|$/);\n              var diffPosition = diff.start + diff.text.search(/\\S|$/);\n\n              if (diffPosition === hintPosition + 1 && diff.end === insertPositionHint.start + insertPositionHint.text.length) {\n                diff.start -= 1;\n                insertPositionHint = null;\n                scheduleFlush();\n              } else {\n                insertPositionHint = false;\n              }\n            } else if (type === 'insertText') {\n              if (insertPositionHint === null) {\n                insertPositionHint = diff;\n              } else if (insertPositionHint && index_es_Range.isCollapsed(targetRange) && insertPositionHint.end + insertPositionHint.text.length === _start2.offset) {\n                insertPositionHint = index_es_objectSpread$3(index_es_objectSpread$3({}, insertPositionHint), {}, {\n                  text: insertPositionHint.text + text\n                });\n              } else {\n                insertPositionHint = false;\n              }\n            } else {\n              insertPositionHint = false;\n            }\n\n            storeDiff(_start2.path, diff);\n            return;\n          }\n\n          return scheduleAction(() => Editor.insertText(editor, text), {\n            at: targetRange\n          });\n        }\n    }\n  };\n\n  var hasPendingAction = () => {\n    return !!EDITOR_TO_PENDING_ACTION.get(editor);\n  };\n\n  var hasPendingDiffs = () => {\n    var _EDITOR_TO_PENDING_DI5;\n\n    return !!((_EDITOR_TO_PENDING_DI5 = EDITOR_TO_PENDING_DIFFS.get(editor)) !== null && _EDITOR_TO_PENDING_DI5 !== void 0 && _EDITOR_TO_PENDING_DI5.length);\n  };\n\n  var hasPendingChanges = () => {\n    return hasPendingAction() || hasPendingDiffs();\n  };\n\n  var isFlushing = () => {\n    return flushing;\n  };\n\n  var handleUserSelect = range => {\n    EDITOR_TO_PENDING_SELECTION.set(editor, range);\n\n    if (flushTimeoutId) {\n      clearTimeout(flushTimeoutId);\n      flushTimeoutId = null;\n    }\n\n    var {\n      selection\n    } = editor;\n\n    if (!range) {\n      return;\n    }\n\n    var pathChanged = !selection || !Path.equals(selection.anchor.path, range.anchor.path);\n    var parentPathChanged = !selection || !Path.equals(selection.anchor.path.slice(0, -1), range.anchor.path.slice(0, -1));\n\n    if (pathChanged && insertPositionHint || parentPathChanged) {\n      insertPositionHint = false;\n    }\n\n    if (pathChanged || !hasPendingDiffs()) {\n      flushTimeoutId = setTimeout(flush, FLUSH_DELAY);\n    }\n  };\n\n  var handleInput = () => {\n    if (hasPendingAction() || !hasPendingDiffs()) {\n      flush();\n    }\n  };\n\n  var handleKeyDown = _ => {\n    // COMPAT: Swiftkey closes the keyboard when typing inside a empty node\n    // directly next to a non-contenteditable element (= the placeholder).\n    // The only event fired soon enough for us to allow hiding the placeholder\n    // without swiftkey picking it up is the keydown event, so we have to hide it\n    // here. See https://github.com/ianstormtaylor/slate/pull/4988#issuecomment-1201050535\n    if (!hasPendingDiffs()) {\n      updatePlaceholderVisibility(true);\n      setTimeout(updatePlaceholderVisibility);\n    }\n  };\n\n  var scheduleFlush = () => {\n    if (!hasPendingAction()) {\n      actionTimeoutId = setTimeout(flush);\n    }\n  };\n\n  var handleDomMutations = mutations => {\n    if (hasPendingDiffs() || hasPendingAction()) {\n      return;\n    }\n\n    if (mutations.some(mutation => isTrackedMutation(editor, mutation, mutations))) {\n      var _EDITOR_TO_FORCE_REND;\n\n      // Cause a re-render to restore the dom state if we encounter tracked mutations without\n      // a corresponding pending action.\n      (_EDITOR_TO_FORCE_REND = EDITOR_TO_FORCE_RENDER.get(editor)) === null || _EDITOR_TO_FORCE_REND === void 0 ? void 0 : _EDITOR_TO_FORCE_REND();\n    }\n  };\n\n  return {\n    flush,\n    scheduleFlush,\n    hasPendingDiffs,\n    hasPendingAction,\n    hasPendingChanges,\n    isFlushing,\n    handleUserSelect,\n    handleCompositionEnd,\n    handleCompositionStart,\n    handleDOMBeforeInput,\n    handleKeyDown,\n    handleDomMutations,\n    handleInput\n  };\n}\n\nfunction useIsMounted() {\n  var isMountedRef = (0,react.useRef)(false);\n  (0,react.useEffect)(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  return isMountedRef.current;\n}\n\nfunction useMutationObserver(node, callback, options) {\n  var [mutationObserver] = (0,react.useState)(() => new MutationObserver(callback));\n  useIsomorphicLayoutEffect(() => {\n    // Discard mutations caused during render phase. This works due to react calling\n    // useLayoutEffect synchronously after the render phase before the next tick.\n    mutationObserver.takeRecords();\n  });\n  (0,react.useEffect)(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    }\n\n    mutationObserver.observe(node.current, options);\n    return () => mutationObserver.disconnect();\n  }, []);\n}\n\nvar index_es_excluded$2 = [\"node\"];\n\nfunction index_es_ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction index_es_objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { index_es_ownKeys$2(Object(source), true).forEach(function (key) { index_es_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { index_es_ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar MUTATION_OBSERVER_CONFIG = {\n  subtree: true,\n  childList: true,\n  characterData: true\n};\nfunction useAndroidInputManager(_ref) {\n  var {\n    node\n  } = _ref,\n      options = index_es_objectWithoutProperties(_ref, index_es_excluded$2);\n\n  if (!IS_ANDROID) {\n    return null;\n  }\n\n  var editor = useSlateStatic();\n  var isMounted = useIsMounted();\n  var [inputManager] = (0,react.useState)(() => createAndroidInputManager(index_es_objectSpread$2({\n    editor\n  }, options)));\n  useMutationObserver(node, inputManager.handleDomMutations, MUTATION_OBSERVER_CONFIG);\n  EDITOR_TO_SCHEDULE_FLUSH.set(editor, inputManager.scheduleFlush);\n\n  if (isMounted) {\n    inputManager.flush();\n  }\n\n  return inputManager;\n}\n\nfunction useTrackUserInput() {\n  var editor = useSlateStatic();\n  var receivedUserInput = (0,react.useRef)(false);\n  var animationFrameIdRef = (0,react.useRef)(0);\n  var onUserInput = (0,react.useCallback)(() => {\n    if (receivedUserInput.current) {\n      return;\n    }\n\n    receivedUserInput.current = true;\n    var window = ReactEditor.getWindow(editor);\n    window.cancelAnimationFrame(animationFrameIdRef.current);\n    animationFrameIdRef.current = window.requestAnimationFrame(() => {\n      receivedUserInput.current = false;\n    });\n  }, []);\n  (0,react.useEffect)(() => () => cancelAnimationFrame(animationFrameIdRef.current), []);\n  return {\n    receivedUserInput,\n    onUserInput\n  };\n}\n\nvar index_es_excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\"],\n    index_es_excluded2 = [\"text\"];\n\nfunction index_es_ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction index_es_objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { index_es_ownKeys$1(Object(source), true).forEach(function (key) { index_es_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { index_es_ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Children = props => /*#__PURE__*/react.createElement(react.Fragment, null, useChildren(props)); // The number of Editable components currently mounted.\n\n\nvar mountedCount = 0;\n/**\r\n * Editable.\r\n */\n\nvar Editable = props => {\n  var {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => /*#__PURE__*/react.createElement(DefaultPlaceholder, Object.assign({}, props)),\n    scrollSelectionIntoView = defaultScrollSelectionIntoView,\n    style = {},\n    as: Component = 'div'\n  } = props,\n      attributes = index_es_objectWithoutProperties(props, index_es_excluded$1);\n\n  var editor = useSlate(); // Rerender editor when composition status changed\n\n  var [isComposing, setIsComposing] = (0,react.useState)(false);\n  var ref = (0,react.useRef)(null);\n  var deferredOperations = (0,react.useRef)([]);\n  var {\n    onUserInput,\n    receivedUserInput\n  } = useTrackUserInput();\n  var [, forceRender] = (0,react.useReducer)(s => s + 1, 0);\n  EDITOR_TO_FORCE_RENDER.set(editor, forceRender); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = (0,react.useMemo)(() => ({\n    isDraggingInternally: false,\n    isUpdatingSelection: false,\n    latestElement: null,\n    hasMarkPlaceholder: false\n  }), []); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  (0,react.useEffect)(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = (0,react.useCallback)(throttle_default()(() => {\n    if ((IS_ANDROID || !ReactEditor.isComposing(editor)) && (!state.isUpdatingSelection || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing()) && !state.isDraggingInternally) {\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var {\n        activeElement\n      } = root;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = root.getSelection();\n\n      if (activeElement === el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED.delete(editor);\n      }\n\n      if (!domSelection) {\n        return Transforms.deselect(editor);\n      }\n\n      var {\n        anchorNode,\n        focusNode\n      } = domSelection;\n      var anchorNodeSelectable = ReactEditor.hasEditableTarget(editor, anchorNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, anchorNode);\n      var focusNodeSelectable = ReactEditor.hasEditableTarget(editor, focusNode) || ReactEditor.isTargetInsideNonReadonlyVoid(editor, focusNode);\n\n      if (anchorNodeSelectable && focusNodeSelectable) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n\n        if (range) {\n          if (!ReactEditor.isComposing(editor) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingChanges()) && !(androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.isFlushing())) {\n            Transforms.select(editor, range);\n          } else {\n            androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.handleUserSelect(range);\n          }\n        }\n      } // Deselect the editor if the dom selection is not selectable in readonly mode\n\n\n      if (readOnly && (!anchorNodeSelectable || !focusNodeSelectable)) {\n        Transforms.deselect(editor);\n      }\n    }\n  }, 100), [readOnly]);\n  var scheduleOnDOMSelectionChange = (0,react.useMemo)(() => debounce_default()(onDOMSelectionChange, 0), [onDOMSelectionChange]);\n  var androidInputManager = useAndroidInputManager({\n    node: ref,\n    onDOMSelectionChange,\n    scheduleOnDOMSelectionChange\n  });\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT.delete(editor);\n    } // Make sure the DOM selection state is in sync.\n\n\n    var {\n      selection\n    } = editor;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n\n    if (!domSelection || !ReactEditor.isFocused(editor) || androidInputManager !== null && androidInputManager !== void 0 && androidInputManager.hasPendingAction()) {\n      return;\n    }\n\n    var setDomSelection = forceChange => {\n      var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n      if (!selection && !hasDomSelection) {\n        return;\n      } // verify that the dom selection is in the editor\n\n\n      var editorElement = EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n\n      if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n        hasDomSelectionInEditor = true;\n      } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n\n      if (hasDomSelection && hasDomSelectionInEditor && selection && !forceChange) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          // domSelection is not necessarily a valid Slate range\n          // (e.g. when clicking on contentEditable:false element)\n          suppressThrow: true\n        });\n\n        if (slateRange && index_es_Range.equals(slateRange, selection)) {\n          var _anchorNode$parentEle;\n\n          if (!state.hasMarkPlaceholder) {\n            return;\n          } // Ensure selection is inside the mark placeholder\n\n\n          var {\n            anchorNode\n          } = domSelection;\n\n          if (anchorNode !== null && anchorNode !== void 0 && (_anchorNode$parentEle = anchorNode.parentElement) !== null && _anchorNode$parentEle !== void 0 && _anchorNode$parentEle.hasAttribute('data-slate-mark-placeholder')) {\n            return;\n          }\n        }\n      } // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n\n\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: true\n        });\n        return;\n      } // Otherwise the DOM selection is out of sync, so update it.\n\n\n      state.isUpdatingSelection = true;\n      var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n\n      if (newDomRange) {\n        if (index_es_Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n\n        scrollSelectionIntoView(editor, newDomRange);\n      } else {\n        domSelection.removeAllRanges();\n      }\n\n      return newDomRange;\n    };\n\n    var newDomRange = setDomSelection();\n    var ensureSelection = (androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.isFlushing()) === 'action';\n\n    if (!IS_ANDROID || !ensureSelection) {\n      setTimeout(() => {\n        // COMPAT: In Firefox, it's not enough to create a range, you also need\n        // to focus the contenteditable element too. (2016/11/16)\n        if (newDomRange && IS_FIREFOX) {\n          var el = ReactEditor.toDOMNode(editor, editor);\n          el.focus();\n        }\n\n        state.isUpdatingSelection = false;\n      });\n      return;\n    }\n\n    var timeoutId = null;\n    var animationFrameId = requestAnimationFrame(() => {\n      if (ensureSelection) {\n        var ensureDomSelection = forceChange => {\n          try {\n            var el = ReactEditor.toDOMNode(editor, editor);\n            el.focus();\n            setDomSelection(forceChange);\n          } catch (e) {// Ignore, dom and state might be out of sync\n          }\n        }; // Compat: Android IMEs try to force their selection by manually re-applying it even after we set it.\n        // This essentially would make setting the slate selection during an update meaningless, so we force it\n        // again here. We can't only do it in the setTimeout after the animation frame since that would cause a\n        // visible flicker.\n\n\n        ensureDomSelection();\n        timeoutId = setTimeout(() => {\n          // COMPAT: While setting the selection in an animation frame visually correctly sets the selection,\n          // it doesn't update GBoards spellchecker state. We have to manually trigger a selection change after\n          // the animation frame to ensure it displays the correct state.\n          ensureDomSelection(true);\n          state.isUpdatingSelection = false;\n        });\n      }\n    });\n    return () => {\n      cancelAnimationFrame(animationFrameId);\n\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = (0,react.useCallback)(event => {\n    onUserInput();\n\n    if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      var _EDITOR_TO_USER_SELEC;\n\n      // COMPAT: BeforeInput events aren't cancelable on android, so we have to handle them differently using the android input manager.\n      if (androidInputManager) {\n        return androidInputManager.handleDOMBeforeInput(event);\n      } // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n\n\n      scheduleOnDOMSelectionChange.flush();\n      onDOMSelectionChange.flush();\n      var {\n        selection\n      } = editor;\n      var {\n        inputType: type\n      } = event;\n      var data = event.dataTransfer || event.data || undefined;\n      var isCompositionChange = type === 'insertCompositionText' || type === 'deleteCompositionText'; // COMPAT: use composition change events as a hint to where we should insert\n      // composition text if we aren't composing to work around https://github.com/ianstormtaylor/slate/issues/5038\n\n      if (isCompositionChange && ReactEditor.isComposing(editor)) {\n        return;\n      }\n\n      var native = false;\n\n      if (type === 'insertText' && selection && index_es_Range.isCollapsed(selection) && // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = \xe4) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) && // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        var _node$parentElement, _window$getComputedSt;\n\n        native = true; // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n\n        if (editor.marks) {\n          native = false;\n        } // Chrome also has issues correctly editing the end of anchor elements: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n        // Therefore we don't allow native events to insert text at the end of anchor nodes.\n\n\n        var {\n          anchor\n        } = selection;\n        var [node, offset] = ReactEditor.toDOMPoint(editor, anchor);\n        var anchorNode = (_node$parentElement = node.parentElement) === null || _node$parentElement === void 0 ? void 0 : _node$parentElement.closest('a');\n        var window = ReactEditor.getWindow(editor);\n\n        if (native && anchorNode && ReactEditor.hasDOMNode(editor, anchorNode)) {\n          var _lastText$textContent;\n\n          // Find the last text node inside the anchor.\n          var lastText = window === null || window === void 0 ? void 0 : window.document.createTreeWalker(anchorNode, NodeFilter.SHOW_TEXT).lastChild();\n\n          if (lastText === node && ((_lastText$textContent = lastText.textContent) === null || _lastText$textContent === void 0 ? void 0 : _lastText$textContent.length) === offset) {\n            native = false;\n          }\n        } // Chrome has issues with the presence of tab characters inside elements with whiteSpace = 'pre'\n        // causing abnormal insert behavior: https://bugs.chromium.org/p/chromium/issues/detail?id=1219139\n\n\n        if (native && node.parentElement && (window === null || window === void 0 ? void 0 : (_window$getComputedSt = window.getComputedStyle(node.parentElement)) === null || _window$getComputedSt === void 0 ? void 0 : _window$getComputedSt.whiteSpace) === 'pre') {\n          var block = Editor.above(editor, {\n            at: anchor.path,\n            match: n => Editor.isBlock(editor, n)\n          });\n\n          if (block && Node.string(block[0]).includes('\\t')) {\n            native = false;\n          }\n        }\n      } // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n\n\n      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n        var [targetRange] = event.getTargetRanges();\n\n        if (targetRange) {\n          var range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n\n          if (!selection || !index_es_Range.equals(selection, range)) {\n            native = false;\n            var selectionRef = !isCompositionChange && editor.selection && Editor.rangeRef(editor, editor.selection);\n            Transforms.select(editor, range);\n\n            if (selectionRef) {\n              EDITOR_TO_USER_SELECTION.set(editor, selectionRef);\n            }\n          }\n        }\n      } // Composition change types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n\n\n      if (isCompositionChange) {\n        return;\n      }\n\n      if (!native) {\n        event.preventDefault();\n      } // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n\n\n      if (selection && index_es_Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        Editor.deleteFragment(editor, {\n          direction\n        });\n        return;\n      }\n\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n\n        case 'insertLineBreak':\n          Editor.insertSoftBreak(editor);\n          break;\n\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              if (ReactEditor.isComposing(editor)) {\n                setIsComposing(false);\n                IS_COMPOSING.set(editor, false);\n              }\n            } // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n\n\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() => Editor.insertText(editor, data));\n              } else {\n                Editor.insertText(editor, data);\n              }\n            }\n\n            break;\n          }\n      } // Restore the actual user section if nothing manually set it.\n\n\n      var toRestore = (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(editor)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n      EDITOR_TO_USER_SELECTION.delete(editor);\n\n      if (toRestore && (!editor.selection || !index_es_Range.equals(editor.selection, toRestore))) {\n        Transforms.select(editor, toRestore);\n      }\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput);\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    };\n  }, [onDOMBeforeInput]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(() => {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    return () => {\n      window.document.removeEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    };\n  }, [scheduleOnDOMSelectionChange]);\n  var decorations = decorate([editor, []]);\n\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '' && !isComposing) {\n    var start = Editor.start(editor, []);\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start\n    });\n  }\n\n  var {\n    marks\n  } = editor;\n  state.hasMarkPlaceholder = false;\n\n  if (editor.selection && index_es_Range.isCollapsed(editor.selection) && marks) {\n    var {\n      anchor\n    } = editor.selection;\n    var leaf = Node.leaf(editor, anchor.path);\n\n    var rest = index_es_objectWithoutProperties(leaf, index_es_excluded2); // While marks isn't a 'complete' text, we can still use loose Text.equals\n    // here which only compares marks anyway.\n\n\n    if (!Text.equals(leaf, marks, {\n      loose: true\n    })) {\n      state.hasMarkPlaceholder = true;\n      var unset = Object.fromEntries(Object.keys(rest).map(mark => [mark, null]));\n      decorations.push(index_es_objectSpread$1(index_es_objectSpread$1(index_es_objectSpread$1({\n        [MARK_PLACEHOLDER_SYMBOL]: true\n      }, unset), marks), {}, {\n        anchor,\n        focus: anchor\n      }));\n    }\n  } // Update EDITOR_TO_MARK_PLACEHOLDER_MARKS in setTimeout useEffect to ensure we don't set it\n  // before we receive the composition end event.\n\n\n  (0,react.useEffect)(() => {\n    setTimeout(() => {\n      var {\n        selection\n      } = editor;\n\n      if (selection) {\n        var {\n          anchor: _anchor\n        } = selection;\n\n        var _text = Node.leaf(editor, _anchor.path); // While marks isn't a 'complete' text, we can still use loose Text.equals\n        // here which only compares marks anyway.\n\n\n        if (marks && !Text.equals(_text, marks, {\n          loose: true\n        })) {\n          EDITOR_TO_PENDING_INSERTION_MARKS.set(editor, marks);\n          return;\n        }\n      }\n\n      EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor);\n    });\n  });\n  (0,react.useEffect)(() => {\n    mountedCount++;\n\n    if (mountedCount === 1) {\n      // Set global default styles for editors.\n      var defaultStylesElement = document.createElement('style');\n      defaultStylesElement.setAttribute('data-slate-default-styles', 'true');\n      defaultStylesElement.innerHTML = // :where is used to give these rules lower specificity so user stylesheets can override them.\n      \":where([data-slate-editor]) {\" + // Allow positioning relative to the editable element.\n      \"position: relative;\" + // Prevent the default outline styles.\n      \"outline: none;\" + // Preserve adjacent whitespace and new lines.\n      \"white-space: pre-wrap;\" + // Allow words to break if they are too long.\n      \"word-wrap: break-word;\" + \"}\";\n      document.head.appendChild(defaultStylesElement);\n    }\n\n    return () => {\n      var _document$querySelect;\n\n      mountedCount--;\n      if (mountedCount <= 0) (_document$querySelect = document.querySelector('style[data-slate-default-styles]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.remove();\n    };\n  }, []);\n  (0,react.useEffect)(() => {\n    var styleElement = document.createElement('style');\n    document.head.appendChild(styleElement);\n    EDITOR_TO_STYLE_ELEMENT.set(editor, styleElement);\n    return () => {\n      styleElement.remove();\n      EDITOR_TO_STYLE_ELEMENT.delete(editor);\n    };\n  }, []);\n  return /*#__PURE__*/react.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/react.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/react.createElement(RestoreDOM, {\n    node: ref,\n    receivedUserInput: receivedUserInput\n  }, /*#__PURE__*/react.createElement(Component, Object.assign({\n    role: readOnly ? undefined : 'textbox',\n    \"aria-multiline\": readOnly ? undefined : true\n  }, attributes, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-editor-id\": editor.id,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: style,\n    onBeforeInput: (0,react.useCallback)(event => {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && ReactEditor.hasSelectableTarget(editor, event.target)) {\n        event.preventDefault();\n\n        if (!ReactEditor.isComposing(editor)) {\n          var _text2 = event.data;\n          Editor.insertText(editor, _text2);\n        }\n      }\n    }, [readOnly]),\n    onInput: (0,react.useCallback)(event => {\n      if (androidInputManager) {\n        androidInputManager.handleInput();\n        return;\n      } // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n\n\n      for (var op of deferredOperations.current) {\n        op();\n      }\n\n      deferredOperations.current = [];\n    }, []),\n    onBlur: (0,react.useCallback)(event => {\n      if (readOnly || state.isUpdatingSelection || !ReactEditor.hasSelectableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n\n      var {\n        relatedTarget\n      } = event;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n\n        if (Element.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      } // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n\n\n      if (IS_SAFARI) {\n        var domSelection = root.getSelection();\n        domSelection === null || domSelection === void 0 ? void 0 : domSelection.removeAllRanges();\n      }\n\n      IS_FOCUSED.delete(editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: (0,react.useCallback)(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node); // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n\n        if (!Editor.hasPath(editor, path) || Node.get(editor, path) !== node) {\n          return;\n        }\n\n        if (event.detail === TRIPLE_CLICK && path.length >= 1) {\n          var blockPath = path;\n\n          if (!Editor.isBlock(editor, node)) {\n            var _block$;\n\n            var block = Editor.above(editor, {\n              match: n => Editor.isBlock(editor, n),\n              at: path\n            });\n            blockPath = (_block$ = block === null || block === void 0 ? void 0 : block[1]) !== null && _block$ !== void 0 ? _block$ : path.slice(0, 1);\n          }\n\n          var range = Editor.range(editor, blockPath);\n          Transforms.select(editor, range);\n          return;\n        }\n\n        if (readOnly) {\n          return;\n        }\n\n        var _start = Editor.start(editor, path);\n\n        var end = Editor.end(editor, path);\n        var startVoid = Editor[\"void\"](editor, {\n          at: _start\n        });\n        var endVoid = Editor[\"void\"](editor, {\n          at: end\n        });\n\n        if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n          var _range = Editor.range(editor, _start);\n\n          Transforms.select(editor, _range);\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: (0,react.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        if (ReactEditor.isComposing(editor)) {\n          setIsComposing(false);\n          IS_COMPOSING.set(editor, false);\n        }\n\n        androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.handleCompositionEnd(event);\n\n        if (isEventHandled(event, attributes.onCompositionEnd) || IS_ANDROID) {\n          return;\n        } // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n\n\n        if (!IS_SAFARI && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_QQBROWSER && !IS_WECHATBROWSER && !IS_UC_MOBILE && event.data) {\n          var placeholderMarks = EDITOR_TO_PENDING_INSERTION_MARKS.get(editor);\n          EDITOR_TO_PENDING_INSERTION_MARKS.delete(editor); // Ensure we insert text with the marks the user was actually seeing\n\n          if (placeholderMarks !== undefined) {\n            EDITOR_TO_USER_MARKS.set(editor, editor.marks);\n            editor.marks = placeholderMarks;\n          }\n\n          Editor.insertText(editor, event.data);\n          var userMarks = EDITOR_TO_USER_MARKS.get(editor);\n          EDITOR_TO_USER_MARKS.delete(editor);\n\n          if (userMarks !== undefined) {\n            editor.marks = userMarks;\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionUpdate: (0,react.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        if (!ReactEditor.isComposing(editor)) {\n          setIsComposing(true);\n          IS_COMPOSING.set(editor, true);\n        }\n      }\n    }, [attributes.onCompositionUpdate]),\n    onCompositionStart: (0,react.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target)) {\n        androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.handleCompositionStart(event);\n\n        if (isEventHandled(event, attributes.onCompositionStart) || IS_ANDROID) {\n          return;\n        }\n\n        setIsComposing(true);\n        var {\n          selection\n        } = editor;\n\n        if (selection) {\n          if (index_es_Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n            return;\n          }\n\n          var inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest'\n          });\n\n          if (inline) {\n            var [, inlinePath] = inline;\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              var point = Editor.after(editor, inlinePath);\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point\n              });\n            }\n          }\n        }\n      }\n    }, [attributes.onCompositionStart]),\n    onCopy: (0,react.useCallback)(event => {\n      if (ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'copy');\n      }\n    }, [attributes.onCopy]),\n    onCut: (0,react.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData, 'cut');\n        var {\n          selection\n        } = editor;\n\n        if (selection) {\n          if (index_es_Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n\n            if (Editor.isVoid(editor, node)) {\n              Transforms[\"delete\"](editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onDragOver: (0,react.useCallback)(event => {\n      if (ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n\n        if (Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver]),\n    onDragStart: (0,react.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = Editor.isVoid(editor, node) || Editor[\"void\"](editor, {\n          at: path,\n          voids: true\n        }); // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n\n        if (voidMatch) {\n          var range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer, 'drag');\n      }\n    }, [readOnly, attributes.onDragStart]),\n    onDrop: (0,react.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault(); // Keep a reference to the dragged range before updating selection\n\n        var draggedRange = editor.selection; // Find the range where the drop happened\n\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        Transforms.select(editor, range);\n\n        if (state.isDraggingInternally) {\n          if (draggedRange && !index_es_Range.equals(draggedRange, range) && !Editor[\"void\"](editor, {\n            at: range,\n            voids: true\n          })) {\n            Transforms[\"delete\"](editor, {\n              at: draggedRange\n            });\n          }\n        }\n\n        ReactEditor.insertData(editor, data); // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n\n      state.isDraggingInternally = false;\n    }, [readOnly, attributes.onDrop]),\n    onDragEnd: (0,react.useCallback)(event => {\n      if (!readOnly && state.isDraggingInternally && attributes.onDragEnd && ReactEditor.hasTarget(editor, event.target)) {\n        attributes.onDragEnd(event);\n      } // When dropping on a different droppable element than the current editor,\n      // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n      // Note: `onDragEnd` is only called when `onDrop` is not called\n\n\n      state.isDraggingInternally = false;\n    }, [readOnly, attributes.onDragEnd]),\n    onFocus: (0,react.useCallback)(event => {\n      if (!readOnly && !state.isUpdatingSelection && ReactEditor.hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement; // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onKeyDown: (0,react.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasEditableTarget(editor, event.target)) {\n        androidInputManager === null || androidInputManager === void 0 ? void 0 : androidInputManager.handleKeyDown(event);\n        var {\n          nativeEvent\n        } = event; // COMPAT: The composition end event isn't fired reliably in all browsers,\n        // so we sometimes might end up stuck in a composition state even though we\n        // aren't composing any more.\n\n        if (ReactEditor.isComposing(editor) && nativeEvent.isComposing === false) {\n          IS_COMPOSING.set(editor, false);\n          setIsComposing(false);\n        }\n\n        if (isEventHandled(event, attributes.onKeyDown) || ReactEditor.isComposing(editor)) {\n          return;\n        }\n\n        var {\n          selection\n        } = editor;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = direction_default()(Node.string(element)) === 'rtl'; // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n\n          return;\n        } // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n\n\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        } // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n\n\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && index_es_Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'start'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && index_es_Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'end'\n            });\n          }\n\n          return;\n        }\n\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && index_es_Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n\n          if (selection && index_es_Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        } // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n\n\n        if (!HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n\n          if (Hotkeys.isSoftBreak(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertSoftBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && index_es_Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && index_es_Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor);\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && index_es_Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && index_es_Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && index_es_Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n\n            if (selection && index_es_Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n\n            return;\n          }\n        } else {\n          if (IS_CHROME || IS_SAFARI) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && index_es_Range.isCollapsed(selection)) {\n              var currentNode = Node.parent(editor, selection.anchor.path);\n\n              if (Element.isElement(currentNode) && Editor.isVoid(editor, currentNode) && (Editor.isInline(editor, currentNode) || Editor.isBlock(editor, currentNode))) {\n                event.preventDefault();\n                Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onKeyDown]),\n    onPaste: (0,react.useCallback)(event => {\n      if (!readOnly && ReactEditor.hasSelectableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, attributes.onPaste])\n  }), /*#__PURE__*/react.createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  })))));\n};\n/**\r\n * The default placeholder element\r\n */\n\nvar DefaultPlaceholder = _ref => {\n  var {\n    attributes,\n    children\n  } = _ref;\n  return (\n    /*#__PURE__*/\n    // COMPAT: Artificially add a line-break to the end on the placeholder element\n    // to prevent Android IMEs to pick up its content in autocorrect and to auto-capitalize the first letter\n    react.createElement(\"span\", Object.assign({}, attributes), children, IS_ANDROID && /*#__PURE__*/react.createElement(\"br\", null))\n  );\n};\n/**\r\n * A default memoized decorate function.\r\n */\n\nvar defaultDecorate = () => [];\n/**\r\n * A default implement to scroll dom range into view.\r\n */\n\nvar defaultScrollSelectionIntoView = (editor, domRange) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (!editor.selection || editor.selection && index_es_Range.isCollapsed(editor.selection)) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    es(leafEl, {\n      scrollMode: 'if-needed'\n    }); // @ts-expect-error an unorthodox delete D:\n\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\r\n * Check if an event is overrided by a handler.\r\n */\n\n\nvar isEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n\n  var shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\r\n * Check if a DOM event is overrided by a handler.\r\n */\n\nvar isDOMEventHandled = (event, handler) => {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n\n  var shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.defaultPrevented;\n};\n\n/**\r\n * A React context for sharing the `focused` state of the editor.\r\n */\n\nvar FocusedContext = /*#__PURE__*/(0,react.createContext)(false);\n/**\r\n * Get the current `focused` state of the editor.\r\n */\n\nvar useFocused = () => {\n  return useContext(FocusedContext);\n};\n\nfunction isError(error) {\n  return error instanceof Error;\n}\n/**\r\n * A React context for sharing the editor selector context in a way to control rerenders\r\n */\n\n\nvar SlateSelectorContext = /*#__PURE__*/(0,react.createContext)({});\n\nvar refEquality = (a, b) => a === b;\n/**\r\n * use redux style selectors to prevent rerendering on every keystroke.\r\n * Bear in mind rerendering can only prevented if the returned value is a value type or for reference types (e.g. objects and arrays) add a custom equality function.\r\n *\r\n * Example:\r\n * ```\r\n *  const isSelectionActive = useSlateSelector(editor => Boolean(editor.selection));\r\n * ```\r\n */\n\n\nfunction useSlateSelector(selector) {\n  var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refEquality;\n  var [, forceRender] = useReducer(s => s + 1, 0);\n  var context = useContext(SlateSelectorContext);\n\n  if (!context) {\n    throw new Error(\"The `useSlateSelector` hook must be used inside the <Slate> component's context.\");\n  }\n\n  var {\n    getSlate,\n    addEventListener\n  } = context;\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef(() => null);\n  var latestSelectedState = useRef(null);\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(getSlate());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current && isError(err)) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack, \"\\n\\n\");\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(() => {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(() => {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(getSlate());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender();\n    }\n\n    var unsubscribe = addEventListener(checkForUpdates);\n    checkForUpdates();\n    return () => unsubscribe();\n  }, // don't rerender on equalityFn change since we want to be able to define it inline\n  [addEventListener, getSlate]);\n  return selectedState;\n}\n/**\r\n * Create selector context with editor updating on every editor change\r\n */\n\nfunction getSelectorContext(editor) {\n  var eventListeners = (0,react.useRef)([]).current;\n  var slateRef = (0,react.useRef)({\n    editor\n  }).current;\n  var onChange = (0,react.useCallback)(editor => {\n    slateRef.editor = editor;\n    eventListeners.forEach(listener => listener(editor));\n  }, []);\n  var selectorContext = (0,react.useMemo)(() => {\n    return {\n      getSlate: () => slateRef.editor,\n      addEventListener: callback => {\n        eventListeners.push(callback);\n        return () => {\n          eventListeners.splice(eventListeners.indexOf(callback), 1);\n        };\n      }\n    };\n  }, [eventListeners, slateRef]);\n  return {\n    selectorContext,\n    onChange\n  };\n}\n\nvar index_es_excluded = [\"editor\", \"children\", \"onChange\", \"value\"];\n/**\r\n * A wrapper around the provider to handle `onChange` events, because the editor\r\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\r\n */\n\nvar Slate = props => {\n  var {\n    editor,\n    children,\n    onChange,\n    value\n  } = props,\n      rest = index_es_objectWithoutProperties(props, index_es_excluded);\n\n  var unmountRef = (0,react.useRef)(false);\n  var [context, setContext] = react.useState(() => {\n    if (!Node.isNodeList(value)) {\n      throw new Error(\"[Slate] value is invalid! Expected a list of elements but got: \".concat(Scrubber.stringify(value)));\n    }\n\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\"[Slate] editor is invalid! You passed: \".concat(Scrubber.stringify(editor)));\n    }\n\n    editor.children = value;\n    Object.assign(editor, rest);\n    return {\n      v: 0,\n      editor\n    };\n  });\n  var {\n    selectorContext,\n    onChange: handleSelectorChange\n  } = getSelectorContext(editor);\n  var onContextChange = (0,react.useCallback)(() => {\n    if (onChange) {\n      onChange(editor.children);\n    }\n\n    setContext(prevContext => ({\n      v: prevContext.v + 1,\n      editor\n    }));\n    handleSelectorChange(editor);\n  }, [onChange]);\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n  (0,react.useEffect)(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {});\n      unmountRef.current = true;\n    };\n  }, []);\n  var [isFocused, setIsFocused] = (0,react.useState)(ReactEditor.isFocused(editor));\n  (0,react.useEffect)(() => {\n    setIsFocused(ReactEditor.isFocused(editor));\n  });\n  useIsomorphicLayoutEffect(() => {\n    var fn = () => setIsFocused(ReactEditor.isFocused(editor));\n\n    if (IS_REACT_VERSION_17_OR_ABOVE) {\n      // In React >= 17 onFocus and onBlur listen to the focusin and focusout events during the bubbling phase.\n      // Therefore in order for <Editable />'s handlers to run first, which is necessary for ReactEditor.isFocused(editor)\n      // to return the correct value, we have to listen to the focusin and focusout events without useCapture here.\n      document.addEventListener('focusin', fn);\n      document.addEventListener('focusout', fn);\n      return () => {\n        document.removeEventListener('focusin', fn);\n        document.removeEventListener('focusout', fn);\n      };\n    } else {\n      document.addEventListener('focus', fn, true);\n      document.addEventListener('blur', fn, true);\n      return () => {\n        document.removeEventListener('focus', fn, true);\n        document.removeEventListener('blur', fn, true);\n      };\n    }\n  }, []);\n  return /*#__PURE__*/react.createElement(SlateSelectorContext.Provider, {\n    value: selectorContext\n  }, /*#__PURE__*/react.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/react.createElement(EditorContext.Provider, {\n    value: context.editor\n  }, /*#__PURE__*/react.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children))));\n};\n\n/**\r\n * Get the current editor object from the React context.\r\n * @deprecated Use useSlateStatic instead.\r\n */\n\nvar useEditor = () => {\n  var editor = useContext(EditorContext);\n\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n\n  return editor;\n};\n\n/**\r\n * Get the current slate selection.\r\n * Only triggers a rerender when the selection actually changes\r\n */\n\nvar useSlateSelection = () => {\n  return useSlateSelector(editor => editor.selection, isSelectionEqual);\n};\n\nvar isSelectionEqual = (a, b) => {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n  return Range.equals(a, b);\n};\n\n/**\r\n * Utilities for single-line deletion\r\n */\n\nvar doRectsIntersect = (rect, compareRect) => {\n  var middle = (compareRect.top + compareRect.bottom) / 2;\n  return rect.top <= middle && rect.bottom >= middle;\n};\n\nvar areRangesSameLine = (editor, range1, range2) => {\n  var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();\n  var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);\n};\n/**\r\n * A helper utility that returns the end portion of a `Range`\r\n * which is located on a single line.\r\n *\r\n * @param {Editor} editor The editor object to compare against\r\n * @param {Range} parentRange The parent range to compare against\r\n * @returns {Range} A valid portion of the parentRange which is one a single line\r\n */\n\n\nvar findCurrentLineRange = (editor, parentRange) => {\n  var parentRangeBoundary = Editor.range(editor, index_es_Range.end(parentRange));\n  var positions = Array.from(Editor.positions(editor, {\n    at: parentRange\n  }));\n  var left = 0;\n  var right = positions.length;\n  var middle = Math.floor(right / 2);\n\n  if (areRangesSameLine(editor, Editor.range(editor, positions[left]), parentRangeBoundary)) {\n    return Editor.range(editor, positions[left], parentRangeBoundary);\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (areRangesSameLine(editor, Editor.range(editor, positions[middle]), parentRangeBoundary)) {\n      right = middle;\n    } else {\n      left = middle;\n    }\n\n    middle = Math.floor((left + right) / 2);\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary);\n};\n\nfunction index_es_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction index_es_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { index_es_ownKeys(Object(source), true).forEach(function (key) { index_es_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { index_es_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\r\n * `withReact` adds React and DOM specific behaviors to the editor.\r\n *\r\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\r\n * this plugin.\r\n *\r\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\r\n */\n\nvar withReact = editor => {\n  var e = editor;\n  var {\n    apply,\n    onChange,\n    deleteBackward,\n    addMark,\n    removeMark\n  } = e; // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n  // avoid collisions between editors in the DOM that share the same value.\n\n  EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap());\n\n  e.addMark = (key, value) => {\n    var _EDITOR_TO_SCHEDULE_F, _EDITOR_TO_PENDING_DI;\n\n    (_EDITOR_TO_SCHEDULE_F = EDITOR_TO_SCHEDULE_FLUSH.get(e)) === null || _EDITOR_TO_SCHEDULE_F === void 0 ? void 0 : _EDITOR_TO_SCHEDULE_F();\n\n    if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e) && (_EDITOR_TO_PENDING_DI = EDITOR_TO_PENDING_DIFFS.get(e)) !== null && _EDITOR_TO_PENDING_DI !== void 0 && _EDITOR_TO_PENDING_DI.length) {\n      // Ensure the current pending diffs originating from changes before the addMark\n      // are applied with the current formatting\n      EDITOR_TO_PENDING_INSERTION_MARKS.set(e, null);\n    }\n\n    EDITOR_TO_USER_MARKS.delete(e);\n    addMark(key, value);\n  };\n\n  e.removeMark = key => {\n    var _EDITOR_TO_PENDING_DI2;\n\n    if (!EDITOR_TO_PENDING_INSERTION_MARKS.get(e) && (_EDITOR_TO_PENDING_DI2 = EDITOR_TO_PENDING_DIFFS.get(e)) !== null && _EDITOR_TO_PENDING_DI2 !== void 0 && _EDITOR_TO_PENDING_DI2.length) {\n      // Ensure the current pending diffs originating from changes before the addMark\n      // are applied with the current formatting\n      EDITOR_TO_PENDING_INSERTION_MARKS.set(e, null);\n    }\n\n    EDITOR_TO_USER_MARKS.delete(e);\n    removeMark(key);\n  };\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit);\n    }\n\n    if (e.selection && index_es_Range.isCollapsed(e.selection)) {\n      var parentBlockEntry = Editor.above(e, {\n        match: n => Editor.isBlock(e, n),\n        at: e.selection\n      });\n\n      if (parentBlockEntry) {\n        var [, parentBlockPath] = parentBlockEntry;\n        var parentElementRange = Editor.range(e, parentBlockPath, e.selection.anchor);\n        var currentLineRange = findCurrentLineRange(e, parentElementRange);\n\n        if (!index_es_Range.isCollapsed(currentLineRange)) {\n          Transforms[\"delete\"](e, {\n            at: currentLineRange\n          });\n        }\n      }\n    }\n  }; // This attempts to reset the NODE_TO_KEY entry to the correct value\n  // as apply() changes the object reference and hence invalidates the NODE_TO_KEY entry\n\n\n  e.apply = op => {\n    var matches = [];\n    var pendingDiffs = EDITOR_TO_PENDING_DIFFS.get(e);\n\n    if (pendingDiffs !== null && pendingDiffs !== void 0 && pendingDiffs.length) {\n      var transformed = pendingDiffs.map(textDiff => transformTextDiff(textDiff, op)).filter(Boolean);\n      EDITOR_TO_PENDING_DIFFS.set(e, transformed);\n    }\n\n    var pendingSelection = EDITOR_TO_PENDING_SELECTION.get(e);\n\n    if (pendingSelection) {\n      EDITOR_TO_PENDING_SELECTION.set(e, transformPendingRange(e, pendingSelection, op));\n    }\n\n    var pendingAction = EDITOR_TO_PENDING_ACTION.get(e);\n\n    if (pendingAction !== null && pendingAction !== void 0 && pendingAction.at) {\n      var at = Point.isPoint(pendingAction === null || pendingAction === void 0 ? void 0 : pendingAction.at) ? transformPendingPoint(e, pendingAction.at, op) : transformPendingRange(e, pendingAction.at, op);\n      EDITOR_TO_PENDING_ACTION.set(e, at ? index_es_objectSpread(index_es_objectSpread({}, pendingAction), {}, {\n        at\n      }) : null);\n    }\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n      case 'split_node':\n        {\n          matches.push(...getMatches(e, op.path));\n          break;\n        }\n\n      case 'set_selection':\n        {\n          var _EDITOR_TO_USER_SELEC;\n\n          // Selection was manually set, don't restore the user selection after the change.\n          (_EDITOR_TO_USER_SELEC = EDITOR_TO_USER_SELECTION.get(e)) === null || _EDITOR_TO_USER_SELEC === void 0 ? void 0 : _EDITOR_TO_USER_SELEC.unref();\n          EDITOR_TO_USER_SELECTION.delete(e);\n          break;\n        }\n\n      case 'insert_node':\n      case 'remove_node':\n        {\n          matches.push(...getMatches(e, Path.parent(op.path)));\n          break;\n        }\n\n      case 'merge_node':\n        {\n          var prevPath = Path.previous(op.path);\n          matches.push(...getMatches(e, prevPath));\n          break;\n        }\n\n      case 'move_node':\n        {\n          var commonPath = Path.common(Path.parent(op.path), Path.parent(op.newPath));\n          matches.push(...getMatches(e, commonPath));\n          break;\n        }\n    }\n\n    apply(op);\n\n    for (var [path, key] of matches) {\n      var [node] = Editor.node(e, path);\n      NODE_TO_KEY.set(node, key);\n    }\n  };\n\n  e.setFragmentData = data => {\n    var {\n      selection\n    } = e;\n\n    if (!selection) {\n      return;\n    }\n\n    var [start, end] = index_es_Range.edges(selection);\n    var startVoid = Editor[\"void\"](e, {\n      at: start.path\n    });\n    var endVoid = Editor[\"void\"](e, {\n      at: end.path\n    });\n\n    if (index_es_Range.isCollapsed(selection) && !startVoid) {\n      return;\n    } // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n\n\n    var domRange = ReactEditor.toDOMRange(e, selection);\n    var contents = domRange.cloneContents();\n    var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.\n\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node;\n      }\n    }); // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n\n    if (endVoid) {\n      var [voidNode] = endVoid;\n      var r = domRange.cloneRange();\n      var domNode = ReactEditor.toDOMNode(e, voidNode);\n      r.setEndAfter(domNode);\n      contents = r.cloneContents();\n    } // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n\n\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]');\n    } // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n\n\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {\n      var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';\n      zw.textContent = isNewline ? '\\n' : '';\n    }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n\n    if (isDOMText(attach)) {\n      var span = attach.ownerDocument.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n\n      span.style.whiteSpace = 'pre';\n      span.appendChild(attach);\n      contents.appendChild(span);\n      attach = span;\n    }\n\n    var fragment = e.getFragment();\n    var string = JSON.stringify(fragment);\n    var encoded = window.btoa(encodeURIComponent(string));\n    attach.setAttribute('data-slate-fragment', encoded);\n    data.setData('application/x-slate-fragment', encoded); // Add the content to a <div> so that we can get its inner HTML.\n\n    var div = contents.ownerDocument.createElement('div');\n    div.appendChild(contents);\n    div.setAttribute('hidden', 'true');\n    contents.ownerDocument.body.appendChild(div);\n    data.setData('text/html', div.innerHTML);\n    data.setData('text/plain', getPlainText(div));\n    contents.ownerDocument.body.removeChild(div);\n    return data;\n  };\n\n  e.insertData = data => {\n    if (!e.insertFragmentData(data)) {\n      e.insertTextData(data);\n    }\n  };\n\n  e.insertFragmentData = data => {\n    /**\r\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\r\n     */\n    var fragment = data.getData('application/x-slate-fragment') || getSlateFragmentAttribute(data);\n\n    if (fragment) {\n      var decoded = decodeURIComponent(window.atob(fragment));\n      var parsed = JSON.parse(decoded);\n      e.insertFragment(parsed);\n      return true;\n    }\n\n    return false;\n  };\n\n  e.insertTextData = data => {\n    var text = data.getData('text/plain');\n\n    if (text) {\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n      var split = false;\n\n      for (var line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, {\n            always: true\n          });\n        }\n\n        e.insertText(line);\n        split = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    react_dom.unstable_batchedUpdates(() => {\n      var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n\n      if (onContextChange) {\n        onContextChange();\n      }\n\n      onChange();\n    });\n  };\n\n  return e;\n};\n\nvar getMatches = (e, path) => {\n  var matches = [];\n\n  for (var [n, p] of Editor.levels(e, {\n    at: path\n  })) {\n    var key = ReactEditor.findKey(e, n);\n    matches.push([p, key]);\n  }\n\n  return matches;\n};\n\n\n//# sourceMappingURL=index.es.js.map\n\n// EXTERNAL MODULE: ../packages/core/src/api/createStore.ts + 4 modules\nvar createStore = __webpack_require__(1694);\n;// CONCATENATED MODULE: ../node_modules/immer/dist/immer.esm.mjs\nfunction immer_esm_n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if(false){ var i, o; }throw Error(\"[Immer] minified error nr: \"+n+(t.length?\" \"+t.map((function(n){return\"'\"+n+\"'\"})).join(\",\"):\"\")+\". Find the full error at: https://bit.ly/3cXEKWf\")}function immer_esm_r(n){return!!n&&!!n[immer_esm_Q]}function immer_esm_t(n){var r;return!!n&&(function(n){if(!n||\"object\"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,\"constructor\")&&r.constructor;return t===Object||\"function\"==typeof t&&Function.toString.call(t)===immer_esm_Z}(n)||Array.isArray(n)||!!n[immer_esm_L]||!!(null===(r=n.constructor)||void 0===r?void 0:r[immer_esm_L])||immer_esm_s(n)||immer_esm_v(n))}function immer_esm_e(t){return immer_esm_r(t)||immer_esm_n(23,t),t[immer_esm_Q].t}function immer_esm_i(n,r,t){void 0===t&&(t=!1),0===immer_esm_o(n)?(t?Object.keys:immer_esm_nn)(n).forEach((function(e){t&&\"symbol\"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function immer_esm_o(n){var r=n[immer_esm_Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:immer_esm_s(n)?2:immer_esm_v(n)?3:0}function immer_esm_u(n,r){return 2===immer_esm_o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function immer_esm_a(n,r){return 2===immer_esm_o(n)?n.get(r):n[r]}function immer_esm_f(n,r,t){var e=immer_esm_o(n);2===e?n.set(r,t):3===e?n.add(t):n[r]=t}function immer_esm_c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function immer_esm_s(n){return immer_esm_X&&n instanceof Map}function immer_esm_v(n){return immer_esm_q&&n instanceof Set}function immer_esm_p(n){return n.o||n.t}function immer_esm_l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=immer_esm_rn(n);delete r[immer_esm_Q];for(var t=immer_esm_nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function immer_esm_d(n,e){return void 0===e&&(e=!1),immer_esm_y(n)||immer_esm_r(n)||!immer_esm_t(n)||(immer_esm_o(n)>1&&(n.set=n.add=n.clear=n.delete=immer_esm_h),Object.freeze(n),e&&immer_esm_i(n,(function(n,r){return immer_esm_d(r,!0)}),!0)),n}function immer_esm_h(){immer_esm_n(2)}function immer_esm_y(n){return null==n||\"object\"!=typeof n||Object.isFrozen(n)}function immer_esm_b(r){var t=immer_esm_tn[r];return t||immer_esm_n(18,r),t}function immer_esm_m(n,r){immer_esm_tn[n]||(immer_esm_tn[n]=r)}function immer_esm_(){return true||0,immer_esm_U}function immer_esm_j(n,r){r&&(immer_esm_b(\"Patches\"),n.u=[],n.s=[],n.v=r)}function immer_esm_O(n){immer_esm_g(n),n.p.forEach(immer_esm_S),n.p=null}function immer_esm_g(n){n===immer_esm_U&&(immer_esm_U=n.l)}function immer_esm_w(n){return immer_esm_U={p:[],l:immer_esm_U,h:n,m:!0,_:0}}function immer_esm_S(n){var r=n[immer_esm_Q];0===r.i||1===r.i?r.j():r.O=!0}function immer_esm_P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||immer_esm_b(\"ES5\").S(e,r,o),o?(i[immer_esm_Q].P&&(immer_esm_O(e),immer_esm_n(4)),immer_esm_t(r)&&(r=immer_esm_M(e,r),e.l||immer_esm_x(e,r)),e.u&&immer_esm_b(\"Patches\").M(i[immer_esm_Q].t,r,e.u,e.s)):r=immer_esm_M(e,i,[]),immer_esm_O(e),e.u&&e.v(e.u,e.s),r!==immer_esm_H?r:void 0}function immer_esm_M(n,r,t){if(immer_esm_y(r))return r;var e=r[immer_esm_Q];if(!e)return immer_esm_i(r,(function(i,o){return immer_esm_A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return immer_esm_x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=immer_esm_l(e.k):e.o,u=o,a=!1;3===e.i&&(u=new Set(o),o.clear(),a=!0),immer_esm_i(u,(function(r,i){return immer_esm_A(n,e,o,r,i,t,a)})),immer_esm_x(n,o,!1),t&&n.u&&immer_esm_b(\"Patches\").N(e,t,n.u,n.s)}return e.o}function immer_esm_A(e,i,o,a,c,s,v){if( false&&0,immer_esm_r(c)){var p=immer_esm_M(e,c,s&&i&&3!==i.i&&!immer_esm_u(i.R,a)?s.concat(a):void 0);if(immer_esm_f(o,a,p),!immer_esm_r(p))return;e.m=!1}else v&&o.add(c);if(immer_esm_t(c)&&!immer_esm_y(c)){if(!e.h.D&&e._<1)return;immer_esm_M(e,c),i&&i.A.l||immer_esm_x(e,c)}}function immer_esm_x(n,r,t){void 0===t&&(t=!1),!n.l&&n.h.D&&n.m&&immer_esm_d(r,t)}function immer_esm_z(n,r){var t=n[immer_esm_Q];return(t?immer_esm_p(t):n)[r]}function immer_esm_I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function immer_esm_k(n){n.P||(n.P=!0,n.l&&immer_esm_k(n.l))}function immer_esm_E(n){n.o||(n.o=immer_esm_l(n.t))}function immer_esm_N(n,r,t){var e=immer_esm_s(r)?immer_esm_b(\"MapSet\").F(r,t):immer_esm_v(r)?immer_esm_b(\"MapSet\").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:immer_esm_(),P:!1,I:!1,R:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=immer_esm_en;t&&(i=[e],o=immer_esm_on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):immer_esm_b(\"ES5\").J(r,t);return(t?t.A:immer_esm_()).p.push(e),e}function immer_esm_R(e){return immer_esm_r(e)||immer_esm_n(22,e),function n(r){if(!immer_esm_t(r))return r;var e,u=r[immer_esm_Q],c=immer_esm_o(r);if(u){if(!u.P&&(u.i<4||!immer_esm_b(\"ES5\").K(u)))return u.t;u.I=!0,e=immer_esm_D(r,c),u.I=!1}else e=immer_esm_D(r,c);return immer_esm_i(e,(function(r,t){u&&immer_esm_a(u.t,r)===t||immer_esm_f(e,r,n(t))})),3===c?new Set(e):e}(e)}function immer_esm_D(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return immer_esm_l(n)}function immer_esm_F(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[immer_esm_Q];return false&&0,immer_esm_en.get(r,n)},set:function(r){var t=this[immer_esm_Q]; false&&0,immer_esm_en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][immer_esm_Q];if(!t.P)switch(t.i){case 5:a(t)&&immer_esm_k(t);break;case 4:o(t)&&immer_esm_k(t)}}}function o(n){for(var r=n.t,t=n.k,e=immer_esm_nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==immer_esm_Q){var a=r[o];if(void 0===a&&!immer_esm_u(r,o))return!0;var f=t[o],s=f&&f[immer_esm_Q];if(s?s.t!==a:!immer_esm_c(f,a))return!0}}var v=!!r[immer_esm_Q];return e.length!==immer_esm_nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}function f(r){r.O&&immer_esm_n(3,JSON.stringify(immer_esm_p(r)))}var s={};immer_esm_m(\"ES5\",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,\"\"+i,t(i,!0));return e}var o=immer_esm_rn(r);delete o[immer_esm_Q];for(var u=immer_esm_nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:immer_esm_(),P:!1,I:!1,R:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,immer_esm_Q,{value:o,writable:!0}),i},S:function(n,t,o){o?immer_esm_r(t)&&t[immer_esm_Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&\"object\"==typeof r){var t=r[immer_esm_Q];if(t){var e=t.t,o=t.k,f=t.R,c=t.i;if(4===c)immer_esm_i(o,(function(r){r!==immer_esm_Q&&(void 0!==e[r]||immer_esm_u(e,r)?f[r]||n(o[r]):(f[r]=!0,immer_esm_k(t)))})),immer_esm_i(e,(function(n){void 0!==o[n]||immer_esm_u(o,n)||(f[n]=!1,immer_esm_k(t))}));else if(5===c){if(a(t)&&(immer_esm_k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}function immer_esm_T(){function e(n){if(!immer_esm_t(n))return n;if(Array.isArray(n))return n.map(e);if(immer_esm_s(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],e(n[1])]})));if(immer_esm_v(n))return new Set(Array.from(n).map(e));var r=Object.create(Object.getPrototypeOf(n));for(var i in n)r[i]=e(n[i]);return immer_esm_u(n,immer_esm_L)&&(r[immer_esm_L]=n[immer_esm_L]),r}function f(n){return immer_esm_r(n)?e(n):n}var c=\"add\";immer_esm_m(\"Patches\",{$:function(r,t){return t.forEach((function(t){for(var i=t.path,u=t.op,f=r,s=0;s<i.length-1;s++){var v=immer_esm_o(f),p=\"\"+i[s];0!==v&&1!==v||\"__proto__\"!==p&&\"constructor\"!==p||immer_esm_n(24),\"function\"==typeof f&&\"prototype\"===p&&immer_esm_n(24),\"object\"!=typeof(f=immer_esm_a(f,p))&&immer_esm_n(15,i.join(\"/\"))}var l=immer_esm_o(f),d=e(t.value),h=i[i.length-1];switch(u){case\"replace\":switch(l){case 2:return f.set(h,d);case 3:immer_esm_n(16);default:return f[h]=d}case c:switch(l){case 1:return\"-\"===h?f.push(d):f.splice(h,0,d);case 2:return f.set(h,d);case 3:return f.add(d);default:return f[h]=d}case\"remove\":switch(l){case 1:return f.splice(h,1);case 2:return f.delete(h);case 3:return f.delete(t.value);default:return delete f[h]}default:immer_esm_n(17,u)}})),r},N:function(n,r,t,e){switch(n.i){case 0:case 4:case 2:return function(n,r,t,e){var o=n.t,s=n.o;immer_esm_i(n.R,(function(n,i){var v=immer_esm_a(o,n),p=immer_esm_a(s,n),l=i?immer_esm_u(o,n)?\"replace\":c:\"remove\";if(v!==p||\"replace\"!==l){var d=r.concat(n);t.push(\"remove\"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:\"remove\",path:d}:\"remove\"===l?{op:c,path:d,value:f(v)}:{op:\"replace\",path:d,value:f(v)})}}))}(n,r,t,e);case 5:case 1:return function(n,r,t,e){var i=n.t,o=n.R,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,t];t=s[0],e=s[1]}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=r.concat([v]);t.push({op:\"replace\",path:p,value:f(u[v])}),e.push({op:\"replace\",path:p,value:f(i[v])})}for(var l=i.length;l<u.length;l++){var d=r.concat([l]);t.push({op:c,path:d,value:f(u[l])})}i.length<u.length&&e.push({op:\"replace\",path:r.concat([\"length\"]),value:i.length})}(n,r,t,e);case 3:return function(n,r,t,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=r.concat([u]);t.push({op:\"remove\",path:i,value:n}),e.unshift({op:c,path:i,value:n})}u++})),u=0,o.forEach((function(n){if(!i.has(n)){var o=r.concat([u]);t.push({op:c,path:o,value:n}),e.unshift({op:\"remove\",path:o,value:n})}u++}))}(n,r,t,e)}},M:function(n,r,t,e){t.push({op:\"replace\",path:[],value:r===immer_esm_H?void 0:r}),e.push({op:\"replace\",path:[],value:n})}})}function immer_esm_C(){function r(n,r){function t(){this.constructor=n}a(n,r),n.prototype=(t.prototype=r.prototype,new t)}function e(n){n.o||(n.R=new Map,n.o=new Map(n.t))}function o(n){n.o||(n.o=new Set,n.t.forEach((function(r){if(immer_esm_t(r)){var e=immer_esm_N(n.A.h,r,n);n.p.set(r,e),n.o.add(e)}else n.o.add(r)})))}function u(r){r.O&&immer_esm_n(3,JSON.stringify(immer_esm_p(r)))}var a=function(n,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)},f=function(){function n(n,r){return this[immer_esm_Q]={i:2,l:r,A:r?r.A:immer_esm_(),P:!1,I:!1,o:void 0,R:void 0,t:n,k:this,C:!1,O:!1},this}r(n,Map);var o=n.prototype;return Object.defineProperty(o,\"size\",{get:function(){return immer_esm_p(this[immer_esm_Q]).size}}),o.has=function(n){return immer_esm_p(this[immer_esm_Q]).has(n)},o.set=function(n,r){var t=this[immer_esm_Q];return u(t),immer_esm_p(t).has(n)&&immer_esm_p(t).get(n)===r||(e(t),immer_esm_k(t),t.R.set(n,!0),t.o.set(n,r),t.R.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return!1;var r=this[immer_esm_Q];return u(r),e(r),immer_esm_k(r),r.t.has(n)?r.R.set(n,!1):r.R.delete(n),r.o.delete(n),!0},o.clear=function(){var n=this[immer_esm_Q];u(n),immer_esm_p(n).size&&(e(n),immer_esm_k(n),n.R=new Map,immer_esm_i(n.t,(function(r){n.R.set(r,!1)})),n.o.clear())},o.forEach=function(n,r){var t=this;immer_esm_p(this[immer_esm_Q]).forEach((function(e,i){n.call(r,t.get(i),i,t)}))},o.get=function(n){var r=this[immer_esm_Q];u(r);var i=immer_esm_p(r).get(n);if(r.I||!immer_esm_t(i))return i;if(i!==r.t.get(n))return i;var o=immer_esm_N(r.A.h,i,r);return e(r),r.o.set(n,o),o},o.keys=function(){return immer_esm_p(this[immer_esm_Q]).keys()},o.values=function(){var n,r=this,t=this.keys();return(n={})[immer_esm_V]=function(){return r.values()},n.next=function(){var n=t.next();return n.done?n:{done:!1,value:r.get(n.value)}},n},o.entries=function(){var n,r=this,t=this.keys();return(n={})[immer_esm_V]=function(){return r.entries()},n.next=function(){var n=t.next();if(n.done)return n;var e=r.get(n.value);return{done:!1,value:[n.value,e]}},n},o[immer_esm_V]=function(){return this.entries()},n}(),c=function(){function n(n,r){return this[immer_esm_Q]={i:3,l:r,A:r?r.A:immer_esm_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,O:!1,C:!1},this}r(n,Set);var t=n.prototype;return Object.defineProperty(t,\"size\",{get:function(){return immer_esm_p(this[immer_esm_Q]).size}}),t.has=function(n){var r=this[immer_esm_Q];return u(r),r.o?!!r.o.has(n)||!(!r.p.has(n)||!r.o.has(r.p.get(n))):r.t.has(n)},t.add=function(n){var r=this[immer_esm_Q];return u(r),this.has(n)||(o(r),immer_esm_k(r),r.o.add(n)),this},t.delete=function(n){if(!this.has(n))return!1;var r=this[immer_esm_Q];return u(r),o(r),immer_esm_k(r),r.o.delete(n)||!!r.p.has(n)&&r.o.delete(r.p.get(n))},t.clear=function(){var n=this[immer_esm_Q];u(n),immer_esm_p(n).size&&(o(n),immer_esm_k(n),n.o.clear())},t.values=function(){var n=this[immer_esm_Q];return u(n),o(n),n.o.values()},t.entries=function(){var n=this[immer_esm_Q];return u(n),o(n),n.o.entries()},t.keys=function(){return this.values()},t[immer_esm_V]=function(){return this.values()},t.forEach=function(n,r){for(var t=this.values(),e=t.next();!e.done;)n.call(r,e.value,e.value,this),e=t.next()},n}();immer_esm_m(\"MapSet\",{F:function(n,r){return new f(n,r)},T:function(n,r){return new c(n,r)}})}function immer_esm_J(){immer_esm_F(),immer_esm_C(),immer_esm_T()}function immer_esm_K(n){return n}function immer_esm_$(n){return n}var immer_esm_G,immer_esm_U,immer_esm_W=\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol(\"x\"),immer_esm_X=\"undefined\"!=typeof Map,immer_esm_q=\"undefined\"!=typeof Set,immer_esm_B=\"undefined\"!=typeof Proxy&&void 0!==Proxy.revocable&&\"undefined\"!=typeof Reflect,immer_esm_H=immer_esm_W?Symbol.for(\"immer-nothing\"):((immer_esm_G={})[\"immer-nothing\"]=!0,immer_esm_G),immer_esm_L=immer_esm_W?Symbol.for(\"immer-draftable\"):\"__$immer_draftable\",immer_esm_Q=immer_esm_W?Symbol.for(\"immer-state\"):\"__$immer_state\",immer_esm_V=\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\",immer_esm_Y={0:\"Illegal state\",1:\"Immer drafts cannot have computed properties\",2:\"This object has been frozen and should not be mutated\",3:function(n){return\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \"+n},4:\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",5:\"Immer forbids circular references\",6:\"The first or second argument to `produce` must be a function\",7:\"The third argument to `produce` must be a function or undefined\",8:\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",9:\"First argument to `finishDraft` must be a draft returned by `createDraft`\",10:\"The given draft is already finalized\",11:\"Object.defineProperty() cannot be used on an Immer draft\",12:\"Object.setPrototypeOf() cannot be used on an Immer draft\",13:\"Immer only supports deleting array indices\",14:\"Immer only supports setting array indices and the 'length' property\",15:function(n){return\"Cannot apply patch, path doesn't resolve: \"+n},16:'Sets cannot have \"replace\" patches.',17:function(n){return\"Unsupported patch operation: \"+n},18:function(n){return\"The plugin for '\"+n+\"' has not been loaded into Immer. To enable the plugin, import and call `enable\"+n+\"()` when initializing your application.\"},20:\"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",21:function(n){return\"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\"+n+\"'\"},22:function(n){return\"'current' expects a draft, got: \"+n},23:function(n){return\"'original' expects a draft, got: \"+n},24:\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"},immer_esm_Z=\"\"+Object.prototype.constructor,immer_esm_nn=\"undefined\"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,immer_esm_rn=Object.getOwnPropertyDescriptors||function(n){var r={};return immer_esm_nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},immer_esm_tn={},immer_esm_en={get:function(n,r){if(r===immer_esm_Q)return n;var e=immer_esm_p(n);if(!immer_esm_u(e,r))return function(n,r,t){var e,i=immer_esm_I(r,t);return i?\"value\"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!immer_esm_t(i)?i:i===immer_esm_z(n.t,r)?(immer_esm_E(n),n.o[r]=immer_esm_N(n.A.h,i,n)):i},has:function(n,r){return r in immer_esm_p(n)},ownKeys:function(n){return Reflect.ownKeys(immer_esm_p(n))},set:function(n,r,t){var e=immer_esm_I(immer_esm_p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=immer_esm_z(immer_esm_p(n),r),o=null==i?void 0:i[immer_esm_Q];if(o&&o.t===t)return n.o[r]=t,n.R[r]=!1,!0;if(immer_esm_c(t,i)&&(void 0!==t||immer_esm_u(n.t,r)))return!0;immer_esm_E(n),immer_esm_k(n)}return n.o[r]===t&&(void 0!==t||r in n.o)||Number.isNaN(t)&&Number.isNaN(n.o[r])||(n.o[r]=t,n.R[r]=!0),!0},deleteProperty:function(n,r){return void 0!==immer_esm_z(n.t,r)||r in n.t?(n.R[r]=!1,immer_esm_E(n),immer_esm_k(n)):delete n.R[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=immer_esm_p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||\"length\"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){immer_esm_n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){immer_esm_n(12)}},immer_esm_on={};immer_esm_i(immer_esm_en,(function(n,r){immer_esm_on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),immer_esm_on.deleteProperty=function(r,t){return false&&0,immer_esm_on.set.call(this,r,t,void 0)},immer_esm_on.set=function(r,t,e){return false&&0,immer_esm_en.set.call(this,r[0],t,e,r[0])};var immer_esm_un=function(){function e(r){var e=this;this.g=immer_esm_B,this.D=!0,this.produce=function(r,i,o){if(\"function\"==typeof r&&\"function\"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if(\"function\"!=typeof i&&immer_esm_n(6),void 0!==o&&\"function\"!=typeof o&&immer_esm_n(7),immer_esm_t(r)){var c=immer_esm_w(e),s=immer_esm_N(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?immer_esm_O(c):immer_esm_g(c)}return\"undefined\"!=typeof Promise&&f instanceof Promise?f.then((function(n){return immer_esm_j(c,o),immer_esm_P(n,c)}),(function(n){throw immer_esm_O(c),n})):(immer_esm_j(c,o),immer_esm_P(f,c))}if(!r||\"object\"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===immer_esm_H&&(f=void 0),e.D&&immer_esm_d(f,!0),o){var p=[],l=[];immer_esm_b(\"Patches\").M(r,f,p,l),o(p,l)}return f}immer_esm_n(21,r)},this.produceWithPatches=function(n,r){if(\"function\"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return\"undefined\"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},\"boolean\"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),\"boolean\"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){immer_esm_t(e)||immer_esm_n(8),immer_esm_r(e)&&(e=immer_esm_R(e));var i=immer_esm_w(this),o=immer_esm_N(this,e,void 0);return o[immer_esm_Q].C=!0,immer_esm_g(i),o},i.finishDraft=function(r,t){var e=r&&r[immer_esm_Q]; false&&(0);var i=e.A;return immer_esm_j(i,t),immer_esm_P(void 0,i)},i.setAutoFreeze=function(n){this.D=n},i.setUseProxies=function(r){r&&!immer_esm_B&&immer_esm_n(20),this.g=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&\"replace\"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=immer_esm_b(\"Patches\").$;return immer_esm_r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),immer_esm_an=new immer_esm_un,immer_esm_fn=immer_esm_an.produce,immer_esm_cn=immer_esm_an.produceWithPatches.bind(immer_esm_an),immer_esm_sn=immer_esm_an.setAutoFreeze.bind(immer_esm_an),immer_esm_vn=immer_esm_an.setUseProxies.bind(immer_esm_an),immer_esm_pn=immer_esm_an.applyPatches.bind(immer_esm_an),immer_esm_ln=immer_esm_an.createDraft.bind(immer_esm_an),immer_esm_dn=immer_esm_an.finishDraft.bind(immer_esm_an);/* harmony default export */ var dist_immer_esm = (immer_esm_fn);\n//# sourceMappingURL=immer.esm.js.map\n\n;// CONCATENATED MODULE: ../packages/immer/src/ImmerStore.ts\nvar ImmerStore=/*#__PURE__*/function(_Store){(0,inheritsLoose/* default */.Z)(ImmerStore,_Store);function ImmerStore(initialState){return _Store.call(this,null,initialState)||this;}var _proto=ImmerStore.prototype;_proto.produce=function produce(recipe){this.setState(dist_immer_esm(this.getState(),function(draft){recipe(draft);// don't return the result - user should use store.setState() to override state\n}));};return ImmerStore;}(createStore/* Store */.y);\n;// CONCATENATED MODULE: ../packages/immer/src/createImmerStore.ts\nvar createImmerStore=function createImmerStore(initialState){return new ImmerStore(initialState);};\n// EXTERNAL MODULE: ../packages/core/src/api/constants.ts\nvar constants = __webpack_require__(3064);\n// EXTERNAL MODULE: ../packages/react/src/factories/createInjector.ts\nvar createInjector = __webpack_require__(3870);\n;// CONCATENATED MODULE: ../packages/immer/src/injectImmerStore.ts\nvar operation='injectImmerStore';var doSubscribe=function doSubscribe(instance,store){return store.subscribe({effects:function effects(_ref){var action=_ref.action,newState=_ref.newState,oldState=_ref.oldState;// Nothing to do if the state hasn't changed. Also, ignore state updates\n// during evaluation. TODO: Create an ecosystem-level flag to turn on\n// warning logging for state-updates-during-evaluation, since this may be\n// considered an anti-pattern.\nif(newState===oldState||instance.ecosystem._evaluationStack.isEvaluating(instance.keyHash)||(action==null?void 0:action.meta)===constants/* internalTypes.ignore */.P.ignore){return;}instance._scheduleEvaluation({newState:newState,oldState:oldState,operation:operation,reasons:[{action:action,newState:newState,oldState:oldState,operation:'dispatch',sourceType:'Store',type:'state changed'}],sourceType:'Injector',type:'state changed'},false);// run the scheduler synchronously after any store update\ninstance.ecosystem._scheduler.flush();}});};var injectImmerStore=(0,createInjector/* createInjector */.v)(operation,function(instance,state,config){var _config$subscribe;var subscribe=(_config$subscribe=config==null?void 0:config.subscribe)!=null?_config$subscribe:true;var hydration=instance.ecosystem._consumeHydration(instance);var store=createImmerStore(hydration!=null?hydration:state);var subscription=subscribe&&doSubscribe(instance,store);return{cleanup:subscription?function(){return subscription.unsubscribe();}:undefined,result:store,type:'@@zedux/immerStore'};},function(prevDescriptor,instance,state,config){var _config$subscribe2;var subscribe=(_config$subscribe2=config==null?void 0:config.subscribe)!=null?_config$subscribe2:true;var prevsubscribe=!!prevDescriptor.cleanup;if(prevsubscribe===subscribe)return prevDescriptor;// we were subscribed, now we're not\nif(!subscribe){prevDescriptor.cleanup==null?void 0:prevDescriptor.cleanup();prevDescriptor.cleanup=undefined;return prevDescriptor;}// we weren't subscribed, now we are\nvar subscription=doSubscribe(instance,prevDescriptor.result);prevDescriptor.cleanup=function(){return subscription.unsubscribe();};return prevDescriptor;});\n;// CONCATENATED MODULE: ../packages/immer/src/index.ts\n\n// EXTERNAL MODULE: ../packages/core/src/api/actionFactory.ts\nvar actionFactory = __webpack_require__(2808);\n;// CONCATENATED MODULE: ../packages/core/src/utils/actions.ts\n/**\n  Pulls the string action type out of an ActionFactory or returns\n  a given string action type as-is.\n*/var extractActionType=function extractActionType(reactable,method){// The reactable may be a literal action type string\nif(typeof reactable==='string')return reactable;if( true&&(typeof reactable!=='function'||typeof reactable.type!=='string')){var type=typeof reactable==='function'?\"function with invalid \\\"type\\\" property - \"+typeof reactable.type:typeof reactable;throw new TypeError(\"Zedux: \"+method+\" - reactable must be either a string or a function with a \\\"type\\\" property. Received \"+type);}return reactable.type;};/**\n  Pulls the string action types out of a list of (possibly) mixed\n  reactables and string action types.\n*/var extractActionTypes=function extractActionTypes(reactables,method){return reactables.map(function(reactable){return extractActionType(reactable,method);});};\n;// CONCATENATED MODULE: ../packages/core/src/api/createReducer.ts\n/**\n  Creates a new ReducerBuilder.\n\n  A ReducerBuilder is just a reducer with a special `.reducer()` method for\n  easily mapping action types to sub-reducers that handle them.\n*/var createReducer=function createReducer(initialState){var actionToReducersMap={};var reducer=function reducer(state,action){if(state===void 0){state=initialState;}var reducers=actionToReducersMap[action.type]||[];return runReducers(reducers,state,action);};reducer.reduce=function(reactable,subReducer){var method='ReducerBuilder.reduce()';var actionTypes=Array.isArray(reactable)?extractActionTypes(reactable,method):[extractActionType(reactable,method)];mapActionTypesToReducer(actionToReducersMap,actionTypes,subReducer);return reducer;};return reducer;};function mapActionTypesToReducer(map,actionTypes,consumer){actionTypes.forEach(function(actionType){if(!map[actionType]){map[actionType]=[];}map[actionType].push(consumer);});}function runReducers(reducers,state,action){return reducers.reduce(function(accumulatedState,reducer){return reducer(accumulatedState,action.payload,action);},state);}\n;// CONCATENATED MODULE: ../packages/core/src/api/MachineStore.ts\n/**\n * An extremely low-level Store class that represents a state machine. Don't\n * create this class yourself, use a helper such as @zedux/react's\n * `injectMachineStore()`\n */var MachineStore=/*#__PURE__*/function(_Store){(0,inheritsLoose/* default */.Z)(MachineStore,_Store);function MachineStore(initialState,states,initialContext,guard){var _this;_this=_Store.call(this,null,{context:initialContext,value:initialState})||this;_this.getContext=function(){return _this.getState().context;};_this.getValue=function(){return _this.getState().value;};_this.is=function(stateName){return _this.getState().value===stateName;};_this.send=function(eventName,meta){return _this.setState(function(currentState){var nextValue=_this.states[currentState.value][eventName];if(!nextValue||nextValue!=null&&nextValue.guard&&!nextValue.guard(currentState.context)||_this.guard&&!_this.guard(currentState,nextValue.name)){return currentState;}return{context:currentState.context,value:nextValue.name};},meta);};_this.setContext=function(context,meta){return _this.setState(function(state){return{context:typeof context==='function'?context(state.context):context,value:state.value};},meta);};_this.setContextDeep=function(partialContext,meta){return _this.setStateDeep(function(state){return{context:typeof partialContext==='function'?partialContext(state.context):partialContext};},meta);};_this.states=states;_this.guard=guard;return _this;}return MachineStore;}(createStore/* Store */.y);\n// EXTERNAL MODULE: ../packages/core/src/api/meta.ts\nvar meta = __webpack_require__(7159);\n// EXTERNAL MODULE: ../packages/core/src/api/is.ts\nvar is = __webpack_require__(9283);\n;// CONCATENATED MODULE: ../packages/core/src/index.ts\n\n;// CONCATENATED MODULE: ../packages/react/src/factories/ion.ts\nvar ion=function ion(key,get,config){return new Ion(key,get,config);};\n// EXTERNAL MODULE: ../packages/react/src/classes/EvaluationStack.ts\nvar EvaluationStack = __webpack_require__(2633);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomGetters.ts\n/**\n * injectAtomGetters\n *\n * An injector that returns an AtomGetters object. The returned AtomGetters\n * dynamically register dependencies for the current atom instance when called\n * synchronously during atom evaluation.\n *\n * ```ts\n * const exampleAtom = atom('example', () => {\n *   const {\xa0ecosystem, get, getInstance } = injectAtomGetters()\n *   const dynamicVal = get(myAtom) // registers a dynamic graph edge\n *   const instance = getInstance(myAtom) // registers a static graph edge\n *   const fromEcosystem = ecosystem.get(myAtom) // doesn't register anything\n *\n *   injectEffect(() => {\n *     const dynamicVal2 = get(myAtom) // doesn't register anything\n *     const instance2 = getInstance(myAtom) // doesn't register anything\n *     const fromEcosystem2 = ecosystem.get(myAtom) // doesn't register anything\n *   }, []) // no need to pass AtomGetters as deps; they're stable references\n * })\n * ```\n *\n * @see AtomGetters\n */var injectAtomGetters=function injectAtomGetters(){var instance=(0,EvaluationStack/* readInstance */.i)();return instance.ecosystem._evaluationStack.atomGetters;};\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstance.ts + 4 modules\nvar AtomInstance = __webpack_require__(4985);\n// EXTERNAL MODULE: ../packages/react/src/classes/atoms/AtomBase.ts\nvar AtomBase = __webpack_require__(3789);\n;// CONCATENATED MODULE: ../packages/react/src/classes/atoms/Ion.ts\nvar Ion=/*#__PURE__*/function(_AtomBase){(0,inheritsLoose/* default */.Z)(Ion,_AtomBase);function Ion(key,stateFactory,_config){var _this;_this=_AtomBase.call(this,key,function(){for(var _len=arguments.length,params=new Array(_len),_key=0;_key<_len;_key++){params[_key]=arguments[_key];}return stateFactory.apply(void 0,[injectAtomGetters()].concat(params));},_config)||this;_this._get=stateFactory;return _this;}var _proto=Ion.prototype;_proto._createInstance=function _createInstance(ecosystem,keyHash,params){return new AtomInstance/* AtomInstance */.p(ecosystem,this,keyHash,params);};_proto.getKeyHash=function getKeyHash(ecosystem,params){var base=this.key;if(!(params!=null&&params.length))return base;return base+\"-\"+ecosystem._idGenerator.hashParams(params,ecosystem.complexParams);};_proto.override=function override(newGet){return ion(this.key,newGet||this._get,this._config);};return Ion;}(AtomBase/* AtomBase */.H);\n// EXTERNAL MODULE: ../packages/react/src/classes/atoms/Atom.ts\nvar Atom = __webpack_require__(1968);\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstanceBase.ts\nvar AtomInstanceBase = __webpack_require__(4987);\n// EXTERNAL MODULE: ../packages/react/src/classes/AtomApi.ts\nvar AtomApi = __webpack_require__(2448);\n// EXTERNAL MODULE: ../packages/react/src/classes/Ecosystem.ts + 4 modules\nvar Ecosystem = __webpack_require__(5092);\n// EXTERNAL MODULE: ../packages/react/src/utils/plugin-actions.ts\nvar plugin_actions = __webpack_require__(3299);\n;// CONCATENATED MODULE: ../packages/react/src/classes/ZeduxPlugin.ts\nvar ZeduxPlugin=/**\n   * These actions should only be dispatched to an ecosystem's modBus\n   * store, so they don't need prefixes\n   */function ZeduxPlugin(_temp){var _ref=_temp===void 0?{}:_temp,_ref$initialMods=_ref.initialMods,initialMods=_ref$initialMods===void 0?[]:_ref$initialMods,registerEcosystem=_ref.registerEcosystem;this.modStore=(0,createStore/* createStore */.M)(null,initialMods);this.registerEcosystem=registerEcosystem||function(){};};ZeduxPlugin.actions=plugin_actions/* pluginActions */.V;\n;// CONCATENATED MODULE: ../packages/react/src/classes/index.ts\n// this .. has to be imported before Atom or the build breaks :exploding_head:\n\n// EXTERNAL MODULE: ../packages/react/src/hooks/useEcosystem.ts\nvar useEcosystem = __webpack_require__(6215);\n;// CONCATENATED MODULE: ../packages/react/src/components/AtomInstanceProvider.tsx\nvar AtomInstanceProvider=function AtomInstanceProvider(_ref){var children=_ref.children,instance=_ref.instance,instances=_ref.instances;var ecosystem=(0,useEcosystem/* useEcosystem */.l)();if( true&&!instance&&!instances){throw new Error('Zedux: AtomInstanceProvider requires either an `instance` or `instances` prop');}var allInstances=instances||[instance];if(allInstances.length===1){var _context=ecosystem._getReactContext(allInstances[0].atom);return/*#__PURE__*/react.createElement(_context.Provider,{value:allInstances[0]},children);}var parentInstance=allInstances[0],childInstances=allInstances.slice(1);var context=ecosystem._getReactContext(parentInstance.atom);return/*#__PURE__*/react.createElement(context.Provider,{value:parentInstance},/*#__PURE__*/react.createElement(AtomInstanceProvider,{instances:childInstances},children));};\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(3366);\n// EXTERNAL MODULE: ../packages/react/src/factories/createEcosystem.ts\nvar createEcosystem = __webpack_require__(2662);\n// EXTERNAL MODULE: ../packages/react/src/utils/general.ts\nvar general = __webpack_require__(395);\n;// CONCATENATED MODULE: ../packages/react/src/components/EcosystemProvider.tsx\nvar EcosystemProvider_excluded=[\"children\",\"ecosystem\"];/**\n * EcosystemProvider\n *\n * Creates an atom ecosystem. The behavior of atoms inside this EcosystemProvider can\n * be configured with props passed here.\n */var EcosystemProvider=function EcosystemProvider(_ref){var children=_ref.children,passedEcosystem=_ref.ecosystem,ecosystemConfig=(0,objectWithoutPropertiesLoose/* default */.Z)(_ref,EcosystemProvider_excluded);var _useMemo=(0,react.useMemo)(function(){var resolvedEcosystem=passedEcosystem||(0,createEcosystem/* createEcosystem */.q)(Object.assign({destroyOnUnmount:true},ecosystemConfig));return[function(){resolvedEcosystem._incrementRefCount();return function(){return resolvedEcosystem._decrementRefCount();};},function(){return resolvedEcosystem;}];},[ecosystemConfig.id,passedEcosystem]),subscribe=_useMemo[0],getSnapshot=_useMemo[1];// don't pass other vals; just get snapshot when these change\nvar ecosystem=(0,react.useSyncExternalStore)(subscribe,getSnapshot,getSnapshot);return/*#__PURE__*/react.createElement(general/* ecosystemContext.Provider */.zs.Provider,{value:ecosystem.id},children);};\n;// CONCATENATED MODULE: ../packages/react/src/components/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/factories/api.ts\nvar api = __webpack_require__(552);\n// EXTERNAL MODULE: ../packages/react/src/factories/atom.ts\nvar atom = __webpack_require__(5965);\n;// CONCATENATED MODULE: ../packages/react/src/factories/index.ts\n\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomConsumer.ts\nvar useAtomConsumer=function useAtomConsumer(atom,defaultParams){var ecosystem=(0,useEcosystem/* useEcosystem */.l)();var instance=(0,react.useContext)(ecosystem._getReactContext(atom));if(!defaultParams||(0,is.is)(instance,AtomInstanceBase/* AtomInstanceBase */.T)){if( true&&instance.activeState==='Destroyed'){throw new Error(\"Zedux: useAtomConsumer - A destroyed atom instance was provided with key \\\"\"+instance.keyHash+\"\\\". This is not supported. Provide an active atom instance instead.\");}return instance;}if(typeof defaultParams==='boolean'){if(true){throw new ReferenceError(\"Zedux: useAtomConsumer - No atom instance was provided for atom \\\"\"+atom.key+\"\\\".\");}else{}}return ecosystem.getInstance(atom,defaultParams);};\n// EXTERNAL MODULE: ../packages/react/src/hooks/useAtomInstance.ts\nvar useAtomInstance = __webpack_require__(4538);\n// EXTERNAL MODULE: ../packages/react/src/hooks/useReactComponentId.ts\nvar useReactComponentId = __webpack_require__(6559);\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomSelector.ts\nvar glob=typeof globalThis!=='undefined'&&globalThis||{};var INVALIDATE_REACT=\"INVALIDATE_REACT_\"+Math.random();var OPERATION='useAtomSelector';/**\n * If we detect an inline selector using these not-exactly-cheap checks, we can\n * prevent the graph from changing by swapping out its reference and\n * invalidating the cache. It's unfortunately probably not a good trade-off\n * performance-wise, but it's necessary to prevent React's render-loop-of-death\n * in `useSyncExternalStore` when both the subscribe reference and the selector\n * result change every render. Simple reproduction:\n *\n * ```tsx\n * // subscribe ref and getSnapshot result ref change every render = death\n * useSyncExternalStore(() => () => {}, () => ({}))\n * ```\n *\n * It's also better dev-X when the graph doesn't change unnecessarily.\n *\n * Inline selectors that haven't _actually_ changed must be exactly the same,\n * stringified. The stringified `resultsComparator` must also be exactly the\n * same. `argsComparator` doesn't matter since it only runs at the hook level.\n *\n * Importantly, an inline selector's graph node must have exactly one dependent\n * too - the React component that called `useAtomSelector(inlineSelector)`.\n */var isRefDifferent=function isRefDifferent(ecosystem,newSelector,cacheRef){var _ecosystem$_graph$nod;if(!cacheRef.current)return true;var oldSelector=cacheRef.current.selectorRef;if(newSelector===oldSelector)return false;var dependents=(_ecosystem$_graph$nod=ecosystem._graph.nodes[cacheRef.current.cacheKey])==null?void 0:_ecosystem$_graph$nod.dependents;if(dependents&&Object.keys(dependents).length!==1)return true;var newIsFunction=typeof newSelector==='function';var oldIsFunction=typeof oldSelector==='function';if(newIsFunction!==oldIsFunction)return true;var newKey=ecosystem.selectorCache._getIdealCacheKey(newSelector);var oldKey=ecosystem.selectorCache._getIdealCacheKey(oldSelector);if(newKey!==oldKey)return true;if(!newIsFunction&&!oldIsFunction&&newSelector.resultsComparator!==oldSelector.resultsComparator){var _newSelector$resultsC,_oldSelector$resultsC;var newResultsComparatorStr=((_newSelector$resultsC=newSelector.resultsComparator)==null?void 0:_newSelector$resultsC.toString())||'';var oldResultsComparatorStr=((_oldSelector$resultsC=oldSelector.resultsComparator)==null?void 0:_oldSelector$resultsC.toString())||'';if(newResultsComparatorStr!==oldResultsComparatorStr)return true;}// last thing to compare is the selectors themselves\nif(newIsFunction&&oldIsFunction){return newSelector.toString()!==oldSelector.toString();}// we know they're both objects at this point\nif(newSelector.selector===oldSelector.selector){return false;}var newRefStr=newSelector.selector.toString();var oldRefStr=oldSelector.selector.toString();return newRefStr!==oldRefStr;};/**\n * Get the result of running an AtomSelector in the current ecosystem.\n *\n * If the exact selector function (or object if it's an AtomSelectorConfig\n * object) reference + params combo has been used in this ecosystem before,\n * return the cached result.\n *\n * Register a dynamic graph dependency between this React component (as a new\n * external node) and the AtomSelector.\n */var useAtomSelector=function useAtomSelector(selectorOrConfig){var _cacheRef$current,_cacheRef$current2,_cacheRef$current3,_cacheRef$current4;var ecosystem=(0,useEcosystem/* useEcosystem */.l)();var dependentKey=(0,useReactComponentId/* useReactComponentId */.$)();var cacheRef=(0,react.useRef)();var skipState=(0,react.useRef)();var isConfig=typeof selectorOrConfig!=='function';for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argsChanged=isConfig&&selectorOrConfig.argsComparator&&(_cacheRef$current=cacheRef.current)!=null&&_cacheRef$current.args?selectorOrConfig.argsComparator(args,cacheRef.current.args):(0,general/* haveDepsChanged */.EM)((_cacheRef$current2=cacheRef.current)==null?void 0:_cacheRef$current2.args,args);var resolvedArgs=argsChanged?args:((_cacheRef$current3=cacheRef.current)==null?void 0:_cacheRef$current3.args)||[];var hasRefChanged=selectorOrConfig!==((_cacheRef$current4=cacheRef.current)==null?void 0:_cacheRef$current4.selectorRef);var isDifferent=argsChanged||isRefDifferent(ecosystem,selectorOrConfig,cacheRef);if(isDifferent||!cacheRef.current){// yes, this mutation is fine\ncacheRef.current=ecosystem.selectorCache.getCache(selectorOrConfig,resolvedArgs);}var cache=cacheRef.current;var _useMemo=(0,react.useMemo)(function(){var isInvalidated=false;return[function(onStoreChange){var _ecosystem$_graph$nod2;// we have to fire an extra update on subscribe in test envs because\n// there's a bug in React (but only in test environments) where\n// useEffects in child components run before useSyncExternalStore\n// subscribe is called in the parent component.\nif(glob.IS_REACT_ACT_ENVIRONMENT)onStoreChange();// this function must be idempotent\nif(!((_ecosystem$_graph$nod2=ecosystem._graph.nodes[cache.cacheKey])!=null&&_ecosystem$_graph$nod2.dependents[dependentKey])){// React can unmount other components before calling this subscribe\n// function but after we got the cache above. Re-get the cache\n// if such unmountings destroyed it in the meantime:\nif(cache.isDestroyed){;cacheRef.current=general/* destroyed */.lv;isInvalidated=true;onStoreChange();return function(){};// let the next render register the graph edge\n}ecosystem._graph.addEdge(dependentKey,cache.cacheKey,OPERATION,general/* External */.RQ,function(signal,newState){if(newState===skipState.current)return;if(signal==='Destroyed'){// see comment in useAtomInstance about why returning\n// a nonsense value from `getSnapshot` works\n;cacheRef.current=general/* destroyed */.lv;isInvalidated=true;}onStoreChange();});}return function(){// I don't think we need to unset any of the cache refs here\necosystem._graph.removeEdge(dependentKey,cache.cacheKey);};},function(){return isInvalidated?INVALIDATE_REACT:cache.result;}];},[ecosystem,cache]),subscribe=_useMemo[0],getSnapshot=_useMemo[1];// if ref changed but is clearly the \"same\" selector, swap out the ref and\n// invalidate the cache\nif(hasRefChanged&&!isDifferent){ecosystem.selectorCache._swapRefs(cache.selectorRef,selectorOrConfig,resolvedArgs);// prevent state update loop if new selector ref just returned a new result:\nskipState.current=cache.result;}return (0,react.useSyncExternalStore)(subscribe,getSnapshot,getSnapshot);};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomState.ts\nvar useAtomState=function useAtomState(atom,params,config){if(config===void 0){config={operation:'useAtomState'};}var instance=(0,useAtomInstance/* useAtomInstance */.Q)(atom,params,Object.assign({},config,{subscribe:true}));return[instance.getState(),instance._infusedSetter];};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/useAtomValue.ts\nvar useAtomValue=function useAtomValue(atom,params,config){if(config===void 0){config={operation:'useAtomValue'};}var instance=(0,useAtomInstance/* useAtomInstance */.Q)(atom,params,Object.assign({},config,{subscribe:true}));return instance.getState();};\n;// CONCATENATED MODULE: ../packages/react/src/hooks/index.ts\n\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomInstance.ts\nvar defaultOperation='injectAtomInstance';/**\n * injectAtomInstance\n *\n * Creates an atom instance for the passed atom based on the passed params. If\n * an instance has already been created for the passed params, reuses the\n * existing instance.\n *\n * Registers a static graph dependency on the atom instance. This means atoms\n * that use this injector will *not* reevaluate when this atom instance's state\n * changes.\n *\n * Pass false as the 4th param to prevent this graph dependency from being\n * registered. Useful when you need to control the graph dependency manually.\n * `injectAtomSelector` does this internally.\n *\n * @param atom The atom to instantiate or reuse an instantiation of.\n * @param params The params for generating the instance's key.\n * @param operation The operation name (e.g. name of the injector function)\n * that's triggering this graph dependency. If you're using this injector\n * directly in an atom, it's fine to omit this parameter.\n * @returns An atom instance, keyed based on the passed params.\n */var injectAtomInstance=(0,createInjector/* createInjector */.v)(defaultOperation,function(instance,atom,params,config){var injectedInstance=instance.ecosystem._evaluationStack.atomGetters.getInstance(atom,params,[config!=null&&config.subscribe?0:general/* Static */.qG,(config==null?void 0:config.operation)||defaultOperation]);return{result:injectedInstance,type:general/* prefix */.O4+\"/atom\"};},function(prevDescriptor,instance,atom,params,config){// make sure the dependency gets registered for this evaluation\nvar injectedInstance=instance.ecosystem._evaluationStack.atomGetters.getInstance(atom,params,[config!=null&&config.subscribe?0:general/* Static */.qG,(config==null?void 0:config.operation)||defaultOperation]);prevDescriptor.result=injectedInstance;return prevDescriptor;});\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomSelector.ts\nvar injectAtomSelector=function injectAtomSelector(selectable){var _instance$ecosystem$_;var instance=(0,EvaluationStack/* readInstance */.i)();for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}return(_instance$ecosystem$_=instance.ecosystem._evaluationStack.atomGetters).select.apply(_instance$ecosystem$_,[selectable].concat(args));};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomState.ts\nvar injectAtomState=function injectAtomState(atom,params){var instance=injectAtomInstance(atom,params,{operation:'injectAtomState',subscribe:true});var setState=function setState(settable,meta){return instance.setState(settable,meta);};Object.assign(setState,instance.exports);return[instance.store.getState(),setState];};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectAtomValue.ts\nvar injectAtomValue=function injectAtomValue(atom,params){var instance=injectAtomInstance(atom,params,{operation:'injectAtomValue',subscribe:true});return instance.store.getState();};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectMemo.ts\nvar injectMemo=(0,createInjector/* createInjector */.v)('injectMemo',function(instance,valueFactory,deps){return{type:general/* prefix */.O4+\"/memo\",deps:deps,result:valueFactory()};},function(prevDescriptor,instance,valueFactory,deps){var depsHaveChanged=(0,general/* haveDepsChanged */.EM)(prevDescriptor.deps,deps);var result=depsHaveChanged?valueFactory():prevDescriptor.result;prevDescriptor.deps=deps;prevDescriptor.result=result;return prevDescriptor;});\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectCallback.ts\nvar injectCallback=function injectCallback(callback,deps){return injectMemo(function(){return callback;},deps);};\n// EXTERNAL MODULE: ../packages/react/src/injectors/injectEffect.ts\nvar injectEffect = __webpack_require__(8723);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectInvalidate.ts\nvar injectInvalidate=function injectInvalidate(){var instance=(0,EvaluationStack/* readInstance */.i)();return function(){return instance.invalidate('injectInvalidate','Injector');};};\n// EXTERNAL MODULE: ../packages/react/src/injectors/injectStore.ts\nvar injectStore = __webpack_require__(5684);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectMachineStore.ts\n/**\n * Create a MachineStore. Pass a statesFactory\n *\n * The first state in the state list returned from your statesFactory will\n * become the initial state (`.value`) of the store.\n *\n * Registers an effect that listens to all store changes and calls the\n * configured listeners appropriately.\n *\n * ```ts\n * const store = injectMachineStore(state => [\n *   state('a')\n *     .on('next', 'b', localGuard)\n *     .onEnter(enterListener)\n *     .onLeave(leaveListener),\n *   state('b').on('next', 'a')\n * ], initialContext, { guard, onTransition })\n * ```\n *\n * Set a universal transition guard via the 3rd `config` object param. This\n * guard will be called every time a valid transition is about to occur. It will\n * be called with the current `.context` value and should return a boolean.\n * Return true to allow the transition, or any falsy value to deny it.\n *\n * Set a universal `onTransition` listener via the 3rd `config` object param.\n * This listener will be called every time the machine transitions to a new\n * state (after the state is updated). It will be called with 2 params: The\n * current MachineStore and the storeEffect of the action that transitioned the\n * store. For example, use `storeEffect.oldState.value` to see what state the\n * machine just transitioned from.\n *\n * @param statesFactory Required. A function. Use the received state factory to\n * create a list of states for the machine and specify their transitions,\n * guards, and listeners.\n * @param initialContext Optional. An object or undefined. Will be set as the\n * initial `.context` value of the machine store's state.\n * @param config Optional. An object with 2 additional properties: `guard` and\n * `onTransition`.\n */var injectMachineStore=(0,createInjector/* createInjector */.v)('injectMachineStore',function(instance){var _hydration$value,_hydration$context;for(var _len=arguments.length,_ref=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){_ref[_key-1]=arguments[_key];}var statesFactory=_ref[0],initialContext=_ref[1],config=_ref[2];var enterHooks={};var leaveHooks={};var states={};var createState=function createState(stateName){var state={on:function on(eventName,nextState,guard){if(!states[stateName]){states[stateName]={};}if(!states[nextState]){states[nextState]={};}states[stateName][eventName]={name:nextState,guard:guard};return state;},onEnter:function onEnter(callback){if(!enterHooks[stateName]){enterHooks[stateName]=[];}enterHooks[stateName].push(callback);return state;},onLeave:function onLeave(callback){if(!leaveHooks[stateName]){leaveHooks[stateName]=[];}leaveHooks[stateName].push(callback);return state;},stateName:stateName};return state;};var _statesFactory=statesFactory(createState),initialState=_statesFactory[0];var hydration=(config==null?void 0:config.hydrate)&&instance.ecosystem._consumeHydration(instance);var store=new MachineStore((_hydration$value=hydration==null?void 0:hydration.value)!=null?_hydration$value:initialState.stateName,states,(_hydration$context=hydration==null?void 0:hydration.context)!=null?_hydration$context:initialContext,config==null?void 0:config.guard);var subscription=store.subscribe({effects:function effects(storeEffect){var newState=storeEffect.newState,oldState=storeEffect.oldState;if(newState.value===(oldState==null?void 0:oldState.value))return;if(oldState&&leaveHooks[oldState.value]){leaveHooks[oldState.value].forEach(function(callback){return callback(store,storeEffect);});}if(enterHooks[newState.value]){enterHooks[newState.value].forEach(function(callback){return callback(store,storeEffect);});}if(config!=null&&config.onTransition){config.onTransition(store,storeEffect);}}});var updaterSub=(config==null?void 0:config.subscribe)&&(0,injectStore/* doSubscribe */.n)(instance,store);var currentState=store.getState();if(enterHooks[currentState.value]){enterHooks[currentState.value].forEach(function(callback){return callback(store,{newState:currentState,store:store});});}var descriptor={cleanup:function cleanup(){subscription.unsubscribe();descriptor.cleanupUpdater==null?void 0:descriptor.cleanupUpdater();},result:store,type:general/* prefix */.O4+\"/machineStore\"};if(updaterSub){descriptor.cleanupUpdater=function(){return updaterSub.unsubscribe();};}return descriptor;},function(prevDescriptor,instance){var _config$subscribe;for(var _len2=arguments.length,_ref2=new Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){_ref2[_key2-2]=arguments[_key2];}var config=_ref2[2];var subscribe=(_config$subscribe=config==null?void 0:config.subscribe)!=null?_config$subscribe:true;var prevsubscribe=!!prevDescriptor.cleanupUpdater;if(prevsubscribe===subscribe)return prevDescriptor;// we were subscribed, now we're not\nif(!subscribe){prevDescriptor.cleanupUpdater==null?void 0:prevDescriptor.cleanupUpdater();prevDescriptor.cleanupUpdater=undefined;return prevDescriptor;}// we weren't subscribed, now we are\nvar subscription=(0,injectStore/* doSubscribe */.n)(instance,prevDescriptor.result);prevDescriptor.cleanupUpdater=function(){return subscription.unsubscribe();};return prevDescriptor;});\n// EXTERNAL MODULE: ../packages/core/src/utils/general.ts\nvar utils_general = __webpack_require__(8487);\n// EXTERNAL MODULE: ../packages/react/src/utils/promiseUtils.ts\nvar promiseUtils = __webpack_require__(1881);\n// EXTERNAL MODULE: ../packages/react/src/injectors/injectRef.ts\nvar injectRef = __webpack_require__(7361);\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectPromise.ts\nvar injectPromise_excluded=[\"dataOnly\",\"initialState\"];/**\n * Create a memoized promise reference. Kicks off the promise immediately\n * (unlike injectEffect which waits a tick). Creates a store to track promise\n * state. This store's state shape is based off React Query:\n *\n * ```ts\n * {\n *   data?: <promise result type>\n *   error?: Error\n *   isError: boolean\n *   isLoading: boolean\n *   isSuccess: boolean\n *   status: 'error' | 'loading' | 'success'\n * }\n * ```\n *\n * Returns an Atom API with `.store` and `.promise` set.\n *\n * The 2nd `deps` param is just like `injectMemo` - these deps determine when\n * the promise's reference should change.\n *\n * The 3rd `config` param can take the following options:\n *\n * - `dataOnly`: Set this to true to prevent the store from tracking promise\n *   status and make your promise's `data` the entire state.\n *\n * - `initialState`: Set the initial state of the store (e.g. a placeholder\n *   value before the promise resolves)\n *\n * - store config: Any other config options will be passed directly to\n *   `injectStore`'s config. For example, pass `subscribe: false` to\n *   prevent the store from reevaluating the current atom on update.\n *\n * ```ts\n * const promiseApi = injectPromise(async () => {\n *   const response = await fetch(url)\n *   return await response.json()\n * }, [url], {\n *   dataOnly: true,\n *   initialState: '',\n *   subscribe: false\n * })\n * ```\n */var injectPromise=function injectPromise(promiseFactory,deps,_temp){var _ref=_temp===void 0?{}:_temp,dataOnly=_ref.dataOnly,initialState=_ref.initialState,storeConfig=(0,objectWithoutPropertiesLoose/* default */.Z)(_ref,injectPromise_excluded);var refs=(0,injectRef/* injectRef */.i)({});var store=(0,injectStore/* injectStore */.F)(dataOnly?initialState:(0,promiseUtils/* getInitialPromiseState */.KF)(initialState),storeConfig);// setting a ref during evaluation is perfectly fine in Zedux\nrefs.current.promise=injectMemo(function(){var prevController=refs.current.controller;var nextController=typeof AbortController!=='undefined'?new AbortController():undefined;refs.current.controller=nextController;var promise=promiseFactory(refs.current.controller);if( true&&typeof(promise==null?void 0:promise.then)!=='function'){throw new TypeError(\"Zedux: injectPromise expected callback to return a promise. Received \"+(0,utils_general/* detailedTypeof */.px)(promise));}if(promise===refs.current.promise)return refs.current.promise;prevController==null?void 0:prevController.abort==null?void 0:prevController.abort('updated');if(!dataOnly){// preserve previous data and error using setStateDeep:\nstore.setStateDeep((0,promiseUtils/* getInitialPromiseState */.KF)());}promise.then(function(data){if(nextController!=null&&nextController.signal.aborted)return;store.setState(dataOnly?data:(0,promiseUtils/* getSuccessPromiseState */.W2)(data));}).catch(function(error){if(dataOnly||nextController!=null&&nextController.signal.aborted)return;// preserve previous data using setStateDeep:\nstore.setStateDeep((0,promiseUtils/* getErrorPromiseState */.bG)(error));});return promise;},deps);(0,injectEffect/* injectEffect */.o)(function(){return function(){var _refs$current$control;return(_refs$current$control=refs.current.controller)==null?void 0:_refs$current$control.abort==null?void 0:_refs$current$control.abort('destroyed');};},[]);return (0,api/* api */.h)(store).setPromise(refs.current.promise);};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/injectWhy.ts\n/**\n * A fake injector (can actually be used in loops and if statements). An alias\n * for:\n *\n * ```ts\n * const { ecosystem } = injectAtomGetters()\n * const reasons = ecosystem.why()\n * ```\n */var injectWhy=function injectWhy(){return (0,EvaluationStack/* readInstance */.i)()._nextEvaluationReasons;};\n;// CONCATENATED MODULE: ../packages/react/src/injectors/index.ts\n\n// EXTERNAL MODULE: ../packages/react/src/store/index.ts\nvar store = __webpack_require__(825);\n;// CONCATENATED MODULE: ../packages/react/src/index.ts\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js\nvar taggedTemplateLiteralLoose = __webpack_require__(1880);\n// EXTERNAL MODULE: ./src/ssc/index.tsx\nvar ssc = __webpack_require__(8880);\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/LogActions.tsx\nvar _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;var options={AtomState:'Atom State',SelectorCache:'Selector Cache',Ecosystem:'Ecosystem',Graph:'Graph',Scope:'Sandbox Scope'};var Backdrop=ssc/* default.div */.ZP.div(_templateObject||(_templateObject=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  height: 100%;\\n  left: 0;\\n  position: fixed;\\n  top: 0;\\n  width: 100%;\\n  z-index: 1000000;\\n\"])));var Button=ssc/* default.button */.ZP.button(_templateObject2||(_templateObject2=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: none;\\n  border: none;\\n  color: #fff;\\n  cursor: pointer;\\n\"])));var Dropdown=ssc/* default.button */.ZP.button(_templateObject3||(_templateObject3=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  align-items: center;\\n  background: transparent;\\n  border: none;\\n  color: #fff;\\n  cursor: pointer;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  font-size: inherit;\\n  gap: 0.5rem;\\n\"])));var Option=ssc/* default.span */.ZP.span(_templateObject4||(_templateObject4=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #ffa359;\\n  border-radius: 5px;\\n  box-shadow: 5px 5px 8px #0004;\\n  cursor: pointer;\\n  padding: 0.2rem 1rem;\\n  white-space: nowrap;\\n  transform: scale(1);\\n  transition: transform 0.1s;\\n\\n  &:hover {\\n    transform: scale(1.05);\\n  }\\n\"])));var Options=ssc/* default.span */.ZP.span(_templateObject5||(_templateObject5=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  display: flex;\\n  flex-flow: column nowrap;\\n  gap: 1rem;\\n  left: 50%;\\n  position: absolute;\\n  transform: translateX(-50%);\\n  top: calc(100% + 1rem);\\n  z-index: 1000001;\\n\"])));var Wrapper=ssc/* default.span */.ZP.span(_templateObject6||(_templateObject6=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  border: 1px solid #fff;\\n  border-radius: 3px;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  font-size: 0.8em;\\n  position: relative;\\n\\n  > button {\\n    padding: 2px 0.8rem;\\n\\n    &:hover {\\n      background: #fff4;\\n    }\\n  }\\n\"])));var CaretDownIcon=function CaretDownIcon(){return/*#__PURE__*/react.createElement(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"12\",height:\"8\",viewBox:\"0 0 12 8\"},/*#__PURE__*/react.createElement(\"path\",{fill:\"transparent\",stroke:\"#fff\",d:\"M0 0 L 6 8 L 12 0\"}));};var LogActions=function LogActions(_ref){var ecosystemIdRef=_ref.ecosystemIdRef,Zedux=_ref.Zedux;var _useState=(0,react.useState)(false),isOpen=_useState[0],setIsOpen=_useState[1];var _useState2=(0,react.useState)(),lastSelection=_useState2[0],setLastSelection=_useState2[1];var actions=(0,react.useMemo)(function(){return{AtomState:function AtomState(){console.group('Current state of all atom instances:');console.log(Zedux.getEcosystem(ecosystemIdRef.current).dehydrate({transform:false}));console.groupEnd();},Ecosystem:function Ecosystem(){console.group('Ecosystem:');console.log(Zedux.getEcosystem(ecosystemIdRef.current));console.groupEnd();},Graph:function Graph(){var ecosystem=Zedux.getEcosystem(ecosystemIdRef.current);console.group('Current graph:');console.log('Flat:',ecosystem.viewGraph('flat'));console.log('Top-Down:',ecosystem.viewGraph('top-down'));console.log('Bottom-Up:',ecosystem.viewGraph('bottom-up'));console.groupEnd();},SelectorCache:function SelectorCache(){console.group('Cached selectors:');console.log(Zedux.getEcosystem(ecosystemIdRef.current).selectorCache.inspectItemValues());console.groupEnd();},Scope:function Scope(){console.group('Exports available in the sandbox:');console.log('Zedux:',Zedux);console.log('React:',react);console.groupEnd();}};},[Zedux]);return/*#__PURE__*/react.createElement(react.Fragment,null,isOpen&&/*#__PURE__*/react.createElement(Backdrop,{onClick:function onClick(){return setIsOpen(false);}}),/*#__PURE__*/react.createElement(Wrapper,null,lastSelection&&/*#__PURE__*/react.createElement(Button,{onClick:function onClick(){return actions[lastSelection]();}},\"Log \",options[lastSelection]),/*#__PURE__*/react.createElement(Dropdown,{onClick:function onClick(){return setIsOpen(true);}},!lastSelection&&/*#__PURE__*/react.createElement(\"span\",null,\"Log\"),/*#__PURE__*/react.createElement(CaretDownIcon,null)),isOpen&&/*#__PURE__*/react.createElement(Options,{onClick:function onClick(){setIsOpen(false);}},Object.keys(options).map(function(option){return/*#__PURE__*/react.createElement(Option,{key:option,onClick:function onClick(){setLastSelection(option);actions[option]();}},options[option]);}))));};\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/editorUtils.ts\nvar openingChars=['{','[','(','<'];var closingChars=['}',']',')','>'];var editorUtils_onKeyDown=function onKeyDown(editor,event){var _lineText$match;if(event.key==='Tab'){event.preventDefault();editor.insertText('  ');return;}if(event.key==='{'){event.preventDefault();editor.insertText('{}');Transforms.move(editor,{distance:1,reverse:true,unit:'character'});return;}if(event.key==='['){event.preventDefault();editor.insertText('[]');Transforms.move(editor,{distance:1,reverse:true,unit:'character'});return;}if(event.key==='('){event.preventDefault();editor.insertText('()');Transforms.move(editor,{distance:1,reverse:true,unit:'character'});return;}var domRange=editor.selection&&ReactEditor.toDOMRange(editor,editor.selection);if(!domRange)return;var line=domRange.startContainer.parentElement;while(line.dataset.slateNode!=='text'){line=line.parentElement;}var lineText=line.innerText;var spaces=((_lineText$match=lineText.match(/^ +/))==null?void 0:_lineText$match[0])||'';var hasSelection=domRange.startOffset!==domRange.endOffset;var endOffset=hasSelection?domRange.endOffset:editor.selection.focus.offset;var startOffset=hasSelection?domRange.startOffset:endOffset;var prevChar=lineText[startOffset-1]||'';var nextChar=lineText[endOffset]||'';if(event.key==='}'&&nextChar==='}'||event.key===']'&&nextChar===']'||event.key===')'&&nextChar===')'||event.key==='\"'&&nextChar==='\"'||event.key===\"'\"&&nextChar===\"'\"||event.key==='`'&&nextChar==='`'){event.preventDefault();Transforms.move(editor,{distance:1,unit:'character'});return;}if(event.key==='Enter'){event.preventDefault();editor.insertBreak();if(openingChars.includes(prevChar)){editor.insertText(spaces+\"  \");if(closingChars.includes(nextChar)){editor.insertBreak();editor.insertText(spaces);Transforms.move(editor,{distance:spaces.length+1,reverse:true,unit:'character'});}return;}editor.insertText(spaces);return;}};var scrollSelectionIntoView=function scrollSelectionIntoView(editor,domRange){var el=domRange.startContainer.parentElement;var editorEl=domRange.startContainer.parentElement;while(!editorEl.dataset.slateEditor){editorEl=editorEl.parentElement;}var charWidth=el.getBoundingClientRect().width/el.innerText.length;var prevPos=editorEl.scrollLeft;domRange.startContainer.parentElement.scrollIntoView({block:'nearest'});if(!charWidth){// this means the current line is empty - set scrollPos to the far left\neditorEl.scrollLeft=0;return;}var width=editorEl.clientWidth;var charNum=editor.selection.focus.offset;var offset=charNum*charWidth;var BUFFER=24;if(offset+(BUFFER+8)-width>prevPos){// move right\neditorEl.scrollLeft=offset+(BUFFER+8)-width;}else if(offset-(BUFFER-8)<prevPos){// move left\neditorEl.scrollLeft=offset-(BUFFER-8);}else{editorEl.scrollLeft=prevPos;}};\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/styles.ts\nvar styles_templateObject,styles_templateObject2,styles_templateObject3,styles_templateObject4,styles_templateObject5,styles_templateObject6,_templateObject7,_templateObject8,_templateObject9;var EditorWrapper=ssc/* default.div */.ZP.div(styles_templateObject||(styles_templateObject=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  display: flex;\\n  flex-flow: row nowrap;\\n  font-family: 'Source Code Pro', monospace;\\n  font-size: var(--ifm-code-font-size);\\n  letter-spacing: -0.2px;\\n  max-height: 500px;\\n  overflow-y: auto;\\n\"])));var Gutter=ssc/* default.div */.ZP.div(styles_templateObject2||(styles_templateObject2=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  border-bottom-left-radius: 12px;\\n  display: flex;\\n  flex-flow: column nowrap;\\n  height: fit-content;\\n  min-height: 100%;\\n  min-width: 1.7rem;\\n  padding: 0.5rem 5px 1rem;\\n  text-align: right;\\n\\n  > span {\\n    color: #fffb;\\n    transform: scale(0.8);\\n    white-space: nowrap;\\n  }\\n\"])));var Header=ssc/* default.div */.ZP.div(styles_templateObject3||(styles_templateObject3=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  align-items: center;\\n  background: #ffa359;\\n  border-radius: 12px 12px 0 0;\\n  color: #fff;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  gap: 1rem;\\n  grid-column: span 2;\\n  padding: 0.5rem;\\n\\n  > img {\\n    filter: brightness(0) invert(1);\\n    font-size: 0;\\n    height: 1rem;\\n  }\\n\"])));var HeaderActions=ssc/* default.span */.ZP.span(styles_templateObject4||(styles_templateObject4=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  display: flex;\\n  flex-flow: row nowrap;\\n  gap: 1rem;\\n\"])));var HeaderText=ssc/* default.span */.ZP.span(styles_templateObject5||(styles_templateObject5=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  flex: 1;\\n\"])));var ResetButton=ssc/* default.button */.ZP.button(styles_templateObject6||(styles_templateObject6=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #fff;\\n  border: none;\\n  border-radius: 3px;\\n  color: #ff4545;\\n  cursor: pointer;\\n  font-size: 0.8em;\\n  padding: 2px 1rem;\\n\\n  &:hover {\\n    background: #fffb;\\n  }\\n\"])));var Result=ssc/* default.div */.ZP.div(_templateObject7||(_templateObject7=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #fff;\\n  border-bottom-right-radius: 12px;\\n  box-shadow: inset 4px 4px 6px #888;\\n  color: #1c1e21;\\n  color-scheme: light;\\n  max-height: 500px;\\n  overflow: auto;\\n  padding: 0.5rem;\\n  position: relative;\\n\"])));var StyledEditable=(0,ssc/* default */.ZP)(Editable)(_templateObject8||(_templateObject8=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #2b313a;\\n  flex: 1;\\n  height: fit-content;\\n  min-height: 100%;\\n  overflow-x: auto;\\n  padding: 0.5rem 0.5rem 1rem;\\n  white-space: pre !important;\\n\\n  > div {\\n    min-width: fit-content;\\n    padding-right: 0.5rem;\\n  }\\n\\n  .token {\\n    color: #d7dfec;\\n\\n    \",\"\\n\\n    &.comment {\\n      font-style: italic;\\n    }\\n\\n    &.keyword {\\n      color: #e08a57;\\n    }\\n  }\\n\"])),function(_ref){var $sscProps=_ref.$sscProps;return $sscProps.styles.map(function(_ref2){var style=_ref2.style,types=_ref2.types;return types.map(function(type){return\"&.\"+type+\" { \"+(0,ssc/* css */.iv)(style/* Prism font-weight type is wrong */)+\" }\";}).join('\\n');}).join('\\n');});var styles_Wrapper=ssc/* default.section */.ZP.section(_templateObject9||(_templateObject9=(0,taggedTemplateLiteralLoose/* default */.Z)([\"\\n  background: #474c54;\\n  border-radius: 12px;\\n  box-shadow: 10px 10px 7px rgba(0, 0, 0, 0.4);\\n  display: grid;\\n  grid-template-columns: minmax(180px, 9fr) minmax(140px, 5fr);\\n  grid-template-rows: auto auto;\\n  line-height: 1.45;\\n  margin: 0 -0.6rem 2em;\\n\\n  @media (min-width: 1600px) {\\n    margin-left: -1.8rem;\\n    margin-right: -1.8rem;\\n  }\\n\"])));\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/Sandbox.tsx\nvar Zedux=Object.assign({},react_src_namespaceObject,src_namespaceObject);// resolves all the getters\nvar scope=Object.assign({},Zedux,react);var scopeKeys=Object.keys(scope);var scopeValues=scopeKeys.map(function(key){return scope[key];});var decorateTokens=function decorateTokens(path,tokens,params,parentType){for(var _iterator=(0,createForOfIteratorHelperLoose/* default */.Z)(tokens),_step;!(_step=_iterator()).done;){var token=_step.value;var end=params.start+token.length;if(typeof token==='string'){if(parentType){params.ranges.push({anchor:{path:path,offset:params.start},focus:{path:path,offset:end},tokenType:parentType});}params.start=end;continue;}if(typeof token.content==='string'||!Array.isArray(token.content)){params.ranges.push({anchor:{path:path,offset:params.start},focus:{path:path,offset:end},tokenType:token.type});params.start=end;continue;}decorateTokens(path,token.content,params,token.type);}return params.ranges;};var decorate=function decorate(_ref){var node=_ref[0],path=_ref[1];if(!Text.isText(node)){return[];}var tokens=prism_default().tokenize(node.text,(prism_default()).languages.tsx);return decorateTokens(path,tokens,{ranges:[],start:0});};var evalCode=function evalCode(code,resultVarName,ecosystemIdRef,extraScope){var resultStr=\"var \"+resultVarName+\"; \"+code+\"; var _$_$res = typeof \"+resultVarName+\" === 'function' ? React.createElement(\"+resultVarName+\") : typeof \"+resultVarName+\" === 'string' ? \"+resultVarName+\" : React.createElement('pre', null, JSON.stringify(\"+resultVarName+\", null, 2));\";var wrapped=resultStr+\" return _$_$res\";var extraScopeKeys=extraScope?[].concat(Object.keys(extraScope)):[];var keys=extraScope?[].concat(scopeKeys,extraScopeKeys):scopeKeys;var vals=extraScope?[].concat(scopeValues,extraScopeKeys.map(function(key){return extraScope[key];})):scopeValues;// eslint-disable-next-line no-new-func\nvar fn=(0,construct/* default */.Z)(Function,['React'].concat(keys,[wrapped]));var ecosystemsBefore=store/* internalStore.getState */.Do.getState();var result=fn.call.apply(fn,[null,react].concat(vals));var ecosystemsAfter=store/* internalStore.getState */.Do.getState();if(!ecosystemIdRef.current){Object.keys(ecosystemsAfter).forEach(function(key){if(!ecosystemsBefore[key])ecosystemIdRef.current=key;});}return result;};var parse=function parse(text){return text.split('\\n').slice(0,-1).map(function(line){return{type:'paragraph',children:[{text:line}]};});};var serialize=function serialize(nodes){return nodes.map(function(node){return node.children.map(function(child){return child.text;}).join('');}).join('\\n');};var ErrorBoundary=/*#__PURE__*/function(_React$Component){(0,inheritsLoose/* default */.Z)(ErrorBoundary,_React$Component);function ErrorBoundary(props){var _this;_this=_React$Component.call(this,props)||this;_this.state={hasError:false};return _this;}var _proto=ErrorBoundary.prototype;_proto.UNSAFE_componentWillReceiveProps=function UNSAFE_componentWillReceiveProps(){this.setState({hasError:false});};ErrorBoundary.getDerivedStateFromError=function getDerivedStateFromError(){return{hasError:true};};_proto.render=function render(){// idk y\nif(this.state.hasError){return/*#__PURE__*/react.createElement(\"span\",null,\"...\");}return this.props.children||/*#__PURE__*/react.createElement(\"span\",null);};return ErrorBoundary;}(react.Component);var Sandbox_Leaf=function Leaf(_ref2){var attributes=_ref2.attributes,children=_ref2.children,leaf=_ref2.leaf;return/*#__PURE__*/react.createElement(\"span\",(0,esm_extends/* default */.Z)({className:\"token \"+(leaf.tokenType||'')},attributes),children);};var Sandbox=function Sandbox(_ref3){var children=_ref3.children,ecosystemId=_ref3.ecosystemId,extraScope=_ref3.extraScope,_ref3$resultVar=_ref3.resultVar,resultVar=_ref3$resultVar===void 0?'Result':_ref3$resultVar;var baseUrl=(0,useDocusaurusContext/* default */.Z)().siteConfig.baseUrl;var editor=(0,react.useMemo)(function(){return withHistory(withReact(createEditor()));},[]);var initialValue=(0,react.useMemo)(function(){return parse(children);},[]);var _useState=(0,react.useState)(initialValue),value=_useState[0],setValue=_useState[1];var _useState2=(0,react.useState)(''),result=_useState2[0],setResult=_useState2[1];var theme=(0,usePrismTheme/* usePrismTheme */.p)();var ecosystemIdRef=(0,react.useRef)(ecosystemId);var lastLoggedErrorTimeRef=(0,react.useRef)();var isMountedRef=(0,react.useRef)(true);var runCode=(0,react.useCallback)(function(rawVal){var val=serialize(rawVal);try{var _window;var extraScopeStr=typeof extraScope==='string'?extraScope:'';var jsCode=(_window=window)==null?void 0:_window.ts.transpile(extraScopeStr+\"; \"+val,{jsx:'react'});if(!jsCode)return;var ecosystem=Zedux.getEcosystem(ecosystemIdRef.current);if(Object.keys((ecosystem==null?void 0:ecosystem._instances)||{}).length){ecosystem==null?void 0:ecosystem.wipe();ecosystem==null?void 0:ecosystem.setOverrides([]);}var evalResult=evalCode(jsCode,resultVar,ecosystemIdRef,typeof extraScope==='string'?undefined:extraScope);lastLoggedErrorTimeRef.current=undefined;if(isMountedRef.current)setResult(evalResult);}catch(err){if(isMountedRef.current)setResult(err.message);if(lastLoggedErrorTimeRef.current&&Date.now()-lastLoggedErrorTimeRef.current<5000// only log errors once every 5 seconds\n){return;}console.error('Live Sandbox error:',err);lastLoggedErrorTimeRef.current=Date.now();}},[ecosystemId,extraScope,resultVar]);// run initial code on mount (or if runCode changes - shouldn't happen)\n(0,react.useEffect)(function(){runCode(value);},[runCode]);var slate=/*#__PURE__*/react.createElement(Slate,{editor:editor,onChange:function onChange(newValue){if(newValue===value)return;setValue(newValue);runCode(newValue);},value:value},/*#__PURE__*/react.createElement(styles_Wrapper,null,/*#__PURE__*/react.createElement(Header,null,/*#__PURE__*/react.createElement(\"img\",{src:baseUrl+\"img/zedux-icon-75x75.png\"}),/*#__PURE__*/react.createElement(HeaderText,null,\"Live Sandbox\"),/*#__PURE__*/react.createElement(HeaderActions,null,/*#__PURE__*/react.createElement(LogActions,{ecosystemIdRef:ecosystemIdRef,Zedux:Zedux}),/*#__PURE__*/react.createElement(ResetButton,{onClick:function onClick(){setValue(initialValue);runCode(initialValue);editor.children=initialValue;}},\"Reset\"))),/*#__PURE__*/react.createElement(EditorWrapper,null,/*#__PURE__*/react.createElement(Gutter,null,value.map(function(_,i){return/*#__PURE__*/react.createElement(\"span\",{key:i},i+1);})),/*#__PURE__*/react.createElement(StyledEditable,{decorate:decorate,onKeyDown:function onKeyDown(event){return editorUtils_onKeyDown(editor,event);},placeholder:\"Write some code...\",renderLeaf:Sandbox_Leaf,scrollSelectionIntoView:scrollSelectionIntoView,$sscProps:theme})),/*#__PURE__*/react.createElement(Result,null,/*#__PURE__*/react.createElement(ErrorBoundary,null,result))));return ecosystemIdRef.current?/*#__PURE__*/react.createElement(Zedux.EcosystemProvider,{id:ecosystemId},slate):slate;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6630\n")},9094:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ theme_CodeBlock; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js\nvar taggedTemplateLiteralLoose = __webpack_require__(1880);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/hooks/usePrismTheme.js\nvar usePrismTheme = __webpack_require__(6412);\n// EXTERNAL MODULE: ./src/ssc/index.tsx\nvar ssc = __webpack_require__(8880);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(7462);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(3366);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/useIsBrowser.js\nvar useIsBrowser = __webpack_require__(2389);\n// EXTERNAL MODULE: ./node_modules/clsx/dist/clsx.m.js\nvar clsx_m = __webpack_require__(6010);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/ThemeClassNames.js\nvar ThemeClassNames = __webpack_require__(5281);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/wrapRegExp.js + 1 modules\nvar wrapRegExp = __webpack_require__(7099);\n// EXTERNAL MODULE: ./node_modules/parse-numeric-range/index.js\nvar parse_numeric_range = __webpack_require__(7594);\nvar parse_numeric_range_default = /*#__PURE__*/__webpack_require__.n(parse_numeric_range);\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/codeBlockUtils.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var codeBlockTitleRegex=/*#__PURE__*/(0,wrapRegExp/* default */.Z)(/title=(["\'])(.*?)\\1/,{quote:1,title:2});var metastringLinesRangeRegex=/*#__PURE__*/(0,wrapRegExp/* default */.Z)(/\\{([\\d,-]+)\\}/,{range:1});// Supported types of highlight comments\nvar commentPatterns={js:{start:\'\\\\/\\\\/\',end:\'\'},jsBlock:{start:\'\\\\/\\\\*\',end:\'\\\\*\\\\/\'},jsx:{start:\'\\\\{\\\\s*\\\\/\\\\*\',end:\'\\\\*\\\\/\\\\s*\\\\}\'},bash:{start:\'#\',end:\'\'},html:{start:\'\x3c!--\',end:\'--\x3e\'}};function getCommentPattern(languages,magicCommentDirectives){// To be more reliable, the opening and closing comment must match\nvar commentPattern=languages.map(function(lang){var _commentPatterns$lang=commentPatterns[lang],start=_commentPatterns$lang.start,end=_commentPatterns$lang.end;return"(?:"+start+"\\\\s*("+magicCommentDirectives.flatMap(function(d){var _d$block,_d$block2;return[d.line,(_d$block=d.block)==null?void 0:_d$block.start,(_d$block2=d.block)==null?void 0:_d$block2.end].filter(Boolean);}).join(\'|\')+")\\\\s*"+end+")";}).join(\'|\');// White space is allowed, but otherwise it should be on it\'s own line\nreturn new RegExp("^\\\\s*(?:"+commentPattern+")\\\\s*$");}/**\n * Select comment styles based on language\n */function getAllMagicCommentDirectiveStyles(lang,magicCommentDirectives){switch(lang){case\'js\':case\'javascript\':case\'ts\':case\'typescript\':return getCommentPattern([\'js\',\'jsBlock\'],magicCommentDirectives);case\'jsx\':case\'tsx\':return getCommentPattern([\'js\',\'jsBlock\',\'jsx\'],magicCommentDirectives);case\'html\':return getCommentPattern([\'js\',\'jsBlock\',\'html\'],magicCommentDirectives);case\'python\':case\'py\':case\'bash\':return getCommentPattern([\'bash\'],magicCommentDirectives);case\'markdown\':case\'md\':// Text uses HTML, front matter uses bash\nreturn getCommentPattern([\'html\',\'jsx\',\'bash\'],magicCommentDirectives);default:// All comment types\nreturn getCommentPattern(Object.keys(commentPatterns),magicCommentDirectives);}}function parseCodeBlockTitle(metastring){var _metastring$match$gro,_metastring$match;return(_metastring$match$gro=metastring==null?void 0:(_metastring$match=metastring.match(codeBlockTitleRegex))==null?void 0:_metastring$match.groups.title)!=null?_metastring$match$gro:\'\';}function containsLineNumbers(metastring){return Boolean(metastring==null?void 0:metastring.includes(\'showLineNumbers\'));}/**\n * Gets the language name from the class name (set by MDX).\n * e.g. `"language-javascript"` => `"javascript"`.\n * Returns undefined if there is no language class name.\n */function parseLanguage(className){var languageClassName=className.split(\' \').find(function(str){return str.startsWith(\'language-\');});return languageClassName==null?void 0:languageClassName.replace(/language-/,\'\');}/**\n * Parses the code content, strips away any magic comments, and returns the\n * clean content and the highlighted lines marked by the comments or metastring.\n *\n * If the metastring contains a range, the `content` will be returned as-is\n * without any parsing. The returned `lineClassNames` will be a map from that\n * number range to the first magic comment config entry (which _should_ be for\n * line highlight directives.)\n *\n * @param content The raw code with magic comments. Trailing newline will be\n * trimmed upfront.\n * @param options Options for parsing behavior.\n */function parseLines(content,options){var code=content.replace(/\\n$/,\'\');var language=options.language,magicComments=options.magicComments,metastring=options.metastring;// Highlighted lines specified in props: don\'t parse the content\nif(metastring&&metastringLinesRangeRegex.test(metastring)){var linesRange=metastring.match(metastringLinesRangeRegex).groups.range;if(magicComments.length===0){throw new Error("A highlight range has been given in code block\'s metastring (``` "+metastring+"), but no magic comment config is available. Docusaurus applies the first magic comment entry\'s className for metastring ranges.");}var metastringRangeClassName=magicComments[0].className;var _lines=parse_numeric_range_default()(linesRange).filter(function(n){return n>0;}).map(function(n){return[n-1,[metastringRangeClassName]];});return{lineClassNames:Object.fromEntries(_lines),code:code};}if(language===undefined){return{lineClassNames:{},code:code};}var directiveRegex=getAllMagicCommentDirectiveStyles(language,magicComments);// Go through line by line\nvar lines=code.split(\'\\n\');var blocks=Object.fromEntries(magicComments.map(function(d){return[d.className,{start:0,range:\'\'}];}));var lineToClassName=Object.fromEntries(magicComments.filter(function(d){return d.line;}).map(function(_ref){var className=_ref.className,line=_ref.line;return[line,className];}));var blockStartToClassName=Object.fromEntries(magicComments.filter(function(d){return d.block;}).map(function(_ref2){var className=_ref2.className,block=_ref2.block;return[block.start,className];}));var blockEndToClassName=Object.fromEntries(magicComments.filter(function(d){return d.block;}).map(function(_ref3){var className=_ref3.className,block=_ref3.block;return[block.end,className];}));for(var lineNumber=0;lineNumber<lines.length;){var line=lines[lineNumber];var match=line.match(directiveRegex);if(!match){// Lines without directives are unchanged\nlineNumber+=1;continue;}var directive=match.slice(1).find(function(item){return item!==undefined;});if(lineToClassName[directive]){blocks[lineToClassName[directive]].range+=lineNumber+",";}else if(blockStartToClassName[directive]){blocks[blockStartToClassName[directive]].start=lineNumber;}else if(blockEndToClassName[directive]){blocks[blockEndToClassName[directive]].range+=blocks[blockEndToClassName[directive]].start+"-"+(lineNumber-1)+",";}lines.splice(lineNumber,1);}code=lines.join(\'\\n\');var lineClassNames={};Object.entries(blocks).forEach(function(_ref4){var className=_ref4[0],range=_ref4[1].range;parse_numeric_range_default()(range).forEach(function(l){var _lineClassNames$l;(_lineClassNames$l=lineClassNames[l])!=null?_lineClassNames$l:lineClassNames[l]=[];lineClassNames[l].push(className);});});return{lineClassNames:lineClassNames,code:code};}function getPrismCssVariables(prismTheme){var mapping={color:\'--prism-color\',backgroundColor:\'--prism-background-color\'};var properties={};Object.entries(prismTheme.plain).forEach(function(_ref5){var key=_ref5[0],value=_ref5[1];var varName=mapping[key];if(varName&&typeof value===\'string\'){properties[varName]=value;}});return properties;}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Container/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var styles_module = ({"codeBlockContainer":"codeBlockContainer_Ckt0"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Container/index.js\nvar _excluded=["as"];/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */function CodeBlockContainer(_ref){var As=_ref.as,props=(0,objectWithoutPropertiesLoose/* default */.Z)(_ref,_excluded);var prismTheme=(0,usePrismTheme/* usePrismTheme */.p)();var prismCssVariables=getPrismCssVariables(prismTheme);return/*#__PURE__*/react.createElement(As// Polymorphic components are hard to type, without `oneOf` generics\n,(0,esm_extends/* default */.Z)({},props,{style:prismCssVariables,className:(0,clsx_m/* default */.Z)(props.className,styles_module.codeBlockContainer,ThemeClassNames/* ThemeClassNames.common.codeBlock */.k.common.codeBlock)}));}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Content/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var Content_styles_module = ({"codeBlockContent":"codeBlockContent_biex","codeBlockTitle":"codeBlockTitle_Ktv7","codeBlock":"codeBlock_bY9V","codeBlockStandalone":"codeBlockStandalone_MEMb","codeBlockLines":"codeBlockLines_e6Vv","codeBlockLinesWithNumbering":"codeBlockLinesWithNumbering_o6Pm","buttonGroup":"buttonGroup__atx"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Content/Element.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */// <pre> tags in markdown map to CodeBlocks. They may contain JSX children. When\n// the children is not a simple string, we just return a styled block without\n// actually highlighting.\nfunction CodeBlockJSX(_ref){var children=_ref.children,className=_ref.className;return/*#__PURE__*/react.createElement(CodeBlockContainer,{as:"pre",tabIndex:0,className:(0,clsx_m/* default */.Z)(Content_styles_module.codeBlockStandalone,\'thin-scrollbar\',className)},/*#__PURE__*/react.createElement("code",{className:Content_styles_module.codeBlockLines},children));}\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/useThemeConfig.js\nvar useThemeConfig = __webpack_require__(6668);\n// EXTERNAL MODULE: ./node_modules/@docusaurus/theme-common/lib/utils/reactUtils.js + 3 modules\nvar reactUtils = __webpack_require__(7326);\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-common/lib/hooks/useMutationObserver.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var DefaultOptions={attributes:true,characterData:true,childList:true,subtree:true};function useMutationObserver(target,callback,options){if(options===void 0){options=DefaultOptions;}var stableCallback=(0,reactUtils/* useEvent */.zX)(callback);// MutationObserver options are not nested much\n// so this should be to memo options in 99%\n// TODO handle options.attributeFilter array\nvar stableOptions=(0,reactUtils/* useShallowMemoObject */.Ql)(options);(0,react.useEffect)(function(){var observer=new MutationObserver(stableCallback);if(target){observer.observe(target,stableOptions);}return function(){return observer.disconnect();};},[target,stableCallback,stableOptions]);}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-common/lib/hooks/useCodeWordWrap.js\n// Callback fires when the "hidden" attribute of a tabpanel changes\n// See https://github.com/facebook/docusaurus/pull/7485\nfunction useTabBecameVisibleCallback(codeBlockRef,callback){var _useState=(0,react.useState)(),hiddenTabElement=_useState[0],setHiddenTabElement=_useState[1];var updateHiddenTabElement=(0,react.useCallback)(function(){var _codeBlockRef$current;// No need to observe non-hidden tabs\n// + we want to force a re-render when a tab becomes visible\nsetHiddenTabElement((_codeBlockRef$current=codeBlockRef.current)==null?void 0:_codeBlockRef$current.closest(\'[role=tabpanel][hidden]\'));},[codeBlockRef,setHiddenTabElement]);(0,react.useEffect)(function(){updateHiddenTabElement();},[updateHiddenTabElement]);useMutationObserver(hiddenTabElement,function(mutations){mutations.forEach(function(mutation){if(mutation.type===\'attributes\'&&mutation.attributeName===\'hidden\'){callback();updateHiddenTabElement();}});},{attributes:true,characterData:false,childList:false,subtree:false});}function useCodeWordWrap(){var _useState2=(0,react.useState)(false),isEnabled=_useState2[0],setIsEnabled=_useState2[1];var _useState3=(0,react.useState)(false),isCodeScrollable=_useState3[0],setIsCodeScrollable=_useState3[1];var codeBlockRef=(0,react.useRef)(null);var toggle=(0,react.useCallback)(function(){var codeElement=codeBlockRef.current.querySelector(\'code\');if(isEnabled){codeElement.removeAttribute(\'style\');}else{codeElement.style.whiteSpace=\'pre-wrap\';// When code wrap is enabled, we want to avoid a scrollbar in any case\n// Ensure that very very long words/strings/tokens still wrap\ncodeElement.style.overflowWrap=\'anywhere\';}setIsEnabled(function(value){return!value;});},[codeBlockRef,isEnabled]);var updateCodeIsScrollable=(0,react.useCallback)(function(){var _codeBlockRef$current2=codeBlockRef.current,scrollWidth=_codeBlockRef$current2.scrollWidth,clientWidth=_codeBlockRef$current2.clientWidth;var isScrollable=scrollWidth>clientWidth||codeBlockRef.current.querySelector(\'code\').hasAttribute(\'style\');setIsCodeScrollable(isScrollable);},[codeBlockRef]);useTabBecameVisibleCallback(codeBlockRef,updateCodeIsScrollable);(0,react.useEffect)(function(){updateCodeIsScrollable();},[isEnabled,updateCodeIsScrollable]);(0,react.useEffect)(function(){window.addEventListener(\'resize\',updateCodeIsScrollable,{passive:true});return function(){window.removeEventListener(\'resize\',updateCodeIsScrollable);};},[updateCodeIsScrollable]);return{codeBlockRef:codeBlockRef,isEnabled:isEnabled,isCodeScrollable:isCodeScrollable,toggle:toggle};}\n// EXTERNAL MODULE: ./node_modules/prism-react-renderer/prism/index.js\nvar prism = __webpack_require__(7410);\n;// CONCATENATED MODULE: ./node_modules/prism-react-renderer/themes/duotoneDark/index.js\n// Duotone Dark\n// Author: Simurai, adapted from DuoTone themes for Atom (http://simurai.com/projects/2016/01/01/duotone-themes)\n// Conversion: Bram de Haan (http://atelierbram.github.io/Base2Tone-prism/output/prism/prism-base2tone-evening-dark.css)\n// Generated with Base16 Builder (https://github.com/base16-builder/base16-builder)\nvar theme = {\n  plain: {\n    backgroundColor: "#2a2734",\n    color: "#9a86fd"\n  },\n  styles: [{\n    types: ["comment", "prolog", "doctype", "cdata", "punctuation"],\n    style: {\n      color: "#6c6783"\n    }\n  }, {\n    types: ["namespace"],\n    style: {\n      opacity: 0.7\n    }\n  }, {\n    types: ["tag", "operator", "number"],\n    style: {\n      color: "#e09142"\n    }\n  }, {\n    types: ["property", "function"],\n    style: {\n      color: "#9a86fd"\n    }\n  }, {\n    types: ["tag-id", "selector", "atrule-id"],\n    style: {\n      color: "#eeebff"\n    }\n  }, {\n    types: ["attr-name"],\n    style: {\n      color: "#c4b9fe"\n    }\n  }, {\n    types: ["boolean", "string", "entity", "url", "attr-value", "keyword", "control", "directive", "unit", "statement", "regex", "atrule", "placeholder", "variable"],\n    style: {\n      color: "#ffcc99"\n    }\n  }, {\n    types: ["deleted"],\n    style: {\n      textDecorationLine: "line-through"\n    }\n  }, {\n    types: ["inserted"],\n    style: {\n      textDecorationLine: "underline"\n    }\n  }, {\n    types: ["italic"],\n    style: {\n      fontStyle: "italic"\n    }\n  }, {\n    types: ["important", "bold"],\n    style: {\n      fontWeight: "bold"\n    }\n  }, {\n    types: ["important"],\n    style: {\n      color: "#c4b9fe"\n    }\n  }]\n};\n\n/* harmony default export */ var duotoneDark = (theme);\n\n;// CONCATENATED MODULE: ./node_modules/prism-react-renderer/dist/index.js\n\n\n\n\n\nvar defaultProps = {\n  // $FlowFixMe\n  Prism: prism/* default */.Z,\n  theme: duotoneDark\n};\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar newlineRe = /\\r\\n|\\r|\\n/; // Empty lines need to contain a single empty token, denoted with { empty: true }\n\nvar normalizeEmptyLines = function (line) {\n  if (line.length === 0) {\n    line.push({\n      types: ["plain"],\n      content: "\\n",\n      empty: true\n    });\n  } else if (line.length === 1 && line[0].content === "") {\n    line[0].content = "\\n";\n    line[0].empty = true;\n  }\n};\n\nvar appendTypes = function (types, add) {\n  var typesSize = types.length;\n\n  if (typesSize > 0 && types[typesSize - 1] === add) {\n    return types;\n  }\n\n  return types.concat(add);\n}; // Takes an array of Prism\'s tokens and groups them by line, turning plain\n// strings into tokens as well. Tokens can become recursive in some cases,\n// which means that their types are concatenated. Plain-string tokens however\n// are always of type "plain".\n// This is not recursive to avoid exceeding the call-stack limit, since it\'s unclear\n// how nested Prism\'s tokens can become\n\n\nvar normalizeTokens = function (tokens) {\n  var typeArrStack = [[]];\n  var tokenArrStack = [tokens];\n  var tokenArrIndexStack = [0];\n  var tokenArrSizeStack = [tokens.length];\n  var i = 0;\n  var stackIndex = 0;\n  var currentLine = [];\n  var acc = [currentLine];\n\n  while (stackIndex > -1) {\n    while ((i = tokenArrIndexStack[stackIndex]++) < tokenArrSizeStack[stackIndex]) {\n      var content = void 0;\n      var types = typeArrStack[stackIndex];\n      var tokenArr = tokenArrStack[stackIndex];\n      var token = tokenArr[i]; // Determine content and append type to types if necessary\n\n      if (typeof token === "string") {\n        types = stackIndex > 0 ? types : ["plain"];\n        content = token;\n      } else {\n        types = appendTypes(types, token.type);\n\n        if (token.alias) {\n          types = appendTypes(types, token.alias);\n        }\n\n        content = token.content;\n      } // If token.content is an array, increase the stack depth and repeat this while-loop\n\n\n      if (typeof content !== "string") {\n        stackIndex++;\n        typeArrStack.push(types);\n        tokenArrStack.push(content);\n        tokenArrIndexStack.push(0);\n        tokenArrSizeStack.push(content.length);\n        continue;\n      } // Split by newlines\n\n\n      var splitByNewlines = content.split(newlineRe);\n      var newlineCount = splitByNewlines.length;\n      currentLine.push({\n        types: types,\n        content: splitByNewlines[0]\n      }); // Create a new line for each string on a new line\n\n      for (var i$1 = 1; i$1 < newlineCount; i$1++) {\n        normalizeEmptyLines(currentLine);\n        acc.push(currentLine = []);\n        currentLine.push({\n          types: types,\n          content: splitByNewlines[i$1]\n        });\n      }\n    } // Decreate the stack depth\n\n\n    stackIndex--;\n    typeArrStack.pop();\n    tokenArrStack.pop();\n    tokenArrIndexStack.pop();\n    tokenArrSizeStack.pop();\n  }\n\n  normalizeEmptyLines(currentLine);\n  return acc;\n};\n\nvar themeToDict = function (theme, language) {\n  var plain = theme.plain; // $FlowFixMe\n\n  var base = Object.create(null);\n  var themeDict = theme.styles.reduce(function (acc, themeEntry) {\n    var languages = themeEntry.languages;\n    var style = themeEntry.style;\n\n    if (languages && !languages.includes(language)) {\n      return acc;\n    }\n\n    themeEntry.types.forEach(function (type) {\n      // $FlowFixMe\n      var accStyle = _extends({}, acc[type], style);\n\n      acc[type] = accStyle;\n    });\n    return acc;\n  }, base); // $FlowFixMe\n\n  themeDict.root = plain; // $FlowFixMe\n\n  themeDict.plain = _extends({}, plain, {\n    backgroundColor: null\n  });\n  return themeDict;\n};\n\nfunction objectWithoutProperties(obj, exclude) {\n  var target = {};\n\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];\n\n  return target;\n}\n\nvar Highlight = /*@__PURE__*/function (Component) {\n  function Highlight() {\n    var this$1 = this;\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    Component.apply(this, args);\n\n    _defineProperty(this, "getThemeDict", function (props) {\n      if (this$1.themeDict !== undefined && props.theme === this$1.prevTheme && props.language === this$1.prevLanguage) {\n        return this$1.themeDict;\n      }\n\n      this$1.prevTheme = props.theme;\n      this$1.prevLanguage = props.language;\n      var themeDict = props.theme ? themeToDict(props.theme, props.language) : undefined;\n      return this$1.themeDict = themeDict;\n    });\n\n    _defineProperty(this, "getLineProps", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var rest$1 = objectWithoutProperties(ref, ["key", "className", "style", "line"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: "token-line",\n        style: undefined,\n        key: undefined\n      });\n\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict !== undefined) {\n        output.style = themeDict.plain;\n      }\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += " " + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, "getStyleForToken", function (ref) {\n      var types = ref.types;\n      var empty = ref.empty;\n      var typesSize = types.length;\n      var themeDict = this$1.getThemeDict(this$1.props);\n\n      if (themeDict === undefined) {\n        return undefined;\n      } else if (typesSize === 1 && types[0] === "plain") {\n        return empty ? {\n          display: "inline-block"\n        } : undefined;\n      } else if (typesSize === 1 && !empty) {\n        return themeDict[types[0]];\n      }\n\n      var baseStyle = empty ? {\n        display: "inline-block"\n      } : {}; // $FlowFixMe\n\n      var typeStyles = types.map(function (type) {\n        return themeDict[type];\n      });\n      return Object.assign.apply(Object, [baseStyle].concat(typeStyles));\n    });\n\n    _defineProperty(this, "getTokenProps", function (ref) {\n      var key = ref.key;\n      var className = ref.className;\n      var style = ref.style;\n      var token = ref.token;\n      var rest$1 = objectWithoutProperties(ref, ["key", "className", "style", "token"]);\n      var rest = rest$1;\n\n      var output = _extends({}, rest, {\n        className: "token " + token.types.join(" "),\n        children: token.content,\n        style: this$1.getStyleForToken(token),\n        key: undefined\n      });\n\n      if (style !== undefined) {\n        output.style = output.style !== undefined ? _extends({}, output.style, style) : style;\n      }\n\n      if (key !== undefined) {\n        output.key = key;\n      }\n\n      if (className) {\n        output.className += " " + className;\n      }\n\n      return output;\n    });\n\n    _defineProperty(this, "tokenize", function (Prism, code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language,\n        tokens: []\n      };\n      Prism.hooks.run("before-tokenize", env);\n      var tokens = env.tokens = Prism.tokenize(env.code, env.grammar, env.language);\n      Prism.hooks.run("after-tokenize", env);\n      return tokens;\n    });\n  }\n\n  if (Component) Highlight.__proto__ = Component;\n  Highlight.prototype = Object.create(Component && Component.prototype);\n  Highlight.prototype.constructor = Highlight;\n\n  Highlight.prototype.render = function render() {\n    var ref = this.props;\n    var Prism = ref.Prism;\n    var language = ref.language;\n    var code = ref.code;\n    var children = ref.children;\n    var themeDict = this.getThemeDict(this.props);\n    var grammar = Prism.languages[language];\n    var mixedTokens = grammar !== undefined ? this.tokenize(Prism, code, grammar, language) : [code];\n    var tokens = normalizeTokens(mixedTokens);\n    return children({\n      tokens: tokens,\n      className: "prism-code language-" + language,\n      style: themeDict !== undefined ? themeDict.root : {},\n      getLineProps: this.getLineProps,\n      getTokenProps: this.getTokenProps\n    });\n  };\n\n  return Highlight;\n}(react.Component);\n\n/* harmony default export */ var dist = (Highlight);\n\n\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Line/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var Line_styles_module = ({"codeLine":"codeLine_lJS_","codeLineNumber":"codeLineNumber_Tfdd","codeLineContent":"codeLineContent_feaV"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Line/index.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */function CodeBlockLine(_ref){var line=_ref.line,classNames=_ref.classNames,showLineNumbers=_ref.showLineNumbers,getLineProps=_ref.getLineProps,getTokenProps=_ref.getTokenProps;if(line.length===1&&line[0].content===\'\\n\'){line[0].content=\'\';}var lineProps=getLineProps({line:line,className:(0,clsx_m/* default */.Z)(classNames,showLineNumbers&&Line_styles_module.codeLine)});var lineTokens=line.map(function(token,key){return/*#__PURE__*/react.createElement("span",(0,esm_extends/* default */.Z)({key:key},getTokenProps({token:token,key:key})));});return/*#__PURE__*/react.createElement("span",lineProps,showLineNumbers?/*#__PURE__*/react.createElement(react.Fragment,null,/*#__PURE__*/react.createElement("span",{className:Line_styles_module.codeLineNumber}),/*#__PURE__*/react.createElement("span",{className:Line_styles_module.codeLineContent},lineTokens)):lineTokens,/*#__PURE__*/react.createElement("br",null));}\n;// CONCATENATED MODULE: ./node_modules/copy-text-to-clipboard/index.js\nfunction copyTextToClipboard(input,_temp){var _ref=_temp===void 0?{}:_temp,_ref$target=_ref.target,target=_ref$target===void 0?document.body:_ref$target;var element=document.createElement(\'textarea\');var previouslyFocusedElement=document.activeElement;element.value=input;// Prevent keyboard from showing on mobile\nelement.setAttribute(\'readonly\',\'\');element.style.contain=\'strict\';element.style.position=\'absolute\';element.style.left=\'-9999px\';element.style.fontSize=\'12pt\';// Prevent zooming on iOS\nvar selection=document.getSelection();var originalRange=false;if(selection.rangeCount>0){originalRange=selection.getRangeAt(0);}target.append(element);element.select();// Explicit selection workaround for iOS\nelement.selectionStart=0;element.selectionEnd=input.length;var isSuccess=false;try{isSuccess=document.execCommand(\'copy\');}catch(_unused){}element.remove();if(originalRange){selection.removeAllRanges();selection.addRange(originalRange);}// Get the focus back on the previously focused element, if any\nif(previouslyFocusedElement){previouslyFocusedElement.focus();}return isSuccess;}\n// EXTERNAL MODULE: ./node_modules/@docusaurus/core/lib/client/exports/Translate.js + 1 modules\nvar Translate = __webpack_require__(5999);\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/CopyButton/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var CopyButton_styles_module = ({"copyButtonCopied":"copyButtonCopied_obH4","copyButtonIcons":"copyButtonIcons_eSgA","copyButtonIcon":"copyButtonIcon_y97N","copyButtonSuccessIcon":"copyButtonSuccessIcon_LjdS"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/CopyButton/index.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */// @ts-expect-error: TODO, we need to make theme-classic have type: module\nfunction CopyButton(_ref){var code=_ref.code,className=_ref.className;var _useState=(0,react.useState)(false),isCopied=_useState[0],setIsCopied=_useState[1];var copyTimeout=(0,react.useRef)(undefined);var handleCopyCode=(0,react.useCallback)(function(){copyTextToClipboard(code);setIsCopied(true);copyTimeout.current=window.setTimeout(function(){setIsCopied(false);},1000);},[code]);(0,react.useEffect)(function(){return function(){return window.clearTimeout(copyTimeout.current);};},[]);return/*#__PURE__*/react.createElement("button",{type:"button","aria-label":isCopied?(0,Translate/* translate */.I)({id:\'theme.CodeBlock.copied\',message:\'Copied\',description:\'The copied button label on code blocks\'}):(0,Translate/* translate */.I)({id:\'theme.CodeBlock.copyButtonAriaLabel\',message:\'Copy code to clipboard\',description:\'The ARIA label for copy code blocks button\'}),title:(0,Translate/* translate */.I)({id:\'theme.CodeBlock.copy\',message:\'Copy\',description:\'The copy button label on code blocks\'}),className:(0,clsx_m/* default */.Z)(\'clean-btn\',className,CopyButton_styles_module.copyButton,isCopied&&CopyButton_styles_module.copyButtonCopied),onClick:handleCopyCode},/*#__PURE__*/react.createElement("span",{className:CopyButton_styles_module.copyButtonIcons,"aria-hidden":"true"},/*#__PURE__*/react.createElement("svg",{className:CopyButton_styles_module.copyButtonIcon,viewBox:"0 0 24 24"},/*#__PURE__*/react.createElement("path",{d:"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"})),/*#__PURE__*/react.createElement("svg",{className:CopyButton_styles_module.copyButtonSuccessIcon,viewBox:"0 0 24 24"},/*#__PURE__*/react.createElement("path",{d:"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"}))));}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/WordWrapButton/styles.module.css\n// extracted by mini-css-extract-plugin\n/* harmony default export */ var WordWrapButton_styles_module = ({"wordWrapButtonIcon":"wordWrapButtonIcon_Bwma","wordWrapButtonEnabled":"wordWrapButtonEnabled_EoeP"});\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/WordWrapButton/index.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */function WordWrapButton(_ref){var className=_ref.className,onClick=_ref.onClick,isEnabled=_ref.isEnabled;var title=(0,Translate/* translate */.I)({id:\'theme.CodeBlock.wordWrapToggle\',message:\'Toggle word wrap\',description:\'The title attribute for toggle word wrapping button of code block lines\'});return/*#__PURE__*/react.createElement("button",{type:"button",onClick:onClick,className:(0,clsx_m/* default */.Z)(\'clean-btn\',className,isEnabled&&WordWrapButton_styles_module.wordWrapButtonEnabled),"aria-label":title,title:title},/*#__PURE__*/react.createElement("svg",{className:WordWrapButton_styles_module.wordWrapButtonIcon,viewBox:"0 0 24 24","aria-hidden":"true"},/*#__PURE__*/react.createElement("path",{fill:"currentColor",d:"M4 19h6v-2H4v2zM20 5H4v2h16V5zm-3 6H4v2h13.25c1.1 0 2 .9 2 2s-.9 2-2 2H15v-2l-3 3l3 3v-2h2c2.21 0 4-1.79 4-4s-1.79-4-4-4z"})));}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/Content/String.js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */function CodeBlockString(_ref){var _ref2;var children=_ref.children,_ref$className=_ref.className,blockClassName=_ref$className===void 0?\'\':_ref$className,metastring=_ref.metastring,titleProp=_ref.title,showLineNumbersProp=_ref.showLineNumbers,languageProp=_ref.language;var _useThemeConfig=(0,useThemeConfig/* useThemeConfig */.L)(),_useThemeConfig$prism=_useThemeConfig.prism,defaultLanguage=_useThemeConfig$prism.defaultLanguage,magicComments=_useThemeConfig$prism.magicComments;var language=(_ref2=languageProp!=null?languageProp:parseLanguage(blockClassName))!=null?_ref2:defaultLanguage;var prismTheme=(0,usePrismTheme/* usePrismTheme */.p)();var wordWrap=useCodeWordWrap();// We still parse the metastring in case we want to support more syntax in the\n// future. Note that MDX doesn\'t strip quotes when parsing metastring:\n// "title=\\"xyz\\"" => title: "\\"xyz\\""\nvar title=parseCodeBlockTitle(metastring)||titleProp;var _parseLines=parseLines(children,{metastring:metastring,language:language,magicComments:magicComments}),lineClassNames=_parseLines.lineClassNames,code=_parseLines.code;var showLineNumbers=showLineNumbersProp!=null?showLineNumbersProp:containsLineNumbers(metastring);return/*#__PURE__*/react.createElement(CodeBlockContainer,{as:"div",className:(0,clsx_m/* default */.Z)(blockClassName,language&&!blockClassName.includes("language-"+language)&&"language-"+language)},title&&/*#__PURE__*/react.createElement("div",{className:Content_styles_module.codeBlockTitle},title),/*#__PURE__*/react.createElement("div",{className:Content_styles_module.codeBlockContent},/*#__PURE__*/react.createElement(dist,(0,esm_extends/* default */.Z)({},defaultProps,{theme:prismTheme,code:code,language:language!=null?language:\'text\'}),function(_ref3){var className=_ref3.className,tokens=_ref3.tokens,getLineProps=_ref3.getLineProps,getTokenProps=_ref3.getTokenProps;return/*#__PURE__*/react.createElement("pre",{/* eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex */tabIndex:0,ref:wordWrap.codeBlockRef,className:(0,clsx_m/* default */.Z)(className,Content_styles_module.codeBlock,\'thin-scrollbar\')},/*#__PURE__*/react.createElement("code",{className:(0,clsx_m/* default */.Z)(Content_styles_module.codeBlockLines,showLineNumbers&&Content_styles_module.codeBlockLinesWithNumbering)},tokens.map(function(line,i){return/*#__PURE__*/react.createElement(CodeBlockLine,{key:i,line:line,getLineProps:getLineProps,getTokenProps:getTokenProps,classNames:lineClassNames[i],showLineNumbers:showLineNumbers});})));}),/*#__PURE__*/react.createElement("div",{className:Content_styles_module.buttonGroup},(wordWrap.isEnabled||wordWrap.isCodeScrollable)&&/*#__PURE__*/react.createElement(WordWrapButton,{className:Content_styles_module.codeButton,onClick:function onClick(){return wordWrap.toggle();},isEnabled:wordWrap.isEnabled}),/*#__PURE__*/react.createElement(CopyButton,{className:Content_styles_module.codeButton,code:code}))));}\n;// CONCATENATED MODULE: ./node_modules/@docusaurus/theme-classic/lib/theme/CodeBlock/index.js\nvar CodeBlock_excluded=["children"];/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *//**\n * Best attempt to make the children a plain string so it is copyable. If there\n * are react elements, we will not be able to copy the content, and it will\n * return `children` as-is; otherwise, it concatenates the string children\n * together.\n */function maybeStringifyChildren(children){if(react.Children.toArray(children).some(function(el){return/*#__PURE__*/(0,react.isValidElement)(el);})){return children;}// The children is now guaranteed to be one/more plain strings\nreturn Array.isArray(children)?children.join(\'\'):children;}function CodeBlock(_ref){var rawChildren=_ref.children,props=(0,objectWithoutPropertiesLoose/* default */.Z)(_ref,CodeBlock_excluded);// The Prism theme on SSR is always the default theme but the site theme can\n// be in a different mode. React hydration doesn\'t update DOM styles that come\n// from SSR. Hence force a re-render after mounting to apply the current\n// relevant styles.\nvar isBrowser=(0,useIsBrowser/* default */.Z)();var children=maybeStringifyChildren(rawChildren);var CodeBlockComp=typeof children===\'string\'?CodeBlockString:CodeBlockJSX;return/*#__PURE__*/react.createElement(CodeBlockComp,(0,esm_extends/* default */.Z)({key:String(isBrowser)},props),children);}\n// EXTERNAL MODULE: ./node_modules/prismjs/prism.js\nvar prismjs_prism = __webpack_require__(5660);\nvar prism_default = /*#__PURE__*/__webpack_require__.n(prismjs_prism);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-jsx.js\nvar prism_jsx = __webpack_require__(2356);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-typescript.js\nvar prism_typescript = __webpack_require__(6836);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-tsx.js\nvar prism_tsx = __webpack_require__(1029);\n// EXTERNAL MODULE: ./node_modules/prismjs/components/prism-bash.js\nvar prism_bash = __webpack_require__(7874);\n// EXTERNAL MODULE: ./src/theme/CodeBlock/Sandbox.tsx + 45 modules\nvar Sandbox = __webpack_require__(6630);\n;// CONCATENATED MODULE: ./src/theme/CodeBlock/index.tsx\nvar _templateObject;/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */var Code=ssc/* default.code */.ZP.code(_templateObject||(_templateObject=(0,taggedTemplateLiteralLoose/* default */.Z)(["\\n  display: block;\\n\\n  .token {\\n    color: #d7dfec;\\n\\n    ","\\n\\n    &.comment {\\n      font-style: italic;\\n    }\\n\\n    &.keyword {\\n      color: #e08a57;\\n    }\\n  }\\n"])),function(_ref){var $sscProps=_ref.$sscProps;return $sscProps.styles.map(function(_ref2){var style=_ref2.style,types=_ref2.types;return types.map(function(type){return"&."+type+" { "+(0,ssc/* css */.iv)(style/* Prism font-weight type is wrong */)+" }";}).join(\'\\n\');}).join(\'\\n\');});var renderTokens=function renderTokens(tokens){return tokens.map(function(token,i){return/*#__PURE__*/react.createElement("span",{className:"token "+(typeof token===\'string\'?\'\':token.type),key:i},typeof token===\'string\'?token:typeof token.content===\'string\'?token.content:renderTokens(Array.isArray(token.content)?token.content:[token.content]));});};var withLiveEditor=function withLiveEditor(Component){function WrappedComponent(props){var _props$className;var theme=(0,usePrismTheme/* usePrismTheme */.p)();if(props.live){return/*#__PURE__*/react.createElement(Sandbox/* Sandbox */.p,props);}return/*#__PURE__*/react.createElement(Component,props);var tokens=prism_default().tokenize(props.children,(prism_default()).languages[props.language||((_props$className=props.className)==null?void 0:_props$className.split(\'-\')[1])||\'tsx\']);return/*#__PURE__*/react.createElement(react.Fragment,null,/*#__PURE__*/react.createElement("div",{className:"codeBlockContainer_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Container-styles-module theme-code-block",style:{\'--prism-color\':\'#bfc7d5\',\'--prism-background-color\':\'#292d3e\'}},/*#__PURE__*/react.createElement("div",{className:"codeBlockContent_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module"},/*#__PURE__*/react.createElement("pre",{tabIndex:0,className:"prism-code codeBlock_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module thin-scrollbar"},/*#__PURE__*/react.createElement(Code,{className:props.className+" codeBlockLines_node_modules-@docusaurus-theme-classic-lib-theme-CodeBlock-Content-styles-module",$sscProps:theme},renderTokens(tokens))))));}return WrappedComponent;};/* harmony default export */ var theme_CodeBlock = (withLiveEditor(CodeBlock));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9094\n')},2808:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"B\": function() { return /* binding */ actionFactory; }\n/* harmony export */ });\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\n/**\n  Factory for creating ActionFactory objects.\n\n  ActionFactories are just action creators with an extra `.type` property set to\n  the string passed to `actionFactory()`.\n\n  ActionFactories can be passed directly to a ReducerBuilder's `reduce()`\n  method, thus removing the necessity of string constants.\n*/var actionFactory=function actionFactory(actionType){if( true&&typeof actionType!=='string'){throw new TypeError(\"Zedux: actionFactory() - actionType must be a string. Received \"+(0,_utils_general__WEBPACK_IMPORTED_MODULE_0__/* .detailedTypeof */ .px)(actionType));}// The factory itself just returns a normal action object with the `type` and\n// optional `payload` set.\nvar factory=function factory(payload){var action={type:factory.type};if(typeof payload!=='undefined')action.payload=payload;return action;};// Expose the action `type` for this factory. Read only! There should never be\n// any reason to modify this.\nfactory.type=actionType;return factory;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgwOC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQ08sR0FBTUMsY0FJbUIsQ0FBRyxRQUp0QkEsY0FJbUIsQ0FDOUJDLFVBQWdCLENBQ2IsQ0FDSCxHQUFJQyxLQUFHLEVBQUksTUFBT0QsV0FBVSxHQUFLLFFBQVEsQ0FBRSxDQUN6QyxLQUFNLElBQUlFLFVBQVMsbUVBQ2lESix3RUFBYyxDQUM5RUUsVUFBVSxDQUNYLENBQ0YsQ0FDSCxDQUVBO0FBQ0E7QUFDQSxHQUFNRyxRQUFPLENBQUksUUFBWEEsUUFBTyxDQUFLQyxPQUFpQixDQUFLLENBQ3RDLEdBQU1DLE9BQTZCLENBQUcsQ0FDcENDLElBQUksQ0FBRUgsT0FBTyxDQUFDRyxJQUNoQixDQUFDLENBRUQsR0FBSSxNQUFPRixRQUFPLEdBQUssV0FBVyxDQUFFQyxNQUFNLENBQUNELE9BQU8sQ0FBR0EsT0FBTyxDQUU1RCxNQUFPQyxPQUFNLENBQ2YsQ0FBa0MsQ0FFbEM7QUFDQTtBQUNBRixPQUFPLENBQUNHLElBQUksQ0FBR04sVUFBVSxDQUV6QixNQUFPRyxRQUFPLENBQ2hCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL2NvcmUvc3JjL2FwaS9hY3Rpb25GYWN0b3J5LnRzPzNjNDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uLCBBY3Rpb25GYWN0b3J5IH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBkZXRhaWxlZFR5cGVvZiB9IGZyb20gJy4uL3V0aWxzL2dlbmVyYWwnXG5cbi8qKlxuICBGYWN0b3J5IGZvciBjcmVhdGluZyBBY3Rpb25GYWN0b3J5IG9iamVjdHMuXG5cbiAgQWN0aW9uRmFjdG9yaWVzIGFyZSBqdXN0IGFjdGlvbiBjcmVhdG9ycyB3aXRoIGFuIGV4dHJhIGAudHlwZWAgcHJvcGVydHkgc2V0IHRvXG4gIHRoZSBzdHJpbmcgcGFzc2VkIHRvIGBhY3Rpb25GYWN0b3J5KClgLlxuXG4gIEFjdGlvbkZhY3RvcmllcyBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IHRvIGEgUmVkdWNlckJ1aWxkZXIncyBgcmVkdWNlKClgXG4gIG1ldGhvZCwgdGh1cyByZW1vdmluZyB0aGUgbmVjZXNzaXR5IG9mIHN0cmluZyBjb25zdGFudHMuXG4qL1xuZXhwb3J0IGNvbnN0IGFjdGlvbkZhY3Rvcnk6IDxQYXlsb2FkID0gdW5kZWZpbmVkLCBUeXBlIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPihcbiAgYWN0aW9uVHlwZTogVHlwZVxuKSA9PiBQYXlsb2FkIGV4dGVuZHMgdW5kZWZpbmVkXG4gID8gQWN0aW9uRmFjdG9yeTx1bmRlZmluZWQsIFR5cGU+XG4gIDogQWN0aW9uRmFjdG9yeTxQYXlsb2FkLCBUeXBlPiA9IDxQYXlsb2FkLCBUeXBlIGV4dGVuZHMgc3RyaW5nPihcbiAgYWN0aW9uVHlwZTogVHlwZVxuKSA9PiB7XG4gIGlmIChERVYgJiYgdHlwZW9mIGFjdGlvblR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBaZWR1eDogYWN0aW9uRmFjdG9yeSgpIC0gYWN0aW9uVHlwZSBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAke2RldGFpbGVkVHlwZW9mKFxuICAgICAgICBhY3Rpb25UeXBlXG4gICAgICApfWBcbiAgICApXG4gIH1cblxuICAvLyBUaGUgZmFjdG9yeSBpdHNlbGYganVzdCByZXR1cm5zIGEgbm9ybWFsIGFjdGlvbiBvYmplY3Qgd2l0aCB0aGUgYHR5cGVgIGFuZFxuICAvLyBvcHRpb25hbCBgcGF5bG9hZGAgc2V0LlxuICBjb25zdCBmYWN0b3J5ID0gKChwYXlsb2FkPzogUGF5bG9hZCkgPT4ge1xuICAgIGNvbnN0IGFjdGlvbjogQWN0aW9uPFBheWxvYWQsIFR5cGU+ID0ge1xuICAgICAgdHlwZTogZmFjdG9yeS50eXBlLFxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGF5bG9hZCAhPT0gJ3VuZGVmaW5lZCcpIGFjdGlvbi5wYXlsb2FkID0gcGF5bG9hZFxuXG4gICAgcmV0dXJuIGFjdGlvblxuICB9KSBhcyBBY3Rpb25GYWN0b3J5PFBheWxvYWQsIFR5cGU+XG5cbiAgLy8gRXhwb3NlIHRoZSBhY3Rpb24gYHR5cGVgIGZvciB0aGlzIGZhY3RvcnkuIFJlYWQgb25seSEgVGhlcmUgc2hvdWxkIG5ldmVyIGJlXG4gIC8vIGFueSByZWFzb24gdG8gbW9kaWZ5IHRoaXMuXG4gIGZhY3RvcnkudHlwZSA9IGFjdGlvblR5cGVcblxuICByZXR1cm4gZmFjdG9yeSBhcyBhbnlcbn1cbiJdLCJuYW1lcyI6WyJkZXRhaWxlZFR5cGVvZiIsImFjdGlvbkZhY3RvcnkiLCJhY3Rpb25UeXBlIiwiREVWIiwiVHlwZUVycm9yIiwiZmFjdG9yeSIsInBheWxvYWQiLCJhY3Rpb24iLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2808\n")},3064:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "P": function() { return /* binding */ internalTypes; }\n/* harmony export */ });\nvar PREFIX=\'@@zedux/\';var internalTypes={delegate:PREFIX+"delegate",hydrate:PREFIX+"hydrate",// for use with atoms in the @zedux/react package:\nignore:PREFIX+"ignore",inherit:PREFIX+"inherit",merge:PREFIX+"merge",prime:PREFIX+"prime"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA2NC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxHQUFNQSxPQUFNLENBQUcsVUFBVSxDQUVsQixHQUFNQyxjQUFhLENBQUcsQ0FDM0JDLFFBQVEsQ0FBS0YsTUFBTSxXQUFVLENBQzdCRyxPQUFPLENBQUtILE1BQU0sVUFBUyxDQUMzQjtBQUNBSSxNQUFNLENBQUtKLE1BQU0sU0FBUSxDQUN6QkssT0FBTyxDQUFLTCxNQUFNLFVBQVMsQ0FDM0JNLEtBQUssQ0FBS04sTUFBTSxRQUFPLENBQ3ZCTyxLQUFLLENBQUtQLE1BQU0sUUFDbEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvY29yZS9zcmMvYXBpL2NvbnN0YW50cy50cz9kZTAyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBSRUZJWCA9ICdAQHplZHV4LydcblxuZXhwb3J0IGNvbnN0IGludGVybmFsVHlwZXMgPSB7XG4gIGRlbGVnYXRlOiBgJHtQUkVGSVh9ZGVsZWdhdGVgLFxuICBoeWRyYXRlOiBgJHtQUkVGSVh9aHlkcmF0ZWAsXG4gIC8vIGZvciB1c2Ugd2l0aCBhdG9tcyBpbiB0aGUgQHplZHV4L3JlYWN0IHBhY2thZ2U6XG4gIGlnbm9yZTogYCR7UFJFRklYfWlnbm9yZWAsXG4gIGluaGVyaXQ6IGAke1BSRUZJWH1pbmhlcml0YCxcbiAgbWVyZ2U6IGAke1BSRUZJWH1tZXJnZWAsXG4gIHByaW1lOiBgJHtQUkVGSVh9cHJpbWVgLFxufVxuIl0sIm5hbWVzIjpbIlBSRUZJWCIsImludGVybmFsVHlwZXMiLCJkZWxlZ2F0ZSIsImh5ZHJhdGUiLCJpZ25vcmUiLCJpbmhlcml0IiwibWVyZ2UiLCJwcmltZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3064\n')},1694:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"y\": function() { return /* binding */ Store; },\n  \"M\": function() { return /* binding */ createStore; }\n});\n\n// NAMESPACE OBJECT: ../packages/core/src/utils/hierarchyConfig.ts\nvar hierarchyConfig_namespaceObject = {};\n__webpack_require__.r(hierarchyConfig_namespaceObject);\n__webpack_require__.d(hierarchyConfig_namespaceObject, {\n  \"clone\": function() { return clone; },\n  \"create\": function() { return create; },\n  \"get\": function() { return get; },\n  \"isNode\": function() { return isNode; },\n  \"iterate\": function() { return iterate; },\n  \"set\": function() { return set; },\n  \"size\": function() { return size; }\n});\n\n// EXTERNAL MODULE: ../packages/core/src/api/constants.ts\nvar constants = __webpack_require__(3064);\n// EXTERNAL MODULE: ../packages/core/src/api/is.ts\nvar is = __webpack_require__(9283);\n// EXTERNAL MODULE: ../packages/core/src/api/meta.ts\nvar meta = __webpack_require__(7159);\n// EXTERNAL MODULE: ../packages/core/src/utils/general.ts\nvar general = __webpack_require__(8487);\n;// CONCATENATED MODULE: ../packages/core/src/hierarchy/create.ts\n/**\n  Converts a Branch hierarchy descriptor to a diff node's children\n\n  Really should only be used from `hierarchyDescriptorToDiffTree()`\n*/function branchToDiffNodeChildren(branch,registerSubStore,currentPath){var children={};Object.entries(branch).forEach(function(_ref){var key=_ref[0],val=_ref[1];var newPath=[].concat(currentPath,[key]);children[key]=hierarchyDescriptorToDiffTree(val,registerSubStore,newPath);});return children;}/**\n  Turns a non-branch node from a user-supplied hierarchy descriptor into a\n  DiffNode object\n*/function nonBranchToDiffNode(type,hierarchy,registerSubStore,currentPath){if(type===general/* HierarchyType.Null */._T.Null){return{type:type};}if(type===general/* HierarchyType.Reducer */._T.Reducer){return{type:type,reducer:hierarchy};}// It's a Store hierarchy descriptor\nreturn{type:type,destroy:registerSubStore(currentPath,hierarchy),reducer:wrapStoreInReducer(hierarchy),store:hierarchy};}/**\n  Determines the type of the given hierarchy descriptor.\n\n  Throws a TypeError if the descriptor is invalid.\n*/function getHierarchyType(descriptor){if(typeof descriptor==='function')return general/* HierarchyType.Reducer */._T.Reducer;if(descriptor&&(0,is.is)(descriptor,Store))return general/* HierarchyType.Store */._T.Store;if((0,general/* isPlainObject */.PO)(descriptor))return general/* HierarchyType.Branch */._T.Branch;if( true&&descriptor!=null){throw new TypeError(\"Zedux: store.use() - Hierarchy descriptor nodes must be reducers, stores, or plain objects. Received \"+(0,general/* detailedTypeof */.px)(descriptor));}return general/* HierarchyType.Null */._T.Null;}/**\n  Turns a normal, user-supplied hierarchy descriptor into a diff tree for easy\n  reducer hierarchy creating, diffing, merging, and destroying.\n\n  Also figures out the reducer for non-branch nodes.\n*/function hierarchyDescriptorToDiffTree(hierarchy,registerSubStore,currentPath){if(currentPath===void 0){currentPath=[];}var type=getHierarchyType(hierarchy);if(type!==general/* HierarchyType.Branch */._T.Branch){return nonBranchToDiffNode(type,hierarchy,registerSubStore,currentPath);}// It's a Branch; recursively convert the whole tree. We don't need to supply\n// a reducer for this branch 'cause the merge process does that for us\nreturn{type:type,children:branchToDiffNodeChildren(hierarchy,registerSubStore,currentPath)};}/**\n  Creates a reducer that wraps the entry points of the given store.\n\n  This reducer will propagate actions down the child store's reducers.\n\n  Wraps all actions in the special `inherit` meta node to inform the child\n  store's effects subscribers that this action was received from its parent\n  store.\n\n  Since the parent store also registers an effects subscriber on this child\n  store, it will know not to propagate the inherited action from the child\n  store. UPDATE: Actually, it doesn't even need to check - the parent store\n  knows that it _isDispatching and can ignore child store actions while it is.\n*/function wrapStoreInReducer(store){var reducer=function reducer(state,action){// If this is the special hydrate or partial hydrate action, re-create the\n// action's payload using the current state slice\nif(action.type===constants/* internalTypes.hydrate */.P.hydrate||action.type===constants/* internalTypes.merge */.P.merge){action={type:constants/* internalTypes.hydrate */.P.hydrate,payload:state};}// Tell the child store's effect subscribers that this action is inherited\nvar inheritedAction=(0,meta/* addMeta */.k)(action,constants/* internalTypes.inherit */.P.inherit);return store.dispatch(inheritedAction);};return reducer;}\n;// CONCATENATED MODULE: ../packages/core/src/hierarchy/merge.ts\n/**\n  Turns a diff tree into a single reducer.\n\n  All child diff nodes must have `reducer` props themselves.\n\n  Accepts configuration to create the state representation of this node,\n  to get and set properties on that data type, to determine if the old\n  state is a node, and to find the size of the node.\n*/var createBranchReducer=function createBranchReducer(children,_ref){var create=_ref.create,get=_ref.get,isNode=_ref.isNode,set=_ref.set,size=_ref.size;return function(oldState,action){if(oldState===void 0){oldState=create();}// Make a new node to keep track of the values returned by\n// the child reducers.\nvar newState=create();var hasChanges=false;// Iterate over the child reducers, passing them their state slice\n// and the action and recording their results.\nObject.keys(children).forEach(function(key){var _ref2=children[key],reducer=_ref2.reducer;// we've ensured reducer exists at this point\n// Grab the old state slice\nvar oldStatePiece=isNode(oldState)?get(oldState,key):undefined;// yes, explicitly set it to undefined\n// Calculate the new value\nvar newStatePiece=reducer(oldStatePiece,action);// Record the result\nnewState=set(newState,key,newStatePiece);// Check for changes\nhasChanges||(hasChanges=newStatePiece!==oldStatePiece);});// Handle the case where `children` did not used to be an empty node. This\n// means there were changes, but our change detection failed since we didn't\n// actually iterate over anything.\nhasChanges||(hasChanges=!isNode(oldState)||!Object.keys(children).length&&!!size(oldState));// If nothing changed, discard the accumulated newState\nreturn hasChanges?newState:oldState;};};/**\n  Recursively destroys a tree, preventing memory leaks.\n\n  Currently STORE is the only node type affected by this; stores need to\n  unsubscribe() from their child stores.\n*/function destroyTree(tree){if(!tree)return;var _ref3=tree,children=_ref3.children,destroy=_ref3.destroy;if(destroy)destroy();if(!children)return;// base case; this branch is now destroyed\nObject.values(children).forEach(destroyTree);}/**\n  Merges two diff tree BRANCH nodes together.\n\n  Really should only be used from `mergeDiffTrees()`\n*/function mergeBranches(oldTree,newTree,hierarchyConfig){var mergedChildren=Object.assign({},oldTree.children);// Iterate over the new tree's children\nObject.keys(newTree.children).forEach(function(key){var _children;var newChild=newTree.children[key];var oldChild=(_children=oldTree.children)==null?void 0:_children[key];// Attempt to recursively merge the two children\n// Let `mergeDiffTrees()` handle any destroying\nvar mergedChild=mergeDiffTrees(oldChild,newChild,hierarchyConfig);// If the new node is NULL, kill it.\nif(mergedChild.type===general/* HierarchyType.Null */._T.Null){delete mergedChildren[key];return;}mergedChildren[key]=mergedChild;});return{children:mergedChildren,reducer:createBranchReducer(mergedChildren,hierarchyConfig),type:general/* HierarchyType.Branch */._T.Branch};}/**\n  Merges two diff trees together.\n\n  Uses head recursion to merge the leaf nodes first. This allows this step to\n  also find each node's reducer. (A node's children reducers need to exist\n  before its own reducer can)\n\n  Destroys any no-longer-used resources in the oldTree.\n\n  The resulting tree will always have the type of the newTree.\n\n  Dynamically injects reducers and stores into the hierarchy or replaces the\n  hierarchy altogether.\n\n  There are 4 types of nodes in this hierarchy:\n    - BRANCH - indicates a branch (non-leaf) node\n    - REDUCER - indicates a leaf node handled by this store\n    - STORE - indicates a leaf node handled by another store\n    - NULL - indicates a non-existent node, or node to be deleted\n\n  BRANCH nodes will be deeply merged (recursively).\n\n  All other nodes will be overwritten.\n*/function mergeDiffTrees(oldTree,newTree,hierarchyConfig){if(newTree.type!==general/* HierarchyType.Branch */._T.Branch){destroyTree(oldTree);return newTree;}if(!oldTree||oldTree.type!==general/* HierarchyType.Branch */._T.Branch){destroyTree(oldTree);return mergeBranches({type:general/* HierarchyType.Null */._T.Null},newTree,hierarchyConfig);}// They're both BRANCH nodes; recursively merge them\nreturn mergeBranches(oldTree,newTree,hierarchyConfig);}/**\n  Deeply merges the new state tree into the old one.\n\n  If this hydration contains new state for a child store, this parent store will\n  create the child store's state for it :O\n\n  This means that mixing hierarchyConfigs is not supported, since only the\n  parent's hierarchyConfig will be respected during this merge. The child's\n  state will be full-hydrated with its new state after this merge.\n*/function mergeStateTrees(oldStateTree,newStateTree,hierarchyConfig){if(!hierarchyConfig.isNode(oldStateTree)||!hierarchyConfig.isNode(newStateTree)){return[newStateTree,newStateTree!==oldStateTree];}var hasChanges=false;var mergedTree=hierarchyConfig.clone(oldStateTree);hierarchyConfig.iterate(newStateTree,function(key,newVal){var oldVal=hierarchyConfig.get(mergedTree,key);var _ref4=hierarchyConfig.isNode(newVal)?// Recursively merge the nested nodes.\nmergeStateTrees(oldVal,newVal,hierarchyConfig):// Not a nested node (anymore, at least)\n[newVal,newVal!==oldVal],clonedVal=_ref4[0],childHasChanges=_ref4[1];if(!childHasChanges)return;if(!hasChanges)hasChanges=childHasChanges;hierarchyConfig.set(mergedTree,key,clonedVal);});return[hasChanges?mergedTree:oldStateTree,hasChanges];}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelperLoose.js + 2 modules\nvar createForOfIteratorHelperLoose = __webpack_require__(7855);\n;// CONCATENATED MODULE: ../packages/core/src/hierarchy/traverse.ts\nvar getErrorMessage= true?function(subStorePath){return\"Zedux: store.dispatch() - Invalid Delegation - Current store hierarchy does not contain a sub-store at path: \"+subStorePath.join(' -> ');}:0;/**\n  Finds a node in a diffTree given a node path (array of nodes).\n*/var findChild=function findChild(diffTree,nodePath){for(var _iterator=(0,createForOfIteratorHelperLoose/* default */.Z)(nodePath),_step;!(_step=_iterator()).done;){var node=_step.value;if(diffTree.type!==general/* HierarchyType.Branch */._T.Branch){throw new ReferenceError(getErrorMessage(nodePath));}diffTree=diffTree.children[node];if(!diffTree){throw new ReferenceError(getErrorMessage(nodePath));}}return diffTree;};/**\n  Delegates an action to a child store.\n\n  Does nothing if the special `delegate` meta node is not present in the action\n  action chain.\n\n  This expects the `metaData` of the `delegate` meta node to be an array\n  containing a path of nodes describing the child store's location in the parent\n  store's current hierarchy descriptor.\n\n  Delegated actions will not be handled by the parent store at all.\n*/var delegate=function delegate(diffTree,action){var subStorePath=(0,meta/* getMetaData */.g2)(action,constants/* internalTypes.delegate */.P.delegate);if(!subStorePath||!diffTree)return false;var child=findChild(diffTree,subStorePath);if(child.type!==general/* HierarchyType.Store */._T.Store){throw new TypeError(getErrorMessage(subStorePath));};child.store.dispatch((0,meta/* removeMeta */.hM)(action,constants/* internalTypes.delegate */.P.delegate));};/**\n  Propagates a state change from a child store to a parent.\n\n  Recursively finds the child store's node in the parent store's\n  state tree and re-creates all the nodes down that path.\n\n  #immutability\n*/var propagateChange=function propagateChange(currentState,subStorePath,newSubStoreState,hierarchyConfig){if(!subStorePath.length)return newSubStoreState;// at this point we can assume that currentState is a hierarhical structure\n// these \"currentState as any\" casts should be fine\nvar newNode=hierarchyConfig.clone(currentState);var nextNodeKey=subStorePath[0];return hierarchyConfig.set(newNode,nextNodeKey,propagateChange(hierarchyConfig.get(currentState,nextNodeKey),subStorePath.slice(1),newSubStoreState,hierarchyConfig));};\n;// CONCATENATED MODULE: ../packages/core/src/utils/hierarchyConfig.ts\n/**\n  The default method for cloning state tree nodes\n\n  This does not have to create a deep copy.\n  In fact, it probably shouldn't.\n*/var clone=function clone(node){return Object.assign({},node);};/**\n  The default method for creating state tree nodes\n\n  Should return an empty node.\n*/var create=function create(){return{};};/**\n  The default method for retrieving the value of a property on\n  the state tree.\n*/var get=function get(node,key){return node[key];};/**\n  The default method for determining if something is a state tree node\n*/var isNode=general/* isPlainObject */.PO;/**\n  The default method for iterating over the properties of a state tree\n  node.\n\n  Should call `callback` with each key-value pair.\n*/var iterate=function iterate(node,callback){Object.entries(node).forEach(function(_ref){var key=_ref[0],val=_ref[1];return callback(key,val);});};/**\n  The default method for setting the value of a property on the\n  state tree.\n\n  This can be mutating.\n  Zedux promises to never abuse this power.\n*/var set=function set(node,key,val){node[key]=val;return node;};/**\n  The default method for finding the size of a state tree node.\n*/var size=function size(node){return Object.keys(node).length;};\n;// CONCATENATED MODULE: ../packages/core/src/api/createStore.ts\nvar _Symbol$observable;// When an action is dispatched to a parent store and delegated to a child\n// store, the child store needs to wait until the update propagates everywhere\n// and the parent store finishes its dispatch before notifying its subscribers.\n// A proper scheduler will allow all child stores of the currently-dispatching\n// parent store to wait to notify their subscribers until all stores in the\n// hierarchy are done dispatching.\nvar defaultScheduler={scheduleNow:function scheduleNow(job){return job.task();}};var primeAction={type:constants/* internalTypes.prime */.P.prime};/**\n  Creates a new Zedux store.\n*/var createStore=function createStore(initialHierarchy,initialState){return new Store(initialHierarchy,initialState);};_Symbol$observable=Symbol.observable;var Store=/*#__PURE__*/function(){/**\n    Used by the store's branch reducers in the generated reducer hierarchy to\n    interact with the hierarchical data type returned by the store's reducers.\n\n    This \"hierarchical data type\" is a plain object by default. But these\n    hierarchy config options can teach Zedux how to use an Immutable `Map` or\n    any recursive, map-like data structure.\n  */function Store(initialHierarchy,initialState){var _this=this;this._subscribers=[];this.dispatch=function(action){_this._scheduler.scheduleNow({task:function task(){return _this._dispatch(action);},type:0// UpdateStore (0)\n});return _this._currentState;};this.setState=function(settable,meta){_this._scheduler.scheduleNow({task:function task(){return _this._setState(settable,meta);},type:0// UpdateStore (0)\n});return _this._currentState;};this._currentState=initialState;this._scheduler=Store._scheduler||defaultScheduler;if(initialHierarchy)this.use(initialHierarchy);}var _proto=Store.prototype;_proto.actionStream=function actionStream(){var _this2=this,_ref2;return _ref2={},_ref2[Symbol.observable]=function(){return this;},_ref2['@@observable']=function observable(){return this;},_ref2.subscribe=function subscribe(subscriber){return _this2.subscribe({effects:function effects(_ref){var action=_ref.action,error=_ref.error;if(error&&typeof subscriber!=='function'){subscriber.error==null?void 0:subscriber.error(error);}else if(action){typeof subscriber==='function'?subscriber(action):subscriber.next==null?void 0:subscriber.next(action);}}});},_ref2;}/**\n    Dispatches an action to the store.\n\n    The action will be sent through this store's reducer hierarchy (if any) and\n    passed on to any child stores after being wrapped in `inherit` meta nodes\n\n    The resulting state will be returned synchronously from this call.\n\n    This is a bound function property. Every store recreates this small\n    function. But it's always bound and can be passed around easily.\n  */;/**\n    Returns the current state of the store.\n\n    Do not mutate the returned value.\n  */_proto.getState=function getState(){if( true&&this._isDispatching){throw new Error('Zedux: store.getState() cannot be called in a reducer');}return this._currentState;}/**\n    Applies a full hydration to the store.\n\n    Accepts either the new state or a function that accepts the current state\n    and returns the new state.\n\n    Dispatches the special `hydrate` action to the store's reducers. Effects\n    subscribers can inspect and record this action to implement time travel.\n\n    The `hydrate` action's `payload` property will be set to the new state. The\n    action's `meta` property will be set to the passed meta, if any.\n\n    Throws an error if called from the reducer layer.\n\n    Returns the new state.\n\n    Unlike setStateDeep, setState is a bound function property. Every store\n    recreates this small function. But it's always bound and can be passed\n    around easily.\n  */;/**\n    Applies a partial state update to the store.\n\n    Accepts either a deep partial state object or a function that accepts the\n    current state and returns a deep partial state object.\n\n    Dispatches the special `merge` action to the store's reducers.\n    Effects subscribers can inspect and record this action to implement time\n    travel.\n\n    The `merge` action's `payload` property will be set to the partial\n    state update.\n\n    Note that deep setting cannot remove properties from the state tree. If that\n    functionality is needed, use store.setState() or create a new reducer\n    hierarchy and pass it to store.use().\n\n    Throws an error if called from the reducer layer.\n\n    Returns the new state.\n\n    Unlike setState, setStateDeep is not bound. You must call it with context -\n    e.g. by using dot-notation: `store.setStateDeep(...)`\n  */_proto.setStateDeep=function setStateDeep(settable,meta){var _this3=this;this._scheduler.scheduleNow({task:function task(){return _this3._setState(settable,meta,true);},type:0// UpdateStore (0)\n});return this._currentState;}/**\n    Registers a subscriber with the store.\n\n    The subscriber will be notified every time the store's state\n    changes.\n\n    Returns a subscription object. Calling `subscription.unsubscribe()`\n    unregisters the subscriber.\n  */;_proto.subscribe=function subscribe(subscriber){var _this4=this;var subscriberObj=typeof subscriber==='function'?{next:subscriber}:subscriber;if(true){if(subscriberObj.next&&typeof subscriberObj.next!=='function'){throw new TypeError(\"Zedux: store.subscribe() expects either a function or an object with a \\\"next\\\" property whose value is a function. Received: \"+(0,general/* detailedTypeof */.px)(subscriberObj.next));}if(subscriberObj.error&&typeof subscriberObj.error!=='function'){throw new TypeError(\"Zedux: store.subscribe() - subscriber.error must be a function. Received: \"+(0,general/* detailedTypeof */.px)(subscriberObj.error));}if(subscriberObj.effects&&typeof subscriberObj.effects!=='function'){throw new TypeError(\"Zedux: store.subscribe() - subscriber.effects must be a function. Received: \"+(0,general/* detailedTypeof */.px)(subscriberObj.effects));}}this._subscribers.push(subscriberObj);return{unsubscribe:function unsubscribe(){var index=_this4._subscribers.indexOf(subscriberObj);if(index>-1)_this4._subscribers.splice(index,1);}};}/**\n    Merges a hierarchy descriptor into the existing hierarchy descriptor.\n\n    Intelligently diffs the two hierarchies and only creates/recreates the\n    necessary reducers.\n\n    Dispatches the special `prime` action to the store.\n  */;_proto.use=function use(newHierarchy){var newDiffTree=hierarchyDescriptorToDiffTree(newHierarchy,this._registerChildStore.bind(this));this._currentDiffTree=mergeDiffTrees(this._currentDiffTree,newDiffTree,this.constructor.hierarchyConfig);this._rootReducer=this._currentDiffTree.reducer;if(this._rootReducer){this._dispatchAction(primeAction,primeAction,this._currentState);}return this;// for chaining\n}/**\n   * Only for internal use.\n   */;_proto._register=function _register(effects){var parents=this._parents||(this._parents=[]);parents.push(effects);return function(){var index=parents.indexOf(effects);if(index>-1)parents.splice(index,1);};};_proto[_Symbol$observable]=function(){return this;};_proto['@@observable']=function observable(){return this;};_proto._dispatch=function _dispatch(action){if( true&&typeof action==='function'){throw new TypeError('Zedux: store.dispatch() - Thunks are not currently supported. Only normal action objects can be passed to store.dispatch(). For zero-config stores, you can pass a function to store.setState()');}if( true&&!(0,general/* isPlainObject */.PO)(action)){throw new TypeError(\"Zedux: store.dispatch() - Action must be a plain object. Received \"+(0,general/* detailedTypeof */.px)(action));}var delegateResult=delegate(this._currentDiffTree,action);if(delegateResult!==false){// No need to inform subscribers - this store's effects subscriber\n// on the child store will have already done that by this point\nreturn this._currentState;}return this._routeAction(action);};_proto._dispatchAction=function _dispatchAction(action,unwrappedAction,rootState){if( true&&this._isDispatching){throw new Error('Zedux: dispatch(), setState(), and setStateDeep() cannot be called in a reducer');}this._isDispatching=true;var error;var newState=rootState;try{if(this._rootReducer){newState=this._rootReducer(rootState,unwrappedAction);}}catch(err){error=err;throw err;}finally{this._isDispatching=false;this._informSubscribers(newState,action,error);}return newState;}/**\n    \"Hydrates\" the store with the given state.\n\n    Dispatches the special `hydrate` action to the store's inspectors\n    and reducers. The `hydrate` action's `payload` property will be\n    set to the new store state, allowing inspectors to pick up on\n    the changes and implement time travel and whatnot.\n\n    Throws an Error if called from the reducer layer.\n  */;_proto._dispatchHydration=function _dispatchHydration(state,actionType,meta){var newState=actionType===constants/* internalTypes.hydrate */.P.hydrate?state:mergeStateTrees(this._currentState,state,this.constructor.hierarchyConfig)[0];if(newState===this._currentState){// Nothing to do. TODO: Should this inform effects subscribers?\nreturn this._currentState;}var action={payload:newState,type:actionType};if(meta!=null)action.meta=meta;// Maybe we can provide a utility for setting a description for the\n// hydration. Then wrap the action in an ActionMeta with that description\n// as the metaData.\n// Propagate the change to child stores and allow for effects.\nreturn this._dispatchAction(action,action,newState);};_proto._dispatchStateSetter=function _dispatchStateSetter(getState,meta,deep){var newState;try{newState=getState(this._currentState);}catch(error){this._informSubscribers(this._currentState,{type:constants/* internalTypes.merge */.P.merge},error);throw error;}return this._dispatchHydration(newState,deep?constants/* internalTypes.merge */.P.merge:constants/* internalTypes.hydrate */.P.hydrate,meta);};_proto._finishInforming=function _finishInforming(effect){// Clone the subscribers in case of mutation mid-iteration\nvar subscribers=[].concat(this._subscribers);for(var i=0;i<subscribers.length;i++){var subscriber=subscribers[i];if(effect.error&&subscriber.error)subscriber.error(effect.error);if(effect.newState!==effect.oldState&&subscriber.next){subscriber.next(effect.newState,effect.oldState,effect.action);}if(subscriber.effects)subscriber.effects(effect);}};_proto._informSubscribers=function _informSubscribers(newState,action,error){var _this5=this,_this$_parents;var effect={action:action,error:error,newState:newState,oldState:this._currentState,store:this};// Update the stored state\nthis._currentState=newState;// defer informing if a parent store is currently dispatching\nthis._scheduler.scheduleNow({task:function task(){// skip informing subscribers if the state has already been changed\n// by a parent store's subscriber (which state change is already\n// propagated to this store's subscribers by this point):\nif(_this5._currentState!==newState)return;_this5._finishInforming(effect);},type:1// InformSubscribers (1)\n},false);(_this$_parents=this._parents)==null?void 0:_this$_parents.forEach(function(parent){return parent(effect);});};_proto._registerChildStore=function _registerChildStore(childStorePath,childStore){var _this6=this;var effectsSubscriber=function effectsSubscriber(_ref3){var action=_ref3.action,error=_ref3.error,newState=_ref3.newState,oldState=_ref3.oldState;// If this store's reducer layer dispatched this action to this\n// substore in the first place, ignore the propagation; this store\n// will receive it anyway.\n// const isInherited = hasMeta(action, internalTypes.inherit)\nif(_this6._isDispatching)return;var newOwnState=newState===oldState?_this6._currentState:propagateChange(_this6._currentState,childStorePath,newState,_this6.constructor.hierarchyConfig);// Tell the subscribers what child store this action came from.\n// This store (the parent) can use this info to determine how to\n// recreate this state update.\nvar wrappedAction=action&&(0,meta/* addMeta */.k)(action,constants/* internalTypes.delegate */.P.delegate,childStorePath);_this6._informSubscribers(newOwnState,wrappedAction,error);};return childStore._register(effectsSubscriber);};_proto._routeAction=function _routeAction(action){var unwrappedAction=(0,meta/* removeAllMeta */.vU)(action);if( true&&typeof unwrappedAction.type!=='string'){throw new TypeError(\"Zedux: store.dispatch() - Action must have a string \\\"type\\\" property. Received \"+(0,general/* detailedTypeof */.px)(unwrappedAction.type));}if(unwrappedAction.type===constants/* internalTypes.hydrate */.P.hydrate||unwrappedAction.type===constants/* internalTypes.merge */.P.merge){return this._dispatchHydration(unwrappedAction.payload,unwrappedAction.type,unwrappedAction.meta);}return this._dispatchAction(action,unwrappedAction,this._currentState);};_proto._setState=function _setState(settable,meta,deep){if(deep===void 0){deep=false;}if(typeof settable==='function'){return this._dispatchStateSetter(settable,meta,deep);}return this._dispatchHydration(settable,deep?constants/* internalTypes.merge */.P.merge:constants/* internalTypes.hydrate */.P.hydrate,meta);};return Store;}();Store.hierarchyConfig=hierarchyConfig_namespaceObject;Store.$$typeof=general/* STORE_IDENTIFIER */.IE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1694\n")},9283:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"is\": function() { return /* binding */ is; }\n/* harmony export */ });\n/**\n * is() - Checks if a value is an instance of a class\n *\n * We can't use instanceof 'cause that breaks across realms - e.g. when an atom\n * instance is shared between a parent and child window, that instance's object\n * reference will be different in both windows (since each window creates its\n * own copy of Zedux).\n *\n * The classToCheck should have a static $$typeof property whose value is a\n * symbol created with Symbol.for() (sharing the symbol reference across realms)\n *\n * This works no matter how deep the inheritance tree is for either object\n * passed.\n *\n * @param val anything - the thing we're checking\n * @param classToCheck a class with a static $$typeof property\n * @returns boolean - whether val is an instanceof classToCheck\n */var is=function is(val,classToCheck){var _val$constructor;return(val==null?void 0:(_val$constructor=val.constructor)==null?void 0:_val$constructor.$$typeof)===classToCheck.$$typeof;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTI4My5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNQSxHQUFFLENBQUcsUUFBTEEsR0FBRSxDQUFJQyxHQUFRLENBQUVDLFlBQWtDLDZCQUM3RCxDQUFBRCxHQUFHLGdDQUFIQSxHQUFHLENBQUVFLFdBQVcsZUFBaEIsaUJBQWtCQyxRQUFRLElBQUtGLFlBQVksQ0FBQ0UsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvY29yZS9zcmMvYXBpL2lzLnRzP2NiNTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBpcygpIC0gQ2hlY2tzIGlmIGEgdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgYSBjbGFzc1xuICpcbiAqIFdlIGNhbid0IHVzZSBpbnN0YW5jZW9mICdjYXVzZSB0aGF0IGJyZWFrcyBhY3Jvc3MgcmVhbG1zIC0gZS5nLiB3aGVuIGFuIGF0b21cbiAqIGluc3RhbmNlIGlzIHNoYXJlZCBiZXR3ZWVuIGEgcGFyZW50IGFuZCBjaGlsZCB3aW5kb3csIHRoYXQgaW5zdGFuY2UncyBvYmplY3RcbiAqIHJlZmVyZW5jZSB3aWxsIGJlIGRpZmZlcmVudCBpbiBib3RoIHdpbmRvd3MgKHNpbmNlIGVhY2ggd2luZG93IGNyZWF0ZXMgaXRzXG4gKiBvd24gY29weSBvZiBaZWR1eCkuXG4gKlxuICogVGhlIGNsYXNzVG9DaGVjayBzaG91bGQgaGF2ZSBhIHN0YXRpYyAkJHR5cGVvZiBwcm9wZXJ0eSB3aG9zZSB2YWx1ZSBpcyBhXG4gKiBzeW1ib2wgY3JlYXRlZCB3aXRoIFN5bWJvbC5mb3IoKSAoc2hhcmluZyB0aGUgc3ltYm9sIHJlZmVyZW5jZSBhY3Jvc3MgcmVhbG1zKVxuICpcbiAqIFRoaXMgd29ya3Mgbm8gbWF0dGVyIGhvdyBkZWVwIHRoZSBpbmhlcml0YW5jZSB0cmVlIGlzIGZvciBlaXRoZXIgb2JqZWN0XG4gKiBwYXNzZWQuXG4gKlxuICogQHBhcmFtIHZhbCBhbnl0aGluZyAtIHRoZSB0aGluZyB3ZSdyZSBjaGVja2luZ1xuICogQHBhcmFtIGNsYXNzVG9DaGVjayBhIGNsYXNzIHdpdGggYSBzdGF0aWMgJCR0eXBlb2YgcHJvcGVydHlcbiAqIEByZXR1cm5zIGJvb2xlYW4gLSB3aGV0aGVyIHZhbCBpcyBhbiBpbnN0YW5jZW9mIGNsYXNzVG9DaGVja1xuICovXG5leHBvcnQgY29uc3QgaXMgPSAodmFsOiBhbnksIGNsYXNzVG9DaGVjazogeyAkJHR5cGVvZjogc3ltYm9sIH0pOiBib29sZWFuID0+XG4gIHZhbD8uY29uc3RydWN0b3I/LiQkdHlwZW9mID09PSBjbGFzc1RvQ2hlY2suJCR0eXBlb2ZcbiJdLCJuYW1lcyI6WyJpcyIsInZhbCIsImNsYXNzVG9DaGVjayIsImNvbnN0cnVjdG9yIiwiJCR0eXBlb2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9283\n")},7159:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "g2": function() { return /* binding */ getMetaData; },\n/* harmony export */   "hM": function() { return /* binding */ removeMeta; },\n/* harmony export */   "k": function() { return /* binding */ addMeta; },\n/* harmony export */   "vU": function() { return /* binding */ removeAllMeta; },\n/* harmony export */   "yF": function() { return /* binding */ hasMeta; }\n/* harmony export */ });\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8487);\nvar assertActionExists= true?function(action){if(action)return;throw new Error("Zedux: Invalid action chain. The last node in the chain must be either a valid action object with a non-empty \\"type\\" property or an effect with a non-empty \\"effectType\\" property. Received "+(0,_utils_general__WEBPACK_IMPORTED_MODULE_0__/* .detailedTypeof */ .px)(action));}:0;var getNewRoot=function getNewRoot(currentNode,prevNode,rootNode){// If the match is at the top layer, just return the next layer\nif(!prevNode||!rootNode)return currentNode.payload;// If the match is at least one layer deep, swap out the target layer\n// and return the new root of the action chain\nprevNode.payload=currentNode.payload;return rootNode;};/**\n * Adds a meta node of the given metaType and with the given metaData at the\n * beginning of an ActionChain\n */var addMeta=function addMeta(action,metaType,metaData){var wrappedAction={metaType:metaType,payload:action};if(metaData)wrappedAction.metaData=metaData;return wrappedAction;};/**\n * Returns the value of the metaData field of the first ActionMeta object in the\n * chain with the given metaType.\n */var getMetaData=function getMetaData(action,metaType){while(action.metaType){if(action.metaType===metaType){return action.metaData;}action=action.payload;if(true){assertActionExists(action);}}};/**\n * Returns true if the given ActionChain contains an ActionMeta node with the\n * given metaType.\n */var hasMeta=function hasMeta(action,metaType){while(action.metaType){if(action.metaType===metaType)return true;action=action.payload;if(true){assertActionExists(action);}}return false;};/**\n * Strips all ActionMeta nodes off an ActionChain and returns the wrapped Action\n */var removeAllMeta=function removeAllMeta(action){while(action.metaType){action=action.payload;if(true){assertActionExists(action);}}return action;};/**\n * Removes the first found meta node with the given metaType in the given action\n * chain.\n *\n * The metaType does not have to exist in the action chain (though this\'ll be\n * pretty inefficient and wasteful if it doesn\'t).\n */var removeMeta=function removeMeta(action,metaType){var currentNode=action;var prevNode=null;var rootNode=null;while(currentNode.metaType){if(currentNode.metaType===metaType){return getNewRoot(currentNode,prevNode,rootNode);}// Move down the chain\nvar clonedNode=Object.assign({},currentNode);prevNode&&(prevNode.payload=clonedNode);prevNode=clonedNode;currentNode=currentNode.payload;// If this will be the new root, remember it\nrootNode||(rootNode=prevNode);}// No match found; return the original action chain\nreturn action;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBRUE7QUFDQSxHQUFNVSxXQUFVLGtCQUFRWixXQUFXLENBQUUsQ0FFckNDLFFBQVEsR0FBS0EsUUFBUSxDQUFDRSxPQUFPLENBQUdTLFVBQVUsQ0FBQyxDQUUzQ1gsUUFBUSxDQUFHVyxVQUFVLENBQ3JCWixXQUFXLENBQUdBLFdBQVcsQ0FBQ0csT0FBTyxDQUVqQztBQUNBRCxRQUFRLEdBQUtBLFFBQVEsQ0FBR0QsUUFBUSxDQUFDLENBQ25DLENBRUE7QUFDQSxNQUFPSixPQUFNLENBQ2YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvY29yZS9zcmMvYXBpL21ldGEudHM/NDlhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXRhaWxlZFR5cGVvZiwgbm9vcCB9IGZyb20gJy4uL3V0aWxzL2dlbmVyYWwnXG5pbXBvcnQgeyBBY3Rpb24sIEFjdGlvbkNoYWluLCBBY3Rpb25NZXRhIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmNvbnN0IGFzc2VydEFjdGlvbkV4aXN0cyA9IERFVlxuICA/IChhY3Rpb246IEFjdGlvbkNoYWluKSA9PiB7XG4gICAgICBpZiAoYWN0aW9uKSByZXR1cm5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgWmVkdXg6IEludmFsaWQgYWN0aW9uIGNoYWluLiBUaGUgbGFzdCBub2RlIGluIHRoZSBjaGFpbiBtdXN0IGJlIGVpdGhlciBhIHZhbGlkIGFjdGlvbiBvYmplY3Qgd2l0aCBhIG5vbi1lbXB0eSBcInR5cGVcIiBwcm9wZXJ0eSBvciBhbiBlZmZlY3Qgd2l0aCBhIG5vbi1lbXB0eSBcImVmZmVjdFR5cGVcIiBwcm9wZXJ0eS4gUmVjZWl2ZWQgJHtkZXRhaWxlZFR5cGVvZihcbiAgICAgICAgICBhY3Rpb25cbiAgICAgICAgKX1gXG4gICAgICApXG4gICAgfVxuICA6IG5vb3BcblxuY29uc3QgZ2V0TmV3Um9vdCA9IDxUIGV4dGVuZHMgQWN0aW9uQ2hhaW4+KFxuICBjdXJyZW50Tm9kZTogVCxcbiAgcHJldk5vZGU6IFQgfCBudWxsLFxuICByb290Tm9kZTogVCB8IG51bGxcbik6IFQgPT4ge1xuICAvLyBJZiB0aGUgbWF0Y2ggaXMgYXQgdGhlIHRvcCBsYXllciwganVzdCByZXR1cm4gdGhlIG5leHQgbGF5ZXJcbiAgaWYgKCFwcmV2Tm9kZSB8fCAhcm9vdE5vZGUpIHJldHVybiBjdXJyZW50Tm9kZS5wYXlsb2FkXG5cbiAgLy8gSWYgdGhlIG1hdGNoIGlzIGF0IGxlYXN0IG9uZSBsYXllciBkZWVwLCBzd2FwIG91dCB0aGUgdGFyZ2V0IGxheWVyXG4gIC8vIGFuZCByZXR1cm4gdGhlIG5ldyByb290IG9mIHRoZSBhY3Rpb24gY2hhaW5cbiAgcHJldk5vZGUucGF5bG9hZCA9IGN1cnJlbnROb2RlLnBheWxvYWRcblxuICByZXR1cm4gcm9vdE5vZGVcbn1cblxuLyoqXG4gKiBBZGRzIGEgbWV0YSBub2RlIG9mIHRoZSBnaXZlbiBtZXRhVHlwZSBhbmQgd2l0aCB0aGUgZ2l2ZW4gbWV0YURhdGEgYXQgdGhlXG4gKiBiZWdpbm5pbmcgb2YgYW4gQWN0aW9uQ2hhaW5cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZE1ldGEgPSAoXG4gIGFjdGlvbjogQWN0aW9uQ2hhaW4sXG4gIG1ldGFUeXBlOiBzdHJpbmcsXG4gIG1ldGFEYXRhPzogYW55XG4pID0+IHtcbiAgY29uc3Qgd3JhcHBlZEFjdGlvbjogQWN0aW9uTWV0YSA9IHtcbiAgICBtZXRhVHlwZSxcbiAgICBwYXlsb2FkOiBhY3Rpb24sXG4gIH1cblxuICBpZiAobWV0YURhdGEpIHdyYXBwZWRBY3Rpb24ubWV0YURhdGEgPSBtZXRhRGF0YVxuXG4gIHJldHVybiB3cmFwcGVkQWN0aW9uXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIG1ldGFEYXRhIGZpZWxkIG9mIHRoZSBmaXJzdCBBY3Rpb25NZXRhIG9iamVjdCBpbiB0aGVcbiAqIGNoYWluIHdpdGggdGhlIGdpdmVuIG1ldGFUeXBlLlxuICovXG5leHBvcnQgY29uc3QgZ2V0TWV0YURhdGEgPSAoYWN0aW9uOiBBY3Rpb25DaGFpbiwgbWV0YVR5cGU6IHN0cmluZykgPT4ge1xuICB3aGlsZSAoKGFjdGlvbiBhcyBBY3Rpb25NZXRhKS5tZXRhVHlwZSkge1xuICAgIGlmICgoYWN0aW9uIGFzIEFjdGlvbk1ldGEpLm1ldGFUeXBlID09PSBtZXRhVHlwZSkge1xuICAgICAgcmV0dXJuIChhY3Rpb24gYXMgQWN0aW9uTWV0YSkubWV0YURhdGFcbiAgICB9XG5cbiAgICBhY3Rpb24gPSBhY3Rpb24ucGF5bG9hZFxuXG4gICAgaWYgKERFVikge1xuICAgICAgYXNzZXJ0QWN0aW9uRXhpc3RzKGFjdGlvbilcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIEFjdGlvbkNoYWluIGNvbnRhaW5zIGFuIEFjdGlvbk1ldGEgbm9kZSB3aXRoIHRoZVxuICogZ2l2ZW4gbWV0YVR5cGUuXG4gKi9cbmV4cG9ydCBjb25zdCBoYXNNZXRhID0gKGFjdGlvbjogQWN0aW9uQ2hhaW4sIG1ldGFUeXBlOiBzdHJpbmcpID0+IHtcbiAgd2hpbGUgKChhY3Rpb24gYXMgQWN0aW9uTWV0YSkubWV0YVR5cGUpIHtcbiAgICBpZiAoKGFjdGlvbiBhcyBBY3Rpb25NZXRhKS5tZXRhVHlwZSA9PT0gbWV0YVR5cGUpIHJldHVybiB0cnVlXG5cbiAgICBhY3Rpb24gPSBhY3Rpb24ucGF5bG9hZFxuXG4gICAgaWYgKERFVikge1xuICAgICAgYXNzZXJ0QWN0aW9uRXhpc3RzKGFjdGlvbilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyoqXG4gKiBTdHJpcHMgYWxsIEFjdGlvbk1ldGEgbm9kZXMgb2ZmIGFuIEFjdGlvbkNoYWluIGFuZCByZXR1cm5zIHRoZSB3cmFwcGVkIEFjdGlvblxuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlQWxsTWV0YSA9IChhY3Rpb246IEFjdGlvbkNoYWluKSA9PiB7XG4gIHdoaWxlICgoYWN0aW9uIGFzIEFjdGlvbk1ldGEpLm1ldGFUeXBlKSB7XG4gICAgYWN0aW9uID0gYWN0aW9uLnBheWxvYWRcblxuICAgIGlmIChERVYpIHtcbiAgICAgIGFzc2VydEFjdGlvbkV4aXN0cyhhY3Rpb24pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFjdGlvbiBhcyBBY3Rpb25cbn1cblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBmaXJzdCBmb3VuZCBtZXRhIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gbWV0YVR5cGUgaW4gdGhlIGdpdmVuIGFjdGlvblxuICogY2hhaW4uXG4gKlxuICogVGhlIG1ldGFUeXBlIGRvZXMgbm90IGhhdmUgdG8gZXhpc3QgaW4gdGhlIGFjdGlvbiBjaGFpbiAodGhvdWdoIHRoaXMnbGwgYmVcbiAqIHByZXR0eSBpbmVmZmljaWVudCBhbmQgd2FzdGVmdWwgaWYgaXQgZG9lc24ndCkuXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVNZXRhID0gKGFjdGlvbjogQWN0aW9uQ2hhaW4sIG1ldGFUeXBlOiBzdHJpbmcpID0+IHtcbiAgbGV0IGN1cnJlbnROb2RlID0gYWN0aW9uXG4gIGxldCBwcmV2Tm9kZSA9IG51bGxcbiAgbGV0IHJvb3ROb2RlID0gbnVsbFxuXG4gIHdoaWxlICgoY3VycmVudE5vZGUgYXMgQWN0aW9uTWV0YSkubWV0YVR5cGUpIHtcbiAgICBpZiAoKGN1cnJlbnROb2RlIGFzIEFjdGlvbk1ldGEpLm1ldGFUeXBlID09PSBtZXRhVHlwZSkge1xuICAgICAgcmV0dXJuIGdldE5ld1Jvb3QoY3VycmVudE5vZGUsIHByZXZOb2RlLCByb290Tm9kZSlcbiAgICB9XG5cbiAgICAvLyBNb3ZlIGRvd24gdGhlIGNoYWluXG4gICAgY29uc3QgY2xvbmVkTm9kZSA9IHsgLi4uY3VycmVudE5vZGUgfVxuXG4gICAgcHJldk5vZGUgJiYgKHByZXZOb2RlLnBheWxvYWQgPSBjbG9uZWROb2RlKVxuXG4gICAgcHJldk5vZGUgPSBjbG9uZWROb2RlXG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXlsb2FkXG5cbiAgICAvLyBJZiB0aGlzIHdpbGwgYmUgdGhlIG5ldyByb290LCByZW1lbWJlciBpdFxuICAgIHJvb3ROb2RlIHx8IChyb290Tm9kZSA9IHByZXZOb2RlKVxuICB9XG5cbiAgLy8gTm8gbWF0Y2ggZm91bmQ7IHJldHVybiB0aGUgb3JpZ2luYWwgYWN0aW9uIGNoYWluXG4gIHJldHVybiBhY3Rpb25cbn1cbiJdLCJuYW1lcyI6WyJkZXRhaWxlZFR5cGVvZiIsIm5vb3AiLCJhc3NlcnRBY3Rpb25FeGlzdHMiLCJERVYiLCJhY3Rpb24iLCJFcnJvciIsImdldE5ld1Jvb3QiLCJjdXJyZW50Tm9kZSIsInByZXZOb2RlIiwicm9vdE5vZGUiLCJwYXlsb2FkIiwiYWRkTWV0YSIsIm1ldGFUeXBlIiwibWV0YURhdGEiLCJ3cmFwcGVkQWN0aW9uIiwiZ2V0TWV0YURhdGEiLCJoYXNNZXRhIiwicmVtb3ZlQWxsTWV0YSIsInJlbW92ZU1ldGEiLCJjbG9uZWROb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7159\n')},8487:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "IE": function() { return /* binding */ STORE_IDENTIFIER; },\n/* harmony export */   "PO": function() { return /* binding */ isPlainObject; },\n/* harmony export */   "_T": function() { return /* binding */ HierarchyType; },\n/* harmony export */   "px": function() { return /* binding */ detailedTypeof; }\n/* harmony export */ });\n/* unused harmony exports ARRAY, COMPLEX_OBJECT, NO_PROTOTYPE, NULL, PLAIN_OBJECT, observableSymbol, noop */\nvar ARRAY=\'array\';var COMPLEX_OBJECT=\'complex object\';var NO_PROTOTYPE=\'prototype-less object\';var NULL=\'null\';var PLAIN_OBJECT=\'object\';/**\n  Determines which kind of object an "object" is.\n\n  Objects can be prototype-less, complex, or plain.\n*/function getDetailedObjectType(value){var prototype=Object.getPrototypeOf(value);if(!prototype)return NO_PROTOTYPE;return Object.getPrototypeOf(prototype)?COMPLEX_OBJECT:PLAIN_OBJECT;}var HierarchyType;(function(HierarchyType){HierarchyType[HierarchyType["Branch"]=0]="Branch";HierarchyType[HierarchyType["Null"]=1]="Null";HierarchyType[HierarchyType["Reducer"]=2]="Reducer";HierarchyType[HierarchyType["Store"]=3]="Store";})(HierarchyType||(HierarchyType={}));var observableSymbol=typeof Symbol===\'function\'&&Symbol.observable||\'@@observable\';// Used to check if something is a Zedux store\nvar STORE_IDENTIFIER=Symbol.for(\'zedux.store\');/**\n  Returns a more informative description of value\'s type.\n\n  Used to give users helpful error messages that detail exactly why\n  their input was rejected, rather than ux nightmares like:\n\n  "expected a plain object, received object"\n*/function detailedTypeof(value){var valueType=typeof value;if(valueType!==\'object\')return valueType;if(!value)return NULL;if(Array.isArray(value))return ARRAY;return getDetailedObjectType(value);}/**\n  Checks whether value is a plain old object.\n\n  The object may originate from another realm or have its prototype\n  explicitly set to Object.prototype, but it may not have a null\n  prototype or prototype chain more than 1 layer deep.\n*/function isPlainObject(value){if(typeof value!==\'object\'||!value)return false;var prototype=Object.getPrototypeOf(value);if(!prototype)return false;// it was created with Object.create(null)\n// If the prototype chain is exactly 1 layer deep, it\'s likely a normal object\nreturn Object.getPrototypeOf(prototype)===null;}var noop=function noop(){};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQ4Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sR0FBTUEsTUFBSyxDQUFHLE9BQU8sQ0FDckIsR0FBTUMsZUFBYyxDQUFHLGdCQUFnQixDQUN2QyxHQUFNQyxhQUFZLENBQUcsdUJBQXVCLENBQzVDLEdBQU1DLEtBQUksQ0FBRyxNQUFNLENBQ25CLEdBQU1DLGFBQVksQ0FBRyxRQUFRLENBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFDQSxRQUFTQyxzQkFBcUIsQ0FBQ0MsS0FBVSxDQUFFLENBQ3pDLEdBQU1DLFVBQVMsQ0FBR0MsTUFBTSxDQUFDQyxjQUFjLENBQUNILEtBQUssQ0FBQyxDQUU5QyxHQUFJLENBQUNDLFNBQVMsQ0FBRSxNQUFPTCxhQUFZLENBRW5DLE1BQU9NLE9BQU0sQ0FBQ0MsY0FBYyxDQUFDRixTQUFTLENBQUMsQ0FBR04sY0FBYyxDQUFHRyxZQUFZLENBQ3pFLENBRU8sR0FBS00sY0FBYSxDQUt4QixVQUxXQSxhQUFhLEVBQWJBLGFBQWEsQ0FBYkEsYUFBYSx1QkFBYkEsYUFBYSxDQUFiQSxhQUFhLG1CQUFiQSxhQUFhLENBQWJBLGFBQWEseUJBQWJBLGFBQWEsQ0FBYkEsYUFBYSx3QkFBYkEsYUFBYSxHQUFiQSxhQUFhLE1BT2xCLEdBQU1DLGlCQUFnQixDQUMxQixNQUFPQyxPQUFNLEdBQUssVUFBVSxFQUFLQSxNQUFNLENBQVNDLFVBQVUsRUFBSyxjQUFjLENBRWhGO0FBQ08sR0FBTUMsaUJBQWdCLENBQUdGLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQ08sUUFBU0MsZUFBYyxDQUFDVixLQUFVLENBQUUsQ0FDekMsR0FBTVcsVUFBUyxDQUFHLE1BQU9YLE1BQUssQ0FFOUIsR0FBSVcsU0FBUyxHQUFLLFFBQVEsQ0FBRSxNQUFPQSxVQUFTLENBQzVDLEdBQUksQ0FBQ1gsS0FBSyxDQUFFLE1BQU9ILEtBQUksQ0FDdkIsR0FBSWUsS0FBSyxDQUFDQyxPQUFPLENBQUNiLEtBQUssQ0FBQyxDQUFFLE1BQU9OLE1BQUssQ0FFdEMsTUFBT0ssc0JBQXFCLENBQUNDLEtBQUssQ0FBQyxDQUNyQyxDQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQ08sUUFBU2MsY0FBYSxDQUFDZCxLQUFVLENBQUUsQ0FDeEMsR0FBSSxNQUFPQSxNQUFLLEdBQUssUUFBUSxFQUFJLENBQUNBLEtBQUssQ0FBRSxNQUFPLE1BQUssQ0FFckQsR0FBTUMsVUFBUyxDQUFHQyxNQUFNLENBQUNDLGNBQWMsQ0FBQ0gsS0FBSyxDQUFDLENBQzlDLEdBQUksQ0FBQ0MsU0FBUyxDQUFFLE1BQU8sTUFBSyxDQUFDO0FBRTdCO0FBQ0EsTUFBT0MsT0FBTSxDQUFDQyxjQUFjLENBQUNGLFNBQVMsQ0FBQyxHQUFLLElBQUksQ0FDbEQsQ0FFTyxHQUFNYyxLQUFJLENBQUcsUUFBUEEsS0FBSSxFQUFTLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvY29yZS9zcmMvdXRpbHMvZ2VuZXJhbC50cz81MTM3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBUlJBWSA9ICdhcnJheSdcbmV4cG9ydCBjb25zdCBDT01QTEVYX09CSkVDVCA9ICdjb21wbGV4IG9iamVjdCdcbmV4cG9ydCBjb25zdCBOT19QUk9UT1RZUEUgPSAncHJvdG90eXBlLWxlc3Mgb2JqZWN0J1xuZXhwb3J0IGNvbnN0IE5VTEwgPSAnbnVsbCdcbmV4cG9ydCBjb25zdCBQTEFJTl9PQkpFQ1QgPSAnb2JqZWN0J1xuXG4vKipcbiAgRGV0ZXJtaW5lcyB3aGljaCBraW5kIG9mIG9iamVjdCBhbiBcIm9iamVjdFwiIGlzLlxuXG4gIE9iamVjdHMgY2FuIGJlIHByb3RvdHlwZS1sZXNzLCBjb21wbGV4LCBvciBwbGFpbi5cbiovXG5mdW5jdGlvbiBnZXREZXRhaWxlZE9iamVjdFR5cGUodmFsdWU6IGFueSkge1xuICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpXG5cbiAgaWYgKCFwcm90b3R5cGUpIHJldHVybiBOT19QUk9UT1RZUEVcblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPyBDT01QTEVYX09CSkVDVCA6IFBMQUlOX09CSkVDVFxufVxuXG5leHBvcnQgZW51bSBIaWVyYXJjaHlUeXBlIHtcbiAgQnJhbmNoLFxuICBOdWxsLFxuICBSZWR1Y2VyLFxuICBTdG9yZSxcbn1cblxuZXhwb3J0IGNvbnN0IG9ic2VydmFibGVTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiAoU3ltYm9sIGFzIGFueSkub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSdcblxuLy8gVXNlZCB0byBjaGVjayBpZiBzb21ldGhpbmcgaXMgYSBaZWR1eCBzdG9yZVxuZXhwb3J0IGNvbnN0IFNUT1JFX0lERU5USUZJRVIgPSBTeW1ib2wuZm9yKCd6ZWR1eC5zdG9yZScpXG5cbi8qKlxuICBSZXR1cm5zIGEgbW9yZSBpbmZvcm1hdGl2ZSBkZXNjcmlwdGlvbiBvZiB2YWx1ZSdzIHR5cGUuXG5cbiAgVXNlZCB0byBnaXZlIHVzZXJzIGhlbHBmdWwgZXJyb3IgbWVzc2FnZXMgdGhhdCBkZXRhaWwgZXhhY3RseSB3aHlcbiAgdGhlaXIgaW5wdXQgd2FzIHJlamVjdGVkLCByYXRoZXIgdGhhbiB1eCBuaWdodG1hcmVzIGxpa2U6XG5cbiAgXCJleHBlY3RlZCBhIHBsYWluIG9iamVjdCwgcmVjZWl2ZWQgb2JqZWN0XCJcbiovXG5leHBvcnQgZnVuY3Rpb24gZGV0YWlsZWRUeXBlb2YodmFsdWU6IGFueSkge1xuICBjb25zdCB2YWx1ZVR5cGUgPSB0eXBlb2YgdmFsdWVcblxuICBpZiAodmFsdWVUeXBlICE9PSAnb2JqZWN0JykgcmV0dXJuIHZhbHVlVHlwZVxuICBpZiAoIXZhbHVlKSByZXR1cm4gTlVMTFxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiBBUlJBWVxuXG4gIHJldHVybiBnZXREZXRhaWxlZE9iamVjdFR5cGUodmFsdWUpXG59XG5cbi8qKlxuICBDaGVja3Mgd2hldGhlciB2YWx1ZSBpcyBhIHBsYWluIG9sZCBvYmplY3QuXG5cbiAgVGhlIG9iamVjdCBtYXkgb3JpZ2luYXRlIGZyb20gYW5vdGhlciByZWFsbSBvciBoYXZlIGl0cyBwcm90b3R5cGVcbiAgZXhwbGljaXRseSBzZXQgdG8gT2JqZWN0LnByb3RvdHlwZSwgYnV0IGl0IG1heSBub3QgaGF2ZSBhIG51bGxcbiAgcHJvdG90eXBlIG9yIHByb3RvdHlwZSBjaGFpbiBtb3JlIHRoYW4gMSBsYXllciBkZWVwLlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgIXZhbHVlKSByZXR1cm4gZmFsc2VcblxuICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpXG4gIGlmICghcHJvdG90eXBlKSByZXR1cm4gZmFsc2UgLy8gaXQgd2FzIGNyZWF0ZWQgd2l0aCBPYmplY3QuY3JlYXRlKG51bGwpXG5cbiAgLy8gSWYgdGhlIHByb3RvdHlwZSBjaGFpbiBpcyBleGFjdGx5IDEgbGF5ZXIgZGVlcCwgaXQncyBsaWtlbHkgYSBub3JtYWwgb2JqZWN0XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbFxufVxuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHt9XG4iXSwibmFtZXMiOlsiQVJSQVkiLCJDT01QTEVYX09CSkVDVCIsIk5PX1BST1RPVFlQRSIsIk5VTEwiLCJQTEFJTl9PQkpFQ1QiLCJnZXREZXRhaWxlZE9iamVjdFR5cGUiLCJ2YWx1ZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiSGllcmFyY2h5VHlwZSIsIm9ic2VydmFibGVTeW1ib2wiLCJTeW1ib2wiLCJvYnNlcnZhYmxlIiwiU1RPUkVfSURFTlRJRklFUiIsImZvciIsImRldGFpbGVkVHlwZW9mIiwidmFsdWVUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNQbGFpbk9iamVjdCIsIm5vb3AiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8487\n')},2448:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "u": function() { return /* binding */ AtomApi; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9283);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1694);\n/* harmony import */ var _zedux_react_utils_general__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(395);\nvar AtomApi=/*#__PURE__*/function(){function AtomApi(value){this.promise=undefined;this.value=value;this.store=(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__.is)(value,_zedux_core__WEBPACK_IMPORTED_MODULE_1__/* .Store */ .y)?value:undefined;if((0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__.is)(value,AtomApi)){Object.assign(this,value);}}var _proto=AtomApi.prototype;_proto.addExports=function addExports(exports){if(!this.exports)this.exports=exports;else this.exports=Object.assign({},this.exports,exports);return this;};_proto.setExports=function setExports(exports){;this.exports=exports;return this;// for chaining\n};_proto.setPromise=function setPromise(promise){this.promise=promise;return this;// for chaining\n};_proto.setTtl=function setTtl(ttl){this.ttl=ttl;return this;// for chaining\n};return AtomApi;}();AtomApi.$$typeof=Symbol.for(_zedux_react_utils_general__WEBPACK_IMPORTED_MODULE_2__/* .prefix */ .O4+"/AtomApi");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ0OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFJTyxHQUFNRyxRQUFPLHlCQWNsQixpQkFDRUMsS0FBMEUsQ0FDMUUsQ0FDQSxJQUFJLENBQUNDLE9BQU8sQ0FBR0MsU0FBd0IsQ0FDdkMsSUFBSSxDQUFDRixLQUFLLENBQUdBLEtBQTBCLENBQ3ZDLElBQUksQ0FBQ0csS0FBSyxDQUFJUCwrQ0FBRSxDQUFDSSxLQUFLLENBQUVILHVEQUFLLENBQUMsQ0FBR0csS0FBSyxDQUFHRSxTQUF1QixDQUVoRSxHQUFJTiwrQ0FBRSxDQUFDSSxLQUFLLENBQUVELE9BQU8sQ0FBQyxDQUFFLENBQ3RCSyxNQUFNLENBQUNDLE1BQU0sQ0FDWCxJQUFJLENBQ0pMLEtBQUssQ0FDTixDQUNILENBQ0YsQ0FBQyxvQ0FFTU0sVUFBVSxDQUFqQixvQkFDRUMsT0FBbUIsQ0FDMkMsQ0FDOUQsR0FBSSxDQUFDLElBQUksQ0FBQ0EsT0FBTyxDQUFFLElBQUksQ0FBQ0EsT0FBTyxDQUFHQSxPQUFjLEtBQzNDLEtBQUksQ0FBQ0EsT0FBTyxrQkFBUSxJQUFJLENBQUNBLE9BQU8sQ0FBS0EsT0FBTyxDQUFFLENBRW5ELE1BQU8sS0FBSSxDQUNiLENBQUMsUUFFTUMsVUFBVSxDQUFqQixvQkFDRUQsT0FBbUIsQ0FDaUMsQ0FDcEQsQ0FBRyxJQUFJLENBS0pBLE9BQU8sQ0FBR0EsT0FBTyxDQUVwQixNQUFRLEtBQUksQ0FLVjtBQUNKLENBQUMsUUFFTUUsVUFBVSxDQUFqQixvQkFDRVIsT0FBbUIsQ0FDNkIsQ0FDaEQsSUFBSSxDQUFDQSxPQUFPLENBQUlBLE9BQWtDLENBRWxELE1BQU8sS0FBSSxDQUFtRDtBQUNoRSxDQUFDLFFBRU1TLE1BQU0sQ0FBYixnQkFBY0MsR0FBOEMsQ0FBRSxDQUM1RCxJQUFJLENBQUNBLEdBQUcsQ0FBR0EsR0FBRyxDQUVkLE1BQU8sS0FBSSxDQUFDO0FBQ2QsQ0FBQyxvQkFwRVVaLE9BQU8sQ0FNSmEsUUFBUSxDQUFHQyxNQUFNLENBQUNDLEdBQUcsQ0FBSWhCLHdFQUFNLFlBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9jbGFzc2VzL0F0b21BcGkudHM/ZjJhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpcywgU3RvcmUgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7IEF0b21JbnN0YW5jZVR0bCwgQXRvbUFwaVByb21pc2UgfSBmcm9tICdAemVkdXgvcmVhY3QvdHlwZXMnXG5pbXBvcnQgeyBwcmVmaXggfSBmcm9tICdAemVkdXgvcmVhY3QvdXRpbHMvZ2VuZXJhbCdcblxuZXhwb3J0IGNsYXNzIEF0b21BcGk8XG4gIFN0YXRlLFxuICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PixcbiAgU3RvcmVUeXBlIGV4dGVuZHMgU3RvcmU8U3RhdGU+IHwgdW5kZWZpbmVkLFxuICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlXG4+IHtcbiAgcHVibGljIHN0YXRpYyAkJHR5cGVvZiA9IFN5bWJvbC5mb3IoYCR7cHJlZml4fS9BdG9tQXBpYClcblxuICBwdWJsaWMgZXhwb3J0cz86IEV4cG9ydHNcbiAgcHVibGljIHByb21pc2U6IFByb21pc2VUeXBlXG4gIHB1YmxpYyBzdG9yZTogU3RvcmVUeXBlXG4gIHB1YmxpYyB0dGw/OiBBdG9tSW5zdGFuY2VUdGwgfCAoKCkgPT4gQXRvbUluc3RhbmNlVHRsKVxuICBwdWJsaWMgdmFsdWU6IFN0YXRlIHwgU3RvcmVUeXBlXG5cbiAgY29uc3RydWN0b3IoXG4gICAgdmFsdWU6IEF0b21BcGk8U3RhdGUsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+IHwgU3RvcmVUeXBlIHwgU3RhdGVcbiAgKSB7XG4gICAgdGhpcy5wcm9taXNlID0gdW5kZWZpbmVkIGFzIFByb21pc2VUeXBlXG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlIGFzIFN0b3JlVHlwZSB8IFN0YXRlXG4gICAgdGhpcy5zdG9yZSA9IChpcyh2YWx1ZSwgU3RvcmUpID8gdmFsdWUgOiB1bmRlZmluZWQpIGFzIFN0b3JlVHlwZVxuXG4gICAgaWYgKGlzKHZhbHVlLCBBdG9tQXBpKSkge1xuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgdGhpcyxcbiAgICAgICAgdmFsdWUgYXMgQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYWRkRXhwb3J0czxOZXdFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4oXG4gICAgZXhwb3J0czogTmV3RXhwb3J0c1xuICApOiBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzICYgTmV3RXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4ge1xuICAgIGlmICghdGhpcy5leHBvcnRzKSB0aGlzLmV4cG9ydHMgPSBleHBvcnRzIGFzIGFueVxuICAgIGVsc2UgdGhpcy5leHBvcnRzID0geyAuLi50aGlzLmV4cG9ydHMsIC4uLmV4cG9ydHMgfVxuXG4gICAgcmV0dXJuIHRoaXMgYXMgQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cyAmIE5ld0V4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG4gIH1cblxuICBwdWJsaWMgc2V0RXhwb3J0czxOZXdFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4oXG4gICAgZXhwb3J0czogTmV3RXhwb3J0c1xuICApOiBBdG9tQXBpPFN0YXRlLCBOZXdFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiB7XG4gICAgOygodGhpcyBhcyB1bmtub3duKSBhcyBBdG9tQXBpPFxuICAgICAgU3RhdGUsXG4gICAgICBOZXdFeHBvcnRzLFxuICAgICAgU3RvcmVUeXBlLFxuICAgICAgUHJvbWlzZVR5cGVcbiAgICA+KS5leHBvcnRzID0gZXhwb3J0c1xuXG4gICAgcmV0dXJuICh0aGlzIGFzIHVua25vd24pIGFzIEF0b21BcGk8XG4gICAgICBTdGF0ZSxcbiAgICAgIE5ld0V4cG9ydHMsXG4gICAgICBTdG9yZVR5cGUsXG4gICAgICBQcm9taXNlVHlwZVxuICAgID4gLy8gZm9yIGNoYWluaW5nXG4gIH1cblxuICBwdWJsaWMgc2V0UHJvbWlzZTxUPihcbiAgICBwcm9taXNlOiBQcm9taXNlPFQ+XG4gICk6IEF0b21BcGk8U3RhdGUsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZTxUPj4ge1xuICAgIHRoaXMucHJvbWlzZSA9IChwcm9taXNlIGFzIHVua25vd24pIGFzIFByb21pc2VUeXBlXG5cbiAgICByZXR1cm4gdGhpcyBhcyBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2U8VD4+IC8vIGZvciBjaGFpbmluZ1xuICB9XG5cbiAgcHVibGljIHNldFR0bCh0dGw6IEF0b21JbnN0YW5jZVR0bCB8ICgoKSA9PiBBdG9tSW5zdGFuY2VUdGwpKSB7XG4gICAgdGhpcy50dGwgPSB0dGxcblxuICAgIHJldHVybiB0aGlzIC8vIGZvciBjaGFpbmluZ1xuICB9XG59XG4iXSwibmFtZXMiOlsiaXMiLCJTdG9yZSIsInByZWZpeCIsIkF0b21BcGkiLCJ2YWx1ZSIsInByb21pc2UiLCJ1bmRlZmluZWQiLCJzdG9yZSIsIk9iamVjdCIsImFzc2lnbiIsImFkZEV4cG9ydHMiLCJleHBvcnRzIiwic2V0RXhwb3J0cyIsInNldFByb21pc2UiLCJzZXRUdGwiLCJ0dGwiLCIkJHR5cGVvZiIsIlN5bWJvbCIsImZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2448\n')},5092:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"q\": function() { return /* binding */ Ecosystem; }\n});\n\n// EXTERNAL MODULE: ../packages/core/src/api/createStore.ts + 4 modules\nvar createStore = __webpack_require__(1694);\n// EXTERNAL MODULE: ../packages/core/src/api/is.ts\nvar is = __webpack_require__(9283);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ../packages/react/src/store/index.ts\nvar store = __webpack_require__(825);\n// EXTERNAL MODULE: ../packages/react/src/utils/general.ts\nvar general = __webpack_require__(395);\n// EXTERNAL MODULE: ../packages/react/src/utils/plugin-actions.ts\nvar plugin_actions = __webpack_require__(3299);\n// EXTERNAL MODULE: ../packages/react/src/classes/EvaluationStack.ts\nvar EvaluationStack = __webpack_require__(2633);\n;// CONCATENATED MODULE: ../packages/react/src/classes/Graph.ts\nvar Graph=/*#__PURE__*/function(){function Graph(ecosystem){this.nodes={};this.updateStack=[];this.ecosystem=ecosystem;}/**\n   * Draw a new edge between two nodes in the graph. This is how dependencies\n   * are created between atoms, selectors, and external nodes like React\n   * components.\n   */var _proto=Graph.prototype;_proto.addEdge=function addEdge(dependentKey,dependencyKey,operation,flags,callback){var newEdge={callback:callback,createdAt:Date.now(),flags:flags,operation:operation};if(!this.updateStack.length){return this.finishAddingEdge(dependentKey,dependencyKey,newEdge);}// We're buffering updates! Buffer this one\nvar _this$updateStack=this.updateStack[this.updateStack.length-1],dependencies=_this$updateStack.dependencies,key=_this$updateStack.key;if( true&&key!==dependentKey){throw new Error(\"Zedux: Tried updating dependencies of a graph node that isn't currently evaluating. This means that either you tried updating the graph manually or there is a bug in Zedux. If it's a bug, please report it!\");}var dependency=dependencies[dependencyKey];// Don't overwrite a higher-prio edge with a lower one. Also ignore same-prio\nif(!dependency||dependency.flags>flags){dependencies[dependencyKey]=newEdge;return newEdge;}// if this edge was ignored, return the existing buffered edge\nreturn dependencies[dependencyKey];}// Should only be used internally\n;_proto.addNode=function addNode(nodeKey,isAtomSelector){if(this.nodes[nodeKey])return;// already added\nthis.nodes[nodeKey]={dependencies:{},dependents:{},isAtomSelector:isAtomSelector,weight:1// this node doesn't have dependencies yet; it's weight is 1\n};}/**\n   * Prevent new graph edges from being added immediately. Instead, buffer them\n   * so we can prevent duplicates or unnecessary edges. Call `.flushUpdates()`\n   * to finish buffering.\n   *\n   * This is used during atom and AtomSelector evaluation to make the graph as\n   * efficient as possible.\n   */;_proto.bufferUpdates=function bufferUpdates(key){this.updateStack.push({key:key,dependencies:{}});}/**\n   * If an atom instance or AtomSelector errors during evaluation, we need to\n   * destroy any instances or AtomSelectors created during that evaluation that\n   * now have no dependents.\n   */;_proto.destroyBuffer=function destroyBuffer(){var _this=this;var _this$updateStack2=this.updateStack[this.updateStack.length-1],dependencies=_this$updateStack2.dependencies,key=_this$updateStack2.key;var edges=this.nodes[key].dependencies;Object.keys(dependencies).forEach(function(dependencyKey){var existingEdge=edges[dependencyKey];// the edge wasn't created during the evaluation that errored; keep it\nif(existingEdge)return;_this.scheduleNodeDestruction(dependencyKey);});this.updateStack.pop();}/**\n   * Stop buffering updates for the node passed to `.bufferUpdates()` and add\n   * the buffered edges to the graph.\n   */;_proto.flushUpdates=function flushUpdates(){var _this2=this;var _this$updateStack3=this.updateStack[this.updateStack.length-1],dependencies=_this$updateStack3.dependencies,key=_this$updateStack3.key;var edges=this.nodes[key].dependencies;// remove any edges that were not recreated while buffering. Don't remove\n// anything but implicit-internal edges (those are the only kind we\n// auto-create during evaluation - other types may have been added manually\n// by the user and we don't want to touch them here)\nObject.keys(edges).forEach(function(dependencyKey){var existingEdge=_this2.nodes[dependencyKey].dependents[key];if(existingEdge.flags&(general/* Explicit */.Jy|general/* External */.RQ))return;var edgeToAdd=dependencies[dependencyKey];// edge still exists; keep it\nif(edgeToAdd&&edgeToAdd.flags===existingEdge.flags)return;_this2.removeEdge(key,dependencyKey);});// add new edges that we tracked while buffering\nObject.keys(dependencies).forEach(function(dependencyKey){var edgeToAdd=dependencies[dependencyKey];var existingEdge=edges[dependencyKey];// edge already exists; keep it\nif(existingEdge)return;_this2.finishAddingEdge(key,dependencyKey,edgeToAdd);});this.updateStack.pop();};_proto.getRefCount=function getRefCount(dependencyKey){var _this$nodes$dependenc;return Object.keys(((_this$nodes$dependenc=this.nodes[dependencyKey])==null?void 0:_this$nodes$dependenc.dependents)||{}).length;};_proto.removeDependencies=function removeDependencies(dependentKey){var _this3=this;var node=this.nodes[dependentKey];if(!node)return;// node already destroyed\nvar edges=node.dependencies;if(!edges)return;Object.keys(edges).forEach(function(dependencyKey){_this3.removeEdge(dependentKey,dependencyKey);});}/**\n   * Should only be used internally. Remove the graph edge between two nodes.\n   * The dependent may not exist as a node in the graph if it's external, e.g. a\n   * React component\n   *\n   * For some reason in React 18+, React destroys parents before children. This\n   * means a parent EcosystemProvider may have already unmounted and wiped the\n   * whole graph; this edge may already be destroyed.\n   */;_proto.removeEdge=function removeEdge(dependentKey,dependencyKey){var dependency=this.nodes[dependencyKey];var dependent=this.nodes[dependentKey];// won't exist if external\n// erase graph edge between dependent and dependency\nif(dependent){delete dependent.dependencies[dependencyKey];}// hmm could maybe happen when a dependency was force-destroyed if a child\n// tries to destroy its edge before recreating it (I don't think we ever do\n// that though)\nif(!dependency)return;var dependentEdge=dependency.dependents[dependentKey];// happens in React 18+ (see this method's jsdoc above)\nif(!dependentEdge)return;delete dependency.dependents[dependentKey];// static dependencies don't change a node's weight\nif(!(dependentEdge.flags&general/* Static */.qG)){this.recalculateNodeWeight(dependentKey,-dependency.weight);}if(dependentEdge.task){this.ecosystem._scheduler.unschedule(dependentEdge.task);}if(this.ecosystem._mods.edgeRemoved){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.edgeRemoved */.V.edgeRemoved({dependency:this.ecosystem._instances[dependencyKey]||this.ecosystem.selectorCache._items[dependencyKey],dependent:this.ecosystem._instances[dependentKey]||this.ecosystem.selectorCache._items[dependentKey]||dependentKey,edge:dependentEdge}));}this.scheduleNodeDestruction(dependencyKey);}// Should only be used internally\n;_proto.removeNode=function removeNode(nodeKey){var _this4=this;var node=this.nodes[nodeKey];if(!node)return;// already removed\n// We don't need to remove this dependent from its dependencies here - the\n// atom instance/AtomSelector will have removed all its deps before calling\n// this function as part of its destruction process\n// if an atom instance is force-destroyed, it could still have dependents.\n// Inform them of the destruction\nthis.scheduleDependents(nodeKey,[],undefined,undefined,true,'node destroyed','Destroyed',true);// Remove this dependency from all its dependents and recalculate all\n// weights recursively\nObject.keys(node.dependents).forEach(function(dependentKey){var dependentEdge=node.dependents[dependentKey];if(!(dependentEdge.flags&general/* Static */.qG)){_this4.recalculateNodeWeight(dependentKey,-node.weight);}var dependentNode=_this4.nodes[dependentKey];if(dependentNode)delete dependentNode.dependencies[nodeKey];});delete this.nodes[nodeKey];}/**\n   * Schedules a job to update all dependents of a node. This is called e.g.\n   * when an atom instance or AtomSelector updates, when an atom instance is\n   * force-destroyed, or when an atom instance's promise changes.\n   */;_proto.scheduleDependents=function scheduleDependents(nodeKey,reasons,newState,oldState,shouldSetTimeout,type,signal,scheduleStaticDeps){var _this5=this;if(type===void 0){type='state changed';}if(signal===void 0){signal='Updated';}if(scheduleStaticDeps===void 0){scheduleStaticDeps=false;}var instance=this.ecosystem._instances[nodeKey];var cache=this.ecosystem.selectorCache._items[nodeKey];var node=this.nodes[nodeKey];Object.keys(node.dependents).forEach(function(dependentKey){var dependentEdge=node.dependents[dependentKey];// if edge.task exists, this edge has already been scheduled\nif(dependentEdge.task){if(signal!=='Destroyed')return;// destruction jobs supersede update jobs; cancel the existing job so we\n// can create a new one for the destruction\n_this5.ecosystem._scheduler.unschedule(dependentEdge.task);}// Static deps don't update on state change. Dynamic deps don't update on\n// promise change. Both types update on instance force-destruction\nvar isStatic=dependentEdge.flags&general/* Static */.qG;if(isStatic&&!scheduleStaticDeps)return;var reason={newState:newState,oldState:oldState,operation:dependentEdge.operation,reasons:reasons,sourceKey:nodeKey,sourceType:node.isAtomSelector?'AtomSelector':'Atom',type:type};// let internal dependents (other atoms and AtomSelectors) schedule their\n// own jobs\nif(!(dependentEdge.flags&general/* External */.RQ)){if(_this5.nodes[dependentKey].isAtomSelector){return _this5.ecosystem.selectorCache._scheduleEvaluation(dependentKey,reason,shouldSetTimeout);}return _this5.ecosystem._instances[dependentKey]._scheduleEvaluation(reason,shouldSetTimeout);}// schedule external dependents\nvar task=function task(){dependentEdge.task=undefined;dependentEdge.callback==null?void 0:dependentEdge.callback(signal,instance?instance.store.getState():cache.result,// don't use the snapshotted newState above\nreason);};_this5.ecosystem._scheduler.schedule({flags:dependentEdge.flags,task:task,type:3// UpdateExternalDependent (3)\n},shouldSetTimeout);// mutate the edge; give it the scheduled task so it can be cleaned up\ndependentEdge.task=task;});}/**\n   * Actually add an edge to the graph. When we buffer graph updates, we're\n   * really just deferring the calling of this method.\n   */;_proto.finishAddingEdge=function finishAddingEdge(dependentKey,dependencyKey,newEdge){var dependency=this.nodes[dependencyKey];if(!dependency)return;// happened once for some reason\n// draw graph edge between dependent and dependency\nif(!(newEdge.flags&general/* External */.RQ)){this.nodes[dependentKey].dependencies[dependencyKey]=true;}dependency.dependents[dependentKey]=newEdge;this.unscheduleNodeDestruction(dependencyKey);// static dependencies don't change a node's weight\nif(!(newEdge.flags&general/* Static */.qG)){this.recalculateNodeWeight(dependentKey,dependency.weight);}if(this.ecosystem._mods.edgeCreated){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.edgeCreated */.V.edgeCreated({dependency:this.ecosystem._instances[dependencyKey]||this.ecosystem.selectorCache._items[dependencyKey],dependent:this.ecosystem._instances[dependentKey]||this.ecosystem.selectorCache._items[dependentKey]||dependentKey,// unfortunate but not changing for now UPDATE: shouldn't be needed anymore. Double check\nedge:newEdge}));}return newEdge;}/**\n   * When a non-static edge is added or removed, every node below that edge (the\n   * dependent, its dependents, etc) in the graph needs to have its weight\n   * recalculated.\n   */;_proto.recalculateNodeWeight=function recalculateNodeWeight(nodeKey,weightDiff){var _this6=this;var node=this.nodes[nodeKey];if(!node)return;// happens when node is external\nnode.weight+=weightDiff;Object.keys(node.dependents).forEach(function(dependentKey){_this6.recalculateNodeWeight(dependentKey,weightDiff);});}/**\n   * When a node's refCount hits 0, schedule destruction of that node.\n   */;_proto.scheduleNodeDestruction=function scheduleNodeDestruction(nodeKey){var node=this.nodes[nodeKey];if(node&&!Object.keys(node.dependents).length){if(node.isAtomSelector){this.ecosystem.selectorCache._destroySelector(nodeKey);}else{this.ecosystem._instances[nodeKey]._scheduleDestruction();}}}/**\n   * When a node's refCount hits 0, we schedule destruction of that node. If\n   * that destruction is still pending and the refCount goes back up to 1,\n   * cancel the scheduled destruction.\n   */;_proto.unscheduleNodeDestruction=function unscheduleNodeDestruction(nodeKey){var dependency=this.nodes[nodeKey];if(!dependency.isAtomSelector&&Object.keys(dependency.dependents).length===1){var instance=this.ecosystem._instances[nodeKey];instance._cancelDestruction==null?void 0:instance._cancelDestruction();}};return Graph;}();\n// EXTERNAL MODULE: ../packages/core/src/utils/general.ts\nvar utils_general = __webpack_require__(8487);\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstanceBase.ts\nvar AtomInstanceBase = __webpack_require__(4987);\n;// CONCATENATED MODULE: ../packages/react/src/classes/IdGenerator.ts\n/**\n * When using SSR, only `generateNodeId` should be allowed to run. It is okay\n * for `generateAtomSelectorId` to run, but auto-id'd selectors won't be\n * hydratable on the client (usually fine for inline selectors). Ecosystem ids\n * must be set manually\n *\n * To prevent Zedux from auto-id'ing AtomSelectors, use a shared function\n * reference. When using AtomSelectorConfig objects, make sure the object\n * reference itself is shared. In both cases, the function must have a unique\n * name.\n *\n * ```ts\n * // examples that will be auto-id'd:\n * useAtomSelector(({ get }) => get(myAtom)) // inline function ref can't be shared and has no name\n * const mySelector = { // this object reference can be shared...\n *   selector: ({ get }) => get(myAtom) // ...but the function has a generic name\n * }\n *\n * // examples where ids will be generated predictably based on params:\n * const mySelector = ({ get }) => get(myAtom) // function has a name and ref can be shared\n * const mySelector = { // this ref can be shared...\n *   selector: function mySelector({ get }) { // ...and the function has a name\n *     return get(myAtom)\n *   }\n * }\n * const mySelector = { // this ref can be shared...\n *   name: 'mySelector', // ...and we set the `name` config option\n *   selector: ({ get }) => get(myAtom)\n * }\n * ```\n */var IdGenerator=/*#__PURE__*/function(){function IdGenerator(){var _this=this;this.idCounter=0;this.weakCache=new WeakMap();this.generateId=function(prefix){return prefix+\"-\"+ ++_this.idCounter+Math.random().toString(16).slice(2,14);};}var _proto=IdGenerator.prototype;_proto.generateAtomSelectorId=function generateAtomSelectorId(name){if(name===void 0){name='';}if(!name){name= true?'unknownSelector':0;}return this.generateId(\"@@selector-\"+name);};_proto.generateEcosystemId=function generateEcosystemId(){return this.generateId('es');};_proto.generateNodeId=function generateNodeId(){return this.generateId('no');}/**\n   * Generate a graph node key for a React component\n   */;_proto.generateReactComponentId=function generateReactComponentId(){var _lines$find;if(false){}var _Error=new Error(),stack=_Error.stack;if(!stack)return'';var lines=stack.split('\\n').slice(2).map(function(line){return line.trim().replace('at ','').replace(/ \\(.*\\)/,'');});var componentName=(_lines$find=lines.find(function(line){if(!/\\w/.test(line[0]))return false;var identifiers=line.split('.');var fn=identifiers[identifiers.length-1];return fn[0].toUpperCase()===fn[0];}))==null?void 0:_lines$find.split(' ')[0];return this.generateId(componentName||'UnknownComponent');}/**\n   * Turn an array of anything into a predictable string. If any item is an atom\n   * instance, it will be serialized as the instance's keyHash. If\n   * acceptComplexParams is true, map class instances and functions to a\n   * consistent id for the reference.\n   *\n   * Note that recursive objects are not supported - they would add way too much\n   * overhead here and are really just unnecessary.\n   */;_proto.hashParams=function hashParams(params,acceptComplexParams){var _this2=this;return JSON.stringify(params,function(_,param){if((0,is.is)(param,AtomInstanceBase/* AtomInstanceBase */.T))return param.keyHash;if(!param)return param;if(!(0,utils_general/* isPlainObject */.PO)(param)){if(!acceptComplexParams||Array.isArray(param))return param;if(typeof param==='function')return _this2.cacheFn(param);if(typeof(param==null?void 0:param.constructor)==='function'){return _this2.cacheClass(param);}return param;// let engine try resolve it or throw the error\n}return Object.keys(param).sort().reduce(function(result,key){result[key]=param[key];return result;},{});});};_proto.cacheClass=function cacheClass(instance){var id=this.weakCache.get(instance);if(id)return id;id=this.generateId(instance.constructor.name||'UnknownClass');this.weakCache.set(instance,id);return id;};_proto.cacheFn=function cacheFn(fn){var id=this.weakCache.get(fn);if(id)return id;id=this.generateId(fn.name||'anonFn');this.weakCache.set(fn,id);return id;};return IdGenerator;}();\n;// CONCATENATED MODULE: ../packages/react/src/classes/Scheduler.ts\nvar Scheduler=/*#__PURE__*/function(){// private _runStartTime?: number\nfunction Scheduler(ecosystem){this.jobs=[];this.ecosystem=ecosystem;}/**\n   * Kill any current timeout and run all jobs immediately.\n   *\n   * IMPORTANT: Setting and clearing timeouts is expensive. We need to always\n   * pass `shouldSetTimeout: false` to scheduler.schedule() when we're going\n   * to immediately flush\n   */var _proto=Scheduler.prototype;_proto.flush=function flush(){if(this._isRunning)return;// already flushing\nif(this._jobTimeoutId)clearTimeout(this._jobTimeoutId);this.runJobs();}/**\n   * Insert a job into the queue. Insertion point depends on job's type and\n   * weight.\n   *\n   * IMPORTANT: Setting and clearing timeouts is expensive. We need to always\n   * pass `shouldSetTimeout: false` when we're going to immediately flush\n   */;_proto.schedule=function schedule(newJob,shouldSetTimeout){if(shouldSetTimeout===void 0){shouldSetTimeout=true;}if(newJob.type===4){// RunEffect (4) jobs run in any order, after everything else\nthis.jobs.push(newJob);}else{var _newJob$flags;var nodes=this.ecosystem._graph.nodes;var flags=(_newJob$flags=newJob.flags)!=null?_newJob$flags:0;var weight=newJob.keyHash?nodes[newJob.keyHash].weight:0;var index=this.findIndex(function(job){if(job.type!==newJob.type)return+(newJob.type-job.type>0)||-1;// 1 or -1\n// a job type can use either weight or flags comparison or neither\nif(job.keyHash){var jobWeight=nodes[job.keyHash].weight;return weight<jobWeight?-1:+(weight>jobWeight);// + = 0 or 1\n}else if(job.flags!=null){return flags<job.flags?-1:+(flags>job.flags);}return 0;});if(index===-1){this.jobs.push(newJob);}else{this.jobs.splice(index,0,newJob);}}// we just pushed the first job onto the queue\nif(shouldSetTimeout&&this.jobs.length===1){this.setTimeout();}}/**\n   * Some jobs (update store jobs) must run immediately but also need the\n   * scheduler to be running.\n   *\n   * Other jobs (inform subscriber jobs) must run immediately after the current\n   * task. This is done by passing `false` for the 2nd param.\n   */;_proto.scheduleNow=function scheduleNow(newJob,runIfRunning){if(runIfRunning===void 0){runIfRunning=true;}if(this._isRunning===runIfRunning)return newJob.task();this.jobs.unshift(newJob);this.flush();};_proto.unschedule=function unschedule(task){var index=this.jobs.findIndex(function(job){return job.task===task;});if(index!==-1)this.jobs.splice(index,1);};_proto.wipe=function wipe(){// allow external jobs to proceed. TODO: should we flush here?\nthis.jobs=this.jobs.filter(function(job){return job.type===3;}// UpdateExternalDependent (3)\n);}// An O(log n) replacement for this.jobs.findIndex()\n;_proto.findIndex=function findIndex(cb,index,iteration){if(index===void 0){index=Math.ceil(this.jobs.length/2)-1;}if(iteration===void 0){iteration=1;}var job=this.jobs[index];if(job==null)return index;var direction=cb(job);if(!direction)return index;var divisor=Math.pow(2,iteration);var isDone=divisor>this.jobs.length;if(isDone){return index+(direction===1?1:0);}var effectualSize=Math.round(this.jobs.length/divisor);var newIndex=Math.min(this.jobs.length-1,Math.max(0,index+Math.ceil(effectualSize/2)*direction));return this.findIndex(cb,newIndex,iteration+1);};_proto.runJobs=function runJobs(){this._jobTimeoutId=undefined;// this._runStartTime = performance.now()\n// let counter = 0\nthis._isRunning=true;while(this.jobs.length){var job=this.jobs.shift();job.task();// this \"break\" idea would need to only break if the next job is\n// interruptible (store updates - the highest-prio tasks - are not\n// interruptible)\n// if (!(++counter % 20) && performance.now() - this._runStartTime >= 100) {\n//   setTimeout(() => this.runJobs())\n//   break\n// }\n}this._isRunning=false;};_proto.setTimeout=function(_setTimeout){function setTimeout(){return _setTimeout.apply(this,arguments);}setTimeout.toString=function(){return _setTimeout.toString();};return setTimeout;}(function(){var _this=this;if(this._isRunning)return;this._jobTimeoutId=setTimeout(function(){_this.runJobs();});});return Scheduler;}();\n;// CONCATENATED MODULE: ../packages/react/src/classes/SelectorCache.ts\nvar defaultResultsComparator=function defaultResultsComparator(a,b){return a===b;};var SelectorCacheItem=function SelectorCacheItem(cacheKey,selectorRef,args){this.nextEvaluationReasons=[];this.cacheKey=cacheKey;this.selectorRef=selectorRef;this.args=args;};/**\n * Since AtomSelectors are meant to feel lightweight, they don't have to be\n * instances of a class - they'll often be standalone or even inline\n * functions. This class handles all the logic that AtomSelectors would handle\n * themselves if they were classes - creation, cache management, and\n * destruction.\n */SelectorCacheItem.$$typeof=Symbol.for(general/* prefix */.O4+\"/SelectorCache\");var SelectorCache=/*#__PURE__*/function(){/**\n   * Map selectorKey+params keyHash strings to the cached params and result for\n   * the selector\n   */ /**\n   * Map selectors (or selector config objects) to a base selectorKey that can\n   * be used to predictably create selectorKey+params keyHashes to look up the\n   * cache in `this._items`\n   */function SelectorCache(ecosystem){this._items={};this._refBaseKeys=new WeakMap();this.ecosystem=ecosystem;}var _proto=SelectorCache.prototype;_proto.addDependent=function addDependent(cacheItem,_temp){var _this=this;var _ref=_temp===void 0?{}:_temp,callback=_ref.callback,_ref$operation=_ref.operation,operation=_ref$operation===void 0?'addDependent':_ref$operation;var id=this.ecosystem._idGenerator.generateNodeId();this.ecosystem._graph.addEdge(id,cacheItem.cacheKey,operation,general/* Explicit */.Jy|general/* External */.RQ,callback);return function(){return _this.ecosystem._graph.removeEdge(id,cacheItem.cacheKey);};};/**\n   * Destroys the cache for the given selector + args combo (if it exists).\n   *\n   * Destruction bails out by default if the selector's ref count is > 0. Pass\n   * `true` as the 3rd param to force destruction.\n   */_proto.destroyCache=function destroyCache(selectable,args,force){var cacheKey=(0,is.is)(selectable,SelectorCacheItem)?selectable.cacheKey:this.getCacheKey(selectable,args);var cache=(0,is.is)(selectable,SelectorCacheItem)?selectable:this._items[cacheKey];if(!cache)return;var node=this.ecosystem._graph.nodes[cacheKey];if(!force&&Object.keys((node==null?void 0:node.dependents)||{}).length)return;this._destroySelector(cacheKey);};/**\n   * Get the cached args and result for the given AtomSelector (or\n   * AtomSelectorConfig). Runs the selector, sets up the graph, and caches the\n   * initial value if this selector hasn't been cached before.\n   */_proto.getCache=function getCache(selectable,args){if(args===void 0){args=[];}if((0,is.is)(selectable,SelectorCacheItem)){return selectable;}var selectorOrConfig=selectable;var cacheKey=this.getCacheKey(selectorOrConfig,args);var cache=this._items[cacheKey];if(cache)return cache;// create the cache; it doesn't exist yet\ncache=new SelectorCacheItem(cacheKey,selectorOrConfig,args);this._items[cacheKey]=cache;this.ecosystem._graph.addNode(cacheKey,true);this.runSelector(cacheKey,args,true);return cache;};/**\n   * Get the fully qualified key hash for the given selector+params combo\n   */_proto.getCacheKey=function getCacheKey(selectorOrConfig,args,weak){var baseKey=this.getBaseKey(selectorOrConfig,weak);return args!=null&&args.length?baseKey+\"-\"+this.ecosystem._idGenerator.hashParams(args,this.ecosystem.complexParams):baseKey;}/**\n   * Get an object of all currently-cached AtomSelectors.\n   *\n   * Pass a selector reference or string to filter by caches whose cacheKey\n   * weakly matches the passed selector name.\n   */;_proto.inspectItems=function inspectItems(selectableOrName){var hash={};var filterKey=!selectableOrName||typeof selectableOrName==='string'?selectableOrName:(0,is.is)(selectableOrName,SelectorCacheItem)?selectableOrName.cacheKey:this.getBaseKey(selectableOrName,true)||this._getIdealCacheKey(selectableOrName);Object.values(this._items).sort(function(a,b){return a.cacheKey.localeCompare(b.cacheKey);}).forEach(function(instance){if(filterKey&&!instance.cacheKey.includes(filterKey)){return;}hash[instance.cacheKey]=instance;});return hash;}/**\n   * Get an object mapping all cacheKeys in this selectorCache to their current\n   * values.\n   *\n   * Pass an atom or atom key string to only return instances whose keyHash\n   * weakly matches the passed key.\n   */;_proto.inspectItemValues=function inspectItemValues(selectableOrName){var hash=this.inspectItems(selectableOrName);// We just created the object. Just mutate it.\nObject.keys(hash).forEach(function(cacheKey){hash[cacheKey]=hash[cacheKey].result;});return hash;}/**\n   * Get the cache for the given selector. Don't create it if it doesn't exist,\n   * just return undefined.\n   */;_proto.weakGetCache=function weakGetCache(selectable,args){if((0,is.is)(selectable,SelectorCacheItem)){return selectable;}var cacheKey=this.getCacheKey(selectable,args,true);if(!cacheKey)return;return this._items[cacheKey];}/**\n   * Should only be used internally. Removes the selector from the cache and\n   * the graph\n   */;_proto._destroySelector=function _destroySelector(cacheKey){var cache=this._items[cacheKey];if(!cache)return;// shouldn't happen\nif(cache.nextEvaluationReasons.length&&cache.task){this.ecosystem._scheduler.unschedule(cache.task);}this.ecosystem._graph.removeDependencies(cacheKey);this.ecosystem._graph.removeNode(cacheKey);delete this._items[cacheKey];cache.isDestroyed=true;this._refBaseKeys.delete(cache.selectorRef);}/**\n   * Get the string key we would ideally use as the cacheKey of the given\n   * AtomSelector function or AtomSelectorConfig object - doesn't necessarily\n   * mean we end up caching using this key.\n   */;_proto._getIdealCacheKey=function _getIdealCacheKey(selectorOrConfig){var _selector;var idealKey=selectorOrConfig.name||((_selector=selectorOrConfig.selector)==null?void 0:_selector.name);// 'selector' is too generic (it's the key in AtomSelectorConfig objects)\nreturn idealKey!=='selector'&&idealKey||undefined;}/**\n   * Should only be used internally\n   */;_proto._scheduleEvaluation=function _scheduleEvaluation(cacheKey,reason,shouldSetTimeout){var _this2=this;var cache=this._items[cacheKey];// TODO: Any calls in this case probably indicate a memory leak on the\n// user's part. Notify them.\nif(!cache)return;cache.nextEvaluationReasons.push(reason);if(cache.nextEvaluationReasons.length>1)return;// job already scheduled\nvar task=function task(){cache.task=undefined;_this2.runSelector(cacheKey,cache.args);};cache.task=task;this.ecosystem._scheduler.schedule({keyHash:cacheKey,task:task,type:2// EvaluateGraphNode (2)\n},shouldSetTimeout);}/**\n   * Should only be used internally\n   */;_proto._swapRefs=function _swapRefs(oldRef,newRef,args){var existingCache=this.weakGetCache(oldRef,args);var baseKey=this._refBaseKeys.get(oldRef);if(!existingCache||!baseKey)return;this._refBaseKeys.set(newRef,baseKey);existingCache.selectorRef=newRef;this.runSelector(existingCache.cacheKey,args);}/**\n   * Destroy all cached selectors. Should probably only be used internally.\n   * Prefer `ecosystem.reset()`.\n   */;_proto._wipe=function _wipe(){var _this3=this;Object.keys(this._items).forEach(function(cacheKey){_this3._destroySelector(cacheKey);});this._refBaseKeys=new WeakMap();}/**\n   * Get a base key that can be used to generate consistent cacheKeys for the\n   * given selector\n   */;_proto.getBaseKey=function getBaseKey(selectorOrConfig,weak){var existingId=this._refBaseKeys.get(selectorOrConfig);if(existingId||weak)return existingId;var idealKey=this._getIdealCacheKey(selectorOrConfig);var prefixedKey=\"@@selector-\"+idealKey;var keyExists=this._items[prefixedKey];// if the ideal key is taken, generate a new hash prefixed with the ideal key\nvar key=!idealKey||keyExists?this.ecosystem._idGenerator.generateAtomSelectorId(idealKey):prefixedKey;this._refBaseKeys.set(selectorOrConfig,key);return key;}/**\n   * Run an AtomSelector and, depending on the selector's resultsComparator,\n   * update its cached result. Updates the graph efficiently (using\n   * `.bufferUpdates()`)\n   */;_proto.runSelector=function runSelector(cacheKey,args,isInitializing){this.ecosystem._graph.bufferUpdates(cacheKey);var cache=this._items[cacheKey];this.ecosystem._evaluationStack.start(cache);var selector=typeof cache.selectorRef==='function'?cache.selectorRef:cache.selectorRef.selector;var resultsComparator=typeof cache.selectorRef!=='function'&&cache.selectorRef.resultsComparator||defaultResultsComparator;try{var result=selector.apply(void 0,[this.ecosystem._evaluationStack.atomGetters].concat(args));if(!isInitializing&&!resultsComparator(result,cache.result)){this.ecosystem._graph.scheduleDependents(cacheKey,cache.nextEvaluationReasons,result,cache.result);if(this.ecosystem._mods.stateChanged){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.stateChanged */.V.stateChanged({cache:cache,newState:result,oldState:cache.result,reasons:cache.nextEvaluationReasons}));}cache.result=result;}else if(isInitializing){cache.result=result;}}catch(err){this.ecosystem._graph.destroyBuffer();console.error(\"Zedux encountered an error while running AtomSelector with key \\\"\"+cacheKey+\"\\\":\",err);throw err;}finally{this.ecosystem._evaluationStack.finish();cache.prevEvaluationReasons=cache.nextEvaluationReasons;cache.nextEvaluationReasons=[];}this.ecosystem._graph.flushUpdates();};return SelectorCache;}();\n;// CONCATENATED MODULE: ../packages/react/src/classes/Ecosystem.ts\nvar defaultMods=Object.keys(plugin_actions/* pluginActions */.V).reduce(function(map,mod){map[mod]=0;return map;},{});var mapOverrides=function mapOverrides(overrides){return overrides.reduce(function(map,atom){map[atom.key]=atom;return map;},{});};var Ecosystem=/*#__PURE__*/function(){// use an empty store as a message bus\nfunction Ecosystem(_ref){var complexParams=_ref.complexParams,context=_ref.context,defaultTtl=_ref.defaultTtl,destroyOnUnmount=_ref.destroyOnUnmount,flags=_ref.flags,id=_ref.id,onReady=_ref.onReady,overrides=_ref.overrides,ssr=_ref.ssr;this._destroyOnUnmount=false;this._graph=new Graph(this);this._evaluationStack=new EvaluationStack/* EvaluationStack */.O(this);this._idGenerator=new IdGenerator();this._instances={};this._mods=Object.assign({},defaultMods);this._reactContexts={};this._refCount=0;this._scheduler=new Scheduler(this);this.selectorCache=new SelectorCache(this);this.modBus=(0,createStore/* createStore */.M)();this.overrides={};this.isInitialized=false;this.plugins=[];if( true&&flags&&!Array.isArray(flags)){throw new TypeError(\"Zedux: The Ecosystem's `flags` property must be an array of strings\");}if( true&&overrides&&!Array.isArray(overrides)){throw new TypeError(\"Zedux: The Ecosystem's `overrides` property must be an array of Atom objects\");}this.id=id||this._idGenerator.generateEcosystemId();if(overrides){this.setOverrides(overrides);}this.flags=flags;this.complexParams=!!complexParams;this.context=context;this.defaultTtl=defaultTtl!=null?defaultTtl:-1;this.ssr=ssr;this._destroyOnUnmount=!!destroyOnUnmount;this._onReady=onReady;this.isInitialized=true;this.cleanup=onReady==null?void 0:onReady(this);}/**\n   * Merge the passed atom overrides into the ecosystem's current list of\n   * overrides. Force-destroys all atom instances currently in the ecosystem\n   * that should now be overridden.\n   *\n   * This can't be used to remove overrides. Use `.setOverrides()` or\n   * `.removeOverrides()` for that.\n   */var _proto=Ecosystem.prototype;_proto.addOverrides=function addOverrides(overrides){var _this=this;this.overrides=Object.assign({},this.overrides,mapOverrides(overrides));overrides.forEach(function(override){var instances=_this.inspectInstances(override);Object.values(instances).forEach(function(instance){return instance.destroy(true);});});}/**\n   * Retrieve an object mapping atom instance keyHashes to their current values.\n   *\n   * Calls the `dehydrate` atom config option (on atoms that have one) to\n   * transform state to a serializable form. Pass `transform: false` to prevent\n   * this.\n   *\n   * Atoms can be excluded from dehydration by passing `exclude` and/or\n   * `excludeFlags` options:\n   *\n   * ```ts\n   * myEcosystem.dehydrate({\n   *   exclude: [myAtom, 'my-fuzzy-search-string'],\n   *   excludeFlags: ['no-ssr']\n   * })\n   * ```\n   *\n   * An atom passed to `exclude` will exclude all instances of that atom. A\n   * string passed to `exclude` will exclude all instances whose keyHash\n   * contains the string (case-insensitive)\n   *\n   * You can dehydrate only a subset of all atoms by passing `include` and/or\n   * `includeFlags` options:\n   *\n   * ```ts\n   * myEcosystem.dehydrate({\n   *   include: [myAtom, 'my-fuzzy-search-string'],\n   *   includeFlags: ['ssr']\n   * })\n   * ```\n   *\n   * An atom passed to `include` will include all instances of that atom. A\n   * string passed to `include` will include all instances whose keyHash\n   * contains the string (case-insensitive)\n   *\n   * Excludes takes precedence over includes.\n   *\n   * By default, dehydration will call any configured `dehydrate` atom config\n   * options to transform atom instance state. Pass `{ transform: false }` to\n   * prevent this.\n   */;_proto.dehydrate=function dehydrate(_temp){var _ref2=_temp===void 0?{}:_temp,exclude=_ref2.exclude,excludeFlags=_ref2.excludeFlags,include=_ref2.include,includeFlags=_ref2.includeFlags,_ref2$transform=_ref2.transform,transform=_ref2$transform===void 0?true:_ref2$transform;var instances=Object.values(this._instances).filter(function(instance){if(exclude&&exclude.some(function(atomOrKey){return typeof atomOrKey==='string'?instance.keyHash.toLowerCase().includes(atomOrKey.toLowerCase()):instance.atom.key===atomOrKey.key;})){return false;}if(excludeFlags&&excludeFlags.some(function(flag){var _instance$atom$flags;return(_instance$atom$flags=instance.atom.flags)==null?void 0:_instance$atom$flags.includes(flag);})){return false;}if(!include&&!includeFlags)return true;if(include&&include.some(function(atomOrKey){return typeof atomOrKey==='string'?instance.keyHash.toLowerCase().includes(atomOrKey.toLowerCase()):instance.atom.key===atomOrKey.key;})){return true;}if(includeFlags&&includeFlags.some(function(flag){var _instance$atom$flags2;return(_instance$atom$flags2=instance.atom.flags)==null?void 0:_instance$atom$flags2.includes(flag);})){return true;}return false;});return Object.fromEntries(instances.map(function(instance){var state=instance.store.getState();return[instance.keyHash,transform&&instance.atom.dehydrate?instance.atom.dehydrate(state):state];}));}/**\n   * Destroy this ecosystem - destroy all this ecosystem's atom instances,\n   * remove and clean up all plugins, and remove this ecosystem from the\n   * internalStore.\n   *\n   * Destruction will bail out by default if this ecosystem is still being\n   * provided via an <EcosystemProvider>. Pass `true` as the first parameter to\n   * force destruction anyway.\n   */;_proto.destroy=function destroy(force){var _this2=this;if(!force&&this._refCount>0)return;this.wipe();// Check if this ecosystem has been destroyed already\nvar ecosystem=store/* internalStore.getState */.Do.getState()[this.id];if(!ecosystem)return;this.plugins.forEach(function(_ref3){var cleanup=_ref3.cleanup;return cleanup();});this.plugins=[];store/* internalStore.setState */.Do.setState(function(state){var newState=Object.assign({},state);delete newState[_this2.id];return newState;});};/**\n   * Returns an atom instance's value. Creates the atom instance if it doesn't\n   * exist yet. Doesn't register any graph dependencies.\n   */_proto.get=function get(atom,params){if((0,is.is)(atom,AtomInstanceBase/* AtomInstanceBase */.T)){return atom.store.getState();}var instance=this.getInstance(atom,params);return instance.store.getState();};/**\n   * Returns an atom instance. Creates the atom instance if it doesn't exist\n   * yet. Doesn't register any graph dependencies.\n   */_proto.getInstance=function getInstance(atom,params){if((0,is.is)(atom,AtomInstanceBase/* AtomInstanceBase */.T))return atom;var keyHash=atom.getKeyHash(this,params);// try to find an existing instance\nvar existingInstance=this._instances[keyHash];if(existingInstance)return existingInstance;// create a new instance\nvar resolvedAtom=this.resolveAtom(atom);this._graph.addNode(keyHash);var newInstance=resolvedAtom._createInstance(this,keyHash,params||[]);this._instances[keyHash]=newInstance;newInstance._init();return newInstance;}/**\n   * Hydrate the state of atoms in this ecosystem with an object mapping atom\n   * instance keyHashes to their hydrated state. This object will usually be the\n   * result of a call to `ecosystem.dehydrate()`.\n   *\n   * This is the key to SSR. The ecosystem's initial state can be dehydrated on\n   * the server, sent to the client in serialized form, deserialized, and passed\n   * to `ecosystem.hydrate()`. Every atom instance that evaluates after this\n   * hydration can use the `hydrate` injectStore config option to retrieve its\n   * hydrated state.\n   *\n   * Pass `retroactive: false` to prevent this call from updating the state of\n   * all atom instances that have already been initialized with this new\n   * hydration. Hydration is retroactive by default.\n   *\n   * ```ts\n   * ecosystem.hydrate(dehydratedState, { retroactive: false })\n   * ```\n   */;_proto.hydrate=function hydrate(dehydratedState,config){var _this3=this;this.hydration=Object.assign({},this.hydration,dehydratedState);if((config==null?void 0:config.retroactive)===false)return;Object.entries(dehydratedState).forEach(function(_ref4){var _this3$hydration;var key=_ref4[0],val=_ref4[1];var instance=_this3._instances[key];if(!instance)return;instance.setState(instance.atom.hydrate?instance.atom.hydrate(val):val);(_this3$hydration=_this3.hydration)==null?true:delete _this3$hydration[key];});}/**\n   * Get an object of all atom instances in this ecosystem.\n   *\n   * Pass an atom or atom key string to only return instances whose keyHash\n   * weakly matches the passed key.\n   */;_proto.inspectInstances=function inspectInstances(atom){var isAtom=atom==null?void 0:atom.key;var filterKey=isAtom?atom==null?void 0:atom.key:atom;var hash={};Object.values(this._instances).sort(function(a,b){return a.keyHash.localeCompare(b.keyHash);}).forEach(function(instance){if(filterKey&&(isAtom?instance.atom.key!==filterKey:!instance.keyHash.toLowerCase().includes(filterKey))){return;}hash[instance.keyHash]=instance;});return hash;}/**\n   * Add a ZeduxPlugin to this ecosystem. This ecosystem will subscribe to the\n   * plugin's modStore, whose state can be changed to reactively update the mods\n   * of this ecosystem.\n   *\n   * This method will also call the passed plugin's `.registerEcosystem` method,\n   * allowing the plugin to subscribe to this ecosystem's modBus\n   *\n   * The plugin will remain part of this ecosystem until it is unregistered or\n   * this ecosystem is destroyed. `.wipe()` and `.reset()` don't remove plugins.\n   * However, a plugin _can_ set the `ecosystemWiped` mod and react to those\n   * events.\n   */;_proto.registerPlugin=function registerPlugin(plugin){var _this4=this;if(this.plugins.some(function(descriptor){return descriptor.plugin===plugin;}))return;var subscription=plugin.modStore.subscribe(function(newState,oldState){_this4.recalculateMods(newState,oldState);});var cleanupRegistration=plugin.registerEcosystem(this);var cleanup=function cleanup(){subscription.unsubscribe();if(cleanupRegistration)cleanupRegistration();};this.plugins.push({cleanup:cleanup,plugin:plugin});this.recalculateMods(plugin.modStore.getState());}/**\n   * Remove all passed atoms from this ecosystem's list of atom overrides. Does\n   * nothing for passed atoms that aren't currently in the overrides list.\n   *\n   * Force destroys all instances of all removed atoms. This forced destruction\n   * will cause dependents of those instances to recreate their dependency atom\n   * instance without using an override.\n   */;_proto.removeOverrides=function removeOverrides(overrides){var _this5=this;this.overrides=mapOverrides(Object.values(this.overrides).filter(function(atom){return overrides.every(function(override){var key=typeof override==='string'?override:override.key;return key!==atom.key;});}));overrides.forEach(function(override){var instances=_this5.inspectInstances(override);Object.values(instances).forEach(function(instance){return instance.destroy(true);});});}/**\n   * Destroys all atom instances in this ecosystem, runs the cleanup function\n   * returned from `onReady` (if any), and calls `onReady` again to reinitialize\n   * the ecosystem.\n   */;_proto.reset=function reset(newContext){var _this$_onReady;this.wipe();var prevContext=this.context;if(typeof newContext!=='undefined')this.context=newContext;this.cleanup=(_this$_onReady=this._onReady)==null?void 0:_this$_onReady.call(this,this,prevContext);}/**\n   * Runs an AtomSelector statically - without registering any dependencies or\n   * updating any caches. If we've already cached this exact selector + args\n   * combo, returns the cached value without running the selector again\n   */;_proto.select=function select(selectable){if((0,is.is)(selectable,SelectorCacheItem)){return selectable.result;}var atomSelector=selectable;for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var cache=this.selectorCache.weakGetCache(atomSelector,args);if(cache)return cache.result;var resolvedSelector=typeof atomSelector==='function'?atomSelector:atomSelector.selector;return resolvedSelector.apply(void 0,[{ecosystem:this,get:this.get.bind(this),getInstance:this.getInstance.bind(this),select:this.select.bind(this)}].concat(args));}/**\n   * Completely replace this ecosystem's current list of atom overrides with a\n   * new list.\n   *\n   * Force destroys all instances of all previously- and newly-overridden atoms.\n   * This forced destruction will cause dependents of those instances to\n   * recreate their dependency atom instance.\n   */;_proto.setOverrides=function setOverrides(newOverrides){var _this6=this;var oldOverrides=this.overrides;this.overrides=mapOverrides(newOverrides);if(!this.isInitialized)return;newOverrides.forEach(function(atom){var instances=_this6.inspectInstances(atom);Object.values(instances).forEach(function(instance){instance.destroy(true);});});if(!oldOverrides)return;Object.values(oldOverrides).forEach(function(atom){var instances=_this6.inspectInstances(atom);Object.values(instances).forEach(function(instance){instance.destroy(true);});});}/**\n   * Unregister a plugin registered in this ecosystem via `.registerPlugin()`\n   */;_proto.unregisterPlugin=function unregisterPlugin(plugin){var index=this.plugins.findIndex(function(descriptor){return descriptor.plugin===plugin;});if(index===-1)return;this.plugins[index].cleanup();this.plugins.splice(index,1);this.recalculateMods(undefined,plugin.modStore.getState());};/**\n   * Get the current graph of this ecosystem. There are 3 views:\n   *\n   * Flat (default). Returns an object with all graph nodes on the top layer,\n   * each node pointing to its dependencies and dependents. No nesting.\n   *\n   * Bottom-Up. Returns an object containing all the leaf nodes of the graph\n   * (nodes that have no internal dependents), each node containing an object of\n   * its parent nodes, recursively.\n   *\n   * Top-Down. Returns an object containing all the root nodes of the graph\n   * (nodes that have no dependencies), each node containing an object of its\n   * child nodes, recursively.\n   */_proto.viewGraph=function viewGraph(view){var _this7=this;if(view!=='top-down'&&view!=='bottom-up'){var _hash={};Object.keys(this._graph.nodes).forEach(function(cacheKey){var node=_this7._graph.nodes[cacheKey];_hash[cacheKey]={dependencies:Object.keys(node.dependencies).map(function(key){return{key:key,operation:_this7._graph.nodes[key].dependents[cacheKey].operation};}),dependents:Object.keys(node.dependents).map(function(key){return{key:key,operation:node.dependents[key].operation};}),weight:node.weight};});return _hash;}var hash={};Object.keys(this._graph.nodes).forEach(function(key){var node=_this7._graph.nodes[key];var isTopLevel=view==='bottom-up'?Object.keys(node.dependents).every(function(key){var dependent=node.dependents[key];return dependent.flags&general/* External */.RQ;}):!Object.keys(node.dependencies).length;if(isTopLevel){hash[key]={};}});var recurse=function recurse(node){if(!node)return;var keys=Object.keys(view==='bottom-up'?node.dependencies:node.dependents);var children={};keys.forEach(function(key){var child=recurse(_this7._graph.nodes[key]);if(child)children[key]=child;});return children;};Object.keys(hash).forEach(function(key){var node=_this7._graph.nodes[key];var children=recurse(node);if(children)hash[key]=children;});return hash;}/**\n   * Get an atom instance value. Don't create the atom instance if it doesn't\n   * exist. Don't register any graph dependencies.\n   */;_proto.weakGet=function weakGet(atom,params){var instance=this.weakGetInstance(atom,params);return instance==null?void 0:instance.store.getState();}/**\n   * Get an atom instance. Don't create the atom instance if it doesn't exist.\n   * Don't register any graph dependencies.\n   */;_proto.weakGetInstance=function weakGetInstance(atom,params){if(typeof atom!=='string'){var keyHash=atom.getKeyHash(this,params);// try to find an existing instance\nreturn this._instances[keyHash];}return Object.values(this.inspectInstances(atom))[0];}/**\n   * Returns the list of reasons detailing why the current atom instance or\n   * selector is evaluating.\n   *\n   * Returns undefined if nothing is currently evaluating. Returns an empty\n   * array if this is the first evaluation of the instance or selector.\n   */;_proto.why=function why(){var item=this._evaluationStack.read();if(!item)return;if(item.cache){return item.cache.nextEvaluationReasons;}return item.instance._nextEvaluationReasons;}/**\n   * Destroy all atom instances in this ecosystem. Also run the cleanup function\n   * returned from the onReady callback (if any). Don't remove plugins or re-run\n   * the onReady callback.\n   *\n   * Important! This method is mostly for internal use. You won't typically want\n   * to call this method. Prefer `.reset()` which re-runs the onReady callback\n   * after wiping the ecosystem, allowing onReady to re-initialize the ecosystem\n   * - preloading atoms, registering plugins, configuring context, etc\n   */;_proto.wipe=function wipe(){// call cleanup function first so it can configure the ecosystem for cleanup\nif(this.cleanup)this.cleanup();// TODO: Delete nodes in an optimal order, starting with nodes with no\n// internal dependents. This is different from highest-weighted nodes since\n// static dependents don't affect weight. This should make sure no internal\n// nodes schedule unnecessary reevaaluations to recreate force-destroyed\n// instances\nObject.values(this._instances).forEach(function(instance){instance.destroy(true);});this.hydration=undefined;this.selectorCache._wipe();this._scheduler.wipe();this._scheduler.flush();if(this._mods.ecosystemWiped){this.modBus.dispatch(plugin_actions/* pluginActions.ecosystemWiped */.V.ecosystemWiped({ecosystem:this}));}}/**\n   * Should only be used internally\n   */;_proto._consumeHydration=function _consumeHydration(instance){var _this$hydration,_this$hydration2;var hydratedValue=(_this$hydration=this.hydration)==null?void 0:_this$hydration[instance.keyHash];if(typeof hydratedValue==='undefined')return;(_this$hydration2=this.hydration)==null?true:delete _this$hydration2[instance.keyHash];return instance.atom.hydrate?instance.atom.hydrate(hydratedValue):hydratedValue;}/**\n   * Should only be used internally\n   */;_proto._decrementRefCount=function _decrementRefCount(){this._refCount--;if(!this._destroyOnUnmount)return;this.destroy();// only destroys if _refCount === 0\n}/**\n   * Should only be used internally\n   */;_proto._destroyAtomInstance=function _destroyAtomInstance(keyHash){// try to destroy instance (if not destroyed - this fn is called as part of\n// that destruction process too)\nthis._graph.removeNode(keyHash);delete this._instances[keyHash];// TODO: dispatch an action over internalStore for this mutation\n}/**\n   * Should only be used internally\n   */;_proto._getReactContext=function _getReactContext(atom){var existingContext=this._reactContexts[atom.key];if(existingContext)return existingContext;var newContext=/*#__PURE__*/(0,react.createContext)(undefined);this._reactContexts[atom.key]=newContext;return newContext;}/**\n   * Should only be used internally\n   */;_proto._incrementRefCount=function _incrementRefCount(){this._refCount++;};_proto.recalculateMods=function recalculateMods(newState,oldState){var _this8=this;if(oldState){oldState.forEach(function(key){_this8._mods[key]--;// fun fact, undefined-- is fine\n});}if(newState){newState.forEach(function(key){_this8._mods[key]++;});}};_proto.resolveAtom=function resolveAtom(atom){var _this$overrides,_this9=this;var override=(_this$overrides=this.overrides)==null?void 0:_this$overrides[atom.key];var maybeOverriddenAtom=override||atom;// to turn off flag checking, just don't pass a `flags` prop\nif(this.flags){var _maybeOverriddenAtom$;var badFlag=(_maybeOverriddenAtom$=maybeOverriddenAtom.flags)==null?void 0:_maybeOverriddenAtom$.find(function(flag){var _this9$flags;return!((_this9$flags=_this9.flags)!=null&&_this9$flags.includes(flag));});if( true&&badFlag){console.error(\"Zedux: encountered unsafe atom \\\"\"+atom.key+\"\\\" with flag \\\"\"+badFlag+\"\\\". This atom should be overridden in the current environment.\");}}return maybeOverriddenAtom;};return Ecosystem;}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QytCLEtBQUssQ0FBQy9CLEdBQUcsQ0FBUSxFQUFFLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQ0osQ0FFQSxHQUFJNEMsUUFBUSxDQUFFLENBQ1pBLFFBQVEsQ0FBQzdCLE9BQU8sQ0FBQyxTQUFBZixHQUFHLENBQUksQ0FDdEIsTUFBSSxDQUFDK0IsS0FBSyxDQUFDL0IsR0FBRyxDQUFRLEVBQUUsQ0FDMUIsQ0FBQyxDQUFDLENBQ0osQ0FDRixDQUFDLFFBRU84UCxXQUFXLENBQW5CLHFCQUE4Q3RDLElBQWMsQ0FBRSxpQ0FDNUQsR0FBTWlCLFNBQVEsa0JBQUcsSUFBSSxDQUFDbEIsU0FBUyxlQUFkLGdCQUFpQkMsSUFBSSxDQUFDeE4sR0FBRyxDQUFDLENBQzNDLEdBQU1vVCxvQkFBbUIsQ0FBSTNFLFFBQVEsRUFBSWpCLElBQWlCLENBRTFEO0FBQ0EsR0FBSSxJQUFJLENBQUNqTyxLQUFLLENBQUUsMkJBQ2QsR0FBTThULFFBQU8sd0JBQUdELG1CQUFtQixDQUFDN1QsS0FBSyxlQUF6QixzQkFBMkJzRyxJQUFJLENBQzdDLFNBQUF5SixJQUFJLHlCQUFJLGdCQUFDLE1BQUksQ0FBQy9QLEtBQUssU0FBVixhQUFZK0wsUUFBUSxDQUFDZ0UsSUFBSSxDQUFDLElBQ3BDLENBRUQsR0FBSXJQLEtBQUcsRUFBSW9ULE9BQU8sQ0FBRSxDQUNsQnpHLE9BQU8sQ0FBQ0MsS0FBSyxxQ0FDd0JXLElBQUksQ0FBQ3hOLEdBQUcsbUJBQWdCcVQsT0FBTyxrRUFDbkUsQ0FDSCxDQUNGLENBRUEsTUFBT0Qsb0JBQW1CLENBQzVCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9jbGFzc2VzL0dyYXBoLnRzPzY5NGIiLCJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvY2xhc3Nlcy9JZEdlbmVyYXRvci50cz9iMDFhIiwid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2NsYXNzZXMvU2NoZWR1bGVyLnRzPzlmNzQiLCJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvY2xhc3Nlcy9TZWxlY3RvckNhY2hlLnRzPzhkMTMiLCJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvY2xhc3Nlcy9FY29zeXN0ZW0udHM/OWNkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbnlBdG9tSW5zdGFuY2UsXG4gIERlcGVuZGVudENhbGxiYWNrLFxuICBEZXBlbmRlbnRFZGdlLFxuICBFY29zeXN0ZW1HcmFwaE5vZGUsXG4gIEV2YWx1YXRpb25SZWFzb24sXG4gIEV2YWx1YXRpb25UeXBlLFxuICBHcmFwaEVkZ2VTaWduYWwsXG59IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgRXhwbGljaXQsIEV4dGVybmFsLCBTdGF0aWMgfSBmcm9tICcuLi91dGlscydcbmltcG9ydCB7IHBsdWdpbkFjdGlvbnMgfSBmcm9tICcuLi91dGlscy9wbHVnaW4tYWN0aW9ucydcbmltcG9ydCB7IEVjb3N5c3RlbSB9IGZyb20gJy4vRWNvc3lzdGVtJ1xuXG5leHBvcnQgY2xhc3MgR3JhcGgge1xuICBwdWJsaWMgbm9kZXM6IFJlY29yZDxzdHJpbmcsIEVjb3N5c3RlbUdyYXBoTm9kZT4gPSB7fVxuICBwcml2YXRlIHVwZGF0ZVN0YWNrOiB7XG4gICAgZGVwZW5kZW5jaWVzOiBSZWNvcmQ8c3RyaW5nLCBEZXBlbmRlbnRFZGdlPlxuICAgIGtleTogc3RyaW5nXG4gIH1bXSA9IFtdXG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWNvc3lzdGVtOiBFY29zeXN0ZW0pIHt9XG5cbiAgLyoqXG4gICAqIERyYXcgYSBuZXcgZWRnZSBiZXR3ZWVuIHR3byBub2RlcyBpbiB0aGUgZ3JhcGguIFRoaXMgaXMgaG93IGRlcGVuZGVuY2llc1xuICAgKiBhcmUgY3JlYXRlZCBiZXR3ZWVuIGF0b21zLCBzZWxlY3RvcnMsIGFuZCBleHRlcm5hbCBub2RlcyBsaWtlIFJlYWN0XG4gICAqIGNvbXBvbmVudHMuXG4gICAqL1xuICBwdWJsaWMgYWRkRWRnZShcbiAgICBkZXBlbmRlbnRLZXk6IHN0cmluZyxcbiAgICBkZXBlbmRlbmN5S2V5OiBzdHJpbmcsXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgZmxhZ3M6IG51bWJlcixcbiAgICBjYWxsYmFjaz86IERlcGVuZGVudENhbGxiYWNrXG4gICkge1xuICAgIGNvbnN0IG5ld0VkZ2U6IERlcGVuZGVudEVkZ2UgPSB7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIGNyZWF0ZWRBdDogRGF0ZS5ub3coKSxcbiAgICAgIGZsYWdzLFxuICAgICAgb3BlcmF0aW9uLFxuICAgIH1cblxuICAgIGlmICghdGhpcy51cGRhdGVTdGFjay5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaEFkZGluZ0VkZ2UoZGVwZW5kZW50S2V5LCBkZXBlbmRlbmN5S2V5LCBuZXdFZGdlKVxuICAgIH1cblxuICAgIC8vIFdlJ3JlIGJ1ZmZlcmluZyB1cGRhdGVzISBCdWZmZXIgdGhpcyBvbmVcbiAgICBjb25zdCB7IGRlcGVuZGVuY2llcywga2V5IH0gPSB0aGlzLnVwZGF0ZVN0YWNrW3RoaXMudXBkYXRlU3RhY2subGVuZ3RoIC0gMV1cblxuICAgIGlmIChERVYgJiYga2V5ICE9PSBkZXBlbmRlbnRLZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJaZWR1eDogVHJpZWQgdXBkYXRpbmcgZGVwZW5kZW5jaWVzIG9mIGEgZ3JhcGggbm9kZSB0aGF0IGlzbid0IGN1cnJlbnRseSBldmFsdWF0aW5nLiBUaGlzIG1lYW5zIHRoYXQgZWl0aGVyIHlvdSB0cmllZCB1cGRhdGluZyB0aGUgZ3JhcGggbWFudWFsbHkgb3IgdGhlcmUgaXMgYSBidWcgaW4gWmVkdXguIElmIGl0J3MgYSBidWcsIHBsZWFzZSByZXBvcnQgaXQhXCJcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2RlcGVuZGVuY3lLZXldXG5cbiAgICAvLyBEb24ndCBvdmVyd3JpdGUgYSBoaWdoZXItcHJpbyBlZGdlIHdpdGggYSBsb3dlciBvbmUuIEFsc28gaWdub3JlIHNhbWUtcHJpb1xuICAgIGlmICghZGVwZW5kZW5jeSB8fCBkZXBlbmRlbmN5LmZsYWdzID4gZmxhZ3MpIHtcbiAgICAgIGRlcGVuZGVuY2llc1tkZXBlbmRlbmN5S2V5XSA9IG5ld0VkZ2VcbiAgICAgIHJldHVybiBuZXdFZGdlXG4gICAgfVxuXG4gICAgLy8gaWYgdGhpcyBlZGdlIHdhcyBpZ25vcmVkLCByZXR1cm4gdGhlIGV4aXN0aW5nIGJ1ZmZlcmVkIGVkZ2VcbiAgICByZXR1cm4gZGVwZW5kZW5jaWVzW2RlcGVuZGVuY3lLZXldXG4gIH1cblxuICAvLyBTaG91bGQgb25seSBiZSB1c2VkIGludGVybmFsbHlcbiAgcHVibGljIGFkZE5vZGUobm9kZUtleTogc3RyaW5nLCBpc0F0b21TZWxlY3Rvcj86IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5ub2Rlc1tub2RlS2V5XSkgcmV0dXJuIC8vIGFscmVhZHkgYWRkZWRcblxuICAgIHRoaXMubm9kZXNbbm9kZUtleV0gPSB7XG4gICAgICBkZXBlbmRlbmNpZXM6IHt9LFxuICAgICAgZGVwZW5kZW50czoge30sXG4gICAgICBpc0F0b21TZWxlY3RvcixcbiAgICAgIHdlaWdodDogMSwgLy8gdGhpcyBub2RlIGRvZXNuJ3QgaGF2ZSBkZXBlbmRlbmNpZXMgeWV0OyBpdCdzIHdlaWdodCBpcyAxXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByZXZlbnQgbmV3IGdyYXBoIGVkZ2VzIGZyb20gYmVpbmcgYWRkZWQgaW1tZWRpYXRlbHkuIEluc3RlYWQsIGJ1ZmZlciB0aGVtXG4gICAqIHNvIHdlIGNhbiBwcmV2ZW50IGR1cGxpY2F0ZXMgb3IgdW5uZWNlc3NhcnkgZWRnZXMuIENhbGwgYC5mbHVzaFVwZGF0ZXMoKWBcbiAgICogdG8gZmluaXNoIGJ1ZmZlcmluZy5cbiAgICpcbiAgICogVGhpcyBpcyB1c2VkIGR1cmluZyBhdG9tIGFuZCBBdG9tU2VsZWN0b3IgZXZhbHVhdGlvbiB0byBtYWtlIHRoZSBncmFwaCBhc1xuICAgKiBlZmZpY2llbnQgYXMgcG9zc2libGUuXG4gICAqL1xuICBwdWJsaWMgYnVmZmVyVXBkYXRlcyhrZXk6IHN0cmluZykge1xuICAgIHRoaXMudXBkYXRlU3RhY2sucHVzaCh7IGtleSwgZGVwZW5kZW5jaWVzOiB7fSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGFuIGF0b20gaW5zdGFuY2Ugb3IgQXRvbVNlbGVjdG9yIGVycm9ycyBkdXJpbmcgZXZhbHVhdGlvbiwgd2UgbmVlZCB0b1xuICAgKiBkZXN0cm95IGFueSBpbnN0YW5jZXMgb3IgQXRvbVNlbGVjdG9ycyBjcmVhdGVkIGR1cmluZyB0aGF0IGV2YWx1YXRpb24gdGhhdFxuICAgKiBub3cgaGF2ZSBubyBkZXBlbmRlbnRzLlxuICAgKi9cbiAgcHVibGljIGRlc3Ryb3lCdWZmZXIoKSB7XG4gICAgY29uc3QgeyBkZXBlbmRlbmNpZXMsIGtleSB9ID0gdGhpcy51cGRhdGVTdGFja1t0aGlzLnVwZGF0ZVN0YWNrLmxlbmd0aCAtIDFdXG4gICAgY29uc3QgZWRnZXMgPSB0aGlzLm5vZGVzW2tleV0uZGVwZW5kZW5jaWVzXG5cbiAgICBPYmplY3Qua2V5cyhkZXBlbmRlbmNpZXMpLmZvckVhY2goZGVwZW5kZW5jeUtleSA9PiB7XG4gICAgICBjb25zdCBleGlzdGluZ0VkZ2UgPSBlZGdlc1tkZXBlbmRlbmN5S2V5XVxuXG4gICAgICAvLyB0aGUgZWRnZSB3YXNuJ3QgY3JlYXRlZCBkdXJpbmcgdGhlIGV2YWx1YXRpb24gdGhhdCBlcnJvcmVkOyBrZWVwIGl0XG4gICAgICBpZiAoZXhpc3RpbmdFZGdlKSByZXR1cm5cblxuICAgICAgdGhpcy5zY2hlZHVsZU5vZGVEZXN0cnVjdGlvbihkZXBlbmRlbmN5S2V5KVxuICAgIH0pXG5cbiAgICB0aGlzLnVwZGF0ZVN0YWNrLnBvcCgpXG4gIH1cblxuICAvKipcbiAgICogU3RvcCBidWZmZXJpbmcgdXBkYXRlcyBmb3IgdGhlIG5vZGUgcGFzc2VkIHRvIGAuYnVmZmVyVXBkYXRlcygpYCBhbmQgYWRkXG4gICAqIHRoZSBidWZmZXJlZCBlZGdlcyB0byB0aGUgZ3JhcGguXG4gICAqL1xuICBwdWJsaWMgZmx1c2hVcGRhdGVzKCkge1xuICAgIGNvbnN0IHsgZGVwZW5kZW5jaWVzLCBrZXkgfSA9IHRoaXMudXBkYXRlU3RhY2tbdGhpcy51cGRhdGVTdGFjay5sZW5ndGggLSAxXVxuICAgIGNvbnN0IGVkZ2VzID0gdGhpcy5ub2Rlc1trZXldLmRlcGVuZGVuY2llc1xuXG4gICAgLy8gcmVtb3ZlIGFueSBlZGdlcyB0aGF0IHdlcmUgbm90IHJlY3JlYXRlZCB3aGlsZSBidWZmZXJpbmcuIERvbid0IHJlbW92ZVxuICAgIC8vIGFueXRoaW5nIGJ1dCBpbXBsaWNpdC1pbnRlcm5hbCBlZGdlcyAodGhvc2UgYXJlIHRoZSBvbmx5IGtpbmQgd2VcbiAgICAvLyBhdXRvLWNyZWF0ZSBkdXJpbmcgZXZhbHVhdGlvbiAtIG90aGVyIHR5cGVzIG1heSBoYXZlIGJlZW4gYWRkZWQgbWFudWFsbHlcbiAgICAvLyBieSB0aGUgdXNlciBhbmQgd2UgZG9uJ3Qgd2FudCB0byB0b3VjaCB0aGVtIGhlcmUpXG4gICAgT2JqZWN0LmtleXMoZWRnZXMpLmZvckVhY2goZGVwZW5kZW5jeUtleSA9PiB7XG4gICAgICBjb25zdCBleGlzdGluZ0VkZ2UgPSB0aGlzLm5vZGVzW2RlcGVuZGVuY3lLZXldLmRlcGVuZGVudHNba2V5XVxuXG4gICAgICBpZiAoZXhpc3RpbmdFZGdlLmZsYWdzICYgKEV4cGxpY2l0IHwgRXh0ZXJuYWwpKSByZXR1cm5cblxuICAgICAgY29uc3QgZWRnZVRvQWRkID0gZGVwZW5kZW5jaWVzW2RlcGVuZGVuY3lLZXldXG5cbiAgICAgIC8vIGVkZ2Ugc3RpbGwgZXhpc3RzOyBrZWVwIGl0XG4gICAgICBpZiAoZWRnZVRvQWRkICYmIGVkZ2VUb0FkZC5mbGFncyA9PT0gZXhpc3RpbmdFZGdlLmZsYWdzKSByZXR1cm5cblxuICAgICAgdGhpcy5yZW1vdmVFZGdlKGtleSwgZGVwZW5kZW5jeUtleSlcbiAgICB9KVxuXG4gICAgLy8gYWRkIG5ldyBlZGdlcyB0aGF0IHdlIHRyYWNrZWQgd2hpbGUgYnVmZmVyaW5nXG4gICAgT2JqZWN0LmtleXMoZGVwZW5kZW5jaWVzKS5mb3JFYWNoKGRlcGVuZGVuY3lLZXkgPT4ge1xuICAgICAgY29uc3QgZWRnZVRvQWRkID0gZGVwZW5kZW5jaWVzW2RlcGVuZGVuY3lLZXldXG4gICAgICBjb25zdCBleGlzdGluZ0VkZ2UgPSBlZGdlc1tkZXBlbmRlbmN5S2V5XVxuXG4gICAgICAvLyBlZGdlIGFscmVhZHkgZXhpc3RzOyBrZWVwIGl0XG4gICAgICBpZiAoZXhpc3RpbmdFZGdlKSByZXR1cm5cblxuICAgICAgdGhpcy5maW5pc2hBZGRpbmdFZGdlKGtleSwgZGVwZW5kZW5jeUtleSwgZWRnZVRvQWRkKVxuICAgIH0pXG5cbiAgICB0aGlzLnVwZGF0ZVN0YWNrLnBvcCgpXG4gIH1cblxuICBwdWJsaWMgZ2V0UmVmQ291bnQoZGVwZW5kZW5jeUtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubm9kZXNbZGVwZW5kZW5jeUtleV0/LmRlcGVuZGVudHMgfHwge30pLmxlbmd0aFxuICB9XG5cbiAgcHVibGljIHJlbW92ZURlcGVuZGVuY2llcyhkZXBlbmRlbnRLZXk6IHN0cmluZykge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5vZGVzW2RlcGVuZGVudEtleV1cblxuICAgIGlmICghbm9kZSkgcmV0dXJuIC8vIG5vZGUgYWxyZWFkeSBkZXN0cm95ZWRcblxuICAgIGNvbnN0IGVkZ2VzID0gbm9kZS5kZXBlbmRlbmNpZXNcblxuICAgIGlmICghZWRnZXMpIHJldHVyblxuXG4gICAgT2JqZWN0LmtleXMoZWRnZXMpLmZvckVhY2goZGVwZW5kZW5jeUtleSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUVkZ2UoZGVwZW5kZW50S2V5LCBkZXBlbmRlbmN5S2V5KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIG9ubHkgYmUgdXNlZCBpbnRlcm5hbGx5LiBSZW1vdmUgdGhlIGdyYXBoIGVkZ2UgYmV0d2VlbiB0d28gbm9kZXMuXG4gICAqIFRoZSBkZXBlbmRlbnQgbWF5IG5vdCBleGlzdCBhcyBhIG5vZGUgaW4gdGhlIGdyYXBoIGlmIGl0J3MgZXh0ZXJuYWwsIGUuZy4gYVxuICAgKiBSZWFjdCBjb21wb25lbnRcbiAgICpcbiAgICogRm9yIHNvbWUgcmVhc29uIGluIFJlYWN0IDE4KywgUmVhY3QgZGVzdHJveXMgcGFyZW50cyBiZWZvcmUgY2hpbGRyZW4uIFRoaXNcbiAgICogbWVhbnMgYSBwYXJlbnQgRWNvc3lzdGVtUHJvdmlkZXIgbWF5IGhhdmUgYWxyZWFkeSB1bm1vdW50ZWQgYW5kIHdpcGVkIHRoZVxuICAgKiB3aG9sZSBncmFwaDsgdGhpcyBlZGdlIG1heSBhbHJlYWR5IGJlIGRlc3Ryb3llZC5cbiAgICovXG4gIHB1YmxpYyByZW1vdmVFZGdlKGRlcGVuZGVudEtleTogc3RyaW5nLCBkZXBlbmRlbmN5S2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBkZXBlbmRlbmN5ID0gdGhpcy5ub2Rlc1tkZXBlbmRlbmN5S2V5XVxuICAgIGNvbnN0IGRlcGVuZGVudCA9IHRoaXMubm9kZXNbZGVwZW5kZW50S2V5XSAvLyB3b24ndCBleGlzdCBpZiBleHRlcm5hbFxuXG4gICAgLy8gZXJhc2UgZ3JhcGggZWRnZSBiZXR3ZWVuIGRlcGVuZGVudCBhbmQgZGVwZW5kZW5jeVxuICAgIGlmIChkZXBlbmRlbnQpIHtcbiAgICAgIGRlbGV0ZSBkZXBlbmRlbnQuZGVwZW5kZW5jaWVzW2RlcGVuZGVuY3lLZXldXG4gICAgfVxuXG4gICAgLy8gaG1tIGNvdWxkIG1heWJlIGhhcHBlbiB3aGVuIGEgZGVwZW5kZW5jeSB3YXMgZm9yY2UtZGVzdHJveWVkIGlmIGEgY2hpbGRcbiAgICAvLyB0cmllcyB0byBkZXN0cm95IGl0cyBlZGdlIGJlZm9yZSByZWNyZWF0aW5nIGl0IChJIGRvbid0IHRoaW5rIHdlIGV2ZXIgZG9cbiAgICAvLyB0aGF0IHRob3VnaClcbiAgICBpZiAoIWRlcGVuZGVuY3kpIHJldHVyblxuXG4gICAgY29uc3QgZGVwZW5kZW50RWRnZSA9IGRlcGVuZGVuY3kuZGVwZW5kZW50c1tkZXBlbmRlbnRLZXldXG5cbiAgICAvLyBoYXBwZW5zIGluIFJlYWN0IDE4KyAoc2VlIHRoaXMgbWV0aG9kJ3MganNkb2MgYWJvdmUpXG4gICAgaWYgKCFkZXBlbmRlbnRFZGdlKSByZXR1cm5cbiAgICBkZWxldGUgZGVwZW5kZW5jeS5kZXBlbmRlbnRzW2RlcGVuZGVudEtleV1cblxuICAgIC8vIHN0YXRpYyBkZXBlbmRlbmNpZXMgZG9uJ3QgY2hhbmdlIGEgbm9kZSdzIHdlaWdodFxuICAgIGlmICghKGRlcGVuZGVudEVkZ2UuZmxhZ3MgJiBTdGF0aWMpKSB7XG4gICAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZVdlaWdodChkZXBlbmRlbnRLZXksIC1kZXBlbmRlbmN5LndlaWdodClcbiAgICB9XG5cbiAgICBpZiAoZGVwZW5kZW50RWRnZS50YXNrKSB7XG4gICAgICB0aGlzLmVjb3N5c3RlbS5fc2NoZWR1bGVyLnVuc2NoZWR1bGUoZGVwZW5kZW50RWRnZS50YXNrKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmVjb3N5c3RlbS5fbW9kcy5lZGdlUmVtb3ZlZCkge1xuICAgICAgdGhpcy5lY29zeXN0ZW0ubW9kQnVzLmRpc3BhdGNoKFxuICAgICAgICBwbHVnaW5BY3Rpb25zLmVkZ2VSZW1vdmVkKHtcbiAgICAgICAgICBkZXBlbmRlbmN5OlxuICAgICAgICAgICAgdGhpcy5lY29zeXN0ZW0uX2luc3RhbmNlc1tkZXBlbmRlbmN5S2V5XSB8fFxuICAgICAgICAgICAgdGhpcy5lY29zeXN0ZW0uc2VsZWN0b3JDYWNoZS5faXRlbXNbZGVwZW5kZW5jeUtleV0sXG4gICAgICAgICAgZGVwZW5kZW50OlxuICAgICAgICAgICAgdGhpcy5lY29zeXN0ZW0uX2luc3RhbmNlc1tkZXBlbmRlbnRLZXldIHx8XG4gICAgICAgICAgICB0aGlzLmVjb3N5c3RlbS5zZWxlY3RvckNhY2hlLl9pdGVtc1tkZXBlbmRlbnRLZXldIHx8XG4gICAgICAgICAgICBkZXBlbmRlbnRLZXksXG4gICAgICAgICAgZWRnZTogZGVwZW5kZW50RWRnZSxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLnNjaGVkdWxlTm9kZURlc3RydWN0aW9uKGRlcGVuZGVuY3lLZXkpXG4gIH1cblxuICAvLyBTaG91bGQgb25seSBiZSB1c2VkIGludGVybmFsbHlcbiAgcHVibGljIHJlbW92ZU5vZGUobm9kZUtleTogc3RyaW5nKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXNbbm9kZUtleV1cblxuICAgIGlmICghbm9kZSkgcmV0dXJuIC8vIGFscmVhZHkgcmVtb3ZlZFxuXG4gICAgLy8gV2UgZG9uJ3QgbmVlZCB0byByZW1vdmUgdGhpcyBkZXBlbmRlbnQgZnJvbSBpdHMgZGVwZW5kZW5jaWVzIGhlcmUgLSB0aGVcbiAgICAvLyBhdG9tIGluc3RhbmNlL0F0b21TZWxlY3RvciB3aWxsIGhhdmUgcmVtb3ZlZCBhbGwgaXRzIGRlcHMgYmVmb3JlIGNhbGxpbmdcbiAgICAvLyB0aGlzIGZ1bmN0aW9uIGFzIHBhcnQgb2YgaXRzIGRlc3RydWN0aW9uIHByb2Nlc3NcblxuICAgIC8vIGlmIGFuIGF0b20gaW5zdGFuY2UgaXMgZm9yY2UtZGVzdHJveWVkLCBpdCBjb3VsZCBzdGlsbCBoYXZlIGRlcGVuZGVudHMuXG4gICAgLy8gSW5mb3JtIHRoZW0gb2YgdGhlIGRlc3RydWN0aW9uXG4gICAgdGhpcy5zY2hlZHVsZURlcGVuZGVudHMoXG4gICAgICBub2RlS2V5LFxuICAgICAgW10sXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB0cnVlLFxuICAgICAgJ25vZGUgZGVzdHJveWVkJyxcbiAgICAgICdEZXN0cm95ZWQnLFxuICAgICAgdHJ1ZVxuICAgIClcblxuICAgIC8vIFJlbW92ZSB0aGlzIGRlcGVuZGVuY3kgZnJvbSBhbGwgaXRzIGRlcGVuZGVudHMgYW5kIHJlY2FsY3VsYXRlIGFsbFxuICAgIC8vIHdlaWdodHMgcmVjdXJzaXZlbHlcbiAgICBPYmplY3Qua2V5cyhub2RlLmRlcGVuZGVudHMpLmZvckVhY2goZGVwZW5kZW50S2V5ID0+IHtcbiAgICAgIGNvbnN0IGRlcGVuZGVudEVkZ2UgPSBub2RlLmRlcGVuZGVudHNbZGVwZW5kZW50S2V5XVxuXG4gICAgICBpZiAoIShkZXBlbmRlbnRFZGdlLmZsYWdzICYgU3RhdGljKSkge1xuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZVdlaWdodChkZXBlbmRlbnRLZXksIC1ub2RlLndlaWdodClcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVwZW5kZW50Tm9kZSA9IHRoaXMubm9kZXNbZGVwZW5kZW50S2V5XVxuXG4gICAgICBpZiAoZGVwZW5kZW50Tm9kZSkgZGVsZXRlIGRlcGVuZGVudE5vZGUuZGVwZW5kZW5jaWVzW25vZGVLZXldXG4gICAgfSlcblxuICAgIGRlbGV0ZSB0aGlzLm5vZGVzW25vZGVLZXldXG4gIH1cblxuICAvKipcbiAgICogU2NoZWR1bGVzIGEgam9iIHRvIHVwZGF0ZSBhbGwgZGVwZW5kZW50cyBvZiBhIG5vZGUuIFRoaXMgaXMgY2FsbGVkIGUuZy5cbiAgICogd2hlbiBhbiBhdG9tIGluc3RhbmNlIG9yIEF0b21TZWxlY3RvciB1cGRhdGVzLCB3aGVuIGFuIGF0b20gaW5zdGFuY2UgaXNcbiAgICogZm9yY2UtZGVzdHJveWVkLCBvciB3aGVuIGFuIGF0b20gaW5zdGFuY2UncyBwcm9taXNlIGNoYW5nZXMuXG4gICAqL1xuICBwdWJsaWMgc2NoZWR1bGVEZXBlbmRlbnRzKFxuICAgIG5vZGVLZXk6IHN0cmluZyxcbiAgICByZWFzb25zOiBFdmFsdWF0aW9uUmVhc29uW10sXG4gICAgbmV3U3RhdGU6IGFueSxcbiAgICBvbGRTdGF0ZTogYW55LFxuICAgIHNob3VsZFNldFRpbWVvdXQ/OiBib29sZWFuLFxuICAgIHR5cGU6IEV2YWx1YXRpb25UeXBlID0gJ3N0YXRlIGNoYW5nZWQnLFxuICAgIHNpZ25hbDogR3JhcGhFZGdlU2lnbmFsID0gJ1VwZGF0ZWQnLFxuICAgIHNjaGVkdWxlU3RhdGljRGVwcyA9IGZhbHNlXG4gICkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5lY29zeXN0ZW0uX2luc3RhbmNlc1tub2RlS2V5XVxuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5lY29zeXN0ZW0uc2VsZWN0b3JDYWNoZS5faXRlbXNbbm9kZUtleV1cbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1tub2RlS2V5XVxuXG4gICAgT2JqZWN0LmtleXMobm9kZS5kZXBlbmRlbnRzKS5mb3JFYWNoKGRlcGVuZGVudEtleSA9PiB7XG4gICAgICBjb25zdCBkZXBlbmRlbnRFZGdlID0gbm9kZS5kZXBlbmRlbnRzW2RlcGVuZGVudEtleV1cblxuICAgICAgLy8gaWYgZWRnZS50YXNrIGV4aXN0cywgdGhpcyBlZGdlIGhhcyBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkXG4gICAgICBpZiAoZGVwZW5kZW50RWRnZS50YXNrKSB7XG4gICAgICAgIGlmIChzaWduYWwgIT09ICdEZXN0cm95ZWQnKSByZXR1cm5cblxuICAgICAgICAvLyBkZXN0cnVjdGlvbiBqb2JzIHN1cGVyc2VkZSB1cGRhdGUgam9iczsgY2FuY2VsIHRoZSBleGlzdGluZyBqb2Igc28gd2VcbiAgICAgICAgLy8gY2FuIGNyZWF0ZSBhIG5ldyBvbmUgZm9yIHRoZSBkZXN0cnVjdGlvblxuICAgICAgICB0aGlzLmVjb3N5c3RlbS5fc2NoZWR1bGVyLnVuc2NoZWR1bGUoZGVwZW5kZW50RWRnZS50YXNrKVxuICAgICAgfVxuXG4gICAgICAvLyBTdGF0aWMgZGVwcyBkb24ndCB1cGRhdGUgb24gc3RhdGUgY2hhbmdlLiBEeW5hbWljIGRlcHMgZG9uJ3QgdXBkYXRlIG9uXG4gICAgICAvLyBwcm9taXNlIGNoYW5nZS4gQm90aCB0eXBlcyB1cGRhdGUgb24gaW5zdGFuY2UgZm9yY2UtZGVzdHJ1Y3Rpb25cbiAgICAgIGNvbnN0IGlzU3RhdGljID0gZGVwZW5kZW50RWRnZS5mbGFncyAmIFN0YXRpY1xuICAgICAgaWYgKGlzU3RhdGljICYmICFzY2hlZHVsZVN0YXRpY0RlcHMpIHJldHVyblxuXG4gICAgICBjb25zdCByZWFzb246IEV2YWx1YXRpb25SZWFzb24gPSB7XG4gICAgICAgIG5ld1N0YXRlLFxuICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgb3BlcmF0aW9uOiBkZXBlbmRlbnRFZGdlLm9wZXJhdGlvbixcbiAgICAgICAgcmVhc29ucyxcbiAgICAgICAgc291cmNlS2V5OiBub2RlS2V5LFxuICAgICAgICBzb3VyY2VUeXBlOiBub2RlLmlzQXRvbVNlbGVjdG9yID8gJ0F0b21TZWxlY3RvcicgOiAnQXRvbScsXG4gICAgICAgIHR5cGUsXG4gICAgICB9XG5cbiAgICAgIC8vIGxldCBpbnRlcm5hbCBkZXBlbmRlbnRzIChvdGhlciBhdG9tcyBhbmQgQXRvbVNlbGVjdG9ycykgc2NoZWR1bGUgdGhlaXJcbiAgICAgIC8vIG93biBqb2JzXG4gICAgICBpZiAoIShkZXBlbmRlbnRFZGdlLmZsYWdzICYgRXh0ZXJuYWwpKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVzW2RlcGVuZGVudEtleV0uaXNBdG9tU2VsZWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lY29zeXN0ZW0uc2VsZWN0b3JDYWNoZS5fc2NoZWR1bGVFdmFsdWF0aW9uKFxuICAgICAgICAgICAgZGVwZW5kZW50S2V5LFxuICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgc2hvdWxkU2V0VGltZW91dFxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmVjb3N5c3RlbS5faW5zdGFuY2VzW2RlcGVuZGVudEtleV0uX3NjaGVkdWxlRXZhbHVhdGlvbihcbiAgICAgICAgICByZWFzb24sXG4gICAgICAgICAgc2hvdWxkU2V0VGltZW91dFxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8vIHNjaGVkdWxlIGV4dGVybmFsIGRlcGVuZGVudHNcbiAgICAgIGNvbnN0IHRhc2sgPSAoKSA9PiB7XG4gICAgICAgIGRlcGVuZGVudEVkZ2UudGFzayA9IHVuZGVmaW5lZFxuICAgICAgICBkZXBlbmRlbnRFZGdlLmNhbGxiYWNrPy4oXG4gICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgIGluc3RhbmNlID8gaW5zdGFuY2Uuc3RvcmUuZ2V0U3RhdGUoKSA6IGNhY2hlLnJlc3VsdCwgLy8gZG9uJ3QgdXNlIHRoZSBzbmFwc2hvdHRlZCBuZXdTdGF0ZSBhYm92ZVxuICAgICAgICAgIHJlYXNvblxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWNvc3lzdGVtLl9zY2hlZHVsZXIuc2NoZWR1bGUoXG4gICAgICAgIHtcbiAgICAgICAgICBmbGFnczogZGVwZW5kZW50RWRnZS5mbGFncyxcbiAgICAgICAgICB0YXNrLFxuICAgICAgICAgIHR5cGU6IDMsIC8vIFVwZGF0ZUV4dGVybmFsRGVwZW5kZW50ICgzKVxuICAgICAgICB9LFxuICAgICAgICBzaG91bGRTZXRUaW1lb3V0XG4gICAgICApXG5cbiAgICAgIC8vIG11dGF0ZSB0aGUgZWRnZTsgZ2l2ZSBpdCB0aGUgc2NoZWR1bGVkIHRhc2sgc28gaXQgY2FuIGJlIGNsZWFuZWQgdXBcbiAgICAgIGRlcGVuZGVudEVkZ2UudGFzayA9IHRhc2tcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEFjdHVhbGx5IGFkZCBhbiBlZGdlIHRvIHRoZSBncmFwaC4gV2hlbiB3ZSBidWZmZXIgZ3JhcGggdXBkYXRlcywgd2UncmVcbiAgICogcmVhbGx5IGp1c3QgZGVmZXJyaW5nIHRoZSBjYWxsaW5nIG9mIHRoaXMgbWV0aG9kLlxuICAgKi9cbiAgcHJpdmF0ZSBmaW5pc2hBZGRpbmdFZGdlKFxuICAgIGRlcGVuZGVudEtleTogc3RyaW5nLFxuICAgIGRlcGVuZGVuY3lLZXk6IHN0cmluZyxcbiAgICBuZXdFZGdlOiBEZXBlbmRlbnRFZGdlXG4gICkge1xuICAgIGNvbnN0IGRlcGVuZGVuY3kgPSB0aGlzLm5vZGVzW2RlcGVuZGVuY3lLZXldXG5cbiAgICBpZiAoIWRlcGVuZGVuY3kpIHJldHVybiAvLyBoYXBwZW5lZCBvbmNlIGZvciBzb21lIHJlYXNvblxuXG4gICAgLy8gZHJhdyBncmFwaCBlZGdlIGJldHdlZW4gZGVwZW5kZW50IGFuZCBkZXBlbmRlbmN5XG4gICAgaWYgKCEobmV3RWRnZS5mbGFncyAmIEV4dGVybmFsKSkge1xuICAgICAgdGhpcy5ub2Rlc1tkZXBlbmRlbnRLZXldLmRlcGVuZGVuY2llc1tkZXBlbmRlbmN5S2V5XSA9IHRydWVcbiAgICB9XG4gICAgZGVwZW5kZW5jeS5kZXBlbmRlbnRzW2RlcGVuZGVudEtleV0gPSBuZXdFZGdlXG5cbiAgICB0aGlzLnVuc2NoZWR1bGVOb2RlRGVzdHJ1Y3Rpb24oZGVwZW5kZW5jeUtleSlcblxuICAgIC8vIHN0YXRpYyBkZXBlbmRlbmNpZXMgZG9uJ3QgY2hhbmdlIGEgbm9kZSdzIHdlaWdodFxuICAgIGlmICghKG5ld0VkZ2UuZmxhZ3MgJiBTdGF0aWMpKSB7XG4gICAgICB0aGlzLnJlY2FsY3VsYXRlTm9kZVdlaWdodChkZXBlbmRlbnRLZXksIGRlcGVuZGVuY3kud2VpZ2h0KVxuICAgIH1cblxuICAgIGlmICh0aGlzLmVjb3N5c3RlbS5fbW9kcy5lZGdlQ3JlYXRlZCkge1xuICAgICAgdGhpcy5lY29zeXN0ZW0ubW9kQnVzLmRpc3BhdGNoKFxuICAgICAgICBwbHVnaW5BY3Rpb25zLmVkZ2VDcmVhdGVkKHtcbiAgICAgICAgICBkZXBlbmRlbmN5OlxuICAgICAgICAgICAgdGhpcy5lY29zeXN0ZW0uX2luc3RhbmNlc1tkZXBlbmRlbmN5S2V5XSB8fFxuICAgICAgICAgICAgdGhpcy5lY29zeXN0ZW0uc2VsZWN0b3JDYWNoZS5faXRlbXNbZGVwZW5kZW5jeUtleV0sXG4gICAgICAgICAgZGVwZW5kZW50OlxuICAgICAgICAgICAgdGhpcy5lY29zeXN0ZW0uX2luc3RhbmNlc1tkZXBlbmRlbnRLZXldIHx8XG4gICAgICAgICAgICB0aGlzLmVjb3N5c3RlbS5zZWxlY3RvckNhY2hlLl9pdGVtc1tkZXBlbmRlbnRLZXldIHx8XG4gICAgICAgICAgICBkZXBlbmRlbnRLZXksIC8vIHVuZm9ydHVuYXRlIGJ1dCBub3QgY2hhbmdpbmcgZm9yIG5vdyBVUERBVEU6IHNob3VsZG4ndCBiZSBuZWVkZWQgYW55bW9yZS4gRG91YmxlIGNoZWNrXG4gICAgICAgICAgZWRnZTogbmV3RWRnZSxcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3RWRnZVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBub24tc3RhdGljIGVkZ2UgaXMgYWRkZWQgb3IgcmVtb3ZlZCwgZXZlcnkgbm9kZSBiZWxvdyB0aGF0IGVkZ2UgKHRoZVxuICAgKiBkZXBlbmRlbnQsIGl0cyBkZXBlbmRlbnRzLCBldGMpIGluIHRoZSBncmFwaCBuZWVkcyB0byBoYXZlIGl0cyB3ZWlnaHRcbiAgICogcmVjYWxjdWxhdGVkLlxuICAgKi9cbiAgcHJpdmF0ZSByZWNhbGN1bGF0ZU5vZGVXZWlnaHQobm9kZUtleTogc3RyaW5nLCB3ZWlnaHREaWZmOiBudW1iZXIpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1tub2RlS2V5XVxuXG4gICAgaWYgKCFub2RlKSByZXR1cm4gLy8gaGFwcGVucyB3aGVuIG5vZGUgaXMgZXh0ZXJuYWxcblxuICAgIG5vZGUud2VpZ2h0ICs9IHdlaWdodERpZmZcblxuICAgIE9iamVjdC5rZXlzKG5vZGUuZGVwZW5kZW50cykuZm9yRWFjaChkZXBlbmRlbnRLZXkgPT4ge1xuICAgICAgdGhpcy5yZWNhbGN1bGF0ZU5vZGVXZWlnaHQoZGVwZW5kZW50S2V5LCB3ZWlnaHREaWZmKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhIG5vZGUncyByZWZDb3VudCBoaXRzIDAsIHNjaGVkdWxlIGRlc3RydWN0aW9uIG9mIHRoYXQgbm9kZS5cbiAgICovXG4gIHByaXZhdGUgc2NoZWR1bGVOb2RlRGVzdHJ1Y3Rpb24obm9kZUtleTogc3RyaW5nKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubm9kZXNbbm9kZUtleV1cblxuICAgIGlmIChub2RlICYmICFPYmplY3Qua2V5cyhub2RlLmRlcGVuZGVudHMpLmxlbmd0aCkge1xuICAgICAgaWYgKG5vZGUuaXNBdG9tU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5lY29zeXN0ZW0uc2VsZWN0b3JDYWNoZS5fZGVzdHJveVNlbGVjdG9yKG5vZGVLZXkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVjb3N5c3RlbS5faW5zdGFuY2VzW25vZGVLZXldLl9zY2hlZHVsZURlc3RydWN0aW9uKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhIG5vZGUncyByZWZDb3VudCBoaXRzIDAsIHdlIHNjaGVkdWxlIGRlc3RydWN0aW9uIG9mIHRoYXQgbm9kZS4gSWZcbiAgICogdGhhdCBkZXN0cnVjdGlvbiBpcyBzdGlsbCBwZW5kaW5nIGFuZCB0aGUgcmVmQ291bnQgZ29lcyBiYWNrIHVwIHRvIDEsXG4gICAqIGNhbmNlbCB0aGUgc2NoZWR1bGVkIGRlc3RydWN0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSB1bnNjaGVkdWxlTm9kZURlc3RydWN0aW9uKG5vZGVLZXk6IHN0cmluZykge1xuICAgIGNvbnN0IGRlcGVuZGVuY3kgPSB0aGlzLm5vZGVzW25vZGVLZXldXG5cbiAgICBpZiAoXG4gICAgICAhZGVwZW5kZW5jeS5pc0F0b21TZWxlY3RvciAmJlxuICAgICAgT2JqZWN0LmtleXMoZGVwZW5kZW5jeS5kZXBlbmRlbnRzKS5sZW5ndGggPT09IDFcbiAgICApIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5lY29zeXN0ZW0uX2luc3RhbmNlc1tub2RlS2V5XSBhcyBBbnlBdG9tSW5zdGFuY2VcblxuICAgICAgaW5zdGFuY2UuX2NhbmNlbERlc3RydWN0aW9uPy4oKVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgaXMgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAemVkdXgvY29yZS91dGlscy9nZW5lcmFsJ1xuaW1wb3J0IHsgQXRvbUluc3RhbmNlQmFzZSB9IGZyb20gJy4vaW5zdGFuY2VzL0F0b21JbnN0YW5jZUJhc2UnXG5cbi8qKlxuICogV2hlbiB1c2luZyBTU1IsIG9ubHkgYGdlbmVyYXRlTm9kZUlkYCBzaG91bGQgYmUgYWxsb3dlZCB0byBydW4uIEl0IGlzIG9rYXlcbiAqIGZvciBgZ2VuZXJhdGVBdG9tU2VsZWN0b3JJZGAgdG8gcnVuLCBidXQgYXV0by1pZCdkIHNlbGVjdG9ycyB3b24ndCBiZVxuICogaHlkcmF0YWJsZSBvbiB0aGUgY2xpZW50ICh1c3VhbGx5IGZpbmUgZm9yIGlubGluZSBzZWxlY3RvcnMpLiBFY29zeXN0ZW0gaWRzXG4gKiBtdXN0IGJlIHNldCBtYW51YWxseVxuICpcbiAqIFRvIHByZXZlbnQgWmVkdXggZnJvbSBhdXRvLWlkJ2luZyBBdG9tU2VsZWN0b3JzLCB1c2UgYSBzaGFyZWQgZnVuY3Rpb25cbiAqIHJlZmVyZW5jZS4gV2hlbiB1c2luZyBBdG9tU2VsZWN0b3JDb25maWcgb2JqZWN0cywgbWFrZSBzdXJlIHRoZSBvYmplY3RcbiAqIHJlZmVyZW5jZSBpdHNlbGYgaXMgc2hhcmVkLiBJbiBib3RoIGNhc2VzLCB0aGUgZnVuY3Rpb24gbXVzdCBoYXZlIGEgdW5pcXVlXG4gKiBuYW1lLlxuICpcbiAqIGBgYHRzXG4gKiAvLyBleGFtcGxlcyB0aGF0IHdpbGwgYmUgYXV0by1pZCdkOlxuICogdXNlQXRvbVNlbGVjdG9yKCh7IGdldCB9KSA9PiBnZXQobXlBdG9tKSkgLy8gaW5saW5lIGZ1bmN0aW9uIHJlZiBjYW4ndCBiZSBzaGFyZWQgYW5kIGhhcyBubyBuYW1lXG4gKiBjb25zdCBteVNlbGVjdG9yID0geyAvLyB0aGlzIG9iamVjdCByZWZlcmVuY2UgY2FuIGJlIHNoYXJlZC4uLlxuICogICBzZWxlY3RvcjogKHsgZ2V0IH0pID0+IGdldChteUF0b20pIC8vIC4uLmJ1dCB0aGUgZnVuY3Rpb24gaGFzIGEgZ2VuZXJpYyBuYW1lXG4gKiB9XG4gKlxuICogLy8gZXhhbXBsZXMgd2hlcmUgaWRzIHdpbGwgYmUgZ2VuZXJhdGVkIHByZWRpY3RhYmx5IGJhc2VkIG9uIHBhcmFtczpcbiAqIGNvbnN0IG15U2VsZWN0b3IgPSAoeyBnZXQgfSkgPT4gZ2V0KG15QXRvbSkgLy8gZnVuY3Rpb24gaGFzIGEgbmFtZSBhbmQgcmVmIGNhbiBiZSBzaGFyZWRcbiAqIGNvbnN0IG15U2VsZWN0b3IgPSB7IC8vIHRoaXMgcmVmIGNhbiBiZSBzaGFyZWQuLi5cbiAqICAgc2VsZWN0b3I6IGZ1bmN0aW9uIG15U2VsZWN0b3IoeyBnZXQgfSkgeyAvLyAuLi5hbmQgdGhlIGZ1bmN0aW9uIGhhcyBhIG5hbWVcbiAqICAgICByZXR1cm4gZ2V0KG15QXRvbSlcbiAqICAgfVxuICogfVxuICogY29uc3QgbXlTZWxlY3RvciA9IHsgLy8gdGhpcyByZWYgY2FuIGJlIHNoYXJlZC4uLlxuICogICBuYW1lOiAnbXlTZWxlY3RvcicsIC8vIC4uLmFuZCB3ZSBzZXQgdGhlIGBuYW1lYCBjb25maWcgb3B0aW9uXG4gKiAgIHNlbGVjdG9yOiAoeyBnZXQgfSkgPT4gZ2V0KG15QXRvbSlcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgSWRHZW5lcmF0b3Ige1xuICBwdWJsaWMgaWRDb3VudGVyID0gMFxuXG4gIC8qKlxuICAgKiBDYWNoZSBmdW5jdGlvbiBhbmQgY2xhc3MgaW5zdGFuY2UgcmVmZXJlbmNlcyB0aGF0IGdldCBwYXNzZWQgYXMgcGFyYW1zIHRvXG4gICAqIGF0b21zIG9yIEF0b21TZWxlY3RvcnMuIE1hcCB0aGVtIHRvIGEgdW5pcXVlLCBzZXJpYWxpemFibGUgaWQuIFVzZSBhXG4gICAqIFdlYWtNYXAgc28gd2UgZG9uJ3QgaG9sZCBvbiB0byBhbnl0aGluZyBoZXJlXG4gICAqL1xuICBwdWJsaWMgd2Vha0NhY2hlID0gbmV3IFdlYWtNYXA8YW55LCBzdHJpbmc+KClcblxuICBwdWJsaWMgZ2VuZXJhdGVBdG9tU2VsZWN0b3JJZChuYW1lID0gJycpIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIG5hbWUgPSBERVYgPyAndW5rbm93blNlbGVjdG9yJyA6ICdhcydcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUlkKGBAQHNlbGVjdG9yLSR7bmFtZX1gKVxuICB9XG5cbiAgcHVibGljIGdlbmVyYXRlRWNvc3lzdGVtSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVJZCgnZXMnKVxuICB9XG5cbiAgcHVibGljIGdlbmVyYXRlSWQgPSAocHJlZml4OiBzdHJpbmcpID0+XG4gICAgYCR7cHJlZml4fS0keysrdGhpcy5pZENvdW50ZXJ9JHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zbGljZSgyLCAxNCl9YFxuXG4gIHB1YmxpYyBnZW5lcmF0ZU5vZGVJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUlkKCdubycpXG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSBncmFwaCBub2RlIGtleSBmb3IgYSBSZWFjdCBjb21wb25lbnRcbiAgICovXG4gIHB1YmxpYyBnZW5lcmF0ZVJlYWN0Q29tcG9uZW50SWQoKSB7XG4gICAgaWYgKCFERVYpIHJldHVybiB0aGlzLmdlbmVyYXRlSWQoJ3JjJylcblxuICAgIGNvbnN0IHsgc3RhY2sgfSA9IG5ldyBFcnJvcigpXG5cbiAgICBpZiAoIXN0YWNrKSByZXR1cm4gJydcblxuICAgIGNvbnN0IGxpbmVzID0gc3RhY2tcbiAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgIC5zbGljZSgyKVxuICAgICAgLm1hcChsaW5lID0+XG4gICAgICAgIGxpbmVcbiAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgLnJlcGxhY2UoJ2F0ICcsICcnKVxuICAgICAgICAgIC5yZXBsYWNlKC8gXFwoLipcXCkvLCAnJylcbiAgICAgIClcblxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBsaW5lc1xuICAgICAgLmZpbmQobGluZSA9PiB7XG4gICAgICAgIGlmICghL1xcdy8udGVzdChsaW5lWzBdKSkgcmV0dXJuIGZhbHNlXG5cbiAgICAgICAgY29uc3QgaWRlbnRpZmllcnMgPSBsaW5lLnNwbGl0KCcuJylcbiAgICAgICAgY29uc3QgZm4gPSBpZGVudGlmaWVyc1tpZGVudGlmaWVycy5sZW5ndGggLSAxXVxuICAgICAgICByZXR1cm4gZm5bMF0udG9VcHBlckNhc2UoKSA9PT0gZm5bMF1cbiAgICAgIH0pXG4gICAgICA/LnNwbGl0KCcgJylbMF1cblxuICAgIHJldHVybiB0aGlzLmdlbmVyYXRlSWQoY29tcG9uZW50TmFtZSB8fCAnVW5rbm93bkNvbXBvbmVudCcpXG4gIH1cblxuICAvKipcbiAgICogVHVybiBhbiBhcnJheSBvZiBhbnl0aGluZyBpbnRvIGEgcHJlZGljdGFibGUgc3RyaW5nLiBJZiBhbnkgaXRlbSBpcyBhbiBhdG9tXG4gICAqIGluc3RhbmNlLCBpdCB3aWxsIGJlIHNlcmlhbGl6ZWQgYXMgdGhlIGluc3RhbmNlJ3Mga2V5SGFzaC4gSWZcbiAgICogYWNjZXB0Q29tcGxleFBhcmFtcyBpcyB0cnVlLCBtYXAgY2xhc3MgaW5zdGFuY2VzIGFuZCBmdW5jdGlvbnMgdG8gYVxuICAgKiBjb25zaXN0ZW50IGlkIGZvciB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgcmVjdXJzaXZlIG9iamVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQgLSB0aGV5IHdvdWxkIGFkZCB3YXkgdG9vIG11Y2hcbiAgICogb3ZlcmhlYWQgaGVyZSBhbmQgYXJlIHJlYWxseSBqdXN0IHVubmVjZXNzYXJ5LlxuICAgKi9cbiAgcHVibGljIGhhc2hQYXJhbXMocGFyYW1zOiBhbnlbXSwgYWNjZXB0Q29tcGxleFBhcmFtcz86IGJvb2xlYW4pOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwYXJhbXMsIChfLCBwYXJhbSkgPT4ge1xuICAgICAgaWYgKGlzKHBhcmFtLCBBdG9tSW5zdGFuY2VCYXNlKSkgcmV0dXJuIHBhcmFtLmtleUhhc2hcbiAgICAgIGlmICghcGFyYW0pIHJldHVybiBwYXJhbVxuICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHBhcmFtKSkge1xuICAgICAgICBpZiAoIWFjY2VwdENvbXBsZXhQYXJhbXMgfHwgQXJyYXkuaXNBcnJheShwYXJhbSkpIHJldHVybiBwYXJhbVxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5jYWNoZUZuKHBhcmFtKVxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtPy5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlQ2xhc3MocGFyYW0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyYW0gLy8gbGV0IGVuZ2luZSB0cnkgcmVzb2x2ZSBpdCBvciB0aHJvdyB0aGUgZXJyb3JcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtKVxuICAgICAgICAuc29ydCgpXG4gICAgICAgIC5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBwYXJhbVtrZXldXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGNhY2hlQ2xhc3MoaW5zdGFuY2U6IHsgbmV3ICgpOiBhbnkgfSkge1xuICAgIGxldCBpZCA9IHRoaXMud2Vha0NhY2hlLmdldChpbnN0YW5jZSlcbiAgICBpZiAoaWQpIHJldHVybiBpZFxuXG4gICAgaWQgPSB0aGlzLmdlbmVyYXRlSWQoaW5zdGFuY2UuY29uc3RydWN0b3IubmFtZSB8fCAnVW5rbm93bkNsYXNzJylcbiAgICB0aGlzLndlYWtDYWNoZS5zZXQoaW5zdGFuY2UsIGlkKVxuXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBwcml2YXRlIGNhY2hlRm4oZm46ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55KSB7XG4gICAgbGV0IGlkID0gdGhpcy53ZWFrQ2FjaGUuZ2V0KGZuKVxuICAgIGlmIChpZCkgcmV0dXJuIGlkXG5cbiAgICBpZCA9IHRoaXMuZ2VuZXJhdGVJZChmbi5uYW1lIHx8ICdhbm9uRm4nKVxuICAgIHRoaXMud2Vha0NhY2hlLnNldChmbiwgaWQpXG5cbiAgICByZXR1cm4gaWRcbiAgfVxufVxuIiwiaW1wb3J0IHsgSm9iLCBTY2hlZHVsZXIgYXMgU2NoZWR1bGVySW50ZXJmYWNlIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuL0Vjb3N5c3RlbSdcblxuZXhwb3J0IGNsYXNzIFNjaGVkdWxlciBpbXBsZW1lbnRzIFNjaGVkdWxlckludGVyZmFjZSB7XG4gIC8vIHByaXZhdGUgX3J1blN0YXJ0VGltZT86IG51bWJlclxuICBwcml2YXRlIGpvYnM6IEpvYltdID0gW11cbiAgcHJpdmF0ZSBfam9iVGltZW91dElkPzogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD5cbiAgcHJpdmF0ZSBfaXNSdW5uaW5nPzogYm9vbGVhblxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWNvc3lzdGVtOiBFY29zeXN0ZW0pIHt9XG5cbiAgLyoqXG4gICAqIEtpbGwgYW55IGN1cnJlbnQgdGltZW91dCBhbmQgcnVuIGFsbCBqb2JzIGltbWVkaWF0ZWx5LlxuICAgKlxuICAgKiBJTVBPUlRBTlQ6IFNldHRpbmcgYW5kIGNsZWFyaW5nIHRpbWVvdXRzIGlzIGV4cGVuc2l2ZS4gV2UgbmVlZCB0byBhbHdheXNcbiAgICogcGFzcyBgc2hvdWxkU2V0VGltZW91dDogZmFsc2VgIHRvIHNjaGVkdWxlci5zY2hlZHVsZSgpIHdoZW4gd2UncmUgZ29pbmdcbiAgICogdG8gaW1tZWRpYXRlbHkgZmx1c2hcbiAgICovXG4gIHB1YmxpYyBmbHVzaCgpIHtcbiAgICBpZiAodGhpcy5faXNSdW5uaW5nKSByZXR1cm4gLy8gYWxyZWFkeSBmbHVzaGluZ1xuICAgIGlmICh0aGlzLl9qb2JUaW1lb3V0SWQpIGNsZWFyVGltZW91dCh0aGlzLl9qb2JUaW1lb3V0SWQpXG5cbiAgICB0aGlzLnJ1bkpvYnMoKVxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCBhIGpvYiBpbnRvIHRoZSBxdWV1ZS4gSW5zZXJ0aW9uIHBvaW50IGRlcGVuZHMgb24gam9iJ3MgdHlwZSBhbmRcbiAgICogd2VpZ2h0LlxuICAgKlxuICAgKiBJTVBPUlRBTlQ6IFNldHRpbmcgYW5kIGNsZWFyaW5nIHRpbWVvdXRzIGlzIGV4cGVuc2l2ZS4gV2UgbmVlZCB0byBhbHdheXNcbiAgICogcGFzcyBgc2hvdWxkU2V0VGltZW91dDogZmFsc2VgIHdoZW4gd2UncmUgZ29pbmcgdG8gaW1tZWRpYXRlbHkgZmx1c2hcbiAgICovXG4gIHB1YmxpYyBzY2hlZHVsZShuZXdKb2I6IEpvYiwgc2hvdWxkU2V0VGltZW91dCA9IHRydWUpIHtcbiAgICBpZiAobmV3Sm9iLnR5cGUgPT09IDQpIHtcbiAgICAgIC8vIFJ1bkVmZmVjdCAoNCkgam9icyBydW4gaW4gYW55IG9yZGVyLCBhZnRlciBldmVyeXRoaW5nIGVsc2VcbiAgICAgIHRoaXMuam9icy5wdXNoKG5ld0pvYilcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBub2RlcyB9ID0gdGhpcy5lY29zeXN0ZW0uX2dyYXBoXG4gICAgICBjb25zdCBmbGFncyA9IG5ld0pvYi5mbGFncyA/PyAwXG4gICAgICBjb25zdCB3ZWlnaHQgPSBuZXdKb2Iua2V5SGFzaCA/IG5vZGVzW25ld0pvYi5rZXlIYXNoXS53ZWlnaHQgOiAwXG5cbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kSW5kZXgoam9iID0+IHtcbiAgICAgICAgaWYgKGpvYi50eXBlICE9PSBuZXdKb2IudHlwZSkgcmV0dXJuICsobmV3Sm9iLnR5cGUgLSBqb2IudHlwZSA+IDApIHx8IC0xIC8vIDEgb3IgLTFcblxuICAgICAgICAvLyBhIGpvYiB0eXBlIGNhbiB1c2UgZWl0aGVyIHdlaWdodCBvciBmbGFncyBjb21wYXJpc29uIG9yIG5laXRoZXJcbiAgICAgICAgaWYgKGpvYi5rZXlIYXNoKSB7XG4gICAgICAgICAgY29uc3Qgam9iV2VpZ2h0ID0gbm9kZXNbam9iLmtleUhhc2hdLndlaWdodFxuXG4gICAgICAgICAgcmV0dXJuIHdlaWdodCA8IGpvYldlaWdodCA/IC0xIDogKyh3ZWlnaHQgPiBqb2JXZWlnaHQpIC8vICsgPSAwIG9yIDFcbiAgICAgICAgfSBlbHNlIGlmIChqb2IuZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmbGFncyA8IGpvYi5mbGFncyA/IC0xIDogKyhmbGFncyA+IGpvYi5mbGFncylcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwXG4gICAgICB9KVxuXG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRoaXMuam9icy5wdXNoKG5ld0pvYilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuam9icy5zcGxpY2UoaW5kZXgsIDAsIG5ld0pvYilcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB3ZSBqdXN0IHB1c2hlZCB0aGUgZmlyc3Qgam9iIG9udG8gdGhlIHF1ZXVlXG4gICAgaWYgKHNob3VsZFNldFRpbWVvdXQgJiYgdGhpcy5qb2JzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5zZXRUaW1lb3V0KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU29tZSBqb2JzICh1cGRhdGUgc3RvcmUgam9icykgbXVzdCBydW4gaW1tZWRpYXRlbHkgYnV0IGFsc28gbmVlZCB0aGVcbiAgICogc2NoZWR1bGVyIHRvIGJlIHJ1bm5pbmcuXG4gICAqXG4gICAqIE90aGVyIGpvYnMgKGluZm9ybSBzdWJzY3JpYmVyIGpvYnMpIG11c3QgcnVuIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjdXJyZW50XG4gICAqIHRhc2suIFRoaXMgaXMgZG9uZSBieSBwYXNzaW5nIGBmYWxzZWAgZm9yIHRoZSAybmQgcGFyYW0uXG4gICAqL1xuICBwdWJsaWMgc2NoZWR1bGVOb3cobmV3Sm9iOiBKb2IsIHJ1bklmUnVubmluZyA9IHRydWUpIHtcbiAgICBpZiAodGhpcy5faXNSdW5uaW5nID09PSBydW5JZlJ1bm5pbmcpIHJldHVybiBuZXdKb2IudGFzaygpXG4gICAgdGhpcy5qb2JzLnVuc2hpZnQobmV3Sm9iKVxuICAgIHRoaXMuZmx1c2goKVxuICB9XG5cbiAgcHVibGljIHVuc2NoZWR1bGUodGFzazogKCkgPT4gdm9pZCkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5qb2JzLmZpbmRJbmRleChqb2IgPT4gam9iLnRhc2sgPT09IHRhc2spXG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB0aGlzLmpvYnMuc3BsaWNlKGluZGV4LCAxKVxuICB9XG5cbiAgcHVibGljIHdpcGUoKSB7XG4gICAgLy8gYWxsb3cgZXh0ZXJuYWwgam9icyB0byBwcm9jZWVkLiBUT0RPOiBzaG91bGQgd2UgZmx1c2ggaGVyZT9cbiAgICB0aGlzLmpvYnMgPSB0aGlzLmpvYnMuZmlsdGVyKFxuICAgICAgam9iID0+IGpvYi50eXBlID09PSAzIC8vIFVwZGF0ZUV4dGVybmFsRGVwZW5kZW50ICgzKVxuICAgIClcbiAgfVxuXG4gIC8vIEFuIE8obG9nIG4pIHJlcGxhY2VtZW50IGZvciB0aGlzLmpvYnMuZmluZEluZGV4KClcbiAgcHJpdmF0ZSBmaW5kSW5kZXgoXG4gICAgY2I6IChqb2I6IEpvYikgPT4gbnVtYmVyLFxuICAgIGluZGV4ID0gTWF0aC5jZWlsKHRoaXMuam9icy5sZW5ndGggLyAyKSAtIDEsXG4gICAgaXRlcmF0aW9uID0gMVxuICApOiBudW1iZXIge1xuICAgIGNvbnN0IGpvYiA9IHRoaXMuam9ic1tpbmRleF1cbiAgICBpZiAoam9iID09IG51bGwpIHJldHVybiBpbmRleFxuXG4gICAgY29uc3QgZGlyZWN0aW9uID0gY2Ioam9iKVxuICAgIGlmICghZGlyZWN0aW9uKSByZXR1cm4gaW5kZXhcblxuICAgIGNvbnN0IGRpdmlzb3IgPSAyICoqIGl0ZXJhdGlvblxuICAgIGNvbnN0IGlzRG9uZSA9IGRpdmlzb3IgPiB0aGlzLmpvYnMubGVuZ3RoXG5cbiAgICBpZiAoaXNEb25lKSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAoZGlyZWN0aW9uID09PSAxID8gMSA6IDApXG4gICAgfVxuXG4gICAgY29uc3QgZWZmZWN0dWFsU2l6ZSA9IE1hdGgucm91bmQodGhpcy5qb2JzLmxlbmd0aCAvIGRpdmlzb3IpXG4gICAgY29uc3QgbmV3SW5kZXggPSBNYXRoLm1pbihcbiAgICAgIHRoaXMuam9icy5sZW5ndGggLSAxLFxuICAgICAgTWF0aC5tYXgoMCwgaW5kZXggKyBNYXRoLmNlaWwoZWZmZWN0dWFsU2l6ZSAvIDIpICogZGlyZWN0aW9uKVxuICAgIClcblxuICAgIHJldHVybiB0aGlzLmZpbmRJbmRleChjYiwgbmV3SW5kZXgsIGl0ZXJhdGlvbiArIDEpXG4gIH1cblxuICBwcml2YXRlIHJ1bkpvYnMoKSB7XG4gICAgdGhpcy5fam9iVGltZW91dElkID0gdW5kZWZpbmVkXG4gICAgLy8gdGhpcy5fcnVuU3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAvLyBsZXQgY291bnRlciA9IDBcblxuICAgIHRoaXMuX2lzUnVubmluZyA9IHRydWVcbiAgICB3aGlsZSAodGhpcy5qb2JzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgam9iID0gdGhpcy5qb2JzLnNoaWZ0KCkgYXMgSm9iXG4gICAgICBqb2IudGFzaygpXG5cbiAgICAgIC8vIHRoaXMgXCJicmVha1wiIGlkZWEgd291bGQgbmVlZCB0byBvbmx5IGJyZWFrIGlmIHRoZSBuZXh0IGpvYiBpc1xuICAgICAgLy8gaW50ZXJydXB0aWJsZSAoc3RvcmUgdXBkYXRlcyAtIHRoZSBoaWdoZXN0LXByaW8gdGFza3MgLSBhcmUgbm90XG4gICAgICAvLyBpbnRlcnJ1cHRpYmxlKVxuICAgICAgLy8gaWYgKCEoKytjb3VudGVyICUgMjApICYmIHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy5fcnVuU3RhcnRUaW1lID49IDEwMCkge1xuICAgICAgLy8gICBzZXRUaW1lb3V0KCgpID0+IHRoaXMucnVuSm9icygpKVxuICAgICAgLy8gICBicmVha1xuICAgICAgLy8gfVxuICAgIH1cbiAgICB0aGlzLl9pc1J1bm5pbmcgPSBmYWxzZVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLl9pc1J1bm5pbmcpIHJldHVyblxuXG4gICAgdGhpcy5fam9iVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJ1bkpvYnMoKVxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7IGlzIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQge1xuICBBdG9tU2VsZWN0b3JDb25maWcsXG4gIEF0b21TZWxlY3Rvck9yQ29uZmlnLFxuICBDbGVhbnVwLFxuICBEZXBlbmRlbnRDYWxsYmFjayxcbiAgRXZhbHVhdGlvblJlYXNvbixcbiAgU2VsZWN0YWJsZSxcbn0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBFeHBsaWNpdCwgRXh0ZXJuYWwsIHByZWZpeCB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHsgcGx1Z2luQWN0aW9ucyB9IGZyb20gJy4uL3V0aWxzL3BsdWdpbi1hY3Rpb25zJ1xuaW1wb3J0IHsgRWNvc3lzdGVtIH0gZnJvbSAnLi9FY29zeXN0ZW0nXG5cbmNvbnN0IGRlZmF1bHRSZXN1bHRzQ29tcGFyYXRvciA9IChhOiBhbnksIGI6IGFueSkgPT4gYSA9PT0gYlxuXG5leHBvcnQgY2xhc3MgU2VsZWN0b3JDYWNoZUl0ZW08VCA9IGFueSwgQXJncyBleHRlbmRzIGFueVtdID0gYW55W10+IHtcbiAgcHVibGljIHN0YXRpYyAkJHR5cGVvZiA9IFN5bWJvbC5mb3IoYCR7cHJlZml4fS9TZWxlY3RvckNhY2hlYClcbiAgcHVibGljIGlzRGVzdHJveWVkPzogYm9vbGVhblxuICBwdWJsaWMgbmV4dEV2YWx1YXRpb25SZWFzb25zOiBFdmFsdWF0aW9uUmVhc29uW10gPSBbXVxuICBwdWJsaWMgcHJldkV2YWx1YXRpb25SZWFzb25zPzogRXZhbHVhdGlvblJlYXNvbltdXG4gIHB1YmxpYyByZXN1bHQ/OiBUXG4gIHB1YmxpYyB0YXNrPzogKCkgPT4gdm9pZFxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBjYWNoZUtleTogc3RyaW5nLFxuICAgIHB1YmxpYyBzZWxlY3RvclJlZjogQXRvbVNlbGVjdG9yT3JDb25maWc8VCwgQXJncz4sXG4gICAgcHVibGljIGFyZ3M/OiBBcmdzXG4gICkge31cbn1cblxuLyoqXG4gKiBTaW5jZSBBdG9tU2VsZWN0b3JzIGFyZSBtZWFudCB0byBmZWVsIGxpZ2h0d2VpZ2h0LCB0aGV5IGRvbid0IGhhdmUgdG8gYmVcbiAqIGluc3RhbmNlcyBvZiBhIGNsYXNzIC0gdGhleSdsbCBvZnRlbiBiZSBzdGFuZGFsb25lIG9yIGV2ZW4gaW5saW5lXG4gKiBmdW5jdGlvbnMuIFRoaXMgY2xhc3MgaGFuZGxlcyBhbGwgdGhlIGxvZ2ljIHRoYXQgQXRvbVNlbGVjdG9ycyB3b3VsZCBoYW5kbGVcbiAqIHRoZW1zZWx2ZXMgaWYgdGhleSB3ZXJlIGNsYXNzZXMgLSBjcmVhdGlvbiwgY2FjaGUgbWFuYWdlbWVudCwgYW5kXG4gKiBkZXN0cnVjdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlbGVjdG9yQ2FjaGUge1xuICAvKipcbiAgICogTWFwIHNlbGVjdG9yS2V5K3BhcmFtcyBrZXlIYXNoIHN0cmluZ3MgdG8gdGhlIGNhY2hlZCBwYXJhbXMgYW5kIHJlc3VsdCBmb3JcbiAgICogdGhlIHNlbGVjdG9yXG4gICAqL1xuICBwdWJsaWMgX2l0ZW1zOiBSZWNvcmQ8c3RyaW5nLCBTZWxlY3RvckNhY2hlSXRlbTxhbnksIGFueT4+ID0ge31cblxuICAvKipcbiAgICogTWFwIHNlbGVjdG9ycyAob3Igc2VsZWN0b3IgY29uZmlnIG9iamVjdHMpIHRvIGEgYmFzZSBzZWxlY3RvcktleSB0aGF0IGNhblxuICAgKiBiZSB1c2VkIHRvIHByZWRpY3RhYmx5IGNyZWF0ZSBzZWxlY3RvcktleStwYXJhbXMga2V5SGFzaGVzIHRvIGxvb2sgdXAgdGhlXG4gICAqIGNhY2hlIGluIGB0aGlzLl9pdGVtc2BcbiAgICovXG4gIHB1YmxpYyBfcmVmQmFzZUtleXMgPSBuZXcgV2Vha01hcDxBdG9tU2VsZWN0b3JPckNvbmZpZzxhbnksIGFueT4sIHN0cmluZz4oKVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWNvc3lzdGVtOiBFY29zeXN0ZW0pIHt9XG5cbiAgcHVibGljIGFkZERlcGVuZGVudChcbiAgICBjYWNoZUl0ZW06IFNlbGVjdG9yQ2FjaGVJdGVtPGFueSwgYW55PixcbiAgICB7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIG9wZXJhdGlvbiA9ICdhZGREZXBlbmRlbnQnLFxuICAgIH06IHtcbiAgICAgIGNhbGxiYWNrPzogRGVwZW5kZW50Q2FsbGJhY2tcbiAgICAgIG9wZXJhdGlvbj86IHN0cmluZ1xuICAgIH0gPSB7fVxuICApOiBDbGVhbnVwIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuZWNvc3lzdGVtLl9pZEdlbmVyYXRvci5nZW5lcmF0ZU5vZGVJZCgpXG4gICAgdGhpcy5lY29zeXN0ZW0uX2dyYXBoLmFkZEVkZ2UoXG4gICAgICBpZCxcbiAgICAgIGNhY2hlSXRlbS5jYWNoZUtleSxcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIEV4cGxpY2l0IHwgRXh0ZXJuYWwsXG4gICAgICBjYWxsYmFja1xuICAgIClcblxuICAgIHJldHVybiAoKSA9PiB0aGlzLmVjb3N5c3RlbS5fZ3JhcGgucmVtb3ZlRWRnZShpZCwgY2FjaGVJdGVtLmNhY2hlS2V5KVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3lDYWNoZTxUID0gYW55LCBBcmdzIGV4dGVuZHMgW10gPSBbXT4oXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZTxULCBBcmdzPlxuICApOiB2b2lkXG5cbiAgcHVibGljIGRlc3Ryb3lDYWNoZTxUID0gYW55LCBBcmdzIGV4dGVuZHMgYW55W10gPSBbXT4oXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZTxULCBBcmdzPixcbiAgICBhcmdzOiBBcmdzLFxuICAgIGZvcmNlPzogYm9vbGVhblxuICApOiB2b2lkXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjYWNoZSBmb3IgdGhlIGdpdmVuIHNlbGVjdG9yICsgYXJncyBjb21ibyAoaWYgaXQgZXhpc3RzKS5cbiAgICpcbiAgICogRGVzdHJ1Y3Rpb24gYmFpbHMgb3V0IGJ5IGRlZmF1bHQgaWYgdGhlIHNlbGVjdG9yJ3MgcmVmIGNvdW50IGlzID4gMC4gUGFzc1xuICAgKiBgdHJ1ZWAgYXMgdGhlIDNyZCBwYXJhbSB0byBmb3JjZSBkZXN0cnVjdGlvbi5cbiAgICovXG4gIHB1YmxpYyBkZXN0cm95Q2FjaGU8VCA9IGFueSwgQXJncyBleHRlbmRzIGFueVtdID0gW10+KFxuICAgIHNlbGVjdGFibGU6IFNlbGVjdGFibGU8VCwgQXJncz4sXG4gICAgYXJncz86IEFyZ3MsXG4gICAgZm9yY2U/OiBib29sZWFuXG4gICkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gaXMoc2VsZWN0YWJsZSwgU2VsZWN0b3JDYWNoZUl0ZW0pXG4gICAgICA/IChzZWxlY3RhYmxlIGFzIFNlbGVjdG9yQ2FjaGVJdGVtKS5jYWNoZUtleVxuICAgICAgOiB0aGlzLmdldENhY2hlS2V5KFxuICAgICAgICAgIHNlbGVjdGFibGUgYXMgQXRvbVNlbGVjdG9yT3JDb25maWc8VCwgQXJncz4sXG4gICAgICAgICAgYXJncyBhcyBBcmdzXG4gICAgICAgIClcblxuICAgIGNvbnN0IGNhY2hlID0gaXMoc2VsZWN0YWJsZSwgU2VsZWN0b3JDYWNoZUl0ZW0pXG4gICAgICA/IChzZWxlY3RhYmxlIGFzIFNlbGVjdG9yQ2FjaGVJdGVtPFQsIEFyZ3M+KVxuICAgICAgOiB0aGlzLl9pdGVtc1tjYWNoZUtleV1cblxuICAgIGlmICghY2FjaGUpIHJldHVyblxuXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZWNvc3lzdGVtLl9ncmFwaC5ub2Rlc1tjYWNoZUtleV1cblxuICAgIGlmICghZm9yY2UgJiYgT2JqZWN0LmtleXMobm9kZT8uZGVwZW5kZW50cyB8fCB7fSkubGVuZ3RoKSByZXR1cm5cblxuICAgIHRoaXMuX2Rlc3Ryb3lTZWxlY3RvcihjYWNoZUtleSlcbiAgfVxuXG4gIHB1YmxpYyBnZXRDYWNoZTxUID0gYW55LCBBcmdzIGV4dGVuZHMgW10gPSBbXT4oXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZTxULCBBcmdzPlxuICApOiBTZWxlY3RvckNhY2hlSXRlbTxULCBBcmdzPlxuXG4gIHB1YmxpYyBnZXRDYWNoZTxUID0gYW55LCBBcmdzIGV4dGVuZHMgYW55W10gPSBbXT4oXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZTxULCBBcmdzPixcbiAgICBhcmdzOiBBcmdzXG4gICk6IFNlbGVjdG9yQ2FjaGVJdGVtPFQsIEFyZ3M+XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2FjaGVkIGFyZ3MgYW5kIHJlc3VsdCBmb3IgdGhlIGdpdmVuIEF0b21TZWxlY3RvciAob3JcbiAgICogQXRvbVNlbGVjdG9yQ29uZmlnKS4gUnVucyB0aGUgc2VsZWN0b3IsIHNldHMgdXAgdGhlIGdyYXBoLCBhbmQgY2FjaGVzIHRoZVxuICAgKiBpbml0aWFsIHZhbHVlIGlmIHRoaXMgc2VsZWN0b3IgaGFzbid0IGJlZW4gY2FjaGVkIGJlZm9yZS5cbiAgICovXG4gIHB1YmxpYyBnZXRDYWNoZTxUID0gYW55LCBBcmdzIGV4dGVuZHMgYW55W10gPSBbXT4oXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZTxULCBBcmdzPiB8IFNlbGVjdG9yQ2FjaGVJdGVtPFQsIEFyZ3M+LFxuICAgIGFyZ3M6IEFyZ3MgPSAoW10gYXMgdW5rbm93bikgYXMgQXJnc1xuICApIHtcbiAgICBpZiAoaXMoc2VsZWN0YWJsZSwgU2VsZWN0b3JDYWNoZUl0ZW0pKSB7XG4gICAgICByZXR1cm4gc2VsZWN0YWJsZVxuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdG9yT3JDb25maWcgPSBzZWxlY3RhYmxlIGFzIEF0b21TZWxlY3Rvck9yQ29uZmlnPFQsIEFyZ3M+XG4gICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdldENhY2hlS2V5KHNlbGVjdG9yT3JDb25maWcsIGFyZ3MgYXMgQXJncylcbiAgICBsZXQgY2FjaGUgPSB0aGlzLl9pdGVtc1tjYWNoZUtleV0gYXMgU2VsZWN0b3JDYWNoZUl0ZW08VCwgQXJncz5cblxuICAgIGlmIChjYWNoZSkgcmV0dXJuIGNhY2hlXG5cbiAgICAvLyBjcmVhdGUgdGhlIGNhY2hlOyBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgIGNhY2hlID0gbmV3IFNlbGVjdG9yQ2FjaGVJdGVtKGNhY2hlS2V5LCBzZWxlY3Rvck9yQ29uZmlnLCBhcmdzKVxuICAgIHRoaXMuX2l0ZW1zW2NhY2hlS2V5XSA9IGNhY2hlIGFzIFNlbGVjdG9yQ2FjaGVJdGVtPGFueSwgYW55W10+XG4gICAgdGhpcy5lY29zeXN0ZW0uX2dyYXBoLmFkZE5vZGUoY2FjaGVLZXksIHRydWUpXG5cbiAgICB0aGlzLnJ1blNlbGVjdG9yKGNhY2hlS2V5LCBhcmdzIGFzIEFyZ3MsIHRydWUpXG5cbiAgICByZXR1cm4gY2FjaGVcbiAgfVxuXG4gIHB1YmxpYyBnZXRDYWNoZUtleTxUID0gYW55LCBBcmdzIGV4dGVuZHMgW10gPSBbXT4oXG4gICAgc2VsZWN0b3JPckNvbmZpZzogQXRvbVNlbGVjdG9yT3JDb25maWc8VCwgQXJncz5cbiAgKTogc3RyaW5nXG5cbiAgcHVibGljIGdldENhY2hlS2V5PFQgPSBhbnksIEFyZ3MgZXh0ZW5kcyBhbnlbXSA9IFtdPihcbiAgICBzZWxlY3Rvck9yQ29uZmlnOiBBdG9tU2VsZWN0b3JPckNvbmZpZzxULCBBcmdzPixcbiAgICBhcmdzOiBBcmdzXG4gICk6IHN0cmluZ1xuXG4gIHB1YmxpYyBnZXRDYWNoZUtleTxUID0gYW55LCBBcmdzIGV4dGVuZHMgYW55W10gPSBbXT4oXG4gICAgc2VsZWN0b3JPckNvbmZpZzogQXRvbVNlbGVjdG9yT3JDb25maWc8VCwgQXJncz4sXG4gICAgYXJnczogQXJncyxcbiAgICB3ZWFrOiB0cnVlXG4gICk6IHN0cmluZyB8IHVuZGVmaW5lZFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZ1bGx5IHF1YWxpZmllZCBrZXkgaGFzaCBmb3IgdGhlIGdpdmVuIHNlbGVjdG9yK3BhcmFtcyBjb21ib1xuICAgKi9cbiAgcHVibGljIGdldENhY2hlS2V5KFxuICAgIHNlbGVjdG9yT3JDb25maWc6IEF0b21TZWxlY3Rvck9yQ29uZmlnPGFueSwgYW55W10+LFxuICAgIGFyZ3M/OiBhbnlbXSxcbiAgICB3ZWFrPzogYm9vbGVhblxuICApIHtcbiAgICBjb25zdCBiYXNlS2V5ID0gdGhpcy5nZXRCYXNlS2V5KHNlbGVjdG9yT3JDb25maWcsIHdlYWspXG5cbiAgICByZXR1cm4gYXJncz8ubGVuZ3RoXG4gICAgICA/IGAke2Jhc2VLZXl9LSR7dGhpcy5lY29zeXN0ZW0uX2lkR2VuZXJhdG9yLmhhc2hQYXJhbXMoXG4gICAgICAgICAgYXJncyxcbiAgICAgICAgICB0aGlzLmVjb3N5c3RlbS5jb21wbGV4UGFyYW1zXG4gICAgICAgICl9YFxuICAgICAgOiBiYXNlS2V5XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIG9iamVjdCBvZiBhbGwgY3VycmVudGx5LWNhY2hlZCBBdG9tU2VsZWN0b3JzLlxuICAgKlxuICAgKiBQYXNzIGEgc2VsZWN0b3IgcmVmZXJlbmNlIG9yIHN0cmluZyB0byBmaWx0ZXIgYnkgY2FjaGVzIHdob3NlIGNhY2hlS2V5XG4gICAqIHdlYWtseSBtYXRjaGVzIHRoZSBwYXNzZWQgc2VsZWN0b3IgbmFtZS5cbiAgICovXG4gIHB1YmxpYyBpbnNwZWN0SXRlbXMoc2VsZWN0YWJsZU9yTmFtZT86IFNlbGVjdGFibGU8YW55LCBhbnk+IHwgc3RyaW5nKSB7XG4gICAgY29uc3QgaGFzaDogUmVjb3JkPHN0cmluZywgU2VsZWN0b3JDYWNoZUl0ZW0+ID0ge31cbiAgICBjb25zdCBmaWx0ZXJLZXkgPVxuICAgICAgIXNlbGVjdGFibGVPck5hbWUgfHwgdHlwZW9mIHNlbGVjdGFibGVPck5hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgID8gc2VsZWN0YWJsZU9yTmFtZVxuICAgICAgICA6IGlzKHNlbGVjdGFibGVPck5hbWUsIFNlbGVjdG9yQ2FjaGVJdGVtKVxuICAgICAgICA/IChzZWxlY3RhYmxlT3JOYW1lIGFzIFNlbGVjdG9yQ2FjaGVJdGVtKS5jYWNoZUtleVxuICAgICAgICA6IHRoaXMuZ2V0QmFzZUtleShcbiAgICAgICAgICAgIHNlbGVjdGFibGVPck5hbWUgYXMgQXRvbVNlbGVjdG9yT3JDb25maWc8YW55LCBhbnk+LFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICkgfHwgdGhpcy5fZ2V0SWRlYWxDYWNoZUtleShzZWxlY3RhYmxlT3JOYW1lIGFzIEF0b21TZWxlY3Rvck9yQ29uZmlnKVxuXG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLl9pdGVtcylcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmNhY2hlS2V5LmxvY2FsZUNvbXBhcmUoYi5jYWNoZUtleSkpXG4gICAgICAuZm9yRWFjaChpbnN0YW5jZSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJLZXkgJiYgIWluc3RhbmNlLmNhY2hlS2V5LmluY2x1ZGVzKGZpbHRlcktleSkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGhhc2hbaW5zdGFuY2UuY2FjaGVLZXldID0gaW5zdGFuY2VcbiAgICAgIH0pXG5cbiAgICByZXR1cm4gaGFzaFxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBvYmplY3QgbWFwcGluZyBhbGwgY2FjaGVLZXlzIGluIHRoaXMgc2VsZWN0b3JDYWNoZSB0byB0aGVpciBjdXJyZW50XG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogUGFzcyBhbiBhdG9tIG9yIGF0b20ga2V5IHN0cmluZyB0byBvbmx5IHJldHVybiBpbnN0YW5jZXMgd2hvc2Uga2V5SGFzaFxuICAgKiB3ZWFrbHkgbWF0Y2hlcyB0aGUgcGFzc2VkIGtleS5cbiAgICovXG4gIHB1YmxpYyBpbnNwZWN0SXRlbVZhbHVlcyhzZWxlY3RhYmxlT3JOYW1lPzogU2VsZWN0YWJsZTxhbnksIGFueT4gfCBzdHJpbmcpIHtcbiAgICBjb25zdCBoYXNoID0gdGhpcy5pbnNwZWN0SXRlbXMoc2VsZWN0YWJsZU9yTmFtZSlcblxuICAgIC8vIFdlIGp1c3QgY3JlYXRlZCB0aGUgb2JqZWN0LiBKdXN0IG11dGF0ZSBpdC5cbiAgICBPYmplY3Qua2V5cyhoYXNoKS5mb3JFYWNoKGNhY2hlS2V5ID0+IHtcbiAgICAgIGhhc2hbY2FjaGVLZXldID0gaGFzaFtjYWNoZUtleV0ucmVzdWx0XG4gICAgfSlcblxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjYWNoZSBmb3IgdGhlIGdpdmVuIHNlbGVjdG9yLiBEb24ndCBjcmVhdGUgaXQgaWYgaXQgZG9lc24ndCBleGlzdCxcbiAgICoganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuICAgKi9cbiAgcHVibGljIHdlYWtHZXRDYWNoZTxUID0gYW55LCBBcmdzIGV4dGVuZHMgW10gPSBbXT4oXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZTxULCBBcmdzPlxuICApOiBTZWxlY3RvckNhY2hlSXRlbTxULCBBcmdzPiB8IHVuZGVmaW5lZFxuXG4gIHB1YmxpYyB3ZWFrR2V0Q2FjaGU8VCA9IGFueSwgQXJncyBleHRlbmRzIGFueVtdID0gW10+KFxuICAgIHNlbGVjdGFibGU6IFNlbGVjdGFibGU8VCwgQXJncz4sXG4gICAgYXJnczogQXJnc1xuICApOiBTZWxlY3RvckNhY2hlSXRlbTxULCBBcmdzPiB8IHVuZGVmaW5lZFxuXG4gIHB1YmxpYyB3ZWFrR2V0Q2FjaGU8VCA9IGFueSwgQXJncyBleHRlbmRzIGFueVtdID0gW10+KFxuICAgIHNlbGVjdGFibGU6IFNlbGVjdGFibGU8VCwgQXJncz4sXG4gICAgYXJncz86IEFyZ3NcbiAgKSB7XG4gICAgaWYgKGlzKHNlbGVjdGFibGUsIFNlbGVjdG9yQ2FjaGVJdGVtKSkge1xuICAgICAgcmV0dXJuIHNlbGVjdGFibGUgYXMgU2VsZWN0b3JDYWNoZUl0ZW1cbiAgICB9XG5cbiAgICBjb25zdCBjYWNoZUtleSA9IHRoaXMuZ2V0Q2FjaGVLZXkoXG4gICAgICBzZWxlY3RhYmxlIGFzIEF0b21TZWxlY3Rvck9yQ29uZmlnPFQsIEFyZ3M+LFxuICAgICAgYXJncyBhcyBBcmdzLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgICBpZiAoIWNhY2hlS2V5KSByZXR1cm5cblxuICAgIHJldHVybiB0aGlzLl9pdGVtc1tjYWNoZUtleV1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgb25seSBiZSB1c2VkIGludGVybmFsbHkuIFJlbW92ZXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGNhY2hlIGFuZFxuICAgKiB0aGUgZ3JhcGhcbiAgICovXG4gIHB1YmxpYyBfZGVzdHJveVNlbGVjdG9yKGNhY2hlS2V5OiBzdHJpbmcpIHtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2l0ZW1zW2NhY2hlS2V5XVxuXG4gICAgaWYgKCFjYWNoZSkgcmV0dXJuIC8vIHNob3VsZG4ndCBoYXBwZW5cblxuICAgIGlmIChjYWNoZS5uZXh0RXZhbHVhdGlvblJlYXNvbnMubGVuZ3RoICYmIGNhY2hlLnRhc2spIHtcbiAgICAgIHRoaXMuZWNvc3lzdGVtLl9zY2hlZHVsZXIudW5zY2hlZHVsZShjYWNoZS50YXNrKVxuICAgIH1cblxuICAgIHRoaXMuZWNvc3lzdGVtLl9ncmFwaC5yZW1vdmVEZXBlbmRlbmNpZXMoY2FjaGVLZXkpXG4gICAgdGhpcy5lY29zeXN0ZW0uX2dyYXBoLnJlbW92ZU5vZGUoY2FjaGVLZXkpXG4gICAgZGVsZXRlIHRoaXMuX2l0ZW1zW2NhY2hlS2V5XVxuICAgIGNhY2hlLmlzRGVzdHJveWVkID0gdHJ1ZVxuICAgIHRoaXMuX3JlZkJhc2VLZXlzLmRlbGV0ZShjYWNoZS5zZWxlY3RvclJlZilcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0cmluZyBrZXkgd2Ugd291bGQgaWRlYWxseSB1c2UgYXMgdGhlIGNhY2hlS2V5IG9mIHRoZSBnaXZlblxuICAgKiBBdG9tU2VsZWN0b3IgZnVuY3Rpb24gb3IgQXRvbVNlbGVjdG9yQ29uZmlnIG9iamVjdCAtIGRvZXNuJ3QgbmVjZXNzYXJpbHlcbiAgICogbWVhbiB3ZSBlbmQgdXAgY2FjaGluZyB1c2luZyB0aGlzIGtleS5cbiAgICovXG4gIHB1YmxpYyBfZ2V0SWRlYWxDYWNoZUtleShcbiAgICBzZWxlY3Rvck9yQ29uZmlnOiBBdG9tU2VsZWN0b3JPckNvbmZpZzxhbnksIGFueT5cbiAgKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBpZGVhbEtleSA9XG4gICAgICBzZWxlY3Rvck9yQ29uZmlnLm5hbWUgfHxcbiAgICAgIChzZWxlY3Rvck9yQ29uZmlnIGFzIEF0b21TZWxlY3RvckNvbmZpZykuc2VsZWN0b3I/Lm5hbWVcblxuICAgIC8vICdzZWxlY3RvcicgaXMgdG9vIGdlbmVyaWMgKGl0J3MgdGhlIGtleSBpbiBBdG9tU2VsZWN0b3JDb25maWcgb2JqZWN0cylcbiAgICByZXR1cm4gKGlkZWFsS2V5ICE9PSAnc2VsZWN0b3InICYmIGlkZWFsS2V5KSB8fCB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgb25seSBiZSB1c2VkIGludGVybmFsbHlcbiAgICovXG4gIHB1YmxpYyBfc2NoZWR1bGVFdmFsdWF0aW9uKFxuICAgIGNhY2hlS2V5OiBzdHJpbmcsXG4gICAgcmVhc29uOiBFdmFsdWF0aW9uUmVhc29uLFxuICAgIHNob3VsZFNldFRpbWVvdXQ/OiBib29sZWFuXG4gICkge1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5faXRlbXNbY2FjaGVLZXldXG5cbiAgICAvLyBUT0RPOiBBbnkgY2FsbHMgaW4gdGhpcyBjYXNlIHByb2JhYmx5IGluZGljYXRlIGEgbWVtb3J5IGxlYWsgb24gdGhlXG4gICAgLy8gdXNlcidzIHBhcnQuIE5vdGlmeSB0aGVtLlxuICAgIGlmICghY2FjaGUpIHJldHVyblxuXG4gICAgY2FjaGUubmV4dEV2YWx1YXRpb25SZWFzb25zLnB1c2gocmVhc29uKVxuXG4gICAgaWYgKGNhY2hlLm5leHRFdmFsdWF0aW9uUmVhc29ucy5sZW5ndGggPiAxKSByZXR1cm4gLy8gam9iIGFscmVhZHkgc2NoZWR1bGVkXG5cbiAgICBjb25zdCB0YXNrID0gKCkgPT4ge1xuICAgICAgY2FjaGUudGFzayA9IHVuZGVmaW5lZFxuICAgICAgdGhpcy5ydW5TZWxlY3RvcihjYWNoZUtleSwgY2FjaGUuYXJncyBhcyBhbnlbXSlcbiAgICB9XG4gICAgY2FjaGUudGFzayA9IHRhc2tcblxuICAgIHRoaXMuZWNvc3lzdGVtLl9zY2hlZHVsZXIuc2NoZWR1bGUoXG4gICAgICB7XG4gICAgICAgIGtleUhhc2g6IGNhY2hlS2V5LFxuICAgICAgICB0YXNrLFxuICAgICAgICB0eXBlOiAyLCAvLyBFdmFsdWF0ZUdyYXBoTm9kZSAoMilcbiAgICAgIH0sXG4gICAgICBzaG91bGRTZXRUaW1lb3V0XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3VsZCBvbmx5IGJlIHVzZWQgaW50ZXJuYWxseVxuICAgKi9cbiAgcHVibGljIF9zd2FwUmVmcyhcbiAgICBvbGRSZWY6IEF0b21TZWxlY3Rvck9yQ29uZmlnPGFueSwgYW55W10+LFxuICAgIG5ld1JlZjogQXRvbVNlbGVjdG9yT3JDb25maWc8YW55LCBhbnlbXT4sXG4gICAgYXJnczogYW55W11cbiAgKSB7XG4gICAgY29uc3QgZXhpc3RpbmdDYWNoZSA9IHRoaXMud2Vha0dldENhY2hlKG9sZFJlZiwgYXJncylcbiAgICBjb25zdCBiYXNlS2V5ID0gdGhpcy5fcmVmQmFzZUtleXMuZ2V0KG9sZFJlZilcblxuICAgIGlmICghZXhpc3RpbmdDYWNoZSB8fCAhYmFzZUtleSkgcmV0dXJuXG5cbiAgICB0aGlzLl9yZWZCYXNlS2V5cy5zZXQobmV3UmVmLCBiYXNlS2V5KVxuICAgIGV4aXN0aW5nQ2FjaGUuc2VsZWN0b3JSZWYgPSBuZXdSZWZcbiAgICB0aGlzLnJ1blNlbGVjdG9yKGV4aXN0aW5nQ2FjaGUuY2FjaGVLZXksIGFyZ3MpXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBhbGwgY2FjaGVkIHNlbGVjdG9ycy4gU2hvdWxkIHByb2JhYmx5IG9ubHkgYmUgdXNlZCBpbnRlcm5hbGx5LlxuICAgKiBQcmVmZXIgYGVjb3N5c3RlbS5yZXNldCgpYC5cbiAgICovXG4gIHB1YmxpYyBfd2lwZSgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9pdGVtcykuZm9yRWFjaChjYWNoZUtleSA9PiB7XG4gICAgICB0aGlzLl9kZXN0cm95U2VsZWN0b3IoY2FjaGVLZXkpXG4gICAgfSlcblxuICAgIHRoaXMuX3JlZkJhc2VLZXlzID0gbmV3IFdlYWtNYXAoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGJhc2Uga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgY29uc2lzdGVudCBjYWNoZUtleXMgZm9yIHRoZVxuICAgKiBnaXZlbiBzZWxlY3RvclxuICAgKi9cbiAgcHJpdmF0ZSBnZXRCYXNlS2V5KFxuICAgIHNlbGVjdG9yT3JDb25maWc6IEF0b21TZWxlY3Rvck9yQ29uZmlnPGFueSwgYW55W10+LFxuICAgIHdlYWs/OiBib29sZWFuXG4gICkge1xuICAgIGNvbnN0IGV4aXN0aW5nSWQgPSB0aGlzLl9yZWZCYXNlS2V5cy5nZXQoc2VsZWN0b3JPckNvbmZpZylcblxuICAgIGlmIChleGlzdGluZ0lkIHx8IHdlYWspIHJldHVybiBleGlzdGluZ0lkXG5cbiAgICBjb25zdCBpZGVhbEtleSA9IHRoaXMuX2dldElkZWFsQ2FjaGVLZXkoc2VsZWN0b3JPckNvbmZpZylcbiAgICBjb25zdCBwcmVmaXhlZEtleSA9IGBAQHNlbGVjdG9yLSR7aWRlYWxLZXl9YFxuICAgIGNvbnN0IGtleUV4aXN0cyA9IHRoaXMuX2l0ZW1zW3ByZWZpeGVkS2V5XVxuXG4gICAgLy8gaWYgdGhlIGlkZWFsIGtleSBpcyB0YWtlbiwgZ2VuZXJhdGUgYSBuZXcgaGFzaCBwcmVmaXhlZCB3aXRoIHRoZSBpZGVhbCBrZXlcbiAgICBjb25zdCBrZXkgPVxuICAgICAgIWlkZWFsS2V5IHx8IGtleUV4aXN0c1xuICAgICAgICA/IHRoaXMuZWNvc3lzdGVtLl9pZEdlbmVyYXRvci5nZW5lcmF0ZUF0b21TZWxlY3RvcklkKGlkZWFsS2V5KVxuICAgICAgICA6IHByZWZpeGVkS2V5XG5cbiAgICB0aGlzLl9yZWZCYXNlS2V5cy5zZXQoc2VsZWN0b3JPckNvbmZpZywga2V5KVxuXG4gICAgcmV0dXJuIGtleVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1biBhbiBBdG9tU2VsZWN0b3IgYW5kLCBkZXBlbmRpbmcgb24gdGhlIHNlbGVjdG9yJ3MgcmVzdWx0c0NvbXBhcmF0b3IsXG4gICAqIHVwZGF0ZSBpdHMgY2FjaGVkIHJlc3VsdC4gVXBkYXRlcyB0aGUgZ3JhcGggZWZmaWNpZW50bHkgKHVzaW5nXG4gICAqIGAuYnVmZmVyVXBkYXRlcygpYClcbiAgICovXG4gIHByaXZhdGUgcnVuU2VsZWN0b3I8VCA9IGFueSwgQXJncyBleHRlbmRzIGFueVtdID0gW10+KFxuICAgIGNhY2hlS2V5OiBzdHJpbmcsXG4gICAgYXJnczogQXJncyxcbiAgICBpc0luaXRpYWxpemluZz86IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy5lY29zeXN0ZW0uX2dyYXBoLmJ1ZmZlclVwZGF0ZXMoY2FjaGVLZXkpXG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9pdGVtc1tjYWNoZUtleV0gYXMgU2VsZWN0b3JDYWNoZUl0ZW08VCwgQXJncz5cbiAgICB0aGlzLmVjb3N5c3RlbS5fZXZhbHVhdGlvblN0YWNrLnN0YXJ0KGNhY2hlKVxuICAgIGNvbnN0IHNlbGVjdG9yID1cbiAgICAgIHR5cGVvZiBjYWNoZS5zZWxlY3RvclJlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNhY2hlLnNlbGVjdG9yUmVmXG4gICAgICAgIDogY2FjaGUuc2VsZWN0b3JSZWYuc2VsZWN0b3JcblxuICAgIGNvbnN0IHJlc3VsdHNDb21wYXJhdG9yID1cbiAgICAgICh0eXBlb2YgY2FjaGUuc2VsZWN0b3JSZWYgIT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgY2FjaGUuc2VsZWN0b3JSZWYucmVzdWx0c0NvbXBhcmF0b3IpIHx8XG4gICAgICBkZWZhdWx0UmVzdWx0c0NvbXBhcmF0b3JcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBzZWxlY3RvcihcbiAgICAgICAgdGhpcy5lY29zeXN0ZW0uX2V2YWx1YXRpb25TdGFjay5hdG9tR2V0dGVycyxcbiAgICAgICAgLi4uYXJnc1xuICAgICAgKVxuXG4gICAgICBpZiAoIWlzSW5pdGlhbGl6aW5nICYmICFyZXN1bHRzQ29tcGFyYXRvcihyZXN1bHQsIGNhY2hlLnJlc3VsdCBhcyBUKSkge1xuICAgICAgICB0aGlzLmVjb3N5c3RlbS5fZ3JhcGguc2NoZWR1bGVEZXBlbmRlbnRzKFxuICAgICAgICAgIGNhY2hlS2V5LFxuICAgICAgICAgIGNhY2hlLm5leHRFdmFsdWF0aW9uUmVhc29ucyxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgY2FjaGUucmVzdWx0XG4gICAgICAgIClcblxuICAgICAgICBpZiAodGhpcy5lY29zeXN0ZW0uX21vZHMuc3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgdGhpcy5lY29zeXN0ZW0ubW9kQnVzLmRpc3BhdGNoKFxuICAgICAgICAgICAgcGx1Z2luQWN0aW9ucy5zdGF0ZUNoYW5nZWQoe1xuICAgICAgICAgICAgICBjYWNoZTogY2FjaGUgYXMgU2VsZWN0b3JDYWNoZUl0ZW08YW55LCBhbnlbXT4sXG4gICAgICAgICAgICAgIG5ld1N0YXRlOiByZXN1bHQsXG4gICAgICAgICAgICAgIG9sZFN0YXRlOiBjYWNoZS5yZXN1bHQsXG4gICAgICAgICAgICAgIHJlYXNvbnM6IGNhY2hlLm5leHRFdmFsdWF0aW9uUmVhc29ucyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGUucmVzdWx0ID0gcmVzdWx0XG4gICAgICB9IGVsc2UgaWYgKGlzSW5pdGlhbGl6aW5nKSB7XG4gICAgICAgIGNhY2hlLnJlc3VsdCA9IHJlc3VsdFxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhpcy5lY29zeXN0ZW0uX2dyYXBoLmRlc3Ryb3lCdWZmZXIoKVxuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYFplZHV4IGVuY291bnRlcmVkIGFuIGVycm9yIHdoaWxlIHJ1bm5pbmcgQXRvbVNlbGVjdG9yIHdpdGgga2V5IFwiJHtjYWNoZUtleX1cIjpgLFxuICAgICAgICBlcnJcbiAgICAgIClcblxuICAgICAgdGhyb3cgZXJyXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZWNvc3lzdGVtLl9ldmFsdWF0aW9uU3RhY2suZmluaXNoKClcbiAgICAgIGNhY2hlLnByZXZFdmFsdWF0aW9uUmVhc29ucyA9IGNhY2hlLm5leHRFdmFsdWF0aW9uUmVhc29uc1xuICAgICAgY2FjaGUubmV4dEV2YWx1YXRpb25SZWFzb25zID0gW11cbiAgICB9XG5cbiAgICB0aGlzLmVjb3N5c3RlbS5fZ3JhcGguZmx1c2hVcGRhdGVzKClcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGlzIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgaW50ZXJuYWxTdG9yZSB9IGZyb20gJy4uL3N0b3JlJ1xuaW1wb3J0IHtcbiAgQW55QXRvbSxcbiAgQW55QXRvbUluc3RhbmNlLFxuICBBbnlBdG9tSW5zdGFuY2VCYXNlLFxuICBBdG9tR2V0dGVyc0Jhc2UsXG4gIEF0b21JbnN0YW5jZVN0YXRlVHlwZSxcbiAgQXRvbUluc3RhbmNlVHlwZSxcbiAgQXRvbVBhcmFtc1R5cGUsXG4gIEF0b21TZWxlY3Rvck9yQ29uZmlnLFxuICBBdG9tU3RhdGVUeXBlLFxuICBDbGVhbnVwLFxuICBFY29zeXN0ZW1Db25maWcsXG4gIEVjb3N5c3RlbUdyYXBoTm9kZSxcbiAgR3JhcGhFZGdlSW5mbyxcbiAgR3JhcGhWaWV3UmVjdXJzaXZlLFxuICBNYXliZUNsZWFudXAsXG4gIFBhcnRpYWxBdG9tSW5zdGFuY2UsXG4gIFNlbGVjdGFibGUsXG59IGZyb20gJy4uL3R5cGVzJ1xuaW1wb3J0IHsgRXh0ZXJuYWwsIEluc3RhbmNlU3RhY2tJdGVtLCBTZWxlY3RvclN0YWNrSXRlbSB9IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHsgcGx1Z2luQWN0aW9ucyB9IGZyb20gJy4uL3V0aWxzL3BsdWdpbi1hY3Rpb25zJ1xuaW1wb3J0IHsgQXRvbUJhc2UgfSBmcm9tICcuL2F0b21zL0F0b21CYXNlJ1xuaW1wb3J0IHsgRXZhbHVhdGlvblN0YWNrIH0gZnJvbSAnLi9FdmFsdWF0aW9uU3RhY2snXG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJy4vR3JhcGgnXG5pbXBvcnQgeyBJZEdlbmVyYXRvciB9IGZyb20gJy4vSWRHZW5lcmF0b3InXG5pbXBvcnQgeyBBdG9tSW5zdGFuY2VCYXNlIH0gZnJvbSAnLi9pbnN0YW5jZXMvQXRvbUluc3RhbmNlQmFzZSdcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJy4vU2NoZWR1bGVyJ1xuaW1wb3J0IHsgU2VsZWN0b3JDYWNoZUl0ZW0sIFNlbGVjdG9yQ2FjaGUgfSBmcm9tICcuL1NlbGVjdG9yQ2FjaGUnXG5pbXBvcnQgeyBNb2QsIFplZHV4UGx1Z2luIH0gZnJvbSAnLi9aZWR1eFBsdWdpbidcblxuY29uc3QgZGVmYXVsdE1vZHMgPSBPYmplY3Qua2V5cyhwbHVnaW5BY3Rpb25zKS5yZWR1Y2UoKG1hcCwgbW9kKSA9PiB7XG4gIG1hcFttb2QgYXMgTW9kXSA9IDBcbiAgcmV0dXJuIG1hcFxufSwge30gYXMgUmVjb3JkPE1vZCwgbnVtYmVyPilcblxuY29uc3QgbWFwT3ZlcnJpZGVzID0gKG92ZXJyaWRlczogQW55QXRvbVtdKSA9PlxuICBvdmVycmlkZXMucmVkdWNlKChtYXAsIGF0b20pID0+IHtcbiAgICBtYXBbYXRvbS5rZXldID0gYXRvbVxuICAgIHJldHVybiBtYXBcbiAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgQW55QXRvbT4pXG5cbmV4cG9ydCBjbGFzcyBFY29zeXN0ZW08Q29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQgPSBhbnk+XG4gIGltcGxlbWVudHMgQXRvbUdldHRlcnNCYXNlIHtcbiAgcHVibGljIF9kZXN0cm95T25Vbm1vdW50ID0gZmFsc2VcbiAgcHVibGljIF9ncmFwaDogR3JhcGggPSBuZXcgR3JhcGgodGhpcylcbiAgcHVibGljIF9ldmFsdWF0aW9uU3RhY2s6IEV2YWx1YXRpb25TdGFjayA9IG5ldyBFdmFsdWF0aW9uU3RhY2sodGhpcylcbiAgcHVibGljIF9pZEdlbmVyYXRvciA9IG5ldyBJZEdlbmVyYXRvcigpXG4gIHB1YmxpYyBfaW5zdGFuY2VzOiBSZWNvcmQ8c3RyaW5nLCBBbnlBdG9tSW5zdGFuY2U+ID0ge31cbiAgcHVibGljIF9vblJlYWR5OiBFY29zeXN0ZW1Db25maWc8Q29udGV4dD5bJ29uUmVhZHknXVxuICBwdWJsaWMgX21vZHM6IFJlY29yZDxNb2QsIG51bWJlcj4gPSB7IC4uLmRlZmF1bHRNb2RzIH1cbiAgcHVibGljIF9yZWFjdENvbnRleHRzOiBSZWNvcmQ8c3RyaW5nLCBSZWFjdC5Db250ZXh0PGFueT4+ID0ge31cbiAgcHVibGljIF9yZWZDb3VudCA9IDBcbiAgcHVibGljIF9zY2hlZHVsZXI6IFNjaGVkdWxlciA9IG5ldyBTY2hlZHVsZXIodGhpcylcbiAgcHVibGljIHNlbGVjdG9yQ2FjaGU6IFNlbGVjdG9yQ2FjaGUgPSBuZXcgU2VsZWN0b3JDYWNoZSh0aGlzKVxuICBwdWJsaWMgY29tcGxleFBhcmFtczogYm9vbGVhblxuICBwdWJsaWMgY29udGV4dDogQ29udGV4dFxuICBwdWJsaWMgZGVmYXVsdFR0bD86IG51bWJlclxuICBwdWJsaWMgaWQ6IHN0cmluZ1xuICBwdWJsaWMgZmxhZ3M/OiBzdHJpbmdbXVxuICBwdWJsaWMgaHlkcmF0aW9uPzogUmVjb3JkPHN0cmluZywgYW55PlxuICBwdWJsaWMgbW9kQnVzID0gY3JlYXRlU3RvcmUoKSAvLyB1c2UgYW4gZW1wdHkgc3RvcmUgYXMgYSBtZXNzYWdlIGJ1c1xuICBwdWJsaWMgb3ZlcnJpZGVzOiBSZWNvcmQ8c3RyaW5nLCBBbnlBdG9tPiA9IHt9XG4gIHB1YmxpYyBzc3I/OiBib29sZWFuXG4gIHByaXZhdGUgY2xlYW51cD86IE1heWJlQ2xlYW51cFxuICBwcml2YXRlIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZVxuICBwcml2YXRlIHBsdWdpbnM6IHsgcGx1Z2luOiBaZWR1eFBsdWdpbjsgY2xlYW51cDogQ2xlYW51cCB9W10gPSBbXVxuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBjb21wbGV4UGFyYW1zLFxuICAgIGNvbnRleHQsXG4gICAgZGVmYXVsdFR0bCxcbiAgICBkZXN0cm95T25Vbm1vdW50LFxuICAgIGZsYWdzLFxuICAgIGlkLFxuICAgIG9uUmVhZHksXG4gICAgb3ZlcnJpZGVzLFxuICAgIHNzcixcbiAgfTogRWNvc3lzdGVtQ29uZmlnPENvbnRleHQ+KSB7XG4gICAgaWYgKERFViAmJiBmbGFncyAmJiAhQXJyYXkuaXNBcnJheShmbGFncykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiWmVkdXg6IFRoZSBFY29zeXN0ZW0ncyBgZmxhZ3NgIHByb3BlcnR5IG11c3QgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nc1wiXG4gICAgICApXG4gICAgfVxuICAgIGlmIChERVYgJiYgb3ZlcnJpZGVzICYmICFBcnJheS5pc0FycmF5KG92ZXJyaWRlcykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIFwiWmVkdXg6IFRoZSBFY29zeXN0ZW0ncyBgb3ZlcnJpZGVzYCBwcm9wZXJ0eSBtdXN0IGJlIGFuIGFycmF5IG9mIEF0b20gb2JqZWN0c1wiXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5pZCA9IGlkIHx8IHRoaXMuX2lkR2VuZXJhdG9yLmdlbmVyYXRlRWNvc3lzdGVtSWQoKVxuXG4gICAgaWYgKG92ZXJyaWRlcykge1xuICAgICAgdGhpcy5zZXRPdmVycmlkZXMob3ZlcnJpZGVzKVxuICAgIH1cblxuICAgIHRoaXMuZmxhZ3MgPSBmbGFnc1xuICAgIHRoaXMuY29tcGxleFBhcmFtcyA9ICEhY29tcGxleFBhcmFtc1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgYXMgQ29udGV4dFxuICAgIHRoaXMuZGVmYXVsdFR0bCA9IGRlZmF1bHRUdGwgPz8gLTFcbiAgICB0aGlzLnNzciA9IHNzclxuICAgIHRoaXMuX2Rlc3Ryb3lPblVubW91bnQgPSAhIWRlc3Ryb3lPblVubW91bnRcbiAgICB0aGlzLl9vblJlYWR5ID0gb25SZWFkeVxuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWVcbiAgICB0aGlzLmNsZWFudXAgPSBvblJlYWR5Py4odGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0aGUgcGFzc2VkIGF0b20gb3ZlcnJpZGVzIGludG8gdGhlIGVjb3N5c3RlbSdzIGN1cnJlbnQgbGlzdCBvZlxuICAgKiBvdmVycmlkZXMuIEZvcmNlLWRlc3Ryb3lzIGFsbCBhdG9tIGluc3RhbmNlcyBjdXJyZW50bHkgaW4gdGhlIGVjb3N5c3RlbVxuICAgKiB0aGF0IHNob3VsZCBub3cgYmUgb3ZlcnJpZGRlbi5cbiAgICpcbiAgICogVGhpcyBjYW4ndCBiZSB1c2VkIHRvIHJlbW92ZSBvdmVycmlkZXMuIFVzZSBgLnNldE92ZXJyaWRlcygpYCBvclxuICAgKiBgLnJlbW92ZU92ZXJyaWRlcygpYCBmb3IgdGhhdC5cbiAgICovXG4gIHB1YmxpYyBhZGRPdmVycmlkZXMob3ZlcnJpZGVzOiBBbnlBdG9tW10pIHtcbiAgICB0aGlzLm92ZXJyaWRlcyA9IHtcbiAgICAgIC4uLnRoaXMub3ZlcnJpZGVzLFxuICAgICAgLi4ubWFwT3ZlcnJpZGVzKG92ZXJyaWRlcyksXG4gICAgfVxuXG4gICAgb3ZlcnJpZGVzLmZvckVhY2gob3ZlcnJpZGUgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2VzID0gdGhpcy5pbnNwZWN0SW5zdGFuY2VzKG92ZXJyaWRlKVxuXG4gICAgICBPYmplY3QudmFsdWVzKGluc3RhbmNlcykuZm9yRWFjaChpbnN0YW5jZSA9PiBpbnN0YW5jZS5kZXN0cm95KHRydWUpKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYW4gb2JqZWN0IG1hcHBpbmcgYXRvbSBpbnN0YW5jZSBrZXlIYXNoZXMgdG8gdGhlaXIgY3VycmVudCB2YWx1ZXMuXG4gICAqXG4gICAqIENhbGxzIHRoZSBgZGVoeWRyYXRlYCBhdG9tIGNvbmZpZyBvcHRpb24gKG9uIGF0b21zIHRoYXQgaGF2ZSBvbmUpIHRvXG4gICAqIHRyYW5zZm9ybSBzdGF0ZSB0byBhIHNlcmlhbGl6YWJsZSBmb3JtLiBQYXNzIGB0cmFuc2Zvcm06IGZhbHNlYCB0byBwcmV2ZW50XG4gICAqIHRoaXMuXG4gICAqXG4gICAqIEF0b21zIGNhbiBiZSBleGNsdWRlZCBmcm9tIGRlaHlkcmF0aW9uIGJ5IHBhc3NpbmcgYGV4Y2x1ZGVgIGFuZC9vclxuICAgKiBgZXhjbHVkZUZsYWdzYCBvcHRpb25zOlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBteUVjb3N5c3RlbS5kZWh5ZHJhdGUoe1xuICAgKiAgIGV4Y2x1ZGU6IFtteUF0b20sICdteS1mdXp6eS1zZWFyY2gtc3RyaW5nJ10sXG4gICAqICAgZXhjbHVkZUZsYWdzOiBbJ25vLXNzciddXG4gICAqIH0pXG4gICAqIGBgYFxuICAgKlxuICAgKiBBbiBhdG9tIHBhc3NlZCB0byBgZXhjbHVkZWAgd2lsbCBleGNsdWRlIGFsbCBpbnN0YW5jZXMgb2YgdGhhdCBhdG9tLiBBXG4gICAqIHN0cmluZyBwYXNzZWQgdG8gYGV4Y2x1ZGVgIHdpbGwgZXhjbHVkZSBhbGwgaW5zdGFuY2VzIHdob3NlIGtleUhhc2hcbiAgICogY29udGFpbnMgdGhlIHN0cmluZyAoY2FzZS1pbnNlbnNpdGl2ZSlcbiAgICpcbiAgICogWW91IGNhbiBkZWh5ZHJhdGUgb25seSBhIHN1YnNldCBvZiBhbGwgYXRvbXMgYnkgcGFzc2luZyBgaW5jbHVkZWAgYW5kL29yXG4gICAqIGBpbmNsdWRlRmxhZ3NgIG9wdGlvbnM6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIG15RWNvc3lzdGVtLmRlaHlkcmF0ZSh7XG4gICAqICAgaW5jbHVkZTogW215QXRvbSwgJ215LWZ1enp5LXNlYXJjaC1zdHJpbmcnXSxcbiAgICogICBpbmNsdWRlRmxhZ3M6IFsnc3NyJ11cbiAgICogfSlcbiAgICogYGBgXG4gICAqXG4gICAqIEFuIGF0b20gcGFzc2VkIHRvIGBpbmNsdWRlYCB3aWxsIGluY2x1ZGUgYWxsIGluc3RhbmNlcyBvZiB0aGF0IGF0b20uIEFcbiAgICogc3RyaW5nIHBhc3NlZCB0byBgaW5jbHVkZWAgd2lsbCBpbmNsdWRlIGFsbCBpbnN0YW5jZXMgd2hvc2Uga2V5SGFzaFxuICAgKiBjb250YWlucyB0aGUgc3RyaW5nIChjYXNlLWluc2Vuc2l0aXZlKVxuICAgKlxuICAgKiBFeGNsdWRlcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgaW5jbHVkZXMuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGRlaHlkcmF0aW9uIHdpbGwgY2FsbCBhbnkgY29uZmlndXJlZCBgZGVoeWRyYXRlYCBhdG9tIGNvbmZpZ1xuICAgKiBvcHRpb25zIHRvIHRyYW5zZm9ybSBhdG9tIGluc3RhbmNlIHN0YXRlLiBQYXNzIGB7IHRyYW5zZm9ybTogZmFsc2UgfWAgdG9cbiAgICogcHJldmVudCB0aGlzLlxuICAgKi9cbiAgcHVibGljIGRlaHlkcmF0ZSh7XG4gICAgZXhjbHVkZSxcbiAgICBleGNsdWRlRmxhZ3MsXG4gICAgaW5jbHVkZSxcbiAgICBpbmNsdWRlRmxhZ3MsXG4gICAgdHJhbnNmb3JtID0gdHJ1ZSxcbiAgfToge1xuICAgIGV4Y2x1ZGU/OiAoQW55QXRvbSB8IHN0cmluZylbXVxuICAgIGV4Y2x1ZGVGbGFncz86IHN0cmluZ1tdXG4gICAgaW5jbHVkZT86IChBbnlBdG9tIHwgc3RyaW5nKVtdXG4gICAgaW5jbHVkZUZsYWdzPzogc3RyaW5nW11cbiAgICB0cmFuc2Zvcm0/OiBib29sZWFuXG4gIH0gPSB7fSkge1xuICAgIGNvbnN0IGluc3RhbmNlcyA9IE9iamVjdC52YWx1ZXModGhpcy5faW5zdGFuY2VzKS5maWx0ZXIoaW5zdGFuY2UgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBleGNsdWRlICYmXG4gICAgICAgIGV4Y2x1ZGUuc29tZShhdG9tT3JLZXkgPT5cbiAgICAgICAgICB0eXBlb2YgYXRvbU9yS2V5ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBpbnN0YW5jZS5rZXlIYXNoLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoYXRvbU9yS2V5LnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICA6IGluc3RhbmNlLmF0b20ua2V5ID09PSBhdG9tT3JLZXkua2V5XG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBleGNsdWRlRmxhZ3MgJiZcbiAgICAgICAgZXhjbHVkZUZsYWdzLnNvbWUoZmxhZyA9PiBpbnN0YW5jZS5hdG9tLmZsYWdzPy5pbmNsdWRlcyhmbGFnKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKCFpbmNsdWRlICYmICFpbmNsdWRlRmxhZ3MpIHJldHVybiB0cnVlXG5cbiAgICAgIGlmIChcbiAgICAgICAgaW5jbHVkZSAmJlxuICAgICAgICBpbmNsdWRlLnNvbWUoYXRvbU9yS2V5ID0+XG4gICAgICAgICAgdHlwZW9mIGF0b21PcktleSA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gaW5zdGFuY2Uua2V5SGFzaC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGF0b21PcktleS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgOiBpbnN0YW5jZS5hdG9tLmtleSA9PT0gYXRvbU9yS2V5LmtleVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpbmNsdWRlRmxhZ3MgJiZcbiAgICAgICAgaW5jbHVkZUZsYWdzLnNvbWUoZmxhZyA9PiBpbnN0YW5jZS5hdG9tLmZsYWdzPy5pbmNsdWRlcyhmbGFnKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuXG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgIGluc3RhbmNlcy5tYXAoaW5zdGFuY2UgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGluc3RhbmNlLnN0b3JlLmdldFN0YXRlKClcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGluc3RhbmNlLmtleUhhc2gsXG4gICAgICAgICAgdHJhbnNmb3JtICYmIGluc3RhbmNlLmF0b20uZGVoeWRyYXRlXG4gICAgICAgICAgICA/IGluc3RhbmNlLmF0b20uZGVoeWRyYXRlKHN0YXRlKVxuICAgICAgICAgICAgOiBzdGF0ZSxcbiAgICAgICAgXVxuICAgICAgfSlcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSB0aGlzIGVjb3N5c3RlbSAtIGRlc3Ryb3kgYWxsIHRoaXMgZWNvc3lzdGVtJ3MgYXRvbSBpbnN0YW5jZXMsXG4gICAqIHJlbW92ZSBhbmQgY2xlYW4gdXAgYWxsIHBsdWdpbnMsIGFuZCByZW1vdmUgdGhpcyBlY29zeXN0ZW0gZnJvbSB0aGVcbiAgICogaW50ZXJuYWxTdG9yZS5cbiAgICpcbiAgICogRGVzdHJ1Y3Rpb24gd2lsbCBiYWlsIG91dCBieSBkZWZhdWx0IGlmIHRoaXMgZWNvc3lzdGVtIGlzIHN0aWxsIGJlaW5nXG4gICAqIHByb3ZpZGVkIHZpYSBhbiA8RWNvc3lzdGVtUHJvdmlkZXI+LiBQYXNzIGB0cnVlYCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIHRvXG4gICAqIGZvcmNlIGRlc3RydWN0aW9uIGFueXdheS5cbiAgICovXG4gIHB1YmxpYyBkZXN0cm95KGZvcmNlPzogYm9vbGVhbikge1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5fcmVmQ291bnQgPiAwKSByZXR1cm5cblxuICAgIHRoaXMud2lwZSgpXG5cbiAgICAvLyBDaGVjayBpZiB0aGlzIGVjb3N5c3RlbSBoYXMgYmVlbiBkZXN0cm95ZWQgYWxyZWFkeVxuICAgIGNvbnN0IGVjb3N5c3RlbSA9IGludGVybmFsU3RvcmUuZ2V0U3RhdGUoKVt0aGlzLmlkXVxuICAgIGlmICghZWNvc3lzdGVtKSByZXR1cm5cblxuICAgIHRoaXMucGx1Z2lucy5mb3JFYWNoKCh7IGNsZWFudXAgfSkgPT4gY2xlYW51cCgpKVxuICAgIHRoaXMucGx1Z2lucyA9IFtdXG5cbiAgICBpbnRlcm5hbFN0b3JlLnNldFN0YXRlKHN0YXRlID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5zdGF0ZSB9XG4gICAgICBkZWxldGUgbmV3U3RhdGVbdGhpcy5pZF1cblxuICAgICAgcmV0dXJuIG5ld1N0YXRlXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBnZXQ8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgW10sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEFcbiAgKTogQXRvbVN0YXRlVHlwZTxBPlxuXG4gIHB1YmxpYyBnZXQ8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgWy4uLmFueV0sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEEsXG4gICAgcGFyYW1zOiBBdG9tUGFyYW1zVHlwZTxBPlxuICApOiBBdG9tU3RhdGVUeXBlPEE+XG5cbiAgcHVibGljIGdldDxBSSBleHRlbmRzIEF0b21JbnN0YW5jZUJhc2U8YW55LCBbLi4uYW55XSwgYW55Pj4oXG4gICAgaW5zdGFuY2U6IEFJXG4gICk6IEF0b21JbnN0YW5jZVN0YXRlVHlwZTxBST5cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhdG9tIGluc3RhbmNlJ3MgdmFsdWUuIENyZWF0ZXMgdGhlIGF0b20gaW5zdGFuY2UgaWYgaXQgZG9lc24ndFxuICAgKiBleGlzdCB5ZXQuIERvZXNuJ3QgcmVnaXN0ZXIgYW55IGdyYXBoIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIHB1YmxpYyBnZXQ8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgWy4uLmFueV0sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEEgfCBBdG9tSW5zdGFuY2VCYXNlPGFueSwgWy4uLmFueV0sIGFueT4sXG4gICAgcGFyYW1zPzogQXRvbVBhcmFtc1R5cGU8QT5cbiAgKSB7XG4gICAgaWYgKGlzKGF0b20sIEF0b21JbnN0YW5jZUJhc2UpKSB7XG4gICAgICByZXR1cm4gKGF0b20gYXMgQW55QXRvbUluc3RhbmNlQmFzZSkuc3RvcmUuZ2V0U3RhdGUoKVxuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZShcbiAgICAgIGF0b20gYXMgQSxcbiAgICAgIHBhcmFtcyBhcyBBdG9tUGFyYW1zVHlwZTxBPlxuICAgICkgYXMgQXRvbUluc3RhbmNlQmFzZTxhbnksIGFueSwgYW55PlxuXG4gICAgcmV0dXJuIGluc3RhbmNlLnN0b3JlLmdldFN0YXRlKClcbiAgfVxuXG4gIHB1YmxpYyBnZXRJbnN0YW5jZTxBIGV4dGVuZHMgQXRvbUJhc2U8YW55LCBbXSwgYW55LCBhbnksIGFueSwgYW55Pj4oXG4gICAgYXRvbTogQVxuICApOiBBdG9tSW5zdGFuY2VUeXBlPEE+XG5cbiAgcHVibGljIGdldEluc3RhbmNlPEEgZXh0ZW5kcyBBdG9tQmFzZTxhbnksIFsuLi5hbnldLCBhbnksIGFueSwgYW55LCBhbnk+PihcbiAgICBhdG9tOiBBLFxuICAgIHBhcmFtczogQXRvbVBhcmFtc1R5cGU8QT4sXG4gICAgZWRnZUluZm8/OiBHcmFwaEVkZ2VJbmZvXG4gICk6IEF0b21JbnN0YW5jZVR5cGU8QT5cblxuICBwdWJsaWMgZ2V0SW5zdGFuY2U8QUkgZXh0ZW5kcyBBdG9tSW5zdGFuY2VCYXNlPGFueSwgYW55LCBhbnk+PihcbiAgICBpbnN0YW5jZTogQUksXG4gICAgcGFyYW1zPzogW10sXG4gICAgZWRnZUluZm8/OiBHcmFwaEVkZ2VJbmZvXG4gICk6IEFJXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXRvbSBpbnN0YW5jZS4gQ3JlYXRlcyB0aGUgYXRvbSBpbnN0YW5jZSBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAqIHlldC4gRG9lc24ndCByZWdpc3RlciBhbnkgZ3JhcGggZGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgcHVibGljIGdldEluc3RhbmNlPEEgZXh0ZW5kcyBBdG9tQmFzZTxhbnksIFsuLi5hbnldLCBhbnksIGFueSwgYW55LCBhbnk+PihcbiAgICBhdG9tOiBBIHwgQXRvbUluc3RhbmNlQmFzZTxhbnksIFsuLi5hbnldLCBhbnk+LFxuICAgIHBhcmFtcz86IEF0b21QYXJhbXNUeXBlPEE+XG4gICkge1xuICAgIGlmIChpcyhhdG9tLCBBdG9tSW5zdGFuY2VCYXNlKSkgcmV0dXJuIGF0b21cblxuICAgIGNvbnN0IGtleUhhc2ggPSAoYXRvbSBhcyBBKS5nZXRLZXlIYXNoKHRoaXMsIHBhcmFtcylcblxuICAgIC8vIHRyeSB0byBmaW5kIGFuIGV4aXN0aW5nIGluc3RhbmNlXG4gICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlc1trZXlIYXNoXVxuICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSByZXR1cm4gZXhpc3RpbmdJbnN0YW5jZVxuXG4gICAgLy8gY3JlYXRlIGEgbmV3IGluc3RhbmNlXG4gICAgY29uc3QgcmVzb2x2ZWRBdG9tID0gdGhpcy5yZXNvbHZlQXRvbShhdG9tIGFzIEEpXG4gICAgdGhpcy5fZ3JhcGguYWRkTm9kZShrZXlIYXNoKVxuXG4gICAgY29uc3QgbmV3SW5zdGFuY2UgPSByZXNvbHZlZEF0b20uX2NyZWF0ZUluc3RhbmNlKFxuICAgICAgdGhpcyxcbiAgICAgIGtleUhhc2gsXG4gICAgICAocGFyYW1zIHx8IFtdKSBhcyBBdG9tUGFyYW1zVHlwZTxBPlxuICAgIClcbiAgICB0aGlzLl9pbnN0YW5jZXNba2V5SGFzaF0gPSBuZXdJbnN0YW5jZVxuICAgIG5ld0luc3RhbmNlLl9pbml0KClcblxuICAgIHJldHVybiBuZXdJbnN0YW5jZVxuICB9XG5cbiAgLyoqXG4gICAqIEh5ZHJhdGUgdGhlIHN0YXRlIG9mIGF0b21zIGluIHRoaXMgZWNvc3lzdGVtIHdpdGggYW4gb2JqZWN0IG1hcHBpbmcgYXRvbVxuICAgKiBpbnN0YW5jZSBrZXlIYXNoZXMgdG8gdGhlaXIgaHlkcmF0ZWQgc3RhdGUuIFRoaXMgb2JqZWN0IHdpbGwgdXN1YWxseSBiZSB0aGVcbiAgICogcmVzdWx0IG9mIGEgY2FsbCB0byBgZWNvc3lzdGVtLmRlaHlkcmF0ZSgpYC5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUga2V5IHRvIFNTUi4gVGhlIGVjb3N5c3RlbSdzIGluaXRpYWwgc3RhdGUgY2FuIGJlIGRlaHlkcmF0ZWQgb25cbiAgICogdGhlIHNlcnZlciwgc2VudCB0byB0aGUgY2xpZW50IGluIHNlcmlhbGl6ZWQgZm9ybSwgZGVzZXJpYWxpemVkLCBhbmQgcGFzc2VkXG4gICAqIHRvIGBlY29zeXN0ZW0uaHlkcmF0ZSgpYC4gRXZlcnkgYXRvbSBpbnN0YW5jZSB0aGF0IGV2YWx1YXRlcyBhZnRlciB0aGlzXG4gICAqIGh5ZHJhdGlvbiBjYW4gdXNlIHRoZSBgaHlkcmF0ZWAgaW5qZWN0U3RvcmUgY29uZmlnIG9wdGlvbiB0byByZXRyaWV2ZSBpdHNcbiAgICogaHlkcmF0ZWQgc3RhdGUuXG4gICAqXG4gICAqIFBhc3MgYHJldHJvYWN0aXZlOiBmYWxzZWAgdG8gcHJldmVudCB0aGlzIGNhbGwgZnJvbSB1cGRhdGluZyB0aGUgc3RhdGUgb2ZcbiAgICogYWxsIGF0b20gaW5zdGFuY2VzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQgd2l0aCB0aGlzIG5ld1xuICAgKiBoeWRyYXRpb24uIEh5ZHJhdGlvbiBpcyByZXRyb2FjdGl2ZSBieSBkZWZhdWx0LlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBlY29zeXN0ZW0uaHlkcmF0ZShkZWh5ZHJhdGVkU3RhdGUsIHsgcmV0cm9hY3RpdmU6IGZhbHNlIH0pXG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljIGh5ZHJhdGUoXG4gICAgZGVoeWRyYXRlZFN0YXRlOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGNvbmZpZz86IHsgcmV0cm9hY3RpdmU/OiBib29sZWFuIH1cbiAgKSB7XG4gICAgdGhpcy5oeWRyYXRpb24gPSB7IC4uLnRoaXMuaHlkcmF0aW9uLCAuLi5kZWh5ZHJhdGVkU3RhdGUgfVxuXG4gICAgaWYgKGNvbmZpZz8ucmV0cm9hY3RpdmUgPT09IGZhbHNlKSByZXR1cm5cblxuICAgIE9iamVjdC5lbnRyaWVzKGRlaHlkcmF0ZWRTdGF0ZSkuZm9yRWFjaCgoW2tleSwgdmFsXSkgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLl9pbnN0YW5jZXNba2V5XVxuXG4gICAgICBpZiAoIWluc3RhbmNlKSByZXR1cm5cblxuICAgICAgaW5zdGFuY2Uuc2V0U3RhdGUoXG4gICAgICAgIGluc3RhbmNlLmF0b20uaHlkcmF0ZSA/IGluc3RhbmNlLmF0b20uaHlkcmF0ZSh2YWwpIDogdmFsXG4gICAgICApXG5cbiAgICAgIGRlbGV0ZSB0aGlzLmh5ZHJhdGlvbj8uW2tleV1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBvYmplY3Qgb2YgYWxsIGF0b20gaW5zdGFuY2VzIGluIHRoaXMgZWNvc3lzdGVtLlxuICAgKlxuICAgKiBQYXNzIGFuIGF0b20gb3IgYXRvbSBrZXkgc3RyaW5nIHRvIG9ubHkgcmV0dXJuIGluc3RhbmNlcyB3aG9zZSBrZXlIYXNoXG4gICAqIHdlYWtseSBtYXRjaGVzIHRoZSBwYXNzZWQga2V5LlxuICAgKi9cbiAgcHVibGljIGluc3BlY3RJbnN0YW5jZXMoYXRvbT86IEFueUF0b20gfCBzdHJpbmcpIHtcbiAgICBjb25zdCBpc0F0b20gPSAoYXRvbSBhcyBBbnlBdG9tKT8ua2V5XG4gICAgY29uc3QgZmlsdGVyS2V5ID0gaXNBdG9tID8gKGF0b20gYXMgQW55QXRvbSk/LmtleSA6IChhdG9tIGFzIHN0cmluZylcbiAgICBjb25zdCBoYXNoOiBSZWNvcmQ8c3RyaW5nLCBBdG9tSW5zdGFuY2VCYXNlPGFueSwgYW55LCBhbnk+PiA9IHt9XG5cbiAgICBPYmplY3QudmFsdWVzKHRoaXMuX2luc3RhbmNlcylcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmtleUhhc2gubG9jYWxlQ29tcGFyZShiLmtleUhhc2gpKVxuICAgICAgLmZvckVhY2goaW5zdGFuY2UgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZmlsdGVyS2V5ICYmXG4gICAgICAgICAgKGlzQXRvbVxuICAgICAgICAgICAgPyBpbnN0YW5jZS5hdG9tLmtleSAhPT0gZmlsdGVyS2V5XG4gICAgICAgICAgICA6ICFpbnN0YW5jZS5rZXlIYXNoLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyS2V5KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBoYXNoW2luc3RhbmNlLmtleUhhc2hdID0gaW5zdGFuY2VcbiAgICAgIH0pXG5cbiAgICByZXR1cm4gaGFzaFxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIFplZHV4UGx1Z2luIHRvIHRoaXMgZWNvc3lzdGVtLiBUaGlzIGVjb3N5c3RlbSB3aWxsIHN1YnNjcmliZSB0byB0aGVcbiAgICogcGx1Z2luJ3MgbW9kU3RvcmUsIHdob3NlIHN0YXRlIGNhbiBiZSBjaGFuZ2VkIHRvIHJlYWN0aXZlbHkgdXBkYXRlIHRoZSBtb2RzXG4gICAqIG9mIHRoaXMgZWNvc3lzdGVtLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gY2FsbCB0aGUgcGFzc2VkIHBsdWdpbidzIGAucmVnaXN0ZXJFY29zeXN0ZW1gIG1ldGhvZCxcbiAgICogYWxsb3dpbmcgdGhlIHBsdWdpbiB0byBzdWJzY3JpYmUgdG8gdGhpcyBlY29zeXN0ZW0ncyBtb2RCdXNcbiAgICpcbiAgICogVGhlIHBsdWdpbiB3aWxsIHJlbWFpbiBwYXJ0IG9mIHRoaXMgZWNvc3lzdGVtIHVudGlsIGl0IGlzIHVucmVnaXN0ZXJlZCBvclxuICAgKiB0aGlzIGVjb3N5c3RlbSBpcyBkZXN0cm95ZWQuIGAud2lwZSgpYCBhbmQgYC5yZXNldCgpYCBkb24ndCByZW1vdmUgcGx1Z2lucy5cbiAgICogSG93ZXZlciwgYSBwbHVnaW4gX2Nhbl8gc2V0IHRoZSBgZWNvc3lzdGVtV2lwZWRgIG1vZCBhbmQgcmVhY3QgdG8gdGhvc2VcbiAgICogZXZlbnRzLlxuICAgKi9cbiAgcHVibGljIHJlZ2lzdGVyUGx1Z2luKHBsdWdpbjogWmVkdXhQbHVnaW4pIHtcbiAgICBpZiAodGhpcy5wbHVnaW5zLnNvbWUoZGVzY3JpcHRvciA9PiBkZXNjcmlwdG9yLnBsdWdpbiA9PT0gcGx1Z2luKSkgcmV0dXJuXG5cbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBwbHVnaW4ubW9kU3RvcmUuc3Vic2NyaWJlKChuZXdTdGF0ZSwgb2xkU3RhdGUpID0+IHtcbiAgICAgIHRoaXMucmVjYWxjdWxhdGVNb2RzKG5ld1N0YXRlLCBvbGRTdGF0ZSlcbiAgICB9KVxuXG4gICAgY29uc3QgY2xlYW51cFJlZ2lzdHJhdGlvbiA9IHBsdWdpbi5yZWdpc3RlckVjb3N5c3RlbSh0aGlzKVxuICAgIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxuICAgICAgaWYgKGNsZWFudXBSZWdpc3RyYXRpb24pIGNsZWFudXBSZWdpc3RyYXRpb24oKVxuICAgIH1cblxuICAgIHRoaXMucGx1Z2lucy5wdXNoKHsgY2xlYW51cCwgcGx1Z2luIH0pXG4gICAgdGhpcy5yZWNhbGN1bGF0ZU1vZHMocGx1Z2luLm1vZFN0b3JlLmdldFN0YXRlKCkpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBwYXNzZWQgYXRvbXMgZnJvbSB0aGlzIGVjb3N5c3RlbSdzIGxpc3Qgb2YgYXRvbSBvdmVycmlkZXMuIERvZXNcbiAgICogbm90aGluZyBmb3IgcGFzc2VkIGF0b21zIHRoYXQgYXJlbid0IGN1cnJlbnRseSBpbiB0aGUgb3ZlcnJpZGVzIGxpc3QuXG4gICAqXG4gICAqIEZvcmNlIGRlc3Ryb3lzIGFsbCBpbnN0YW5jZXMgb2YgYWxsIHJlbW92ZWQgYXRvbXMuIFRoaXMgZm9yY2VkIGRlc3RydWN0aW9uXG4gICAqIHdpbGwgY2F1c2UgZGVwZW5kZW50cyBvZiB0aG9zZSBpbnN0YW5jZXMgdG8gcmVjcmVhdGUgdGhlaXIgZGVwZW5kZW5jeSBhdG9tXG4gICAqIGluc3RhbmNlIHdpdGhvdXQgdXNpbmcgYW4gb3ZlcnJpZGUuXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlT3ZlcnJpZGVzKG92ZXJyaWRlczogKEFueUF0b20gfCBzdHJpbmcpW10pIHtcbiAgICB0aGlzLm92ZXJyaWRlcyA9IG1hcE92ZXJyaWRlcyhcbiAgICAgIE9iamVjdC52YWx1ZXModGhpcy5vdmVycmlkZXMpLmZpbHRlcihhdG9tID0+XG4gICAgICAgIG92ZXJyaWRlcy5ldmVyeShvdmVycmlkZSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gdHlwZW9mIG92ZXJyaWRlID09PSAnc3RyaW5nJyA/IG92ZXJyaWRlIDogb3ZlcnJpZGUua2V5XG5cbiAgICAgICAgICByZXR1cm4ga2V5ICE9PSBhdG9tLmtleVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIClcblxuICAgIG92ZXJyaWRlcy5mb3JFYWNoKG92ZXJyaWRlID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlcyA9IHRoaXMuaW5zcGVjdEluc3RhbmNlcyhvdmVycmlkZSlcblxuICAgICAgT2JqZWN0LnZhbHVlcyhpbnN0YW5jZXMpLmZvckVhY2goaW5zdGFuY2UgPT4gaW5zdGFuY2UuZGVzdHJveSh0cnVlKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFsbCBhdG9tIGluc3RhbmNlcyBpbiB0aGlzIGVjb3N5c3RlbSwgcnVucyB0aGUgY2xlYW51cCBmdW5jdGlvblxuICAgKiByZXR1cm5lZCBmcm9tIGBvblJlYWR5YCAoaWYgYW55KSwgYW5kIGNhbGxzIGBvblJlYWR5YCBhZ2FpbiB0byByZWluaXRpYWxpemVcbiAgICogdGhlIGVjb3N5c3RlbS5cbiAgICovXG4gIHB1YmxpYyByZXNldChuZXdDb250ZXh0PzogQ29udGV4dCkge1xuICAgIHRoaXMud2lwZSgpXG5cbiAgICBjb25zdCBwcmV2Q29udGV4dCA9IHRoaXMuY29udGV4dFxuICAgIGlmICh0eXBlb2YgbmV3Q29udGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHRoaXMuY29udGV4dCA9IG5ld0NvbnRleHRcblxuICAgIHRoaXMuY2xlYW51cCA9IHRoaXMuX29uUmVhZHk/Lih0aGlzLCBwcmV2Q29udGV4dClcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIGFuIEF0b21TZWxlY3RvciBzdGF0aWNhbGx5IC0gd2l0aG91dCByZWdpc3RlcmluZyBhbnkgZGVwZW5kZW5jaWVzIG9yXG4gICAqIHVwZGF0aW5nIGFueSBjYWNoZXMuIElmIHdlJ3ZlIGFscmVhZHkgY2FjaGVkIHRoaXMgZXhhY3Qgc2VsZWN0b3IgKyBhcmdzXG4gICAqIGNvbWJvLCByZXR1cm5zIHRoZSBjYWNoZWQgdmFsdWUgd2l0aG91dCBydW5uaW5nIHRoZSBzZWxlY3RvciBhZ2FpblxuICAgKi9cbiAgcHVibGljIHNlbGVjdDxULCBBcmdzIGV4dGVuZHMgYW55W10+KFxuICAgIHNlbGVjdGFibGU6IFNlbGVjdGFibGU8VCwgQXJncz4sXG4gICAgLi4uYXJnczogQXJnc1xuICApOiBUIHtcbiAgICBpZiAoaXMoc2VsZWN0YWJsZSwgU2VsZWN0b3JDYWNoZUl0ZW0pKSB7XG4gICAgICByZXR1cm4gKHNlbGVjdGFibGUgYXMgU2VsZWN0b3JDYWNoZUl0ZW08VCwgQXJncz4pLnJlc3VsdCBhcyBUXG4gICAgfVxuXG4gICAgY29uc3QgYXRvbVNlbGVjdG9yID0gc2VsZWN0YWJsZSBhcyBBdG9tU2VsZWN0b3JPckNvbmZpZzxULCBBcmdzPlxuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5zZWxlY3RvckNhY2hlLndlYWtHZXRDYWNoZShhdG9tU2VsZWN0b3IsIGFyZ3MpXG4gICAgaWYgKGNhY2hlKSByZXR1cm4gY2FjaGUucmVzdWx0IGFzIFRcblxuICAgIGNvbnN0IHJlc29sdmVkU2VsZWN0b3IgPVxuICAgICAgdHlwZW9mIGF0b21TZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJyA/IGF0b21TZWxlY3RvciA6IGF0b21TZWxlY3Rvci5zZWxlY3RvclxuXG4gICAgcmV0dXJuIHJlc29sdmVkU2VsZWN0b3IoXG4gICAgICB7XG4gICAgICAgIGVjb3N5c3RlbTogdGhpcyxcbiAgICAgICAgZ2V0OiB0aGlzLmdldC5iaW5kKHRoaXMpLFxuICAgICAgICBnZXRJbnN0YW5jZTogdGhpcy5nZXRJbnN0YW5jZS5iaW5kKHRoaXMpLFxuICAgICAgICBzZWxlY3Q6IHRoaXMuc2VsZWN0LmJpbmQodGhpcyksXG4gICAgICB9LFxuICAgICAgLi4uYXJnc1xuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21wbGV0ZWx5IHJlcGxhY2UgdGhpcyBlY29zeXN0ZW0ncyBjdXJyZW50IGxpc3Qgb2YgYXRvbSBvdmVycmlkZXMgd2l0aCBhXG4gICAqIG5ldyBsaXN0LlxuICAgKlxuICAgKiBGb3JjZSBkZXN0cm95cyBhbGwgaW5zdGFuY2VzIG9mIGFsbCBwcmV2aW91c2x5LSBhbmQgbmV3bHktb3ZlcnJpZGRlbiBhdG9tcy5cbiAgICogVGhpcyBmb3JjZWQgZGVzdHJ1Y3Rpb24gd2lsbCBjYXVzZSBkZXBlbmRlbnRzIG9mIHRob3NlIGluc3RhbmNlcyB0b1xuICAgKiByZWNyZWF0ZSB0aGVpciBkZXBlbmRlbmN5IGF0b20gaW5zdGFuY2UuXG4gICAqL1xuICBwdWJsaWMgc2V0T3ZlcnJpZGVzKG5ld092ZXJyaWRlczogQW55QXRvbVtdKSB7XG4gICAgY29uc3Qgb2xkT3ZlcnJpZGVzID0gdGhpcy5vdmVycmlkZXNcblxuICAgIHRoaXMub3ZlcnJpZGVzID0gbWFwT3ZlcnJpZGVzKG5ld092ZXJyaWRlcylcblxuICAgIGlmICghdGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm5cblxuICAgIG5ld092ZXJyaWRlcy5mb3JFYWNoKGF0b20gPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2VzID0gdGhpcy5pbnNwZWN0SW5zdGFuY2VzKGF0b20pXG5cbiAgICAgIE9iamVjdC52YWx1ZXMoaW5zdGFuY2VzKS5mb3JFYWNoKGluc3RhbmNlID0+IHtcbiAgICAgICAgaW5zdGFuY2UuZGVzdHJveSh0cnVlKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaWYgKCFvbGRPdmVycmlkZXMpIHJldHVyblxuXG4gICAgT2JqZWN0LnZhbHVlcyhvbGRPdmVycmlkZXMpLmZvckVhY2goYXRvbSA9PiB7XG4gICAgICBjb25zdCBpbnN0YW5jZXMgPSB0aGlzLmluc3BlY3RJbnN0YW5jZXMoYXRvbSlcblxuICAgICAgT2JqZWN0LnZhbHVlcyhpbnN0YW5jZXMpLmZvckVhY2goaW5zdGFuY2UgPT4ge1xuICAgICAgICBpbnN0YW5jZS5kZXN0cm95KHRydWUpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIHBsdWdpbiByZWdpc3RlcmVkIGluIHRoaXMgZWNvc3lzdGVtIHZpYSBgLnJlZ2lzdGVyUGx1Z2luKClgXG4gICAqL1xuICBwdWJsaWMgdW5yZWdpc3RlclBsdWdpbihwbHVnaW46IFplZHV4UGx1Z2luKSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnBsdWdpbnMuZmluZEluZGV4KFxuICAgICAgZGVzY3JpcHRvciA9PiBkZXNjcmlwdG9yLnBsdWdpbiA9PT0gcGx1Z2luXG4gICAgKVxuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVyblxuXG4gICAgdGhpcy5wbHVnaW5zW2luZGV4XS5jbGVhbnVwKClcbiAgICB0aGlzLnBsdWdpbnMuc3BsaWNlKGluZGV4LCAxKVxuICAgIHRoaXMucmVjYWxjdWxhdGVNb2RzKHVuZGVmaW5lZCwgcGx1Z2luLm1vZFN0b3JlLmdldFN0YXRlKCkpXG4gIH1cblxuICBwdWJsaWMgdmlld0dyYXBoKHZpZXc6ICdib3R0b20tdXAnKTogR3JhcGhWaWV3UmVjdXJzaXZlXG4gIHB1YmxpYyB2aWV3R3JhcGgoXG4gICAgdmlldz86ICdmbGF0J1xuICApOiBSZWNvcmQ8XG4gICAgc3RyaW5nLFxuICAgIHtcbiAgICAgIGRlcGVuZGVuY2llczogeyBrZXk6IHN0cmluZzsgb3BlcmF0aW9uOiBzdHJpbmcgfVtdXG4gICAgICBkZXBlbmRlbnRzOiB7IGtleTogc3RyaW5nOyBvcGVyYXRpb246IHN0cmluZyB9W11cbiAgICAgIHdlaWdodDogbnVtYmVyXG4gICAgfVxuICA+XG4gIHB1YmxpYyB2aWV3R3JhcGgodmlldzogJ3RvcC1kb3duJyk6IEdyYXBoVmlld1JlY3Vyc2l2ZVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgZ3JhcGggb2YgdGhpcyBlY29zeXN0ZW0uIFRoZXJlIGFyZSAzIHZpZXdzOlxuICAgKlxuICAgKiBGbGF0IChkZWZhdWx0KS4gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhbGwgZ3JhcGggbm9kZXMgb24gdGhlIHRvcCBsYXllcixcbiAgICogZWFjaCBub2RlIHBvaW50aW5nIHRvIGl0cyBkZXBlbmRlbmNpZXMgYW5kIGRlcGVuZGVudHMuIE5vIG5lc3RpbmcuXG4gICAqXG4gICAqIEJvdHRvbS1VcC4gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGxlYWYgbm9kZXMgb2YgdGhlIGdyYXBoXG4gICAqIChub2RlcyB0aGF0IGhhdmUgbm8gaW50ZXJuYWwgZGVwZW5kZW50cyksIGVhY2ggbm9kZSBjb250YWluaW5nIGFuIG9iamVjdCBvZlxuICAgKiBpdHMgcGFyZW50IG5vZGVzLCByZWN1cnNpdmVseS5cbiAgICpcbiAgICogVG9wLURvd24uIFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIHRoZSByb290IG5vZGVzIG9mIHRoZSBncmFwaFxuICAgKiAobm9kZXMgdGhhdCBoYXZlIG5vIGRlcGVuZGVuY2llcyksIGVhY2ggbm9kZSBjb250YWluaW5nIGFuIG9iamVjdCBvZiBpdHNcbiAgICogY2hpbGQgbm9kZXMsIHJlY3Vyc2l2ZWx5LlxuICAgKi9cbiAgcHVibGljIHZpZXdHcmFwaCh2aWV3Pzogc3RyaW5nKSB7XG4gICAgaWYgKHZpZXcgIT09ICd0b3AtZG93bicgJiYgdmlldyAhPT0gJ2JvdHRvbS11cCcpIHtcbiAgICAgIGNvbnN0IGhhc2g6IFJlY29yZDxcbiAgICAgICAgc3RyaW5nLFxuICAgICAgICB7XG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiB7IGtleTogc3RyaW5nOyBvcGVyYXRpb246IHN0cmluZyB9W11cbiAgICAgICAgICBkZXBlbmRlbnRzOiB7IGtleTogc3RyaW5nOyBvcGVyYXRpb246IHN0cmluZyB9W11cbiAgICAgICAgICB3ZWlnaHQ6IG51bWJlclxuICAgICAgICB9XG4gICAgICA+ID0ge31cblxuICAgICAgT2JqZWN0LmtleXModGhpcy5fZ3JhcGgubm9kZXMpLmZvckVhY2goY2FjaGVLZXkgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5fZ3JhcGgubm9kZXNbY2FjaGVLZXldXG5cbiAgICAgICAgaGFzaFtjYWNoZUtleV0gPSB7XG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBPYmplY3Qua2V5cyhub2RlLmRlcGVuZGVuY2llcykubWFwKGtleSA9PiAoe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgb3BlcmF0aW9uOiB0aGlzLl9ncmFwaC5ub2Rlc1trZXldLmRlcGVuZGVudHNbY2FjaGVLZXldLm9wZXJhdGlvbixcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgZGVwZW5kZW50czogT2JqZWN0LmtleXMobm9kZS5kZXBlbmRlbnRzKS5tYXAoa2V5ID0+ICh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBvcGVyYXRpb246IG5vZGUuZGVwZW5kZW50c1trZXldLm9wZXJhdGlvbixcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgd2VpZ2h0OiBub2RlLndlaWdodCxcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGhhc2hcbiAgICB9XG5cbiAgICBjb25zdCBoYXNoOiBHcmFwaFZpZXdSZWN1cnNpdmUgPSB7fVxuXG4gICAgT2JqZWN0LmtleXModGhpcy5fZ3JhcGgubm9kZXMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9ncmFwaC5ub2Rlc1trZXldXG4gICAgICBjb25zdCBpc1RvcExldmVsID1cbiAgICAgICAgdmlldyA9PT0gJ2JvdHRvbS11cCdcbiAgICAgICAgICA/IE9iamVjdC5rZXlzKG5vZGUuZGVwZW5kZW50cykuZXZlcnkoa2V5ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZGVwZW5kZW50ID0gbm9kZS5kZXBlbmRlbnRzW2tleV1cblxuICAgICAgICAgICAgICByZXR1cm4gZGVwZW5kZW50LmZsYWdzICYgRXh0ZXJuYWxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiAhT2JqZWN0LmtleXMobm9kZS5kZXBlbmRlbmNpZXMpLmxlbmd0aFxuXG4gICAgICBpZiAoaXNUb3BMZXZlbCkge1xuICAgICAgICBoYXNoW2tleV0gPSB7fVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCByZWN1cnNlID0gKG5vZGU/OiBFY29zeXN0ZW1HcmFwaE5vZGUpID0+IHtcbiAgICAgIGlmICghbm9kZSkgcmV0dXJuXG5cbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhcbiAgICAgICAgdmlldyA9PT0gJ2JvdHRvbS11cCcgPyBub2RlLmRlcGVuZGVuY2llcyA6IG5vZGUuZGVwZW5kZW50c1xuICAgICAgKVxuICAgICAgY29uc3QgY2hpbGRyZW46IEdyYXBoVmlld1JlY3Vyc2l2ZSA9IHt9XG5cbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZCA9IHJlY3Vyc2UodGhpcy5fZ3JhcGgubm9kZXNba2V5XSlcblxuICAgICAgICBpZiAoY2hpbGQpIGNoaWxkcmVuW2tleV0gPSBjaGlsZFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoaGFzaCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuX2dyYXBoLm5vZGVzW2tleV1cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gcmVjdXJzZShub2RlKVxuXG4gICAgICBpZiAoY2hpbGRyZW4pIGhhc2hba2V5XSA9IGNoaWxkcmVuXG4gICAgfSlcblxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGF0b20gaW5zdGFuY2UgdmFsdWUuIERvbid0IGNyZWF0ZSB0aGUgYXRvbSBpbnN0YW5jZSBpZiBpdCBkb2Vzbid0XG4gICAqIGV4aXN0LiBEb24ndCByZWdpc3RlciBhbnkgZ3JhcGggZGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgcHVibGljIHdlYWtHZXQ8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgW10sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEFcbiAgKTogQXRvbVN0YXRlVHlwZTxBPiB8IHVuZGVmaW5lZFxuXG4gIHB1YmxpYyB3ZWFrR2V0PEEgZXh0ZW5kcyBBdG9tQmFzZTxhbnksIFsuLi5hbnldLCBhbnksIGFueSwgYW55LCBhbnk+PihcbiAgICBhdG9tOiBBLFxuICAgIHBhcmFtczogQXRvbVBhcmFtc1R5cGU8QT5cbiAgKTogQXRvbVN0YXRlVHlwZTxBPiB8IHVuZGVmaW5lZFxuXG4gIHB1YmxpYyB3ZWFrR2V0PEEgZXh0ZW5kcyBBdG9tQmFzZTxhbnksIFsuLi5hbnldLCBhbnksIGFueSwgYW55LCBhbnk+PihcbiAgICBhdG9tOiBBLFxuICAgIHBhcmFtcz86IEF0b21QYXJhbXNUeXBlPEE+XG4gICkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy53ZWFrR2V0SW5zdGFuY2UoXG4gICAgICBhdG9tIGFzIEEsXG4gICAgICBwYXJhbXMgYXMgQXRvbVBhcmFtc1R5cGU8QT5cbiAgICApIGFzIEF0b21JbnN0YW5jZUJhc2U8YW55LCBhbnksIGFueT5cblxuICAgIHJldHVybiBpbnN0YW5jZT8uc3RvcmUuZ2V0U3RhdGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhdG9tIGluc3RhbmNlLiBEb24ndCBjcmVhdGUgdGhlIGF0b20gaW5zdGFuY2UgaWYgaXQgZG9lc24ndCBleGlzdC5cbiAgICogRG9uJ3QgcmVnaXN0ZXIgYW55IGdyYXBoIGRlcGVuZGVuY2llcy5cbiAgICovXG4gIHB1YmxpYyB3ZWFrR2V0SW5zdGFuY2U8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgW10sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEFcbiAgKTogQXRvbUluc3RhbmNlVHlwZTxBPiB8IHVuZGVmaW5lZFxuXG4gIHB1YmxpYyB3ZWFrR2V0SW5zdGFuY2U8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgWy4uLmFueV0sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEEsXG4gICAgcGFyYW1zOiBBdG9tUGFyYW1zVHlwZTxBPlxuICApOiBBdG9tSW5zdGFuY2VUeXBlPEE+IHwgdW5kZWZpbmVkXG5cbiAgcHVibGljIHdlYWtHZXRJbnN0YW5jZTxBIGV4dGVuZHMgQW55QXRvbSA9IGFueT4oXG4gICAga2V5OiBzdHJpbmdcbiAgKTogQXRvbUluc3RhbmNlVHlwZTxBPiB8IHVuZGVmaW5lZFxuXG4gIHB1YmxpYyB3ZWFrR2V0SW5zdGFuY2U8QSBleHRlbmRzIEF0b21CYXNlPGFueSwgWy4uLmFueV0sIGFueSwgYW55LCBhbnksIGFueT4+KFxuICAgIGF0b206IEEgfCBzdHJpbmcsXG4gICAgcGFyYW1zPzogQXRvbVBhcmFtc1R5cGU8QT5cbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBhdG9tICE9PSAnc3RyaW5nJykge1xuICAgICAgY29uc3Qga2V5SGFzaCA9IChhdG9tIGFzIEEpLmdldEtleUhhc2godGhpcywgcGFyYW1zKVxuXG4gICAgICAvLyB0cnkgdG8gZmluZCBhbiBleGlzdGluZyBpbnN0YW5jZVxuICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlc1trZXlIYXNoXVxuICAgIH1cblxuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuaW5zcGVjdEluc3RhbmNlcyhhdG9tKSlbMF0gYXNcbiAgICAgIHwgQXRvbUluc3RhbmNlVHlwZTxBPlxuICAgICAgfCB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHJlYXNvbnMgZGV0YWlsaW5nIHdoeSB0aGUgY3VycmVudCBhdG9tIGluc3RhbmNlIG9yXG4gICAqIHNlbGVjdG9yIGlzIGV2YWx1YXRpbmcuXG4gICAqXG4gICAqIFJldHVybnMgdW5kZWZpbmVkIGlmIG5vdGhpbmcgaXMgY3VycmVudGx5IGV2YWx1YXRpbmcuIFJldHVybnMgYW4gZW1wdHlcbiAgICogYXJyYXkgaWYgdGhpcyBpcyB0aGUgZmlyc3QgZXZhbHVhdGlvbiBvZiB0aGUgaW5zdGFuY2Ugb3Igc2VsZWN0b3IuXG4gICAqL1xuICBwdWJsaWMgd2h5KCkge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9ldmFsdWF0aW9uU3RhY2sucmVhZCgpXG5cbiAgICBpZiAoIWl0ZW0pIHJldHVyblxuXG4gICAgaWYgKChpdGVtIGFzIFNlbGVjdG9yU3RhY2tJdGVtKS5jYWNoZSkge1xuICAgICAgcmV0dXJuIChpdGVtIGFzIFNlbGVjdG9yU3RhY2tJdGVtKS5jYWNoZS5uZXh0RXZhbHVhdGlvblJlYXNvbnNcbiAgICB9XG5cbiAgICByZXR1cm4gKGl0ZW0gYXMgSW5zdGFuY2VTdGFja0l0ZW0pLmluc3RhbmNlLl9uZXh0RXZhbHVhdGlvblJlYXNvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IGFsbCBhdG9tIGluc3RhbmNlcyBpbiB0aGlzIGVjb3N5c3RlbS4gQWxzbyBydW4gdGhlIGNsZWFudXAgZnVuY3Rpb25cbiAgICogcmV0dXJuZWQgZnJvbSB0aGUgb25SZWFkeSBjYWxsYmFjayAoaWYgYW55KS4gRG9uJ3QgcmVtb3ZlIHBsdWdpbnMgb3IgcmUtcnVuXG4gICAqIHRoZSBvblJlYWR5IGNhbGxiYWNrLlxuICAgKlxuICAgKiBJbXBvcnRhbnQhIFRoaXMgbWV0aG9kIGlzIG1vc3RseSBmb3IgaW50ZXJuYWwgdXNlLiBZb3Ugd29uJ3QgdHlwaWNhbGx5IHdhbnRcbiAgICogdG8gY2FsbCB0aGlzIG1ldGhvZC4gUHJlZmVyIGAucmVzZXQoKWAgd2hpY2ggcmUtcnVucyB0aGUgb25SZWFkeSBjYWxsYmFja1xuICAgKiBhZnRlciB3aXBpbmcgdGhlIGVjb3N5c3RlbSwgYWxsb3dpbmcgb25SZWFkeSB0byByZS1pbml0aWFsaXplIHRoZSBlY29zeXN0ZW1cbiAgICogLSBwcmVsb2FkaW5nIGF0b21zLCByZWdpc3RlcmluZyBwbHVnaW5zLCBjb25maWd1cmluZyBjb250ZXh0LCBldGNcbiAgICovXG4gIHB1YmxpYyB3aXBlKCkge1xuICAgIC8vIGNhbGwgY2xlYW51cCBmdW5jdGlvbiBmaXJzdCBzbyBpdCBjYW4gY29uZmlndXJlIHRoZSBlY29zeXN0ZW0gZm9yIGNsZWFudXBcbiAgICBpZiAodGhpcy5jbGVhbnVwKSB0aGlzLmNsZWFudXAoKVxuXG4gICAgLy8gVE9ETzogRGVsZXRlIG5vZGVzIGluIGFuIG9wdGltYWwgb3JkZXIsIHN0YXJ0aW5nIHdpdGggbm9kZXMgd2l0aCBub1xuICAgIC8vIGludGVybmFsIGRlcGVuZGVudHMuIFRoaXMgaXMgZGlmZmVyZW50IGZyb20gaGlnaGVzdC13ZWlnaHRlZCBub2RlcyBzaW5jZVxuICAgIC8vIHN0YXRpYyBkZXBlbmRlbnRzIGRvbid0IGFmZmVjdCB3ZWlnaHQuIFRoaXMgc2hvdWxkIG1ha2Ugc3VyZSBubyBpbnRlcm5hbFxuICAgIC8vIG5vZGVzIHNjaGVkdWxlIHVubmVjZXNzYXJ5IHJlZXZhYWx1YXRpb25zIHRvIHJlY3JlYXRlIGZvcmNlLWRlc3Ryb3llZFxuICAgIC8vIGluc3RhbmNlc1xuICAgIE9iamVjdC52YWx1ZXModGhpcy5faW5zdGFuY2VzKS5mb3JFYWNoKGluc3RhbmNlID0+IHtcbiAgICAgIGluc3RhbmNlLmRlc3Ryb3kodHJ1ZSlcbiAgICB9KVxuXG4gICAgdGhpcy5oeWRyYXRpb24gPSB1bmRlZmluZWRcbiAgICB0aGlzLnNlbGVjdG9yQ2FjaGUuX3dpcGUoKVxuXG4gICAgdGhpcy5fc2NoZWR1bGVyLndpcGUoKVxuICAgIHRoaXMuX3NjaGVkdWxlci5mbHVzaCgpXG5cbiAgICBpZiAodGhpcy5fbW9kcy5lY29zeXN0ZW1XaXBlZCkge1xuICAgICAgdGhpcy5tb2RCdXMuZGlzcGF0Y2gocGx1Z2luQWN0aW9ucy5lY29zeXN0ZW1XaXBlZCh7IGVjb3N5c3RlbTogdGhpcyB9KSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIG9ubHkgYmUgdXNlZCBpbnRlcm5hbGx5XG4gICAqL1xuICBwdWJsaWMgX2NvbnN1bWVIeWRyYXRpb24oaW5zdGFuY2U6IFBhcnRpYWxBdG9tSW5zdGFuY2UpIHtcbiAgICBjb25zdCBoeWRyYXRlZFZhbHVlID0gdGhpcy5oeWRyYXRpb24/LltpbnN0YW5jZS5rZXlIYXNoXVxuXG4gICAgaWYgKHR5cGVvZiBoeWRyYXRlZFZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG5cbiAgICBkZWxldGUgdGhpcy5oeWRyYXRpb24/LltpbnN0YW5jZS5rZXlIYXNoXVxuXG4gICAgcmV0dXJuIGluc3RhbmNlLmF0b20uaHlkcmF0ZVxuICAgICAgPyBpbnN0YW5jZS5hdG9tLmh5ZHJhdGUoaHlkcmF0ZWRWYWx1ZSlcbiAgICAgIDogaHlkcmF0ZWRWYWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3VsZCBvbmx5IGJlIHVzZWQgaW50ZXJuYWxseVxuICAgKi9cbiAgcHVibGljIF9kZWNyZW1lbnRSZWZDb3VudCgpIHtcbiAgICB0aGlzLl9yZWZDb3VudC0tXG4gICAgaWYgKCF0aGlzLl9kZXN0cm95T25Vbm1vdW50KSByZXR1cm5cblxuICAgIHRoaXMuZGVzdHJveSgpIC8vIG9ubHkgZGVzdHJveXMgaWYgX3JlZkNvdW50ID09PSAwXG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIG9ubHkgYmUgdXNlZCBpbnRlcm5hbGx5XG4gICAqL1xuICBwdWJsaWMgX2Rlc3Ryb3lBdG9tSW5zdGFuY2Uoa2V5SGFzaDogc3RyaW5nKSB7XG4gICAgLy8gdHJ5IHRvIGRlc3Ryb3kgaW5zdGFuY2UgKGlmIG5vdCBkZXN0cm95ZWQgLSB0aGlzIGZuIGlzIGNhbGxlZCBhcyBwYXJ0IG9mXG4gICAgLy8gdGhhdCBkZXN0cnVjdGlvbiBwcm9jZXNzIHRvbylcbiAgICB0aGlzLl9ncmFwaC5yZW1vdmVOb2RlKGtleUhhc2gpXG5cbiAgICBkZWxldGUgdGhpcy5faW5zdGFuY2VzW2tleUhhc2hdIC8vIFRPRE86IGRpc3BhdGNoIGFuIGFjdGlvbiBvdmVyIGludGVybmFsU3RvcmUgZm9yIHRoaXMgbXV0YXRpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgb25seSBiZSB1c2VkIGludGVybmFsbHlcbiAgICovXG4gIHB1YmxpYyBfZ2V0UmVhY3RDb250ZXh0KGF0b206IEFueUF0b20pIHtcbiAgICBjb25zdCBleGlzdGluZ0NvbnRleHQgPSB0aGlzLl9yZWFjdENvbnRleHRzW2F0b20ua2V5XVxuXG4gICAgaWYgKGV4aXN0aW5nQ29udGV4dCkgcmV0dXJuIGV4aXN0aW5nQ29udGV4dFxuXG4gICAgY29uc3QgbmV3Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKVxuICAgIHRoaXMuX3JlYWN0Q29udGV4dHNbYXRvbS5rZXldID0gbmV3Q29udGV4dFxuXG4gICAgcmV0dXJuIG5ld0NvbnRleHQgYXMgUmVhY3QuQ29udGV4dDxhbnk+XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIG9ubHkgYmUgdXNlZCBpbnRlcm5hbGx5XG4gICAqL1xuICBwdWJsaWMgX2luY3JlbWVudFJlZkNvdW50KCkge1xuICAgIHRoaXMuX3JlZkNvdW50KytcbiAgfVxuXG4gIHByaXZhdGUgcmVjYWxjdWxhdGVNb2RzKG5ld1N0YXRlPzogTW9kW10sIG9sZFN0YXRlPzogTW9kW10pIHtcbiAgICBpZiAob2xkU3RhdGUpIHtcbiAgICAgIG9sZFN0YXRlLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgdGhpcy5fbW9kc1trZXkgYXMgTW9kXS0tIC8vIGZ1biBmYWN0LCB1bmRlZmluZWQtLSBpcyBmaW5lXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChuZXdTdGF0ZSkge1xuICAgICAgbmV3U3RhdGUuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICB0aGlzLl9tb2RzW2tleSBhcyBNb2RdKytcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlQXRvbTxBdG9tVHlwZSBleHRlbmRzIEFueUF0b20+KGF0b206IEF0b21UeXBlKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGUgPSB0aGlzLm92ZXJyaWRlcz8uW2F0b20ua2V5XVxuICAgIGNvbnN0IG1heWJlT3ZlcnJpZGRlbkF0b20gPSAob3ZlcnJpZGUgfHwgYXRvbSkgYXMgQXRvbVR5cGVcblxuICAgIC8vIHRvIHR1cm4gb2ZmIGZsYWcgY2hlY2tpbmcsIGp1c3QgZG9uJ3QgcGFzcyBhIGBmbGFnc2AgcHJvcFxuICAgIGlmICh0aGlzLmZsYWdzKSB7XG4gICAgICBjb25zdCBiYWRGbGFnID0gbWF5YmVPdmVycmlkZGVuQXRvbS5mbGFncz8uZmluZChcbiAgICAgICAgZmxhZyA9PiAhdGhpcy5mbGFncz8uaW5jbHVkZXMoZmxhZylcbiAgICAgIClcblxuICAgICAgaWYgKERFViAmJiBiYWRGbGFnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYFplZHV4OiBlbmNvdW50ZXJlZCB1bnNhZmUgYXRvbSBcIiR7YXRvbS5rZXl9XCIgd2l0aCBmbGFnIFwiJHtiYWRGbGFnfVwiLiBUaGlzIGF0b20gc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuYFxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heWJlT3ZlcnJpZGRlbkF0b21cbiAgfVxufVxuIl0sIm5hbWVzIjpbIkV4cGxpY2l0IiwiRXh0ZXJuYWwiLCJTdGF0aWMiLCJwbHVnaW5BY3Rpb25zIiwiR3JhcGgiLCJlY29zeXN0ZW0iLCJub2RlcyIsInVwZGF0ZVN0YWNrIiwiYWRkRWRnZSIsImRlcGVuZGVudEtleSIsImRlcGVuZGVuY3lLZXkiLCJvcGVyYXRpb24iLCJmbGFncyIsImNhbGxiYWNrIiwibmV3RWRnZSIsImNyZWF0ZWRBdCIsIkRhdGUiLCJub3ciLCJsZW5ndGgiLCJmaW5pc2hBZGRpbmdFZGdlIiwiZGVwZW5kZW5jaWVzIiwia2V5IiwiREVWIiwiRXJyb3IiLCJkZXBlbmRlbmN5IiwiYWRkTm9kZSIsIm5vZGVLZXkiLCJpc0F0b21TZWxlY3RvciIsImRlcGVuZGVudHMiLCJ3ZWlnaHQiLCJidWZmZXJVcGRhdGVzIiwicHVzaCIsImRlc3Ryb3lCdWZmZXIiLCJlZGdlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZXhpc3RpbmdFZGdlIiwic2NoZWR1bGVOb2RlRGVzdHJ1Y3Rpb24iLCJwb3AiLCJmbHVzaFVwZGF0ZXMiLCJlZGdlVG9BZGQiLCJyZW1vdmVFZGdlIiwiZ2V0UmVmQ291bnQiLCJyZW1vdmVEZXBlbmRlbmNpZXMiLCJub2RlIiwiZGVwZW5kZW50IiwiZGVwZW5kZW50RWRnZSIsInJlY2FsY3VsYXRlTm9kZVdlaWdodCIsInRhc2siLCJfc2NoZWR1bGVyIiwidW5zY2hlZHVsZSIsIl9tb2RzIiwiZWRnZVJlbW92ZWQiLCJtb2RCdXMiLCJkaXNwYXRjaCIsIl9pbnN0YW5jZXMiLCJzZWxlY3RvckNhY2hlIiwiX2l0ZW1zIiwiZWRnZSIsInJlbW92ZU5vZGUiLCJzY2hlZHVsZURlcGVuZGVudHMiLCJ1bmRlZmluZWQiLCJkZXBlbmRlbnROb2RlIiwicmVhc29ucyIsIm5ld1N0YXRlIiwib2xkU3RhdGUiLCJzaG91bGRTZXRUaW1lb3V0IiwidHlwZSIsInNpZ25hbCIsInNjaGVkdWxlU3RhdGljRGVwcyIsImluc3RhbmNlIiwiY2FjaGUiLCJpc1N0YXRpYyIsInJlYXNvbiIsInNvdXJjZUtleSIsInNvdXJjZVR5cGUiLCJfc2NoZWR1bGVFdmFsdWF0aW9uIiwic3RvcmUiLCJnZXRTdGF0ZSIsInJlc3VsdCIsInNjaGVkdWxlIiwidW5zY2hlZHVsZU5vZGVEZXN0cnVjdGlvbiIsImVkZ2VDcmVhdGVkIiwid2VpZ2h0RGlmZiIsIl9kZXN0cm95U2VsZWN0b3IiLCJfc2NoZWR1bGVEZXN0cnVjdGlvbiIsIl9jYW5jZWxEZXN0cnVjdGlvbiIsImlzIiwiaXNQbGFpbk9iamVjdCIsIkF0b21JbnN0YW5jZUJhc2UiLCJJZEdlbmVyYXRvciIsImlkQ291bnRlciIsIndlYWtDYWNoZSIsIldlYWtNYXAiLCJnZW5lcmF0ZUlkIiwicHJlZml4IiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiLCJnZW5lcmF0ZUF0b21TZWxlY3RvcklkIiwibmFtZSIsImdlbmVyYXRlRWNvc3lzdGVtSWQiLCJnZW5lcmF0ZU5vZGVJZCIsImdlbmVyYXRlUmVhY3RDb21wb25lbnRJZCIsInN0YWNrIiwibGluZXMiLCJzcGxpdCIsIm1hcCIsImxpbmUiLCJ0cmltIiwicmVwbGFjZSIsImNvbXBvbmVudE5hbWUiLCJmaW5kIiwidGVzdCIsImlkZW50aWZpZXJzIiwiZm4iLCJ0b1VwcGVyQ2FzZSIsImhhc2hQYXJhbXMiLCJwYXJhbXMiLCJhY2NlcHRDb21wbGV4UGFyYW1zIiwiSlNPTiIsInN0cmluZ2lmeSIsIl8iLCJwYXJhbSIsImtleUhhc2giLCJBcnJheSIsImlzQXJyYXkiLCJjYWNoZUZuIiwiY29uc3RydWN0b3IiLCJjYWNoZUNsYXNzIiwic29ydCIsInJlZHVjZSIsImlkIiwiZ2V0Iiwic2V0IiwiU2NoZWR1bGVyIiwiam9icyIsImZsdXNoIiwiX2lzUnVubmluZyIsIl9qb2JUaW1lb3V0SWQiLCJjbGVhclRpbWVvdXQiLCJydW5Kb2JzIiwibmV3Sm9iIiwiX2dyYXBoIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJqb2IiLCJqb2JXZWlnaHQiLCJzcGxpY2UiLCJzZXRUaW1lb3V0Iiwic2NoZWR1bGVOb3ciLCJydW5JZlJ1bm5pbmciLCJ1bnNoaWZ0Iiwid2lwZSIsImZpbHRlciIsImNiIiwiaXRlcmF0aW9uIiwiY2VpbCIsImRpcmVjdGlvbiIsImRpdmlzb3IiLCJpc0RvbmUiLCJlZmZlY3R1YWxTaXplIiwicm91bmQiLCJuZXdJbmRleCIsIm1pbiIsIm1heCIsInNoaWZ0IiwiZGVmYXVsdFJlc3VsdHNDb21wYXJhdG9yIiwiYSIsImIiLCJTZWxlY3RvckNhY2hlSXRlbSIsImNhY2hlS2V5Iiwic2VsZWN0b3JSZWYiLCJhcmdzIiwibmV4dEV2YWx1YXRpb25SZWFzb25zIiwiJCR0eXBlb2YiLCJTeW1ib2wiLCJmb3IiLCJTZWxlY3RvckNhY2hlIiwiX3JlZkJhc2VLZXlzIiwiYWRkRGVwZW5kZW50IiwiY2FjaGVJdGVtIiwiX2lkR2VuZXJhdG9yIiwiZGVzdHJveUNhY2hlIiwic2VsZWN0YWJsZSIsImZvcmNlIiwiZ2V0Q2FjaGVLZXkiLCJnZXRDYWNoZSIsInNlbGVjdG9yT3JDb25maWciLCJydW5TZWxlY3RvciIsIndlYWsiLCJiYXNlS2V5IiwiZ2V0QmFzZUtleSIsImNvbXBsZXhQYXJhbXMiLCJpbnNwZWN0SXRlbXMiLCJzZWxlY3RhYmxlT3JOYW1lIiwiaGFzaCIsImZpbHRlcktleSIsIl9nZXRJZGVhbENhY2hlS2V5IiwidmFsdWVzIiwibG9jYWxlQ29tcGFyZSIsImluY2x1ZGVzIiwiaW5zcGVjdEl0ZW1WYWx1ZXMiLCJ3ZWFrR2V0Q2FjaGUiLCJpc0Rlc3Ryb3llZCIsImRlbGV0ZSIsImlkZWFsS2V5Iiwic2VsZWN0b3IiLCJfc3dhcFJlZnMiLCJvbGRSZWYiLCJuZXdSZWYiLCJleGlzdGluZ0NhY2hlIiwiX3dpcGUiLCJleGlzdGluZ0lkIiwicHJlZml4ZWRLZXkiLCJrZXlFeGlzdHMiLCJpc0luaXRpYWxpemluZyIsIl9ldmFsdWF0aW9uU3RhY2siLCJzdGFydCIsInJlc3VsdHNDb21wYXJhdG9yIiwiYXRvbUdldHRlcnMiLCJzdGF0ZUNoYW5nZWQiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJmaW5pc2giLCJwcmV2RXZhbHVhdGlvblJlYXNvbnMiLCJjcmVhdGVTdG9yZSIsImNyZWF0ZUNvbnRleHQiLCJpbnRlcm5hbFN0b3JlIiwiRXZhbHVhdGlvblN0YWNrIiwiZGVmYXVsdE1vZHMiLCJtb2QiLCJtYXBPdmVycmlkZXMiLCJvdmVycmlkZXMiLCJhdG9tIiwiRWNvc3lzdGVtIiwiY29udGV4dCIsImRlZmF1bHRUdGwiLCJkZXN0cm95T25Vbm1vdW50Iiwib25SZWFkeSIsInNzciIsIl9kZXN0cm95T25Vbm1vdW50IiwiX3JlYWN0Q29udGV4dHMiLCJfcmVmQ291bnQiLCJpc0luaXRpYWxpemVkIiwicGx1Z2lucyIsIlR5cGVFcnJvciIsInNldE92ZXJyaWRlcyIsIl9vblJlYWR5IiwiY2xlYW51cCIsImFkZE92ZXJyaWRlcyIsIm92ZXJyaWRlIiwiaW5zdGFuY2VzIiwiaW5zcGVjdEluc3RhbmNlcyIsImRlc3Ryb3kiLCJkZWh5ZHJhdGUiLCJleGNsdWRlIiwiZXhjbHVkZUZsYWdzIiwiaW5jbHVkZSIsImluY2x1ZGVGbGFncyIsInRyYW5zZm9ybSIsInNvbWUiLCJhdG9tT3JLZXkiLCJ0b0xvd2VyQ2FzZSIsImZsYWciLCJmcm9tRW50cmllcyIsInN0YXRlIiwic2V0U3RhdGUiLCJnZXRJbnN0YW5jZSIsImdldEtleUhhc2giLCJleGlzdGluZ0luc3RhbmNlIiwicmVzb2x2ZWRBdG9tIiwicmVzb2x2ZUF0b20iLCJuZXdJbnN0YW5jZSIsIl9jcmVhdGVJbnN0YW5jZSIsIl9pbml0IiwiaHlkcmF0ZSIsImRlaHlkcmF0ZWRTdGF0ZSIsImNvbmZpZyIsImh5ZHJhdGlvbiIsInJldHJvYWN0aXZlIiwiZW50cmllcyIsInZhbCIsImlzQXRvbSIsInJlZ2lzdGVyUGx1Z2luIiwicGx1Z2luIiwiZGVzY3JpcHRvciIsInN1YnNjcmlwdGlvbiIsIm1vZFN0b3JlIiwic3Vic2NyaWJlIiwicmVjYWxjdWxhdGVNb2RzIiwiY2xlYW51cFJlZ2lzdHJhdGlvbiIsInJlZ2lzdGVyRWNvc3lzdGVtIiwidW5zdWJzY3JpYmUiLCJyZW1vdmVPdmVycmlkZXMiLCJldmVyeSIsInJlc2V0IiwibmV3Q29udGV4dCIsInByZXZDb250ZXh0Iiwic2VsZWN0IiwiYXRvbVNlbGVjdG9yIiwicmVzb2x2ZWRTZWxlY3RvciIsImJpbmQiLCJuZXdPdmVycmlkZXMiLCJvbGRPdmVycmlkZXMiLCJ1bnJlZ2lzdGVyUGx1Z2luIiwidmlld0dyYXBoIiwidmlldyIsImlzVG9wTGV2ZWwiLCJyZWN1cnNlIiwiY2hpbGRyZW4iLCJjaGlsZCIsIndlYWtHZXQiLCJ3ZWFrR2V0SW5zdGFuY2UiLCJ3aHkiLCJpdGVtIiwicmVhZCIsIl9uZXh0RXZhbHVhdGlvblJlYXNvbnMiLCJlY29zeXN0ZW1XaXBlZCIsIl9jb25zdW1lSHlkcmF0aW9uIiwiaHlkcmF0ZWRWYWx1ZSIsIl9kZWNyZW1lbnRSZWZDb3VudCIsIl9kZXN0cm95QXRvbUluc3RhbmNlIiwiX2dldFJlYWN0Q29udGV4dCIsImV4aXN0aW5nQ29udGV4dCIsIl9pbmNyZW1lbnRSZWZDb3VudCIsIm1heWJlT3ZlcnJpZGRlbkF0b20iLCJiYWRGbGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5092\n")},2633:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"O\": function() { return /* binding */ EvaluationStack; },\n/* harmony export */   \"i\": function() { return /* binding */ readInstance; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1694);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(395);\n/* harmony import */ var _utils_plugin_actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3299);\nvar perf=typeof performance!=='undefined'?performance:{now:function now(){return Date.now();}};/**\n * A stack of AtomInstances and AtomSelectors that are currently evaluating -\n * innermost instance/selector (the one that's actually currently evaluating) at\n * the end of the array.\n *\n * This has to live in the module scope so `readInstance` can access it without\n * any ecosystem context. That's how injectors work.\n */var stack=[];var readInstance=function readInstance(){var item=stack[stack.length-1];if( true&&!(item!=null&&item.instance)){throw new Error('Zedux: Injectors can only be used in atom state factories');}return item.instance;};var EvaluationStack=/*#__PURE__*/function(){function EvaluationStack(ecosystem){var _this=this;this.ecosystem=ecosystem;var get=function get(atomOrInstance,params){var instance=ecosystem.getInstance(atomOrInstance,params);// when called outside AtomSelector evaluation, get() is just an alias for\n// ecosystem.get()\nif(!stack.length)return instance.store.getState();// if get is called during evaluation, track the required atom instances so\n// we can add graph edges for them\necosystem._graph.addEdge(stack[stack.length-1].key,instance.keyHash,'get',0);return instance.store.getState();};var getInstance=function getInstance(atomOrInstance,params,edgeInfo){var _edgeInfo$;var instance=ecosystem.getInstance(atomOrInstance,params);// when called outside AtomSelector evaluation, getInstance() is just an alias\n// for ecosystem.getInstance()\nif(!stack.length)return instance;// if getInstance is called during evaluation, track the required atom\n// instances so we can add graph edges for them\necosystem._graph.addEdge(stack[stack.length-1].key,instance.keyHash,(edgeInfo==null?void 0:edgeInfo[1])||'getInstance',(_edgeInfo$=edgeInfo==null?void 0:edgeInfo[0])!=null?_edgeInfo$:_utils__WEBPACK_IMPORTED_MODULE_0__/* .Static */ .qG);return instance;};var select=function select(selectable){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}// when called outside AtomSelector evaluation, select() is just an alias for ecosystem.select()\nif(!stack.length){return ecosystem.select.apply(ecosystem,[selectable].concat(args));}var cache=_this.ecosystem.selectorCache.getCache(selectable,args);ecosystem._graph.addEdge(stack[stack.length-1].key,cache.cacheKey,'select',0);return cache.result;};this.atomGetters={ecosystem:ecosystem,get:get,getInstance:getInstance,select:select};}var _proto=EvaluationStack.prototype;_proto.isEvaluating=function isEvaluating(key){return stack.some(function(item){return item.key===key;});};_proto.finish=function finish(){var item=stack.pop();if(!item||!this.ecosystem._mods.evaluationFinished)return;var time=item.start?perf.now()-item.start:0;var action={time:time};if(item.instance){;action.instance=item.instance;}else if(item.cache){;action.cache=item.cache;}this.ecosystem.modBus.dispatch(_utils_plugin_actions__WEBPACK_IMPORTED_MODULE_1__/* .pluginActions.evaluationFinished */ .V.evaluationFinished(action));_zedux_core__WEBPACK_IMPORTED_MODULE_2__/* .Store._scheduler */ .y._scheduler=undefined;};_proto.read=function read(){return stack[stack.length-1];};_proto.start=function start(item){var newItem={};if(item.keyHash){newItem.key=item.keyHash;newItem.instance=item;}else{newItem.key=item.cacheKey;newItem.cache=item;}if(this.ecosystem._mods.evaluationFinished){newItem.start=perf.now();}stack.push(newItem);// all stores created during evaluation automatically belong to the ecosystem\n_zedux_core__WEBPACK_IMPORTED_MODULE_2__/* .Store._scheduler */ .y._scheduler=this.ecosystem._scheduler;};return EvaluationStack;}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2633\n")},1968:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "h": function() { return /* binding */ Atom; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4578);\n/* harmony import */ var _zedux_react_factories_atom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5965);\n/* harmony import */ var _instances_AtomInstance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4985);\n/* harmony import */ var _AtomBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3789);\nvar Atom=/*#__PURE__*/function(_AtomBase){(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_inheritsLoose_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(Atom,_AtomBase);function Atom(){return _AtomBase.apply(this,arguments)||this;}var _proto=Atom.prototype;/**\n   * This method should be overridden when creating custom atom classes that\n   * create a custom atom instance class. Return a new instance of your atom\n   * instance class.\n   */_proto._createInstance=function _createInstance(ecosystem,keyHash,params){return new _instances_AtomInstance__WEBPACK_IMPORTED_MODULE_1__/* .AtomInstance */ .p(ecosystem,this,keyHash,params);};_proto.getKeyHash=function getKeyHash(ecosystem,params){var base=this.key;if(!(params!=null&&params.length))return base;return base+"-"+ecosystem._idGenerator.hashParams(params,ecosystem.complexParams);};_proto.override=function override(newValue){return (0,_zedux_react_factories_atom__WEBPACK_IMPORTED_MODULE_2__/* .atom */ .c)(this.key,newValue,this._config);};return Atom;}(_AtomBase__WEBPACK_IMPORTED_MODULE_3__/* .AtomBase */ .H);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk2OC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT08sR0FBTUcsS0FBSSxnU0FjZjtBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBSkUsT0FLT0MsZUFBZSxDQUF0Qix5QkFDRUMsU0FBb0IsQ0FDcEJDLE9BQWUsQ0FDZkMsTUFBYyxDQUNnRCxDQUM5RCxNQUFPLElBQUlOLENBQUFBLDBFQUFZLENBQ3JCSSxTQUFTLENBQ1QsSUFBSSxDQUNKQyxPQUFPLENBQ1BDLE1BQU0sQ0FDUCxDQUNILENBQUMsUUFFTUMsVUFBVSxDQUFqQixvQkFBa0JILFNBQW9CLENBQUVFLE1BQWUsQ0FBRSxDQUN2RCxHQUFNRSxLQUFJLENBQUcsSUFBSSxDQUFDQyxHQUFHLENBRXJCLEdBQUksRUFBQ0gsTUFBTSxRQUFOQSxNQUFNLENBQUVJLE1BQU0sRUFBRSxNQUFPRixLQUFJLENBRWhDLE1BQVVBLEtBQUksS0FBSUosU0FBUyxDQUFDTyxZQUFZLENBQUNDLFVBQVUsQ0FDakROLE1BQU0sQ0FDTkYsU0FBUyxDQUFDUyxhQUFhLENBQ3hCLENBQ0gsQ0FBQyxRQUVNQyxRQUFRLENBQWYsa0JBQ0VDLFFBQTRFLENBQzVFLENBQ0EsTUFBT2hCLENBQUFBLDBFQUFJLENBQUMsSUFBSSxDQUFDVSxHQUFHLENBQUVNLFFBQVEsQ0FBRSxJQUFJLENBQUNDLE9BQU8sQ0FBQyxDQUMvQyxDQUFDLGVBekNPZix3REFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2NsYXNzZXMvYXRvbXMvQXRvbS50cz9hYzI5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgeyBhdG9tIH0gZnJvbSAnQHplZHV4L3JlYWN0L2ZhY3Rvcmllcy9hdG9tJ1xuaW1wb3J0IHsgQXRvbUFwaVByb21pc2UsIEF0b21WYWx1ZU9yRmFjdG9yeSB9IGZyb20gJ0B6ZWR1eC9yZWFjdC90eXBlcydcbmltcG9ydCB7IEF0b21JbnN0YW5jZSB9IGZyb20gJy4uL2luc3RhbmNlcy9BdG9tSW5zdGFuY2UnXG5pbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuLi9FY29zeXN0ZW0nXG5pbXBvcnQgeyBBdG9tQmFzZSB9IGZyb20gJy4vQXRvbUJhc2UnXG5cbmV4cG9ydCBjbGFzcyBBdG9tPFxuICBTdGF0ZSxcbiAgUGFyYW1zIGV4dGVuZHMgYW55W10sXG4gIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZTxTdGF0ZT4sXG4gIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2Vcbj4gZXh0ZW5kcyBBdG9tQmFzZTxcbiAgU3RhdGUsXG4gIFBhcmFtcyxcbiAgRXhwb3J0cyxcbiAgU3RvcmVUeXBlLFxuICBQcm9taXNlVHlwZSxcbiAgQXRvbUluc3RhbmNlPFN0YXRlLCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG4+IHtcbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVycmlkZGVuIHdoZW4gY3JlYXRpbmcgY3VzdG9tIGF0b20gY2xhc3NlcyB0aGF0XG4gICAqIGNyZWF0ZSBhIGN1c3RvbSBhdG9tIGluc3RhbmNlIGNsYXNzLiBSZXR1cm4gYSBuZXcgaW5zdGFuY2Ugb2YgeW91ciBhdG9tXG4gICAqIGluc3RhbmNlIGNsYXNzLlxuICAgKi9cbiAgcHVibGljIF9jcmVhdGVJbnN0YW5jZShcbiAgICBlY29zeXN0ZW06IEVjb3N5c3RlbSxcbiAgICBrZXlIYXNoOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBQYXJhbXNcbiAgKTogQXRvbUluc3RhbmNlPFN0YXRlLCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+IHtcbiAgICByZXR1cm4gbmV3IEF0b21JbnN0YW5jZTxTdGF0ZSwgUGFyYW1zLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPihcbiAgICAgIGVjb3N5c3RlbSxcbiAgICAgIHRoaXMsXG4gICAgICBrZXlIYXNoLFxuICAgICAgcGFyYW1zXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGdldEtleUhhc2goZWNvc3lzdGVtOiBFY29zeXN0ZW0sIHBhcmFtcz86IFBhcmFtcykge1xuICAgIGNvbnN0IGJhc2UgPSB0aGlzLmtleVxuXG4gICAgaWYgKCFwYXJhbXM/Lmxlbmd0aCkgcmV0dXJuIGJhc2VcblxuICAgIHJldHVybiBgJHtiYXNlfS0ke2Vjb3N5c3RlbS5faWRHZW5lcmF0b3IuaGFzaFBhcmFtcyhcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVjb3N5c3RlbS5jb21wbGV4UGFyYW1zXG4gICAgKX1gXG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUoXG4gICAgbmV3VmFsdWU6IEF0b21WYWx1ZU9yRmFjdG9yeTxTdGF0ZSwgUGFyYW1zLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPlxuICApIHtcbiAgICByZXR1cm4gYXRvbSh0aGlzLmtleSwgbmV3VmFsdWUsIHRoaXMuX2NvbmZpZylcbiAgfVxufVxuIl0sIm5hbWVzIjpbImF0b20iLCJBdG9tSW5zdGFuY2UiLCJBdG9tQmFzZSIsIkF0b20iLCJfY3JlYXRlSW5zdGFuY2UiLCJlY29zeXN0ZW0iLCJrZXlIYXNoIiwicGFyYW1zIiwiZ2V0S2V5SGFzaCIsImJhc2UiLCJrZXkiLCJsZW5ndGgiLCJfaWRHZW5lcmF0b3IiLCJoYXNoUGFyYW1zIiwiY29tcGxleFBhcmFtcyIsIm92ZXJyaWRlIiwibmV3VmFsdWUiLCJfY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1968\n')},3789:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "H": function() { return /* binding */ AtomBase; }\n/* harmony export */ });\nvar AtomBase=function AtomBase(key,_value,_config){this.key=key;this._value=_value;this._config=_config;this.dehydrate=_config==null?void 0:_config.dehydrate;this.flags=_config==null?void 0:_config.flags;this.hydrate=_config==null?void 0:_config.hydrate;this.manualHydration=_config==null?void 0:_config.manualHydration;this.ttl=_config==null?void 0:_config.ttl;// const map = new WeakMap();\n// map.set(newAtomInstance, true);\n// map.set({ control: true }, true);\n// console.log({ key: atom.key, map });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc4OS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFRTyxHQUFlQSxTQUFRLENBb0I1QixrQkFDa0JDLEdBQVcsQ0FDWEMsTUFNZixDQUNrQkMsT0FBMkIsQ0FDOUMsTUFUZ0JGLEdBQVcsQ0FBWEEsR0FBVyxNQUNYQyxNQU1mLENBTmVBLE1BTWYsTUFDa0JDLE9BQTJCLENBQTNCQSxPQUEyQixDQUU5QyxJQUFJLENBQUNDLFNBQVMsQ0FBR0QsT0FBTyxjQUFQQSxPQUFPLENBQUVDLFNBQVMsQ0FDbkMsSUFBSSxDQUFDQyxLQUFLLENBQUdGLE9BQU8sY0FBUEEsT0FBTyxDQUFFRSxLQUFLLENBQzNCLElBQUksQ0FBQ0MsT0FBTyxDQUFHSCxPQUFPLGNBQVBBLE9BQU8sQ0FBRUcsT0FBTyxDQUMvQixJQUFJLENBQUNDLGVBQWUsQ0FBR0osT0FBTyxjQUFQQSxPQUFPLENBQUVJLGVBQWUsQ0FDL0MsSUFBSSxDQUFDQyxHQUFHLENBQUdMLE9BQU8sY0FBUEEsT0FBTyxDQUFFSyxHQUFHLENBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2NsYXNzZXMvYXRvbXMvQXRvbUJhc2UudHM/NTYyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0B6ZWR1eC9jb3JlJ1xuaW1wb3J0IHtcbiAgQXRvbUNvbmZpZyxcbiAgQXRvbUFwaVByb21pc2UsXG4gIEF0b21WYWx1ZU9yRmFjdG9yeSxcbn0gZnJvbSAnQHplZHV4L3JlYWN0L3R5cGVzJ1xuaW1wb3J0IHsgRWNvc3lzdGVtIH0gZnJvbSAnLi4vRWNvc3lzdGVtJ1xuaW1wb3J0IHsgQXRvbUluc3RhbmNlIH0gZnJvbSAnLi4vaW5zdGFuY2VzL0F0b21JbnN0YW5jZSdcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBdG9tQmFzZTxcbiAgU3RhdGUsXG4gIFBhcmFtcyBleHRlbmRzIGFueVtdLFxuICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PixcbiAgU3RvcmVUeXBlIGV4dGVuZHMgU3RvcmU8U3RhdGU+LFxuICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlLFxuICBJbnN0YW5jZVR5cGUgZXh0ZW5kcyBBdG9tSW5zdGFuY2U8XG4gICAgU3RhdGUsXG4gICAgUGFyYW1zLFxuICAgIEV4cG9ydHMsXG4gICAgU3RvcmVUeXBlLFxuICAgIFByb21pc2VUeXBlXG4gID5cbj4ge1xuICBwdWJsaWMgcmVhZG9ubHkgZGVoeWRyYXRlPzogQXRvbUNvbmZpZzxTdGF0ZT5bJ2RlaHlkcmF0ZSddXG4gIHB1YmxpYyByZWFkb25seSBmbGFncz86IHN0cmluZ1tdXG4gIHB1YmxpYyByZWFkb25seSBoeWRyYXRlPzogQXRvbUNvbmZpZzxTdGF0ZT5bJ2h5ZHJhdGUnXVxuICBwdWJsaWMgcmVhZG9ubHkgbWFudWFsSHlkcmF0aW9uPzogYm9vbGVhblxuICBwdWJsaWMgcmVhZG9ubHkgdHRsPzogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGtleTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBfdmFsdWU6IEF0b21WYWx1ZU9yRmFjdG9yeTxcbiAgICAgIFN0YXRlLFxuICAgICAgUGFyYW1zLFxuICAgICAgRXhwb3J0cyxcbiAgICAgIFN0b3JlVHlwZSxcbiAgICAgIFByb21pc2VUeXBlXG4gICAgPixcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX2NvbmZpZz86IEF0b21Db25maWc8U3RhdGU+XG4gICkge1xuICAgIHRoaXMuZGVoeWRyYXRlID0gX2NvbmZpZz8uZGVoeWRyYXRlXG4gICAgdGhpcy5mbGFncyA9IF9jb25maWc/LmZsYWdzXG4gICAgdGhpcy5oeWRyYXRlID0gX2NvbmZpZz8uaHlkcmF0ZVxuICAgIHRoaXMubWFudWFsSHlkcmF0aW9uID0gX2NvbmZpZz8ubWFudWFsSHlkcmF0aW9uXG4gICAgdGhpcy50dGwgPSBfY29uZmlnPy50dGxcblxuICAgIC8vIGNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgLy8gbWFwLnNldChuZXdBdG9tSW5zdGFuY2UsIHRydWUpO1xuICAgIC8vIG1hcC5zZXQoeyBjb250cm9sOiB0cnVlIH0sIHRydWUpO1xuICAgIC8vIGNvbnNvbGUubG9nKHsga2V5OiBhdG9tLmtleSwgbWFwIH0pO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IF9jcmVhdGVJbnN0YW5jZShcbiAgICBlY29zeXN0ZW06IEVjb3N5c3RlbSxcbiAgICBrZXlIYXNoOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBQYXJhbXNcbiAgKTogSW5zdGFuY2VUeXBlXG5cbiAgcHVibGljIGFic3RyYWN0IGdldEtleUhhc2goZWNvc3lzdGVtOiBFY29zeXN0ZW0sIHBhcmFtcz86IFBhcmFtcyk6IHN0cmluZ1xufVxuIl0sIm5hbWVzIjpbIkF0b21CYXNlIiwia2V5IiwiX3ZhbHVlIiwiX2NvbmZpZyIsImRlaHlkcmF0ZSIsImZsYWdzIiwiaHlkcmF0ZSIsIm1hbnVhbEh5ZHJhdGlvbiIsInR0bCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3789\n')},4985:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"p\": function() { return /* binding */ AtomInstance; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(1002);\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPrimitive.js\n\nfunction _toPrimitive(input, hint) {\n  if ((0,esm_typeof/* default */.Z)(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if ((0,esm_typeof/* default */.Z)(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js\n\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return (0,esm_typeof/* default */.Z)(key) === \"symbol\" ? key : String(key);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(4578);\n// EXTERNAL MODULE: ../packages/core/src/api/is.ts\nvar is = __webpack_require__(9283);\n// EXTERNAL MODULE: ../packages/core/src/api/createStore.ts + 4 modules\nvar createStore = __webpack_require__(1694);\n// EXTERNAL MODULE: ../packages/react/src/utils/promiseUtils.ts\nvar promiseUtils = __webpack_require__(1881);\n// EXTERNAL MODULE: ../packages/react/src/classes/AtomApi.ts\nvar AtomApi = __webpack_require__(2448);\n// EXTERNAL MODULE: ../packages/react/src/classes/instances/AtomInstanceBase.ts\nvar AtomInstanceBase = __webpack_require__(4987);\n// EXTERNAL MODULE: ../packages/react/src/utils/plugin-actions.ts\nvar plugin_actions = __webpack_require__(3299);\n;// CONCATENATED MODULE: ../packages/react/src/classes/instances/AtomInstance.ts\nvar StateType;(function(StateType){StateType[StateType[\"Store\"]=0]=\"Store\";StateType[StateType[\"Value\"]=1]=\"Value\";})(StateType||(StateType={}));var getStateType=function getStateType(val){if((0,is.is)(val,createStore/* Store */.y))return StateType.Store;return StateType.Value;};var getStateStore=function getStateStore(factoryResult){var stateType=getStateType(factoryResult);var stateStore=stateType===StateType.Store?factoryResult:(0,createStore/* createStore */.M)();// define how we populate our store (doesn't apply to user-supplied stores)\nif(stateType===StateType.Value){stateStore.setState(typeof factoryResult==='function'?function(){return factoryResult;}:factoryResult);}return[stateType,stateStore];};var AtomInstance=/*#__PURE__*/function(_AtomInstanceBase){(0,inheritsLoose/* default */.Z)(AtomInstance,_AtomInstanceBase);function AtomInstance(ecosystem,atom,keyHash,params){var _this;_this=_AtomInstanceBase.call(this)||this;// lol\n_this.activeState='Initializing';_this._createdAt=Date.now();_this._nextEvaluationReasons=[];_this.dispatch=function(action){return _this.store.dispatch(action);};_this.invalidate=function(operation,sourceType){return _this._invalidate(operation,sourceType);};_this.setState=function(settable,meta){return _this.store.setState(settable,meta);};_this.setStateDeep=function(settable,meta){return _this.store.setStateDeep(settable,meta);};_this._scheduleEvaluation=function(reason,shouldSetTimeout){// TODO: Any calls in this case probably indicate a memory leak on the\n// user's part. Notify them. TODO: Can we pause evaluations while\n// activeState is Stale (and should we just always evaluate once when\n// waking up a stale atom)?\nif(_this.activeState==='Destroyed')return;_this._nextEvaluationReasons.push(reason);if(_this._nextEvaluationReasons.length>1)return;// job already scheduled\n_this.ecosystem._scheduler.schedule({keyHash:_this.keyHash,task:_this.evaluationTask,type:2// EvaluateGraphNode (2)\n},shouldSetTimeout);};_this.evaluationTask=function(){return _this._evaluationTask();};_this.ecosystem=ecosystem;_this.atom=atom;_this.keyHash=keyHash;_this.params=params;_this.exports=_assertThisInitialized(_this).exports;_this.promise=_assertThisInitialized(_this).promise;_this.store=_assertThisInitialized(_this).store;_this._promiseStatus=_assertThisInitialized(_this)._promiseStatus;return _this;}/**\n   * Detach this atom instance from the ecosystem and clean up all graph edges\n   * and other subscriptions/effects created by this atom instance.\n   *\n   * Destruction will bail out if this atom instance still has dependents. Pass\n   * `true` to force-destroy the atom instance anyway.\n   */var _proto=AtomInstance.prototype;_proto.destroy=function destroy(force){var _this$ecosystem$_grap,_this$_cancelDestruct,_this$_injectors,_this$_subscription;if(this.activeState==='Destroyed')return;// If we're not force-destroying, don't destroy if there are dependents\nif(!force&&Object.keys(((_this$ecosystem$_grap=this.ecosystem._graph.nodes[this.keyHash])==null?void 0:_this$ecosystem$_grap.dependents)||{}).length){return;}(_this$_cancelDestruct=this._cancelDestruction)==null?void 0:_this$_cancelDestruct.call(this);this._cancelDestruction=undefined;this._setActiveState('Destroyed');if(this._nextEvaluationReasons.length){this.ecosystem._scheduler.unschedule(this.evaluationTask);}// Clean up effect injectors first, then everything else\nvar nonEffectInjectors=[];(_this$_injectors=this._injectors)==null?void 0:_this$_injectors.forEach(function(injector){if(injector.type!=='@@zedux/effect'){nonEffectInjectors.push(injector);return;}injector.cleanup==null?void 0:injector.cleanup();});nonEffectInjectors.forEach(function(injector){injector.cleanup==null?void 0:injector.cleanup();});this.ecosystem._graph.removeDependencies(this.keyHash);(_this$_subscription=this._subscription)==null?void 0:_this$_subscription.unsubscribe();this.ecosystem._destroyAtomInstance(this.keyHash);}/**\n   * An alias for `.store.dispatch()`\n   */;/**\n   * An alias for `instance.store.getState()`. Returns the current state of this\n   * atom instance's store.\n   */_proto.getState=function getState(){return this.store.getState();}// a small, memory-efficient bound function property we can pass around\n;_proto._init=function _init(){var _this2=this;var factoryResult=this._doEvaluate();var _getStateStore=getStateStore(factoryResult);this._stateType=_getStateStore[0];this.store=_getStateStore[1];this._subscription=this.store.subscribe(function(newState,oldState,action){// buffer updates (with cache size of 1) if this instance is currently\n// evaluating\nif(_this2.ecosystem._evaluationStack.isEvaluating(_this2.keyHash)){_this2._bufferedUpdate={newState:newState,oldState:oldState,action:action};return;}_this2._handleStateChange(newState,oldState,action);});this._setActiveState('Active');// hydrate if possible\nif(!this.ecosystem.hydration||this.atom.manualHydration)return;var hydration=this.ecosystem._consumeHydration(this);if(typeof hydration==='undefined')return;this.store.setState(hydration);}/**\n   * When a standard atom instance's refCount hits 0 and a ttl is set, we set a\n   * timeout to destroy this atom instance.\n   */;_proto._scheduleDestruction=function _scheduleDestruction(){var _this3=this;// the atom is already scheduled for destruction or destroyed\nif(this.activeState!=='Active')return;this._setActiveState('Stale');var ttl=this._getTtl();if(ttl==null||ttl===-1)return;if(ttl===0)return this.destroy();if(typeof ttl==='number'){// ttl is > 0; schedule destruction\nvar timeoutId=setTimeout(function(){_this3._cancelDestruction=undefined;_this3.destroy();},ttl);// TODO: dispatch an action over stateStore for these mutations\nthis._cancelDestruction=function(){_this3._cancelDestruction=undefined;clearTimeout(timeoutId);};return;}if(typeof ttl.then==='function'){var isCanceled=false;ttl.then(function(){_this3._cancelDestruction=undefined;if(!isCanceled)_this3.destroy();});this._cancelDestruction=function(){_this3._cancelDestruction=undefined;isCanceled=true;};return;}// ttl is an observable; destroy as soon as it emits\nvar subscription=ttl.subscribe(function(){_this3._cancelDestruction=undefined;_this3.destroy();});this._cancelDestruction=function(){_this3._cancelDestruction=undefined;subscription.unsubscribe();};};_proto._doEvaluate=function _doEvaluate(){this._nextInjectors=[];var newFactoryResult;this.ecosystem._evaluationStack.start(this);this.ecosystem._graph.bufferUpdates(this.keyHash);try{newFactoryResult=this._evaluate();}catch(err){this._nextInjectors.forEach(function(injector){injector.cleanup==null?void 0:injector.cleanup();});this._nextInjectors=undefined;this.ecosystem._graph.destroyBuffer();throw err;}finally{this.ecosystem._evaluationStack.finish();// even if evaluation errored, we need to update dependents if the store's\n// state changed\nif(this._bufferedUpdate){this._handleStateChange(this._bufferedUpdate.newState,this._bufferedUpdate.oldState,this._bufferedUpdate.action);this._bufferedUpdate=undefined;}this._prevEvaluationReasons=this._nextEvaluationReasons;this._nextEvaluationReasons=[];}this._injectors=this._nextInjectors;this._nextInjectors=undefined;this.ecosystem._graph.flushUpdates();return newFactoryResult;}/**\n   * A standard atom's value can be one of:\n   *\n   * - A raw value\n   * - A Zedux store\n   * - A function that returns a raw value\n   * - A function that returns a Zedux store\n   * - A function that returns an AtomApi\n   */;_proto._evaluate=function _evaluate(){var _value=this.atom._value;if(typeof _value!=='function'){return _value;}try{var _this$api$value;var val=_value.apply(void 0,this.params);if(!(0,is.is)(val,AtomApi/* AtomApi */.u))return val;this.api=val;// Exports can only be set on initial evaluation\nif(this.activeState==='Initializing'){this.exports=this.api.exports;}// if api.value is a promise, we ignore api.promise\nif(typeof((_this$api$value=this.api.value)==null?void 0:_this$api$value.then)==='function'){return this._setPromise(this.api.value,true);}else if(this.api.promise){this._setPromise(this.api.promise);}return this.api.value;}catch(err){console.error(\"Zedux: Error while evaluating atom \\\"\"+this.atom.key+\"\\\" with params:\",this.params,err);throw err;}};_proto._evaluationTask=function _evaluationTask(){var newFactoryResult=this._doEvaluate();var newStateType=getStateType(newFactoryResult);if( true&&newStateType!==this._stateType){throw new Error(\"Zedux: atom factory for atom \\\"\"+this.atom.key+\"\\\" returned a different type than the previous evaluation. This can happen if the atom returned a store initially but then returned a non-store value on a later evaluation or vice versa\");}if( true&&newStateType===StateType.Store&&newFactoryResult!==this.store){throw new Error(\"Zedux: atom factory for atom \\\"\"+this.atom.key+\"\\\" returned a different store. Did you mean to use `injectStore()`, or `injectMemo()`?\");}// there is no way to cause an evaluation loop when the StateType is Value\nif(newStateType===StateType.Value){this.store.setState(typeof newFactoryResult==='function'?function(){return newFactoryResult;}:newFactoryResult);}};_proto._getTtl=function _getTtl(){var _this$api;if(((_this$api=this.api)==null?void 0:_this$api.ttl)==null){var _this$atom$ttl;return(_this$atom$ttl=this.atom.ttl)!=null?_this$atom$ttl:this.ecosystem.defaultTtl;}// this atom instance set its own ttl\nvar ttl=this.api.ttl;return typeof ttl==='function'?ttl():ttl;};_proto._handleStateChange=function _handleStateChange(newState,oldState,action){this.ecosystem._graph.scheduleDependents(this.keyHash,this._nextEvaluationReasons,newState,oldState,false);if(this.ecosystem._mods.stateChanged){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.stateChanged */.V.stateChanged({action:action,instance:this,newState:newState,oldState:oldState,reasons:this._nextEvaluationReasons}));}// run the scheduler synchronously after any atom instance state update\nthis.ecosystem._scheduler.flush();};_proto._invalidate=function _invalidate(operation,sourceType){if(operation===void 0){operation='invalidate';}if(sourceType===void 0){sourceType='External';}this._scheduleEvaluation({operation:operation,sourceType:sourceType,type:'cache invalidated'},false);// run the scheduler synchronously after invalidation\nthis.ecosystem._scheduler.flush();};_proto._setActiveState=function _setActiveState(newActiveState){var oldActiveState=this.activeState;this.activeState=newActiveState;if(this.ecosystem._mods.activeStateChanged){this.ecosystem.modBus.dispatch(plugin_actions/* pluginActions.activeStateChanged */.V.activeStateChanged({instance:this,newActiveState:newActiveState,oldActiveState:oldActiveState}));}};_proto._setPromise=function _setPromise(promise,isStateUpdater){var _this4=this;if(promise===this.promise)return this.store.getState();this.promise=promise;// since we're the first to chain off the returned promise, we don't need to\n// track the chained promise - it will run first, before React suspense's\n// `.then` on the thrown promise, for example\npromise.then(function(data){if(_this4.promise!==promise)return;_this4._promiseStatus='success';if(!isStateUpdater)return;_this4.store.setState((0,promiseUtils/* getSuccessPromiseState */.W2)(data));}).catch(function(error){if(_this4.promise!==promise)return;_this4._promiseStatus='error';_this4._promiseError=error;if(!isStateUpdater)return;_this4.store.setState((0,promiseUtils/* getErrorPromiseState */.bG)(error));});var state=(0,promiseUtils/* getInitialPromiseState */.KF)();this._promiseStatus=state.status;this.ecosystem._graph.scheduleDependents(this.keyHash,this._nextEvaluationReasons,undefined,undefined,true,'promise changed','Updated',true);return state;};_createClass(AtomInstance,[{key:\"_infusedSetter\",get:function get(){var _this5=this;if(this._set)return this._set;var setState=function setState(settable,meta){return _this5.setState(settable,meta);};return this._set=Object.assign(setState,this.exports);}}]);return AtomInstance;}(AtomInstanceBase/* AtomInstanceBase */.T);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4985\n")},4987:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "T": function() { return /* binding */ AtomInstanceBase; }\n/* harmony export */ });\n/* harmony import */ var _zedux_react_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(395);\nvar AtomInstanceBase=/*#__PURE__*/function(){function AtomInstanceBase(){}var _proto=AtomInstanceBase.prototype;_proto.addDependent=function addDependent(_temp){var _this=this;var _ref=_temp===void 0?{}:_temp,callback=_ref.callback,_ref$operation=_ref.operation,operation=_ref$operation===void 0?\'addDependent\':_ref$operation;var id=this.ecosystem._idGenerator.generateNodeId();this.ecosystem._graph.addEdge(id,this.keyHash,operation,_zedux_react_utils__WEBPACK_IMPORTED_MODULE_0__/* .Explicit */ .Jy|_zedux_react_utils__WEBPACK_IMPORTED_MODULE_0__/* .External */ .RQ,callback);return function(){return _this.ecosystem._graph.removeEdge(id,_this.keyHash);};};return AtomInstanceBase;}();AtomInstanceBase.$$typeof=Symbol.for(_zedux_react_utils__WEBPACK_IMPORTED_MODULE_0__/* .prefix */ .O4+"/AtomInstanceBase");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk4Ny5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBaUJPLEdBQWVHLGlCQUFnQixtR0EwQjdCQyxZQUFZLENBQW5CLDRCQU1pQix3Q0FBYixDQUFDLENBQUMsT0FMSkMsUUFBUSxNQUFSQSxRQUFRLHFCQUNSQyxTQUFTLENBQVRBLFNBQVMseUJBQUcsY0FBYyxnQkFLMUIsR0FBTUMsR0FBRSxDQUFHLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxZQUFZLENBQUNDLGNBQWMsRUFBRSxDQUN2RCxJQUFJLENBQUNGLFNBQVMsQ0FBQ0csTUFBTSxDQUFDQyxPQUFPLENBQzNCTCxFQUFFLENBQ0YsSUFBSSxDQUFDTSxPQUFPLENBQ1pQLFNBQVMsQ0FDVE4sa0VBQVEsQ0FBR0Msa0VBQVEsQ0FDbkJJLFFBQVEsQ0FDVCxDQUVELE1BQU8sa0JBQU0sTUFBSSxDQUFDRyxTQUFTLENBQUNHLE1BQU0sQ0FBQ0csVUFBVSxDQUFDUCxFQUFFLENBQUUsS0FBSSxDQUFDTSxPQUFPLENBQUMsR0FDakUsQ0FBQyw2QkEzQ21CVixnQkFBZ0IsQ0FLdEJZLFFBQVEsQ0FBR0MsTUFBTSxDQUFDQyxHQUFHLENBQUlmLGdFQUFNLHFCQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2NsYXNzZXMvaW5zdGFuY2VzL0F0b21JbnN0YW5jZUJhc2UudHM/YmQ3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBY3RpdmVTdGF0ZSxcbiAgRXZhbHVhdGlvblJlYXNvbixcbiAgQ2xlYW51cCxcbiAgUHJvbWlzZVN0YXR1cyxcbiAgRGVwZW5kZW50Q2FsbGJhY2ssXG59IGZyb20gJ0B6ZWR1eC9yZWFjdC90eXBlcydcbmltcG9ydCB7XG4gIEV4cGxpY2l0LFxuICBFeHRlcm5hbCxcbiAgSW5qZWN0b3JEZXNjcmlwdG9yLFxuICBwcmVmaXgsXG59IGZyb20gJ0B6ZWR1eC9yZWFjdC91dGlscydcbmltcG9ydCB7IEF0b21CYXNlIH0gZnJvbSAnLi4vYXRvbXMvQXRvbUJhc2UnXG5pbXBvcnQgeyBFY29zeXN0ZW0gfSBmcm9tICcuLi9FY29zeXN0ZW0nXG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0B6ZWR1eC9jb3JlJ1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQXRvbUluc3RhbmNlQmFzZTxcbiAgU3RhdGUsXG4gIFBhcmFtcyBleHRlbmRzIGFueVtdLFxuICBBdG9tVHlwZSBleHRlbmRzIEF0b21CYXNlPFN0YXRlLCBQYXJhbXMsIGFueSwgYW55LCBhbnksIGFueT5cbj4ge1xuICBwdWJsaWMgc3RhdGljICQkdHlwZW9mID0gU3ltYm9sLmZvcihgJHtwcmVmaXh9L0F0b21JbnN0YW5jZUJhc2VgKVxuICBwdWJsaWMgYWJzdHJhY3QgYWN0aXZlU3RhdGU6IEFjdGl2ZVN0YXRlXG4gIHB1YmxpYyBhYnN0cmFjdCBhdG9tOiBBdG9tVHlwZVxuICBwdWJsaWMgYWJzdHJhY3QgZWNvc3lzdGVtOiBFY29zeXN0ZW1cbiAgcHVibGljIGFic3RyYWN0IGtleUhhc2g6IHN0cmluZ1xuICBwdWJsaWMgYWJzdHJhY3QgcHJvbWlzZT86IFByb21pc2U8YW55PlxuICBwdWJsaWMgYWJzdHJhY3Qgc3RvcmU6IFN0b3JlPFN0YXRlPlxuXG4gIHB1YmxpYyBhYnN0cmFjdCBfY3JlYXRlZEF0OiBudW1iZXJcbiAgcHVibGljIGFic3RyYWN0IF9pbmplY3RvcnM/OiBJbmplY3RvckRlc2NyaXB0b3JbXVxuICBwdWJsaWMgYWJzdHJhY3QgX3ByZXZFdmFsdWF0aW9uUmVhc29ucz86IEV2YWx1YXRpb25SZWFzb25bXVxuICBwdWJsaWMgYWJzdHJhY3QgX3Byb21pc2VFcnJvcj86IEVycm9yXG4gIHB1YmxpYyBhYnN0cmFjdCBfcHJvbWlzZVN0YXR1cz86IFByb21pc2VTdGF0dXNcblxuICBwdWJsaWMgYWJzdHJhY3QgZGVzdHJveShmb3JjZT86IGJvb2xlYW4pOiB2b2lkXG5cbiAgcHVibGljIGFic3RyYWN0IF9zY2hlZHVsZUV2YWx1YXRpb24oXG4gICAgcmVhc29uOiBFdmFsdWF0aW9uUmVhc29uLFxuICAgIHNob3VsZFNldFRpbWVvdXQ/OiBib29sZWFuXG4gICk6IHZvaWRcblxuICBwdWJsaWMgYWRkRGVwZW5kZW50KHtcbiAgICBjYWxsYmFjayxcbiAgICBvcGVyYXRpb24gPSAnYWRkRGVwZW5kZW50JyxcbiAgfToge1xuICAgIGNhbGxiYWNrPzogRGVwZW5kZW50Q2FsbGJhY2tcbiAgICBvcGVyYXRpb24/OiBzdHJpbmdcbiAgfSA9IHt9KTogQ2xlYW51cCB7XG4gICAgY29uc3QgaWQgPSB0aGlzLmVjb3N5c3RlbS5faWRHZW5lcmF0b3IuZ2VuZXJhdGVOb2RlSWQoKVxuICAgIHRoaXMuZWNvc3lzdGVtLl9ncmFwaC5hZGRFZGdlKFxuICAgICAgaWQsXG4gICAgICB0aGlzLmtleUhhc2gsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBFeHBsaWNpdCB8IEV4dGVybmFsLFxuICAgICAgY2FsbGJhY2tcbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4gdGhpcy5lY29zeXN0ZW0uX2dyYXBoLnJlbW92ZUVkZ2UoaWQsIHRoaXMua2V5SGFzaClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkV4cGxpY2l0IiwiRXh0ZXJuYWwiLCJwcmVmaXgiLCJBdG9tSW5zdGFuY2VCYXNlIiwiYWRkRGVwZW5kZW50IiwiY2FsbGJhY2siLCJvcGVyYXRpb24iLCJpZCIsImVjb3N5c3RlbSIsIl9pZEdlbmVyYXRvciIsImdlbmVyYXRlTm9kZUlkIiwiX2dyYXBoIiwiYWRkRWRnZSIsImtleUhhc2giLCJyZW1vdmVFZGdlIiwiJCR0eXBlb2YiLCJTeW1ib2wiLCJmb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4987\n')},552:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "h": function() { return /* binding */ api; }\n/* harmony export */ });\n/* harmony import */ var _classes_AtomApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2448);\nvar api=function api(value){return new _classes_AtomApi__WEBPACK_IMPORTED_MODULE_0__/* .AtomApi */ .u(value);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFJTyxHQUFNQyxJQXFDWixDQUFHLFFBckNTQSxJQXFDWixDQU1DQyxLQUEyRSxRQUUzRSxJQUFJRixDQUFBQSw4REFBTyxDQUNURSxLQUFLLENBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9mYWN0b3JpZXMvYXBpLnRzP2EwNGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RvcmUsIFN0b3JlU3RhdGVUeXBlIH0gZnJvbSAnQHplZHV4L2NvcmUnXG5pbXBvcnQgeyBBdG9tQXBpIH0gZnJvbSAnLi4vY2xhc3Nlcy9BdG9tQXBpJ1xuaW1wb3J0IHsgQXRvbUFwaVByb21pc2UgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGFwaToge1xuICAvLyBDdXN0b20gU3RvcmVzXG4gIDxcbiAgICBTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZTxhbnk+ID0gU3RvcmU8YW55PixcbiAgICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZSA9IHVuZGVmaW5lZFxuICA+KFxuICAgIHZhbHVlOlxuICAgICAgfCBTdG9yZVR5cGVcbiAgICAgIHwgQXRvbUFwaTxTdG9yZVN0YXRlVHlwZTxTdG9yZVR5cGU+LCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPlxuICApOiBBdG9tQXBpPFN0b3JlU3RhdGVUeXBlPFN0b3JlVHlwZT4sIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+XG5cbiAgLy8gTm8gVmFsdWVcbiAgPFxuICAgIFN0YXRlID0gdW5kZWZpbmVkLFxuICAgIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4gID4oKTogQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgdW5kZWZpbmVkLCBQcm9taXNlVHlwZT5cblxuICAvLyBObyBTdG9yZVxuICA8XG4gICAgU3RhdGUgPSB1bmRlZmluZWQsXG4gICAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2UgPSB1bmRlZmluZWRcbiAgPihcbiAgICB2YWx1ZTogU3RhdGUgfCBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCB1bmRlZmluZWQsIFByb21pc2VUeXBlPlxuICApOiBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCB1bmRlZmluZWQsIFByb21pc2VUeXBlPlxuXG4gIC8vIENhdGNoLWFsbFxuICA8XG4gICAgU3RhdGUgPSB1bmRlZmluZWQsXG4gICAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPiA9IFN0b3JlPFN0YXRlPixcbiAgICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4gID4oXG4gICAgdmFsdWU6IFN0YXRlIHwgU3RvcmVUeXBlIHwgQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbiAgKTogQXRvbUFwaTxTdGF0ZSwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbn0gPSA8XG4gIFN0YXRlID0gdW5kZWZpbmVkLFxuICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIFN0b3JlVHlwZSBleHRlbmRzIFN0b3JlPFN0YXRlPiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCxcbiAgUHJvbWlzZVR5cGUgZXh0ZW5kcyBBdG9tQXBpUHJvbWlzZSA9IHVuZGVmaW5lZFxuPihcbiAgdmFsdWU/OiBBdG9tQXBpPFN0YXRlLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPiB8IFN0b3JlVHlwZSB8IFN0YXRlXG4pID0+XG4gIG5ldyBBdG9tQXBpKFxuICAgIHZhbHVlIGFzIEF0b21BcGk8U3RhdGUsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+IHwgU3RvcmVUeXBlIHwgU3RhdGVcbiAgKVxuIl0sIm5hbWVzIjpbIkF0b21BcGkiLCJhcGkiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///552\n')},5965:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"c\": function() { return /* binding */ atom; }\n/* harmony export */ });\n/* harmony import */ var _classes_atoms_Atom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1968);\nvar atom=function atom(key,value,config){if( true&&!key){throw new TypeError('Zedux: All atoms must have a key');}return new _classes_atoms_Atom__WEBPACK_IMPORTED_MODULE_0__/* .Atom */ .h(key,value,config);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk2NS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBVU8sR0FBTUMsS0FnRFosQ0FBRyxRQWhEU0EsS0FnRFosQ0FPQ0MsR0FBVyxDQUNYQyxLQUF5RSxDQUN6RUMsTUFBMEIsQ0FDdkIsQ0FDSCxHQUFJQyxLQUFHLEVBQUksQ0FBQ0gsR0FBRyxDQUFFLENBQ2YsS0FBTSxJQUFJSSxVQUFTLENBQUMsa0NBQWtDLENBQUMsQ0FDekQsQ0FFQSxNQUFPLElBQUlOLENBQUFBLDhEQUFJLENBQ2JFLEdBQUcsQ0FDSEMsS0FBSyxDQUNMQyxNQUFNLENBQ1AsQ0FDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvZmFjdG9yaWVzL2F0b20udHM/Njc3MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdG9yZSwgU3RvcmVTdGF0ZVR5cGUgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7XG4gIEF0b21Db25maWcsXG4gIEF0b21BcGlQcm9taXNlLFxuICBBdG9tVmFsdWVPckZhY3RvcnksXG4gIFByb21pc2VTdGF0ZSxcbn0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBBdG9tIH0gZnJvbSAnLi4vY2xhc3Nlcy9hdG9tcy9BdG9tJ1xuaW1wb3J0IHsgQXRvbUFwaSB9IGZyb20gJy4uL2NsYXNzZXMnXG5cbmV4cG9ydCBjb25zdCBhdG9tOiB7XG4gIC8vIFF1ZXJ5IEF0b21zXG4gIDxcbiAgICBTdGF0ZSA9IGFueSxcbiAgICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSA9IFtdLFxuICAgIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgbmV2ZXI+XG4gID4oXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IChcbiAgICAgIC4uLnBhcmFtczogUGFyYW1zXG4gICAgKSA9PiBBdG9tQXBpPFByb21pc2U8U3RhdGU+LCBFeHBvcnRzLCB1bmRlZmluZWQsIGFueT4sXG4gICAgY29uZmlnPzogQXRvbUNvbmZpZzxTdGF0ZT5cbiAgKTogQXRvbTxcbiAgICBQcm9taXNlU3RhdGU8U3RhdGU+LFxuICAgIFBhcmFtcyxcbiAgICBFeHBvcnRzLFxuICAgIFN0b3JlPFByb21pc2VTdGF0ZTxTdGF0ZT4+LFxuICAgIFByb21pc2U8U3RhdGU+XG4gID5cblxuICAvLyBDdXN0b20gU3RvcmVzXG4gIDxcbiAgICBTdG9yZVR5cGUgZXh0ZW5kcyBTdG9yZTxhbnk+ID0gU3RvcmU8YW55PixcbiAgICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSA9IFtdLFxuICAgIEV4cG9ydHMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0gUmVjb3JkPHN0cmluZywgbmV2ZXI+LFxuICAgIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2UgPSB1bmRlZmluZWRcbiAgPihcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogKFxuICAgICAgLi4ucGFyYW1zOiBQYXJhbXNcbiAgICApID0+XG4gICAgICB8IFN0b3JlVHlwZVxuICAgICAgfCBBdG9tQXBpPFN0b3JlU3RhdGVUeXBlPFN0b3JlPiwgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4sXG4gICAgY29uZmlnPzogQXRvbUNvbmZpZzxTdG9yZVN0YXRlVHlwZTxTdG9yZVR5cGU+PlxuICApOiBBdG9tPFN0b3JlU3RhdGVUeXBlPFN0b3JlVHlwZT4sIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cblxuICAvLyBDYXRjaC1hbGxcbiAgPFxuICAgIFN0YXRlID0gYW55LFxuICAgIFBhcmFtcyBleHRlbmRzIGFueVtdID0gW10sXG4gICAgRXhwb3J0cyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4sXG4gICAgU3RvcmVUeXBlIGV4dGVuZHMgU3RvcmU8U3RhdGU+ID0gU3RvcmU8U3RhdGU+LFxuICAgIFByb21pc2VUeXBlIGV4dGVuZHMgQXRvbUFwaVByb21pc2UgPSB1bmRlZmluZWRcbiAgPihcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogQXRvbVZhbHVlT3JGYWN0b3J5PFN0YXRlLCBQYXJhbXMsIEV4cG9ydHMsIFN0b3JlVHlwZSwgUHJvbWlzZVR5cGU+LFxuICAgIGNvbmZpZz86IEF0b21Db25maWc8U3RhdGU+XG4gICk6IEF0b208U3RhdGUsIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT5cbn0gPSA8XG4gIFN0YXRlID0gYW55LFxuICBQYXJhbXMgZXh0ZW5kcyBhbnlbXSA9IFtdLFxuICBFeHBvcnRzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIG5ldmVyPixcbiAgU3RvcmVUeXBlIGV4dGVuZHMgU3RvcmU8U3RhdGU+ID0gU3RvcmU8U3RhdGU+LFxuICBQcm9taXNlVHlwZSBleHRlbmRzIEF0b21BcGlQcm9taXNlID0gdW5kZWZpbmVkXG4+KFxuICBrZXk6IHN0cmluZyxcbiAgdmFsdWU6IEF0b21WYWx1ZU9yRmFjdG9yeTxTdGF0ZSwgUGFyYW1zLCBFeHBvcnRzLCBTdG9yZVR5cGUsIFByb21pc2VUeXBlPixcbiAgY29uZmlnPzogQXRvbUNvbmZpZzxTdGF0ZT5cbikgPT4ge1xuICBpZiAoREVWICYmICFrZXkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdaZWR1eDogQWxsIGF0b21zIG11c3QgaGF2ZSBhIGtleScpXG4gIH1cblxuICByZXR1cm4gbmV3IEF0b208U3RhdGUsIFBhcmFtcywgRXhwb3J0cywgU3RvcmVUeXBlLCBQcm9taXNlVHlwZT4oXG4gICAga2V5LFxuICAgIHZhbHVlLFxuICAgIGNvbmZpZ1xuICApXG59XG4iXSwibmFtZXMiOlsiQXRvbSIsImF0b20iLCJrZXkiLCJ2YWx1ZSIsImNvbmZpZyIsIkRFViIsIlR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5965\n")},2662:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "q": function() { return /* binding */ createEcosystem; }\n/* harmony export */ });\n/* harmony import */ var _classes_Ecosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5092);\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(825);\nvar createEcosystem=function createEcosystem(config){var _config,_internalStore$setSta;if(config===void 0){config={};}if((_config=config)!=null&&_config.id){var _ecosystem=(0,_store__WEBPACK_IMPORTED_MODULE_0__/* .getEcosystem */ .$$)(config.id);if(_ecosystem)return _ecosystem;}var ecosystem=new _classes_Ecosystem__WEBPACK_IMPORTED_MODULE_1__/* .Ecosystem */ .q(config);// yep. Set this here. We\'ll make sure no component can ever be updated\n// synchronously from this call (causing update-during-render react warnings)\n_store__WEBPACK_IMPORTED_MODULE_0__/* .internalStore.setStateDeep */ .Do.setStateDeep((_internalStore$setSta={},_internalStore$setSta[ecosystem.id]=ecosystem,_internalStore$setSta));return ecosystem;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUlPLEdBQU1HLGdCQUFlLENBQUcsUUFBbEJBLGdCQUFlLENBRzFCQyxNQUFnQyxDQUM3QixzQ0FESEEsTUFBZ0MsV0FBaENBLE1BQWdDLENBQUcsQ0FBQyxDQUFDLEVBRXJDLFlBQUlBLE1BQU0sU0FBTixRQUFRQyxFQUFFLENBQUUsQ0FDZCxHQUFNQyxXQUFTLENBQUdMLDhEQUFZLENBQUNHLE1BQU0sQ0FBQ0MsRUFBRSxDQUFDLENBRXpDLEdBQUlDLFVBQVMsQ0FBRSxNQUFPQSxXQUFTLENBQ2pDLENBRUEsR0FBTUEsVUFBUyxDQUFHLEdBQUlOLENBQUFBLGtFQUFTLENBQVVJLE1BQU0sQ0FBQyxDQUVoRDtBQUNBO0FBQ0FGLHFGQUEwQixpREFBSUksU0FBUyxDQUFDRCxFQUFFLEVBQUdDLFNBQVMsd0JBQUcsQ0FFekQsTUFBT0EsVUFBUyxDQUNsQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvZmFjdG9yaWVzL2NyZWF0ZUVjb3N5c3RlbS50cz8wODE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVjb3N5c3RlbSB9IGZyb20gJy4uL2NsYXNzZXMvRWNvc3lzdGVtJ1xuaW1wb3J0IHsgZ2V0RWNvc3lzdGVtLCBpbnRlcm5hbFN0b3JlIH0gZnJvbSAnLi4vc3RvcmUnXG5pbXBvcnQgeyBFY29zeXN0ZW1Db25maWcgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVjb3N5c3RlbSA9IDxcbiAgQ29udGV4dCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQgPSBhbnlcbj4oXG4gIGNvbmZpZzogRWNvc3lzdGVtQ29uZmlnPENvbnRleHQ+ID0ge31cbikgPT4ge1xuICBpZiAoY29uZmlnPy5pZCkge1xuICAgIGNvbnN0IGVjb3N5c3RlbSA9IGdldEVjb3N5c3RlbShjb25maWcuaWQpXG5cbiAgICBpZiAoZWNvc3lzdGVtKSByZXR1cm4gZWNvc3lzdGVtXG4gIH1cblxuICBjb25zdCBlY29zeXN0ZW0gPSBuZXcgRWNvc3lzdGVtPENvbnRleHQ+KGNvbmZpZylcblxuICAvLyB5ZXAuIFNldCB0aGlzIGhlcmUuIFdlJ2xsIG1ha2Ugc3VyZSBubyBjb21wb25lbnQgY2FuIGV2ZXIgYmUgdXBkYXRlZFxuICAvLyBzeW5jaHJvbm91c2x5IGZyb20gdGhpcyBjYWxsIChjYXVzaW5nIHVwZGF0ZS1kdXJpbmctcmVuZGVyIHJlYWN0IHdhcm5pbmdzKVxuICBpbnRlcm5hbFN0b3JlLnNldFN0YXRlRGVlcCh7IFtlY29zeXN0ZW0uaWRdOiBlY29zeXN0ZW0gfSlcblxuICByZXR1cm4gZWNvc3lzdGVtXG59XG4iXSwibmFtZXMiOlsiRWNvc3lzdGVtIiwiZ2V0RWNvc3lzdGVtIiwiaW50ZXJuYWxTdG9yZSIsImNyZWF0ZUVjb3N5c3RlbSIsImNvbmZpZyIsImlkIiwiZWNvc3lzdGVtIiwic2V0U3RhdGVEZWVwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2662\n')},3870:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "v": function() { return /* binding */ createInjector; }\n/* harmony export */ });\n/* harmony import */ var _classes_EvaluationStack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2633);\nvar createInjector=function createInjector(operation,first,next){var type;var injector=function injector(){var _instance$_injectors,_instance$_nextInject2,_instance$_nextInject3;var instance=(0,_classes_EvaluationStack__WEBPACK_IMPORTED_MODULE_0__/* .readInstance */ .i)();for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(instance.activeState===\'Initializing\'){var _instance$_nextInject;var _descriptor=first.apply(void 0,[instance].concat(args));type=_descriptor.type;(_instance$_nextInject=instance._nextInjectors)==null?void 0:_instance$_nextInject.push(_descriptor);return _descriptor.result;}var prevDescriptor=(_instance$_injectors=instance._injectors)==null?void 0:_instance$_injectors[(_instance$_nextInject2=instance._nextInjectors)==null?void 0:_instance$_nextInject2.length];if( true&&(!prevDescriptor||prevDescriptor.type!==type)){throw new Error("Zedux: "+operation+" in atom \\""+instance.atom.key+"\\" - injectors cannot be added, removed, or reordered");}var descriptor=next?next.apply(void 0,[prevDescriptor,instance].concat(args)):prevDescriptor;(_instance$_nextInject3=instance._nextInjectors)==null?void 0:_instance$_nextInject3.push(descriptor);return descriptor.result;};return injector;};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3MC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBSU8sR0FBTUMsZUFBYyxDQUFHLFFBQWpCQSxlQUFjLENBSXpCQyxTQUFpQixDQUNqQkMsS0FBdUQsQ0FDdkRDLElBQTBFLENBQ3ZFLENBQ0gsR0FBSUMsS0FBWSxDQUVoQixHQUFNQyxTQUFRLENBQUcsUUFBWEEsU0FBUSxFQUFtQix3RUFDL0IsR0FBTUMsU0FBUSxDQUFHUCwrRUFBWSxFQUFFLCtCQURaUSxJQUFJLDBDQUFKQSxJQUFJLHdCQUd2QixHQUFJRCxRQUFRLENBQUNFLFdBQVcsR0FBSyxjQUFjLENBQUUsMkJBQzNDLEdBQU1DLFlBQVUsQ0FBR1AsS0FBSyxlQUFDSSxRQUFRLFNBQUtDLElBQUksRUFBQyxDQUMzQ0gsSUFBSSxDQUFHSyxXQUFVLENBQUNMLElBQUksQ0FDdEIsdUJBQUFFLFFBQVEsQ0FBQ0ksY0FBYyxlQUF2QixzQkFBeUJDLElBQUksQ0FBQ0YsV0FBVSxDQUFDLENBRXpDLE1BQU9BLFlBQVUsQ0FBQ0csTUFBTSxDQUMxQixDQUVBLEdBQU1DLGVBQWMsdUJBQUdQLFFBQVEsQ0FBQ1EsVUFBVSxlQUFuQiw2Q0FDckJSLFFBQVEsQ0FBQ0ksY0FBYyxlQUF2Qix1QkFBeUJLLE1BQU0sQ0FDM0IsQ0FFTixHQUFJQyxLQUFHLEdBQUssQ0FBQ0gsY0FBYyxFQUFJQSxjQUFjLENBQUNULElBQUksR0FBS0EsSUFBSSxDQUFDLENBQUUsQ0FDNUQsS0FBTSxJQUFJYSxNQUFLLFdBQ0hoQixTQUFTLGVBQWFLLFFBQVEsQ0FBQ1ksSUFBSSxDQUFDQyxHQUFHLHlEQUNsRCxDQUNILENBRUEsR0FBTVYsV0FBVSxDQUFHTixJQUFJLENBQ25CQSxJQUFJLGVBQUNVLGNBQWMsQ0FBRVAsUUFBUSxTQUFLQyxJQUFJLEVBQUMsQ0FDdkNNLGNBQWMsQ0FFbEIsd0JBQUFQLFFBQVEsQ0FBQ0ksY0FBYyxlQUF2Qix1QkFBeUJDLElBQUksQ0FBQ0YsVUFBVSxDQUFDLENBRXpDLE1BQU9BLFdBQVUsQ0FBQ0csTUFBTSxDQUMxQixDQUFDLENBRUQsTUFBT1AsU0FBUSxDQUNqQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvZmFjdG9yaWVzL2NyZWF0ZUluamVjdG9yLnRzP2E5YTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZEluc3RhbmNlIH0gZnJvbSAnLi4vY2xhc3Nlcy9FdmFsdWF0aW9uU3RhY2snXG5pbXBvcnQgeyBQYXJ0aWFsQXRvbUluc3RhbmNlIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBJbmplY3RvckRlc2NyaXB0b3IgfSBmcm9tICcuLi91dGlscy90eXBlcydcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUluamVjdG9yID0gPFxuICBBIGV4dGVuZHMgWy4uLmFueV0sXG4gIFQgZXh0ZW5kcyBJbmplY3RvckRlc2NyaXB0b3Jcbj4oXG4gIG9wZXJhdGlvbjogc3RyaW5nLFxuICBmaXJzdDogKGluc3RhbmNlOiBQYXJ0aWFsQXRvbUluc3RhbmNlLCAuLi5hcmdzOiBBKSA9PiBULFxuICBuZXh0PzogKHByZXZEZXNjcmlwdG9yOiBULCBpbnN0YW5jZTogUGFydGlhbEF0b21JbnN0YW5jZSwgLi4uYXJnczogQSkgPT4gVFxuKSA9PiB7XG4gIGxldCB0eXBlOiBzdHJpbmdcblxuICBjb25zdCBpbmplY3RvciA9ICguLi5hcmdzOiBBKSA9PiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSByZWFkSW5zdGFuY2UoKVxuXG4gICAgaWYgKGluc3RhbmNlLmFjdGl2ZVN0YXRlID09PSAnSW5pdGlhbGl6aW5nJykge1xuICAgICAgY29uc3QgZGVzY3JpcHRvciA9IGZpcnN0KGluc3RhbmNlLCAuLi5hcmdzKVxuICAgICAgdHlwZSA9IGRlc2NyaXB0b3IudHlwZVxuICAgICAgaW5zdGFuY2UuX25leHRJbmplY3RvcnM/LnB1c2goZGVzY3JpcHRvcilcblxuICAgICAgcmV0dXJuIGRlc2NyaXB0b3IucmVzdWx0XG4gICAgfVxuXG4gICAgY29uc3QgcHJldkRlc2NyaXB0b3IgPSBpbnN0YW5jZS5faW5qZWN0b3JzPy5bXG4gICAgICBpbnN0YW5jZS5fbmV4dEluamVjdG9ycz8ubGVuZ3RoIGFzIG51bWJlclxuICAgIF0gYXMgVFxuXG4gICAgaWYgKERFViAmJiAoIXByZXZEZXNjcmlwdG9yIHx8IHByZXZEZXNjcmlwdG9yLnR5cGUgIT09IHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBaZWR1eDogJHtvcGVyYXRpb259IGluIGF0b20gXCIke2luc3RhbmNlLmF0b20ua2V5fVwiIC0gaW5qZWN0b3JzIGNhbm5vdCBiZSBhZGRlZCwgcmVtb3ZlZCwgb3IgcmVvcmRlcmVkYFxuICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBuZXh0XG4gICAgICA/IG5leHQocHJldkRlc2NyaXB0b3IsIGluc3RhbmNlLCAuLi5hcmdzKVxuICAgICAgOiBwcmV2RGVzY3JpcHRvclxuXG4gICAgaW5zdGFuY2UuX25leHRJbmplY3RvcnM/LnB1c2goZGVzY3JpcHRvcilcblxuICAgIHJldHVybiBkZXNjcmlwdG9yLnJlc3VsdFxuICB9XG5cbiAgcmV0dXJuIGluamVjdG9yXG59XG4iXSwibmFtZXMiOlsicmVhZEluc3RhbmNlIiwiY3JlYXRlSW5qZWN0b3IiLCJvcGVyYXRpb24iLCJmaXJzdCIsIm5leHQiLCJ0eXBlIiwiaW5qZWN0b3IiLCJpbnN0YW5jZSIsImFyZ3MiLCJhY3RpdmVTdGF0ZSIsImRlc2NyaXB0b3IiLCJfbmV4dEluamVjdG9ycyIsInB1c2giLCJyZXN1bHQiLCJwcmV2RGVzY3JpcHRvciIsIl9pbmplY3RvcnMiLCJsZW5ndGgiLCJERVYiLCJFcnJvciIsImF0b20iLCJrZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3870\n')},4538:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Q\": function() { return /* binding */ useAtomInstance; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(395);\n/* harmony import */ var _useEcosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6215);\n/* harmony import */ var _useReactComponentId__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6559);\nvar OPERATION='useAtomInstance';/**\n * useAtomInstance\n *\n * Creates an atom instance for the passed atom based on the passed params. If\n * an instance has already been created for the passed params, reuses the\n * existing instance.\n *\n * Registers a static graph dependency on the atom instance. This means\n * components that use this hook will not rerender when this atom instance's\n * state changes.\n *\n * If the params are large, serializing them every render can cause some\n * overhead.\n *\n * @param atom The atom to instantiate or reuse an instantiation of\n * @param params The params for generating the instance's key.\n */var useAtomInstance=function useAtomInstance(atom,params,_temp){var _ref=_temp===void 0?{operation:OPERATION}:_temp,_ref$operation=_ref.operation,operation=_ref$operation===void 0?OPERATION:_ref$operation,subscribe=_ref.subscribe,suspend=_ref.suspend;var ecosystem=(0,_useEcosystem__WEBPACK_IMPORTED_MODULE_1__/* .useEcosystem */ .l)();var dependentKey=(0,_useReactComponentId__WEBPACK_IMPORTED_MODULE_2__/* .useReactComponentId */ .$)();// it should be fine for this to run every render. It's possible to change\n// approaches if it is too heavy sometimes. But don't memoize this call:\nvar instance=ecosystem.getInstance(atom,params);var _useMemo=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function(){var tuple=[instance,instance.getState()];return[function(onStoreChange){var _ecosystem$_graph$nod;// this function must be idempotent\nif(!((_ecosystem$_graph$nod=ecosystem._graph.nodes[instance.keyHash])!=null&&_ecosystem$_graph$nod.dependents[dependentKey])){// React can unmount other components before calling this subscribe\n// function but after we got the instance above. Re-get the instance\n// if such unmountings destroyed it in the meantime:\nif(instance.activeState==='Destroyed'){tuple[1]=_utils__WEBPACK_IMPORTED_MODULE_3__/* .destroyed */ .lv;onStoreChange();return function(){};// let the next render register the graph edge\n}ecosystem._graph.addEdge(dependentKey,instance.keyHash,operation,_utils__WEBPACK_IMPORTED_MODULE_3__/* .External */ .RQ|(subscribe?0:_utils__WEBPACK_IMPORTED_MODULE_3__/* .Static */ .qG),function(signal){// returning a unique symbol from `getSnapshot` after we call\n// `onStoreChange` causes the component to rerender. On rerender,\n// instance will be set again, so `useSyncExternalStore` will\n// never actually return that symbol.\nif(signal==='Destroyed')tuple[1]=_utils__WEBPACK_IMPORTED_MODULE_3__/* .destroyed */ .lv;onStoreChange();});}return function(){ecosystem._graph.removeEdge(dependentKey,instance.keyHash);};},// this getSnapshot has to return a different val if either the instance\n// or the state change (since in the case of primitive values, the new\n// instance's state could be exactly the same (===) as the previous\n// instance's value)\nfunction(){// This hack should work 'cause React can't use the return value unless\n// it renders this component. And when it rerenders,\n// `tuple[1]` will get defined again before this point\nif(tuple[1]===_utils__WEBPACK_IMPORTED_MODULE_3__/* .destroyed */ .lv)return _utils__WEBPACK_IMPORTED_MODULE_3__/* .destroyed */ .lv;if(suspend!==false){if(tuple[0]._promiseStatus==='loading'){throw tuple[0].promise;}else if(tuple[0]._promiseStatus==='error'){throw tuple[0]._promiseError;}}if(!subscribe)return tuple;var state=tuple[0].getState();if(state===tuple[1])return tuple;return tuple=[tuple[0],state];}];},[instance,subscribe,suspend]),subscribeFn=_useMemo[0],getSnapshot=_useMemo[1];return (0,react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore)(subscribeFn,getSnapshot,getSnapshot)[0];};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4538\n")},6215:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "l": function() { return /* binding */ useEcosystem; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _factories_createEcosystem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2662);\n/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(825);\n/* harmony import */ var _utils_general__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(395);\nvar useEcosystem=function useEcosystem(){var id=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_utils_general__WEBPACK_IMPORTED_MODULE_1__/* .ecosystemContext */ .zs);return (0,_store__WEBPACK_IMPORTED_MODULE_2__/* .getEcosystem */ .$$)(id)||(0,_factories_createEcosystem__WEBPACK_IMPORTED_MODULE_3__/* .createEcosystem */ .q)({id:id});};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIxNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBS08sR0FBTUksYUFBWSxDQUFHLFFBQWZBLGFBQVksRUFBUyxDQUNoQyxHQUFNQyxHQUFFLENBQUdMLGlEQUFVLENBQUNHLHNFQUFnQixDQUFDLENBRXZDLE1BQU9ELENBQUFBLDhEQUFZLENBQUNHLEVBQUUsQ0FBQyxFQUFJSixvRkFBZSxDQUFDLENBQUVJLEVBQUUsQ0FBRkEsRUFBRyxDQUFDLENBQUMsQ0FDcEQsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2hvb2tzL3VzZUVjb3N5c3RlbS50cz81YjcyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNyZWF0ZUVjb3N5c3RlbSB9IGZyb20gJy4uL2ZhY3Rvcmllcy9jcmVhdGVFY29zeXN0ZW0nXG5pbXBvcnQgeyBnZXRFY29zeXN0ZW0gfSBmcm9tICcuLi9zdG9yZSdcbmltcG9ydCB7IGVjb3N5c3RlbUNvbnRleHQgfSBmcm9tICcuLi91dGlscy9nZW5lcmFsJ1xuXG5leHBvcnQgY29uc3QgdXNlRWNvc3lzdGVtID0gKCkgPT4ge1xuICBjb25zdCBpZCA9IHVzZUNvbnRleHQoZWNvc3lzdGVtQ29udGV4dClcblxuICByZXR1cm4gZ2V0RWNvc3lzdGVtKGlkKSB8fCBjcmVhdGVFY29zeXN0ZW0oeyBpZCB9KVxufVxuIl0sIm5hbWVzIjpbInVzZUNvbnRleHQiLCJjcmVhdGVFY29zeXN0ZW0iLCJnZXRFY29zeXN0ZW0iLCJlY29zeXN0ZW1Db250ZXh0IiwidXNlRWNvc3lzdGVtIiwiaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6215\n')},6559:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": function() { return /* binding */ useReactComponentId; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _useEcosystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6215);\n/**\n * Get a unique id for a Zedux hook call. The exact string doesn't really\n * matter, but in dev try to use an error stack to grab the React component's\n * actual name for a better debugging experience\n */var useReactComponentId=function useReactComponentId(){var ecosystem=(0,_useEcosystem__WEBPACK_IMPORTED_MODULE_1__/* .useEcosystem */ .l)();// would be nice if React provided some way to know that multiple hooks are\n// from the same component. For now, every Zedux hook usage creates a new\n// graph node\nreturn (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function(){return ecosystem._idGenerator.generateReactComponentId();},[ecosystem]);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU1OS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDTyxHQUFNRSxvQkFBbUIsQ0FBRyxRQUF0QkEsb0JBQW1CLEVBQVMsQ0FDdkMsR0FBTUMsVUFBUyxDQUFHRixvRUFBWSxFQUFFLENBRWhDO0FBQ0E7QUFDQTtBQUNBLE1BQU9ELENBQUFBLDhDQUFPLENBQUMsaUJBQU1HLFVBQVMsQ0FBQ0MsWUFBWSxDQUFDQyx3QkFBd0IsRUFBRSxHQUFFLENBQ3RFRixTQUFTLENBQ1YsQ0FBQyxDQUNKLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy9ob29rcy91c2VSZWFjdENvbXBvbmVudElkLnRzPzFiMjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlRWNvc3lzdGVtIH0gZnJvbSAnLi91c2VFY29zeXN0ZW0nXG5cbi8qKlxuICogR2V0IGEgdW5pcXVlIGlkIGZvciBhIFplZHV4IGhvb2sgY2FsbC4gVGhlIGV4YWN0IHN0cmluZyBkb2Vzbid0IHJlYWxseVxuICogbWF0dGVyLCBidXQgaW4gZGV2IHRyeSB0byB1c2UgYW4gZXJyb3Igc3RhY2sgdG8gZ3JhYiB0aGUgUmVhY3QgY29tcG9uZW50J3NcbiAqIGFjdHVhbCBuYW1lIGZvciBhIGJldHRlciBkZWJ1Z2dpbmcgZXhwZXJpZW5jZVxuICovXG5leHBvcnQgY29uc3QgdXNlUmVhY3RDb21wb25lbnRJZCA9ICgpID0+IHtcbiAgY29uc3QgZWNvc3lzdGVtID0gdXNlRWNvc3lzdGVtKClcblxuICAvLyB3b3VsZCBiZSBuaWNlIGlmIFJlYWN0IHByb3ZpZGVkIHNvbWUgd2F5IHRvIGtub3cgdGhhdCBtdWx0aXBsZSBob29rcyBhcmVcbiAgLy8gZnJvbSB0aGUgc2FtZSBjb21wb25lbnQuIEZvciBub3csIGV2ZXJ5IFplZHV4IGhvb2sgdXNhZ2UgY3JlYXRlcyBhIG5ld1xuICAvLyBncmFwaCBub2RlXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IGVjb3N5c3RlbS5faWRHZW5lcmF0b3IuZ2VuZXJhdGVSZWFjdENvbXBvbmVudElkKCksIFtcbiAgICBlY29zeXN0ZW0sXG4gIF0pXG59XG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZUVjb3N5c3RlbSIsInVzZVJlYWN0Q29tcG9uZW50SWQiLCJlY29zeXN0ZW0iLCJfaWRHZW5lcmF0b3IiLCJnZW5lcmF0ZVJlYWN0Q29tcG9uZW50SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6559\n")},8723:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"o\": function() { return /* binding */ injectEffect; }\n/* harmony export */ });\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3870);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(395);\nvar getTask=function getTask(effect,descriptor){var task=function task(){var cleanup=effect();// now that the task has run, there's no need for the scheduler cleanup\n// function; replace it with the cleanup logic returned from the effect\n// (if any). If a promise was returned, ignore it.\ndescriptor.cleanup=typeof cleanup==='function'?cleanup:undefined;};return task;};/**\n * Runs a deferred side effect. This is just like React's `useEffect`. When\n * `deps` change on a subsequent reevaluation, the previous effect will be\n * cleaned up and the effect will rerun.\n *\n * Return a cleanup function to clean up resources when the effect reruns or the\n * current atom instance is destroyed.\n *\n * Unlike `useEffect`, you can return a promise from `injectEffect` (e.g. by\n * passing an async function). This is only for convenience in cases where you\n * don't have anything to cleanup, as you'll be unable to clean up resources if\n * you return a promise.\n */var injectEffect=(0,_factories__WEBPACK_IMPORTED_MODULE_0__/* .createInjector */ .v)('injectEffect',function(instance,effect,deps,config){var descriptor={deps:deps,type:_utils__WEBPACK_IMPORTED_MODULE_1__/* .prefix */ .O4+\"/effect\"};if(!instance.ecosystem.ssr){var task=getTask(effect,descriptor);descriptor.cleanup=function(){instance.ecosystem._scheduler.unschedule(task);descriptor.cleanup=undefined;};if(config!=null&&config.synchronous){task();}else{instance.ecosystem._scheduler.schedule({task:task,type:4// RunEffect (4)\n});}}return descriptor;},function(prevDescriptor,instance,effect,deps,config){if(instance.ecosystem.ssr)return prevDescriptor;var depsHaveChanged=(0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .haveDepsChanged */ .EM)(prevDescriptor==null?void 0:prevDescriptor.deps,deps);if(!depsHaveChanged)return prevDescriptor;prevDescriptor.cleanup==null?void 0:prevDescriptor.cleanup();var task=getTask(effect,prevDescriptor);// this cleanup should be unnecessary since effects run immediately every\n// time except init. Leave this though in case we add a way to update an\n// atom instance without flushing the scheduler\nprevDescriptor.cleanup=function(){instance.ecosystem._scheduler.unschedule(task);prevDescriptor.cleanup=undefined;};prevDescriptor.deps=deps;if(config!=null&&config.synchronous){task();}else{instance.ecosystem._scheduler.schedule({task:task,type:4// RunEffect (4)\n});}return prevDescriptor;});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4uL3BhY2thZ2VzL3JlYWN0L3NyYy9pbmplY3RvcnMvaW5qZWN0RWZmZWN0LnRzP2U5MTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlSW5qZWN0b3IgfSBmcm9tICcuLi9mYWN0b3JpZXMnXG5pbXBvcnQgeyBFZmZlY3RDYWxsYmFjaywgSW5qZWN0b3JEZXBzIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgeyBoYXZlRGVwc0NoYW5nZWQsIEluamVjdG9yRGVzY3JpcHRvciwgcHJlZml4IH0gZnJvbSAnLi4vdXRpbHMnXG5cbmludGVyZmFjZSBFZmZlY3RJbmplY3RvckRlc2NyaXB0b3IgZXh0ZW5kcyBJbmplY3RvckRlc2NyaXB0b3I8dW5kZWZpbmVkPiB7XG4gIGRlcHM6IEluamVjdG9yRGVwc1xufVxuXG5jb25zdCBnZXRUYXNrID0gKFxuICBlZmZlY3Q6IEVmZmVjdENhbGxiYWNrLFxuICBkZXNjcmlwdG9yOiBFZmZlY3RJbmplY3RvckRlc2NyaXB0b3JcbikgPT4ge1xuICBjb25zdCB0YXNrID0gKCkgPT4ge1xuICAgIGNvbnN0IGNsZWFudXAgPSBlZmZlY3QoKVxuXG4gICAgLy8gbm93IHRoYXQgdGhlIHRhc2sgaGFzIHJ1biwgdGhlcmUncyBubyBuZWVkIGZvciB0aGUgc2NoZWR1bGVyIGNsZWFudXBcbiAgICAvLyBmdW5jdGlvbjsgcmVwbGFjZSBpdCB3aXRoIHRoZSBjbGVhbnVwIGxvZ2ljIHJldHVybmVkIGZyb20gdGhlIGVmZmVjdFxuICAgIC8vIChpZiBhbnkpLiBJZiBhIHByb21pc2Ugd2FzIHJldHVybmVkLCBpZ25vcmUgaXQuXG4gICAgZGVzY3JpcHRvci5jbGVhbnVwID0gdHlwZW9mIGNsZWFudXAgPT09ICdmdW5jdGlvbicgPyBjbGVhbnVwIDogdW5kZWZpbmVkXG4gIH1cblxuICByZXR1cm4gdGFza1xufVxuXG4vKipcbiAqIFJ1bnMgYSBkZWZlcnJlZCBzaWRlIGVmZmVjdC4gVGhpcyBpcyBqdXN0IGxpa2UgUmVhY3QncyBgdXNlRWZmZWN0YC4gV2hlblxuICogYGRlcHNgIGNoYW5nZSBvbiBhIHN1YnNlcXVlbnQgcmVldmFsdWF0aW9uLCB0aGUgcHJldmlvdXMgZWZmZWN0IHdpbGwgYmVcbiAqIGNsZWFuZWQgdXAgYW5kIHRoZSBlZmZlY3Qgd2lsbCByZXJ1bi5cbiAqXG4gKiBSZXR1cm4gYSBjbGVhbnVwIGZ1bmN0aW9uIHRvIGNsZWFuIHVwIHJlc291cmNlcyB3aGVuIHRoZSBlZmZlY3QgcmVydW5zIG9yIHRoZVxuICogY3VycmVudCBhdG9tIGluc3RhbmNlIGlzIGRlc3Ryb3llZC5cbiAqXG4gKiBVbmxpa2UgYHVzZUVmZmVjdGAsIHlvdSBjYW4gcmV0dXJuIGEgcHJvbWlzZSBmcm9tIGBpbmplY3RFZmZlY3RgIChlLmcuIGJ5XG4gKiBwYXNzaW5nIGFuIGFzeW5jIGZ1bmN0aW9uKS4gVGhpcyBpcyBvbmx5IGZvciBjb252ZW5pZW5jZSBpbiBjYXNlcyB3aGVyZSB5b3VcbiAqIGRvbid0IGhhdmUgYW55dGhpbmcgdG8gY2xlYW51cCwgYXMgeW91J2xsIGJlIHVuYWJsZSB0byBjbGVhbiB1cCByZXNvdXJjZXMgaWZcbiAqIHlvdSByZXR1cm4gYSBwcm9taXNlLlxuICovXG5leHBvcnQgY29uc3QgaW5qZWN0RWZmZWN0ID0gY3JlYXRlSW5qZWN0b3IoXG4gICdpbmplY3RFZmZlY3QnLFxuICAoXG4gICAgaW5zdGFuY2UsXG4gICAgZWZmZWN0OiBFZmZlY3RDYWxsYmFjayxcbiAgICBkZXBzPzogSW5qZWN0b3JEZXBzLFxuICAgIGNvbmZpZz86IHsgc3luY2hyb25vdXM/OiBib29sZWFuIH1cbiAgKSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRvcjogRWZmZWN0SW5qZWN0b3JEZXNjcmlwdG9yID0ge1xuICAgICAgZGVwcyxcbiAgICAgIHR5cGU6IGAke3ByZWZpeH0vZWZmZWN0YCxcbiAgICB9XG5cbiAgICBpZiAoIWluc3RhbmNlLmVjb3N5c3RlbS5zc3IpIHtcbiAgICAgIGNvbnN0IHRhc2sgPSBnZXRUYXNrKGVmZmVjdCwgZGVzY3JpcHRvcilcbiAgICAgIGRlc2NyaXB0b3IuY2xlYW51cCA9ICgpID0+IHtcbiAgICAgICAgaW5zdGFuY2UuZWNvc3lzdGVtLl9zY2hlZHVsZXIudW5zY2hlZHVsZSh0YXNrKVxuICAgICAgICBkZXNjcmlwdG9yLmNsZWFudXAgPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZz8uc3luY2hyb25vdXMpIHtcbiAgICAgICAgdGFzaygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5lY29zeXN0ZW0uX3NjaGVkdWxlci5zY2hlZHVsZSh7XG4gICAgICAgICAgdGFzayxcbiAgICAgICAgICB0eXBlOiA0LCAvLyBSdW5FZmZlY3QgKDQpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc2NyaXB0b3JcbiAgfSxcbiAgKFxuICAgIHByZXZEZXNjcmlwdG9yLFxuICAgIGluc3RhbmNlLFxuICAgIGVmZmVjdDogRWZmZWN0Q2FsbGJhY2ssXG4gICAgZGVwcz86IEluamVjdG9yRGVwcyxcbiAgICBjb25maWc/OiB7IHN5bmNocm9ub3VzPzogYm9vbGVhbiB9XG4gICkgPT4ge1xuICAgIGlmIChpbnN0YW5jZS5lY29zeXN0ZW0uc3NyKSByZXR1cm4gcHJldkRlc2NyaXB0b3JcblxuICAgIGNvbnN0IGRlcHNIYXZlQ2hhbmdlZCA9IGhhdmVEZXBzQ2hhbmdlZChwcmV2RGVzY3JpcHRvcj8uZGVwcywgZGVwcylcblxuICAgIGlmICghZGVwc0hhdmVDaGFuZ2VkKSByZXR1cm4gcHJldkRlc2NyaXB0b3JcblxuICAgIHByZXZEZXNjcmlwdG9yLmNsZWFudXA/LigpXG5cbiAgICBjb25zdCB0YXNrID0gZ2V0VGFzayhlZmZlY3QsIHByZXZEZXNjcmlwdG9yKVxuICAgIC8vIHRoaXMgY2xlYW51cCBzaG91bGQgYmUgdW5uZWNlc3Nhcnkgc2luY2UgZWZmZWN0cyBydW4gaW1tZWRpYXRlbHkgZXZlcnlcbiAgICAvLyB0aW1lIGV4Y2VwdCBpbml0LiBMZWF2ZSB0aGlzIHRob3VnaCBpbiBjYXNlIHdlIGFkZCBhIHdheSB0byB1cGRhdGUgYW5cbiAgICAvLyBhdG9tIGluc3RhbmNlIHdpdGhvdXQgZmx1c2hpbmcgdGhlIHNjaGVkdWxlclxuICAgIHByZXZEZXNjcmlwdG9yLmNsZWFudXAgPSAoKSA9PiB7XG4gICAgICBpbnN0YW5jZS5lY29zeXN0ZW0uX3NjaGVkdWxlci51bnNjaGVkdWxlKHRhc2spXG4gICAgICBwcmV2RGVzY3JpcHRvci5jbGVhbnVwID0gdW5kZWZpbmVkXG4gICAgfVxuICAgIHByZXZEZXNjcmlwdG9yLmRlcHMgPSBkZXBzXG5cbiAgICBpZiAoY29uZmlnPy5zeW5jaHJvbm91cykge1xuICAgICAgdGFzaygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLmVjb3N5c3RlbS5fc2NoZWR1bGVyLnNjaGVkdWxlKHtcbiAgICAgICAgdGFzayxcbiAgICAgICAgdHlwZTogNCwgLy8gUnVuRWZmZWN0ICg0KVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldkRlc2NyaXB0b3JcbiAgfVxuKVxuIl0sIm5hbWVzIjpbImNyZWF0ZUluamVjdG9yIiwiaGF2ZURlcHNDaGFuZ2VkIiwicHJlZml4IiwiZ2V0VGFzayIsImVmZmVjdCIsImRlc2NyaXB0b3IiLCJ0YXNrIiwiY2xlYW51cCIsInVuZGVmaW5lZCIsImluamVjdEVmZmVjdCIsImluc3RhbmNlIiwiZGVwcyIsImNvbmZpZyIsInR5cGUiLCJlY29zeXN0ZW0iLCJzc3IiLCJfc2NoZWR1bGVyIiwidW5zY2hlZHVsZSIsInN5bmNocm9ub3VzIiwic2NoZWR1bGUiLCJwcmV2RGVzY3JpcHRvciIsImRlcHNIYXZlQ2hhbmdlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8723\n")},7361:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "i": function() { return /* binding */ injectRef; }\n/* harmony export */ });\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3870);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(395);\nvar injectRef=(0,_factories__WEBPACK_IMPORTED_MODULE_0__/* .createInjector */ .v)(\'injectRef\',function(instance,initialVal){return{result:{current:initialVal},type:_utils__WEBPACK_IMPORTED_MODULE_1__/* .prefix */ .O4+"/ref"};});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzM2MS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQVFPLEdBQU1FLFVBSVosQ0FBR0YsbUVBQWMsQ0FDaEIsV0FBVyxDQUNYLFNBQUlHLFFBQTZCLENBQUVDLFVBQWMsUUFBTSxDQUNyREMsTUFBTSxDQUFFLENBQUVDLE9BQU8sQ0FBRUYsVUFBZ0IsQ0FBQyxDQUNwQ0csSUFBSSxDQUFLTixvREFBTSxPQUNqQixDQUFDLEVBQUMsQ0FDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL2luamVjdG9ycy9pbmplY3RSZWYudHM/M2RlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBNdXRhYmxlUmVmT2JqZWN0LFxuICBQYXJ0aWFsQXRvbUluc3RhbmNlLFxuICBSZWZPYmplY3QsXG59IGZyb20gJ0B6ZWR1eC9yZWFjdC90eXBlcydcbmltcG9ydCB7IGNyZWF0ZUluamVjdG9yIH0gZnJvbSAnLi4vZmFjdG9yaWVzJ1xuaW1wb3J0IHsgcHJlZml4IH0gZnJvbSAnLi4vdXRpbHMnXG5cbmV4cG9ydCBjb25zdCBpbmplY3RSZWY6IHtcbiAgPFQ+KGluaXRpYWxWYWw6IFQpOiBNdXRhYmxlUmVmT2JqZWN0PFQ+XG4gIDxUPihpbml0aWFsVmFsOiBUIHwgbnVsbCk6IFJlZk9iamVjdDxUPlxuICA8VCA9IHVuZGVmaW5lZD4oKTogTXV0YWJsZVJlZk9iamVjdDxUIHwgdW5kZWZpbmVkPlxufSA9IGNyZWF0ZUluamVjdG9yKFxuICAnaW5qZWN0UmVmJyxcbiAgPFQ+KGluc3RhbmNlOiBQYXJ0aWFsQXRvbUluc3RhbmNlLCBpbml0aWFsVmFsPzogVCkgPT4gKHtcbiAgICByZXN1bHQ6IHsgY3VycmVudDogaW5pdGlhbFZhbCBhcyBUIH0sXG4gICAgdHlwZTogYCR7cHJlZml4fS9yZWZgLFxuICB9KVxuKVxuIl0sIm5hbWVzIjpbImNyZWF0ZUluamVjdG9yIiwicHJlZml4IiwiaW5qZWN0UmVmIiwiaW5zdGFuY2UiLCJpbml0aWFsVmFsIiwicmVzdWx0IiwiY3VycmVudCIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7361\n')},5684:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"F\": function() { return /* binding */ injectStore; },\n/* harmony export */   \"n\": function() { return /* binding */ doSubscribe; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3064);\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1694);\n/* harmony import */ var _factories__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3870);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(395);\nvar doSubscribe=function doSubscribe(instance,store){return store.subscribe({effects:function effects(_ref){var action=_ref.action,newState=_ref.newState,oldState=_ref.oldState;// Nothing to do if the state hasn't changed. Also, ignore state updates\n// during evaluation. TODO: Create an ecosystem-level flag to turn on\n// warning logging for state-updates-during-evaluation, since this may be\n// considered an anti-pattern.\nif(newState===oldState||instance.ecosystem._evaluationStack.isEvaluating(instance.keyHash)||(action==null?void 0:action.meta)===_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .internalTypes.ignore */ .P.ignore){return;}instance._scheduleEvaluation({newState:newState,oldState:oldState,operation:'injectStore',reasons:[{action:action,newState:newState,oldState:oldState,operation:'dispatch',sourceType:'Store',type:'state changed'}],sourceType:'Injector',type:'state changed'},false);// run the scheduler synchronously after any store update\ninstance.ecosystem._scheduler.flush();}});};/**\n * injectStore()\n *\n * A convenience utility for quickly creating and optionally subscribing to\n * stores in atoms.\n *\n * The returned store is a stable reference - it will not change on subsequent\n * evaluations. It can therefore be returned from the instance factory as the\n * instance's store. It also doesn't _need_ to be added to injector deps arrays\n * (though there's no harm in doing so).\n *\n * Accepts either the initial store state or a function that returns the store.\n * Use the latter for maximum flexibility.\n *\n * Subscribes to the store by default, causing the atom to be reevaluated on\n * every state change. This can be changed by passing `false` as the\n * subscribe config option.\n *\n * In most cases you won't need to prevent subscribing. But it can be a useful\n * performance optimization.\n *\n * ```ts\n * import { atom, injectStore } from '@zedux/react'\n *\n * const inputAtom = atom('input', () => {\n *   const store = injectStore('', { subscribe: false })\n *\n *   return store\n * })\n * ```\n *\n * When `hydrate: true` is passed, the store's initial state will be set to the\n * value from the last call to `ecosystem.hydrate()` whose key matches this atom\n * instance. The hydrated value will be passed to the atom's `hydrate` config\n * option, if any, to transform the value first.\n *\n * When the function `storeFactory` overload is used and `hydrate: true` is\n * passed, the transformed hydration will be passed to the store factory\n * function and it's up to you to use it to hydrate the store you create.\n *\n * ```ts\n * const store = injectStore(\n *   hydration => createStore(null, hydration ?? defaultVal),\n *   { hydrate: true }\n * )\n * // or simply:\n * const store = injectStore(defaultVal, { hydrate: true })\n * ```\n *\n * @param storeFactory - Either a function that returns a store or the initial\n * state of the store\n * @param config - A config object. Accepts the following properties:\n *   - `hydrate` - Whether to try hydrating this store with\n *   - `subscribe` - Whether to subscribe to the store (default: `true`)\n * @returns Store\n */var injectStore=(0,_factories__WEBPACK_IMPORTED_MODULE_1__/* .createInjector */ .v)('injectStore',function(instance,storeFactory,config){var _config$subscribe;var subscribe=(_config$subscribe=config==null?void 0:config.subscribe)!=null?_config$subscribe:true;var getStore=typeof storeFactory==='function'?storeFactory:function(hydration){return (0,_zedux_core__WEBPACK_IMPORTED_MODULE_2__/* .createStore */ .M)(null,hydration||storeFactory);};var store=getStore(config!=null&&config.hydrate?instance.ecosystem._consumeHydration(instance):undefined);var subscription=subscribe&&doSubscribe(instance,store);return{cleanup:subscription?function(){return subscription.unsubscribe();}:undefined,result:store,type:_utils__WEBPACK_IMPORTED_MODULE_3__/* .prefix */ .O4+\"/store\"};},function(prevDescriptor,instance,storeFactory,config){var _config$subscribe2;var subscribe=(_config$subscribe2=config==null?void 0:config.subscribe)!=null?_config$subscribe2:true;var prevsubscribe=!!prevDescriptor.cleanup;if(prevsubscribe===subscribe)return prevDescriptor;// we were subscribed, now we're not\nif(!subscribe){prevDescriptor.cleanup==null?void 0:prevDescriptor.cleanup();prevDescriptor.cleanup=undefined;return prevDescriptor;}// we weren't subscribed, now we are\nvar subscription=doSubscribe(instance,prevDescriptor.result);prevDescriptor.cleanup=function(){return subscription.unsubscribe();};return prevDescriptor;});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5684\n")},825:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "$$": function() { return /* binding */ getEcosystem; },\n/* harmony export */   "Do": function() { return /* binding */ internalStore; },\n/* harmony export */   "Ej": function() { return /* binding */ wipe; },\n/* harmony export */   "LW": function() { return /* binding */ setInternalStore; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1694);\nvar internalStore=(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .createStore */ .M)(null,{});var getEcosystem=function getEcosystem(id){var ecosystem=internalStore.getState()[id];if(ecosystem)return ecosystem;};var setInternalStore=function setInternalStore(newStore){return internalStore=newStore;};var wipe=function wipe(){var ecosystems=Object.values(internalStore.getState().ecosystems);ecosystems.forEach(function(es){es.destroy(true);});};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHTyxHQUFJQyxjQUFhLENBQUdELGlFQUFXLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQyxDQUE4QixDQUV0RSxHQUFNRSxhQUFZLENBQUcsUUFBZkEsYUFBWSxDQUFJQyxFQUFVLENBQTRCLENBQ2pFLEdBQU1DLFVBQVMsQ0FBR0gsYUFBYSxDQUFDSSxRQUFRLEVBQUUsQ0FBQ0YsRUFBRSxDQUFDLENBRTlDLEdBQUlDLFNBQVMsQ0FBRSxNQUFPQSxVQUFTLENBQ2pDLENBQUMsQ0FFTSxHQUFNRSxpQkFBZ0IsQ0FBRyxRQUFuQkEsaUJBQWdCLENBQUlDLFFBQThCLFFBQzVETixjQUFhLENBQUdNLFFBQVEsRUFBQyxDQUVyQixHQUFNQyxLQUFJLENBQUcsUUFBUEEsS0FBSSxFQUFTLENBQ3hCLEdBQU1DLFdBQVUsQ0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNWLGFBQWEsQ0FBQ0ksUUFBUSxFQUFFLENBQUNJLFVBQVUsQ0FBQyxDQUVyRUEsVUFBVSxDQUFDRyxPQUFPLENBQUMsU0FBQUMsRUFBRSxDQUFJLENBQ3ZCQSxFQUFFLENBQUNDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDbEIsQ0FBQyxDQUFDLENBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi4vcGFja2FnZXMvcmVhY3Qvc3JjL3N0b3JlL2luZGV4LnRzPzExYzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdAemVkdXgvY29yZSdcbmltcG9ydCB7IEVjb3N5c3RlbSB9IGZyb20gJy4uL2NsYXNzZXMnXG5cbmV4cG9ydCBsZXQgaW50ZXJuYWxTdG9yZSA9IGNyZWF0ZVN0b3JlKG51bGwsIHt9IGFzIFJlY29yZDxzdHJpbmcsIEVjb3N5c3RlbT4pXG5cbmV4cG9ydCBjb25zdCBnZXRFY29zeXN0ZW0gPSAoaWQ6IHN0cmluZyk6IEVjb3N5c3RlbSB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IGVjb3N5c3RlbSA9IGludGVybmFsU3RvcmUuZ2V0U3RhdGUoKVtpZF1cblxuICBpZiAoZWNvc3lzdGVtKSByZXR1cm4gZWNvc3lzdGVtXG59XG5cbmV4cG9ydCBjb25zdCBzZXRJbnRlcm5hbFN0b3JlID0gKG5ld1N0b3JlOiB0eXBlb2YgaW50ZXJuYWxTdG9yZSkgPT5cbiAgKGludGVybmFsU3RvcmUgPSBuZXdTdG9yZSlcblxuZXhwb3J0IGNvbnN0IHdpcGUgPSAoKSA9PiB7XG4gIGNvbnN0IGVjb3N5c3RlbXMgPSBPYmplY3QudmFsdWVzKGludGVybmFsU3RvcmUuZ2V0U3RhdGUoKS5lY29zeXN0ZW1zKVxuXG4gIGVjb3N5c3RlbXMuZm9yRWFjaChlcyA9PiB7XG4gICAgZXMuZGVzdHJveSh0cnVlKVxuICB9KVxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZVN0b3JlIiwiaW50ZXJuYWxTdG9yZSIsImdldEVjb3N5c3RlbSIsImlkIiwiZWNvc3lzdGVtIiwiZ2V0U3RhdGUiLCJzZXRJbnRlcm5hbFN0b3JlIiwibmV3U3RvcmUiLCJ3aXBlIiwiZWNvc3lzdGVtcyIsIk9iamVjdCIsInZhbHVlcyIsImZvckVhY2giLCJlcyIsImRlc3Ryb3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///825\n')},395:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "EM": function() { return /* binding */ haveDepsChanged; },\n/* harmony export */   "Jy": function() { return /* binding */ Explicit; },\n/* harmony export */   "O4": function() { return /* binding */ prefix; },\n/* harmony export */   "RQ": function() { return /* binding */ External; },\n/* harmony export */   "lv": function() { return /* binding */ destroyed; },\n/* harmony export */   "qG": function() { return /* binding */ Static; },\n/* harmony export */   "zs": function() { return /* binding */ ecosystemContext; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/**\n * The EdgeFlags. These are used as bitwise flags.\n *\n * The flag score determines job priority in the scheduler. Scores range from\n * 0-7. Lower score = higher prio. Examples:\n *\n * 0 = implicit-internal-dynamic\n * 3 = explicit-external-dynamic\n * 7 = explicit-external-static\n */var Explicit=1;var External=2;var Static=4;// export const Deferred = 8\nvar ecosystemContext=/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(\'@@global\');/**\n * Compare two arrays and see if any elements are different (===). Returns true\n * by default if either array is undefined\n */var haveDepsChanged=function haveDepsChanged(prevDeps,nextDeps){return!prevDeps||!nextDeps||prevDeps.length!==nextDeps.length||prevDeps.some(function(dep,i){return nextDeps[i]!==dep;});};var prefix=\'@@zedux\';var destroyed=Symbol(prefix+"/destroyed");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNPLEdBQU1DLFNBQVEsQ0FBRyxDQUFDLENBQ2xCLEdBQU1DLFNBQVEsQ0FBRyxDQUFDLENBQ2xCLEdBQU1DLE9BQU0sQ0FBRyxDQUFDLENBQ3ZCO0FBRU8sR0FBTUMsaUJBQWdCLGNBQUdKLG9EQUFhLENBQUMsVUFBVSxDQUFDLENBRXpEO0FBQ0E7QUFDQTtBQUNBLEdBQ08sR0FBTUssZ0JBQWUsQ0FBRyxRQUFsQkEsZ0JBQWUsQ0FBSUMsUUFBZ0IsQ0FBRUMsUUFBZ0IsUUFDaEUsQ0FBQ0QsUUFBUSxFQUNULENBQUNDLFFBQVEsRUFDVEQsUUFBUSxDQUFDRSxNQUFNLEdBQUtELFFBQVEsQ0FBQ0MsTUFBTSxFQUNuQ0YsUUFBUSxDQUFDRyxJQUFJLENBQUMsU0FBQ0MsR0FBRyxDQUFFQyxDQUFDLFFBQUtKLFNBQVEsQ0FBQ0ksQ0FBQyxDQUFDLEdBQUtELEdBQUcsR0FBQyxHQUV6QyxHQUFNRSxPQUFNLENBQUcsU0FBUyxDQUV4QixHQUFNQyxVQUFTLENBQUdDLE1BQU0sQ0FBSUYsTUFBTSxjQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvdXRpbHMvZ2VuZXJhbC50cz8xMGM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNvbnRleHQgfSBmcm9tICdyZWFjdCdcblxuLyoqXG4gKiBUaGUgRWRnZUZsYWdzLiBUaGVzZSBhcmUgdXNlZCBhcyBiaXR3aXNlIGZsYWdzLlxuICpcbiAqIFRoZSBmbGFnIHNjb3JlIGRldGVybWluZXMgam9iIHByaW9yaXR5IGluIHRoZSBzY2hlZHVsZXIuIFNjb3JlcyByYW5nZSBmcm9tXG4gKiAwLTcuIExvd2VyIHNjb3JlID0gaGlnaGVyIHByaW8uIEV4YW1wbGVzOlxuICpcbiAqIDAgPSBpbXBsaWNpdC1pbnRlcm5hbC1keW5hbWljXG4gKiAzID0gZXhwbGljaXQtZXh0ZXJuYWwtZHluYW1pY1xuICogNyA9IGV4cGxpY2l0LWV4dGVybmFsLXN0YXRpY1xuICovXG5leHBvcnQgY29uc3QgRXhwbGljaXQgPSAxXG5leHBvcnQgY29uc3QgRXh0ZXJuYWwgPSAyXG5leHBvcnQgY29uc3QgU3RhdGljID0gNFxuLy8gZXhwb3J0IGNvbnN0IERlZmVycmVkID0gOFxuXG5leHBvcnQgY29uc3QgZWNvc3lzdGVtQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoJ0BAZ2xvYmFsJylcblxuLyoqXG4gKiBDb21wYXJlIHR3byBhcnJheXMgYW5kIHNlZSBpZiBhbnkgZWxlbWVudHMgYXJlIGRpZmZlcmVudCAoPT09KS4gUmV0dXJucyB0cnVlXG4gKiBieSBkZWZhdWx0IGlmIGVpdGhlciBhcnJheSBpcyB1bmRlZmluZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGhhdmVEZXBzQ2hhbmdlZCA9IChwcmV2RGVwcz86IGFueVtdLCBuZXh0RGVwcz86IGFueVtdKSA9PlxuICAhcHJldkRlcHMgfHxcbiAgIW5leHREZXBzIHx8XG4gIHByZXZEZXBzLmxlbmd0aCAhPT0gbmV4dERlcHMubGVuZ3RoIHx8XG4gIHByZXZEZXBzLnNvbWUoKGRlcCwgaSkgPT4gbmV4dERlcHNbaV0gIT09IGRlcClcblxuZXhwb3J0IGNvbnN0IHByZWZpeCA9ICdAQHplZHV4J1xuXG5leHBvcnQgY29uc3QgZGVzdHJveWVkID0gU3ltYm9sKGAke3ByZWZpeH0vZGVzdHJveWVkYClcbiJdLCJuYW1lcyI6WyJjcmVhdGVDb250ZXh0IiwiRXhwbGljaXQiLCJFeHRlcm5hbCIsIlN0YXRpYyIsImVjb3N5c3RlbUNvbnRleHQiLCJoYXZlRGVwc0NoYW5nZWQiLCJwcmV2RGVwcyIsIm5leHREZXBzIiwibGVuZ3RoIiwic29tZSIsImRlcCIsImkiLCJwcmVmaXgiLCJkZXN0cm95ZWQiLCJTeW1ib2wiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///395\n')},3299:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"V\": function() { return /* binding */ pluginActions; }\n/* harmony export */ });\n/* harmony import */ var _zedux_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2808);\nvar pluginActions={activeStateChanged:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('activeStateChanged'),ecosystemWiped:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('ecosystemWiped'),edgeCreated:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('edgeCreated'),edgeRemoved:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('edgeRemoved'),evaluationFinished:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('evaluationFinished'),// either cache or instance will always be defined, depending on the node type\nstateChanged:(0,_zedux_core__WEBPACK_IMPORTED_MODULE_0__/* .actionFactory */ .B)('stateChanged')};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5OS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBVU8sR0FBTUMsY0FBYSxDQUFHLENBQzNCQyxrQkFBa0IsQ0FBRUYsbUVBQWEsQ0FPL0Isb0JBQW9CLENBQUMsQ0FDdkJHLGNBQWMsQ0FBRUgsbUVBQWEsQ0FDM0IsZ0JBQWdCLENBQ2pCLENBQ0RJLFdBQVcsQ0FBRUosbUVBQWEsQ0FReEIsYUFBYSxDQUFDLENBQ2hCSyxXQUFXLENBQUVMLG1FQUFhLENBT3hCLGFBQWEsQ0FBQyxDQUNoQk0sa0JBQWtCLENBQUVOLG1FQUFhLENBVS9CLG9CQUFvQixDQUFDLENBQ3ZCO0FBQ0FPLFlBQVksQ0FBRVAsbUVBQWEsQ0FVekIsY0FBYyxDQUNsQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uLi9wYWNrYWdlcy9yZWFjdC9zcmMvdXRpbHMvcGx1Z2luLWFjdGlvbnMudHM/OTY2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25DaGFpbiwgYWN0aW9uRmFjdG9yeSB9IGZyb20gJ0B6ZWR1eC9jb3JlJ1xuaW1wb3J0IHsgRWNvc3lzdGVtIH0gZnJvbSAnLi4vY2xhc3Nlcy9FY29zeXN0ZW0nXG5pbXBvcnQge1xuICBBY3RpdmVTdGF0ZSxcbiAgQW55QXRvbUluc3RhbmNlLFxuICBEZXBlbmRlbnRFZGdlLFxuICBFdmFsdWF0aW9uUmVhc29uLFxufSBmcm9tICcuLi90eXBlcydcbmltcG9ydCB7IFNlbGVjdG9yQ2FjaGVJdGVtIH0gZnJvbSAnLi4vY2xhc3Nlcy9TZWxlY3RvckNhY2hlJ1xuXG5leHBvcnQgY29uc3QgcGx1Z2luQWN0aW9ucyA9IHtcbiAgYWN0aXZlU3RhdGVDaGFuZ2VkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGluc3RhbmNlOiBBbnlBdG9tSW5zdGFuY2VcbiAgICAgIG5ld0FjdGl2ZVN0YXRlOiBBY3RpdmVTdGF0ZVxuICAgICAgb2xkQWN0aXZlU3RhdGU6IEFjdGl2ZVN0YXRlXG4gICAgfSxcbiAgICAnYWN0aXZlU3RhdGVDaGFuZ2VkJ1xuICA+KCdhY3RpdmVTdGF0ZUNoYW5nZWQnKSxcbiAgZWNvc3lzdGVtV2lwZWQ6IGFjdGlvbkZhY3Rvcnk8eyBlY29zeXN0ZW06IEVjb3N5c3RlbSB9LCAnZWNvc3lzdGVtV2lwZWQnPihcbiAgICAnZWNvc3lzdGVtV2lwZWQnXG4gICksXG4gIGVkZ2VDcmVhdGVkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGRlcGVuZGVuY3k6IEFueUF0b21JbnN0YW5jZSB8IFNlbGVjdG9yQ2FjaGVJdGVtXG4gICAgICAvLyBzdHJpbmcgaWYgYGVkZ2UuZmxhZ3MgJiBFeHRlcm5hbGA6XG4gICAgICBkZXBlbmRlbnQ6IEFueUF0b21JbnN0YW5jZSB8IFNlbGVjdG9yQ2FjaGVJdGVtIHwgc3RyaW5nXG4gICAgICBlZGdlOiBEZXBlbmRlbnRFZGdlXG4gICAgfSxcbiAgICAnZWRnZUNyZWF0ZWQnXG4gID4oJ2VkZ2VDcmVhdGVkJyksXG4gIGVkZ2VSZW1vdmVkOiBhY3Rpb25GYWN0b3J5PFxuICAgIHtcbiAgICAgIGRlcGVuZGVuY3k6IEFueUF0b21JbnN0YW5jZSB8IFNlbGVjdG9yQ2FjaGVJdGVtXG4gICAgICBkZXBlbmRlbnQ6IEFueUF0b21JbnN0YW5jZSB8IFNlbGVjdG9yQ2FjaGVJdGVtIHwgc3RyaW5nIC8vIHN0cmluZyBpZiBlZGdlIGlzIEV4dGVybmFsXG4gICAgICBlZGdlOiBEZXBlbmRlbnRFZGdlXG4gICAgfSxcbiAgICAnZWRnZVJlbW92ZWQnXG4gID4oJ2VkZ2VSZW1vdmVkJyksXG4gIGV2YWx1YXRpb25GaW5pc2hlZDogYWN0aW9uRmFjdG9yeTxcbiAgICB8IHtcbiAgICAgICAgaW5zdGFuY2U6IEFueUF0b21JbnN0YW5jZVxuICAgICAgICB0aW1lOiBudW1iZXJcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgY2FjaGU6IFNlbGVjdG9yQ2FjaGVJdGVtXG4gICAgICAgIHRpbWU6IG51bWJlclxuICAgICAgfSxcbiAgICAnZXZhbHVhdGlvbkZpbmlzaGVkJ1xuICA+KCdldmFsdWF0aW9uRmluaXNoZWQnKSxcbiAgLy8gZWl0aGVyIGNhY2hlIG9yIGluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIGRlZmluZWQsIGRlcGVuZGluZyBvbiB0aGUgbm9kZSB0eXBlXG4gIHN0YXRlQ2hhbmdlZDogYWN0aW9uRmFjdG9yeTxcbiAgICB7XG4gICAgICBhY3Rpb24/OiBBY3Rpb25DaGFpblxuICAgICAgY2FjaGU/OiBTZWxlY3RvckNhY2hlSXRlbVxuICAgICAgaW5zdGFuY2U/OiBBbnlBdG9tSW5zdGFuY2VcbiAgICAgIG5ld1N0YXRlOiBhbnlcbiAgICAgIG9sZFN0YXRlOiBhbnlcbiAgICAgIHJlYXNvbnM6IEV2YWx1YXRpb25SZWFzb25bXVxuICAgIH0sXG4gICAgJ3N0YXRlQ2hhbmdlZCdcbiAgPignc3RhdGVDaGFuZ2VkJyksXG59XG4iXSwibmFtZXMiOlsiYWN0aW9uRmFjdG9yeSIsInBsdWdpbkFjdGlvbnMiLCJhY3RpdmVTdGF0ZUNoYW5nZWQiLCJlY29zeXN0ZW1XaXBlZCIsImVkZ2VDcmVhdGVkIiwiZWRnZVJlbW92ZWQiLCJldmFsdWF0aW9uRmluaXNoZWQiLCJzdGF0ZUNoYW5nZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3299\n")},1881:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KF\": function() { return /* binding */ getInitialPromiseState; },\n/* harmony export */   \"W2\": function() { return /* binding */ getSuccessPromiseState; },\n/* harmony export */   \"bG\": function() { return /* binding */ getErrorPromiseState; }\n/* harmony export */ });\nvar getErrorPromiseState=function getErrorPromiseState(error){return{error:error,isError:true,isLoading:false,isSuccess:false,status:'error'};};var getInitialPromiseState=function getInitialPromiseState(data){return{data:data,isError:false,isLoading:true,isSuccess:false,status:'loading'};};var getSuccessPromiseState=function getSuccessPromiseState(data){return{data:data,isError:false,isLoading:false,isSuccess:true,status:'success'};};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4MS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVPLEdBQU1BLHFCQUFvQixDQUFHLFFBQXZCQSxxQkFBb0IsQ0FBT0MsS0FBWSxRQUF1QixDQUN6RUEsS0FBSyxDQUFMQSxLQUFLLENBQ0xDLE9BQU8sQ0FBRSxJQUFJLENBQ2JDLFNBQVMsQ0FBRSxLQUFLLENBQ2hCQyxTQUFTLENBQUUsS0FBSyxDQUNoQkMsTUFBTSxDQUFFLE9BQ1YsQ0FBQyxFQUFDLENBRUssR0FBTUMsdUJBQXNCLENBQUcsUUFBekJBLHVCQUFzQixDQUFPQyxJQUFRLFFBQXVCLENBQ3ZFQSxJQUFJLENBQUpBLElBQUksQ0FDSkwsT0FBTyxDQUFFLEtBQUssQ0FDZEMsU0FBUyxDQUFFLElBQUksQ0FDZkMsU0FBUyxDQUFFLEtBQUssQ0FDaEJDLE1BQU0sQ0FBRSxTQUNWLENBQUMsRUFBQyxDQUVLLEdBQU1HLHVCQUFzQixDQUFHLFFBQXpCQSx1QkFBc0IsQ0FBT0QsSUFBTyxRQUF1QixDQUN0RUEsSUFBSSxDQUFKQSxJQUFJLENBQ0pMLE9BQU8sQ0FBRSxLQUFLLENBQ2RDLFNBQVMsQ0FBRSxLQUFLLENBQ2hCQyxTQUFTLENBQUUsSUFBSSxDQUNmQyxNQUFNLENBQUUsU0FDVixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4uL3BhY2thZ2VzL3JlYWN0L3NyYy91dGlscy9wcm9taXNlVXRpbHMudHM/ZGM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9taXNlU3RhdGUgfSBmcm9tICcuLi90eXBlcydcblxuZXhwb3J0IGNvbnN0IGdldEVycm9yUHJvbWlzZVN0YXRlID0gPFQ+KGVycm9yOiBFcnJvcik6IFByb21pc2VTdGF0ZTxUPiA9PiAoe1xuICBlcnJvcixcbiAgaXNFcnJvcjogdHJ1ZSxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgc3RhdHVzOiAnZXJyb3InLFxufSlcblxuZXhwb3J0IGNvbnN0IGdldEluaXRpYWxQcm9taXNlU3RhdGUgPSA8VD4oZGF0YT86IFQpOiBQcm9taXNlU3RhdGU8VD4gPT4gKHtcbiAgZGF0YSxcbiAgaXNFcnJvcjogZmFsc2UsXG4gIGlzTG9hZGluZzogdHJ1ZSxcbiAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgc3RhdHVzOiAnbG9hZGluZycgYXMgY29uc3QsXG59KVxuXG5leHBvcnQgY29uc3QgZ2V0U3VjY2Vzc1Byb21pc2VTdGF0ZSA9IDxUPihkYXRhOiBUKTogUHJvbWlzZVN0YXRlPFQ+ID0+ICh7XG4gIGRhdGEsXG4gIGlzRXJyb3I6IGZhbHNlLFxuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBpc1N1Y2Nlc3M6IHRydWUsXG4gIHN0YXR1czogJ3N1Y2Nlc3MnLFxufSlcbiJdLCJuYW1lcyI6WyJnZXRFcnJvclByb21pc2VTdGF0ZSIsImVycm9yIiwiaXNFcnJvciIsImlzTG9hZGluZyIsImlzU3VjY2VzcyIsInN0YXR1cyIsImdldEluaXRpYWxQcm9taXNlU3RhdGUiLCJkYXRhIiwiZ2V0U3VjY2Vzc1Byb21pc2VTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1881\n")},6907:function(module){"use strict";eval("\n\nmodule.exports = direction\n\nvar RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC'\nvar LTR =\n  'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' +\n  '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' +\n  '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'\n\nvar rtl = new RegExp('^[^' + LTR + ']*[' + RTL + ']')\nvar ltr = new RegExp('^[^' + RTL + ']*[' + LTR + ']')\n\nfunction direction(value) {\n  value = String(value || '')\n\n  if (rtl.test(value)) {\n    return 'rtl'\n  }\n\n  if (ltr.test(value)) {\n    return 'ltr'\n  }\n\n  return 'neutral'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkwNy5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL2RpcmVjdGlvbi9pbmRleC5qcz9mNTJmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpcmVjdGlvblxuXG52YXIgUlRMID0gJ1xcdTA1OTEtXFx1MDdGRlxcdUZCMUQtXFx1RkRGRFxcdUZFNzAtXFx1RkVGQydcbnZhciBMVFIgPVxuICAnQS1aYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2JyArXG4gICdcXHUwMEY4LVxcdTAyQjhcXHUwMzAwLVxcdTA1OTBcXHUwODAwLVxcdTFGRkZcXHUyMDBFXFx1MkMwMC1cXHVGQjFDJyArXG4gICdcXHVGRTAwLVxcdUZFNkZcXHVGRUZELVxcdUZGRkYnXG5cbnZhciBydGwgPSBuZXcgUmVnRXhwKCdeW14nICsgTFRSICsgJ10qWycgKyBSVEwgKyAnXScpXG52YXIgbHRyID0gbmV3IFJlZ0V4cCgnXlteJyArIFJUTCArICddKlsnICsgTFRSICsgJ10nKVxuXG5mdW5jdGlvbiBkaXJlY3Rpb24odmFsdWUpIHtcbiAgdmFsdWUgPSBTdHJpbmcodmFsdWUgfHwgJycpXG5cbiAgaWYgKHJ0bC50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiAncnRsJ1xuICB9XG5cbiAgaWYgKGx0ci50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiAnbHRyJ1xuICB9XG5cbiAgcmV0dXJuICduZXV0cmFsJ1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6907\n")},8156:function(__unused_webpack_module,exports){"use strict";eval("var __webpack_unused_export__;\n\n\n__webpack_unused_export__ = ({\n  value: true\n});\n\n/**\n * Constants.\n */\n\nvar IS_MAC = typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\nvar ALIASES = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n};\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\n__webpack_unused_export__ = isHotkey;\n__webpack_unused_export__ = isHotkey;\n__webpack_unused_export__ = isCodeHotkey;\nexports.TB = isKeyHotkey;\n__webpack_unused_export__ = parseHotkey;\n__webpack_unused_export__ = compareHotkey;\n__webpack_unused_export__ = toKeyCode;\n__webpack_unused_export__ = toKeyName;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8156\n")},2705:function(module,__unused_webpack_exports,__webpack_require__){eval("var root = __webpack_require__(5639);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcwNS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsSUFBUzs7QUFFNUI7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanM/Njg0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2705\n")},4239:function(module,__unused_webpack_exports,__webpack_require__){eval("var Symbol = __webpack_require__(2705),\n    getRawTag = __webpack_require__(9607),\n    objectToString = __webpack_require__(2333);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIzOS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsSUFBVztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyxJQUFjO0FBQ3RDLHFCQUFxQixtQkFBTyxDQUFDLElBQW1COztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcz9mNGVkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4239\n")},7561:function(module,__unused_webpack_exports,__webpack_require__){eval("var trimmedEndIndex = __webpack_require__(7990);\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU2MS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzQkFBc0IsbUJBQU8sQ0FBQyxJQUFvQjs7QUFFbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUcmltLmpzPzk0NWUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRyaW1tZWRFbmRJbmRleCA9IHJlcXVpcmUoJy4vX3RyaW1tZWRFbmRJbmRleCcpO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1xuICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgOiBzdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRyaW07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7561\n")},1957:function(module,__unused_webpack_exports,__webpack_require__){eval("/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\nmodule.exports = freeGlobal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1Ny5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLHdCQUF3QixxQkFBTSxnQkFBZ0IscUJBQU0sSUFBSSxxQkFBTSxzQkFBc0IscUJBQU07O0FBRTFGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanM/MDVmOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1957\n")},9607:function(module,__unused_webpack_exports,__webpack_require__){eval("var Symbol = __webpack_require__(2705);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYwNy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsSUFBVzs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanM/ZmM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9607\n")},2333:function(module){eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMzMy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcz9kZmRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2333\n")},5639:function(module,__unused_webpack_exports,__webpack_require__){eval("var freeGlobal = __webpack_require__(1957);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYzOS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxJQUFlOztBQUV4QztBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcz9lZGJmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5639\n")},7990:function(module){eval("/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzk5MC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdHJpbW1lZEVuZEluZGV4LmpzP2MzYTkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyaW1tZWRFbmRJbmRleDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7990\n")},3279:function(module,__unused_webpack_exports,__webpack_require__){eval("var isObject = __webpack_require__(3218),\n    now = __webpack_require__(7771),\n    toNumber = __webpack_require__(4841);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3279\n")},3218:function(module){eval("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIxOC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcz8xNjQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3218\n")},7005:function(module){eval("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAwNS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcz9jYmVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7005\n")},3448:function(module,__unused_webpack_exports,__webpack_require__){eval("var baseGetTag = __webpack_require__(4239),\n    isObjectLike = __webpack_require__(7005);\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ0OC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxJQUFlO0FBQ3hDLG1CQUFtQixtQkFBTyxDQUFDLElBQWdCOztBQUUzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzPzAyODQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3448\n")},7771:function(module,__unused_webpack_exports,__webpack_require__){eval("var root = __webpack_require__(5639);\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc3MS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsSUFBUzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm93LmpzPzEzNGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7771\n")},3493:function(module,__unused_webpack_exports,__webpack_require__){eval("var debounce = __webpack_require__(3279),\n    isObject = __webpack_require__(3218);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ5My5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsSUFBWTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsSUFBWTs7QUFFbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUSxXQUFXO0FBQzlCLFdBQVcsU0FBUztBQUNwQjtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsbUJBQW1CO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Rocm90dGxlLmpzPzE0MGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRocm90dGxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3493\n")},4841:function(module,__unused_webpack_exports,__webpack_require__){eval("var baseTrim = __webpack_require__(7561),\n    isObject = __webpack_require__(3218),\n    isSymbol = __webpack_require__(3448);\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg0MS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsSUFBYTtBQUNwQyxlQUFlLG1CQUFPLENBQUMsSUFBWTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsSUFBWTs7QUFFbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vemVkdXgtZG9jcy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanM/NWQ4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZVRyaW0gPSByZXF1aXJlKCcuL19iYXNlVHJpbScpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4841\n")},7594:function(module,exports){eval('/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(",").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn\'t include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right \'stop-point\' away by one.\n        if (sep === "-" || sep === ".." || sep === "\\u2025") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports["default"] = parsePart;\nmodule.exports = parsePart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU5NC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLGdCQUFnQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDBCQUEwQixXQUFXO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL3BhcnNlLW51bWVyaWMtcmFuZ2UvaW5kZXguanM/MDc1NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgICAgVGhlIHN0cmluZyB0byBwYXJzZVxuICogQHJldHVybnMge0FycmF5PG51bWJlcj59ICBSZXR1cm5zIGFuIGVuZXJnZXRpYyBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQYXJ0KHN0cmluZykge1xuICBsZXQgcmVzID0gW107XG4gIGxldCBtO1xuXG4gIGZvciAobGV0IHN0ciBvZiBzdHJpbmcuc3BsaXQoXCIsXCIpLm1hcCgoc3RyKSA9PiBzdHIudHJpbSgpKSkge1xuICAgIC8vIGp1c3QgYSBudW1iZXJcbiAgICBpZiAoL14tP1xcZCskLy50ZXN0KHN0cikpIHtcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KHN0ciwgMTApKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKG0gPSBzdHIubWF0Y2goL14oLT9cXGQrKSgtfFxcLlxcLlxcLj98XFx1MjAyNXxcXHUyMDI2fFxcdTIyRUYpKC0/XFxkKykkLykpXG4gICAgKSB7XG4gICAgICAvLyAxLTUgb3IgMS4uNSAoZXF1aXZhbGVudCkgb3IgMS4uLjUgKGRvZXNuJ3QgaW5jbHVkZSA1KVxuICAgICAgbGV0IFtfLCBsaHMsIHNlcCwgcmhzXSA9IG07XG5cbiAgICAgIGlmIChsaHMgJiYgcmhzKSB7XG4gICAgICAgIGxocyA9IHBhcnNlSW50KGxocyk7XG4gICAgICAgIHJocyA9IHBhcnNlSW50KHJocyk7XG4gICAgICAgIGNvbnN0IGluY3IgPSBsaHMgPCByaHMgPyAxIDogLTE7XG5cbiAgICAgICAgLy8gTWFrZSBpdCBpbmNsdXNpdmUgYnkgbW92aW5nIHRoZSByaWdodCAnc3RvcC1wb2ludCcgYXdheSBieSBvbmUuXG4gICAgICAgIGlmIChzZXAgPT09IFwiLVwiIHx8IHNlcCA9PT0gXCIuLlwiIHx8IHNlcCA9PT0gXCJcXHUyMDI1XCIpIHJocyArPSBpbmNyO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBsaHM7IGkgIT09IHJoczsgaSArPSBpbmNyKSByZXMucHVzaChpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBwYXJzZVBhcnQ7XG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlUGFydDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7594\n')},7874:function(){eval("(function (Prism) {\n\t// $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n\t// + LC_ALL, RANDOM, REPLY, SECONDS.\n\t// + make sure PS1..4 are here as they are not always set,\n\t// - some useless things.\n\tvar envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n\n\tvar commandAfterHeredoc = {\n\t\tpattern: /(^([\"']?)\\w+\\2)[ \\t]+\\S.*/,\n\t\tlookbehind: true,\n\t\talias: 'punctuation', // this looks reasonably well in all themes\n\t\tinside: null // see below\n\t};\n\n\tvar insideString = {\n\t\t'bash': commandAfterHeredoc,\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': [\n\t\t\t// [0]: Arithmetic Environment\n\t\t\t{\n\t\t\t\tpattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t// If there is a $ sign at the beginning highlight $(( and )) as variable\n\t\t\t\t\t'variable': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/^\\$\\(\\(/\n\t\t\t\t\t],\n\t\t\t\t\t'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n\t\t\t\t\t// Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n\t\t\t\t\t'operator': /--|\\+\\+|\\*\\*=?|<<=?|>>=?|&&|\\|\\||[=!+\\-*/%<>^&|]=?|[?~:]/,\n\t\t\t\t\t// If there is no $ sign at the beginning highlight (( and )) as punctuation\n\t\t\t\t\t'punctuation': /\\(\\(?|\\)\\)?|,|;/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [1]: Command Substitution\n\t\t\t{\n\t\t\t\tpattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'variable': /^\\$\\(|^`|\\)$|`$/\n\t\t\t\t}\n\t\t\t},\n\t\t\t// [2]: Brace expansion\n\t\t\t{\n\t\t\t\tpattern: /\\$\\{[^}]+\\}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n\t\t\t\t\t'punctuation': /[\\[\\]]/,\n\t\t\t\t\t'environment': {\n\t\t\t\t\t\tpattern: RegExp('(\\\\{)' + envVars),\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\talias: 'constant'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t/\\$(?:\\w+|[#?*!@$])/\n\t\t],\n\t\t// Escape sequences from echo and printf's manuals, and escaped quotes.\n\t\t'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/\n\t};\n\n\tPrism.languages.bash = {\n\t\t'shebang': {\n\t\t\tpattern: /^#!\\s*\\/.*/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\"{\\\\$])#.*/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'function-name': [\n\t\t\t// a) function foo {\n\t\t\t// b) foo() {\n\t\t\t// c) function foo() {\n\t\t\t// but not \u201cfoo {\u201d\n\t\t\t{\n\t\t\t\t// a) and c)\n\t\t\t\tpattern: /(\\bfunction\\s+)[\\w-]+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'function'\n\t\t\t},\n\t\t\t{\n\t\t\t\t// b)\n\t\t\t\tpattern: /\\b[\\w-]+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n\t\t\t\talias: 'function'\n\t\t\t}\n\t\t],\n\t\t// Highlight variable names as variables in for and select beginnings.\n\t\t'for-or-select': {\n\t\t\tpattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Highlight variable names as variables in the left-hand part\n\t\t// of assignments (\u201c=\u201d and \u201c+=\u201d).\n\t\t'assign-left': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()\\w+(?:\\.\\w+)*(?=\\+?=)/,\n\t\t\tinside: {\n\t\t\t\t'environment': {\n\t\t\t\t\tpattern: RegExp('(^|[\\\\s;|&]|[<>]\\\\()' + envVars),\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'constant'\n\t\t\t\t}\n\t\t\t},\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t// Highlight parameter names as variables\n\t\t'parameter': {\n\t\t\tpattern: /(^|\\s)-{1,2}(?:\\w+:[+-]?)?\\w+(?:\\.\\w+)*(?=[=\\s]|$)/,\n\t\t\talias: 'variable',\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': [\n\t\t\t// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)(\\w+)\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\2/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t// Here-document with quotes around the tag\n\t\t\t// \u2192 No expansion (so no \u201cinside\u201d).\n\t\t\t{\n\t\t\t\tpattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s[\\s\\S]*?(?:\\r?\\n|\\r)\\3/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'bash': commandAfterHeredoc\n\t\t\t\t}\n\t\t\t},\n\t\t\t// \u201cNormal\u201d string\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html\n\t\t\t\tpattern: /(^|[^\\\\](?:\\\\\\\\)*)\"(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|[^\"\\\\`$])*\"/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: insideString\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html\n\t\t\t\tpattern: /(^|[^$\\\\])'[^']*'/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t{\n\t\t\t\t// https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html\n\t\t\t\tpattern: /\\$'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'entity': insideString.entity\n\t\t\t\t}\n\t\t\t}\n\t\t],\n\t\t'environment': {\n\t\t\tpattern: RegExp('\\\\$?' + envVars),\n\t\t\talias: 'constant'\n\t\t},\n\t\t'variable': insideString.variable,\n\t\t'function': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'keyword': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t// https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n\t\t'builtin': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true,\n\t\t\t// Alias added to make those easier to distinguish from strings.\n\t\t\talias: 'class-name'\n\t\t},\n\t\t'boolean': {\n\t\t\tpattern: /(^|[\\s;|&]|[<>]\\()(?:false|true)(?=$|[)\\s;|&])/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'file-descriptor': {\n\t\t\tpattern: /\\B&\\d\\b/,\n\t\t\talias: 'important'\n\t\t},\n\t\t'operator': {\n\t\t\t// Lots of redirections here, but not just that.\n\t\t\tpattern: /\\d?<>|>\\||\\+=|=[=~]?|!=?|<<[<-]?|[&\\d]?>>|\\d[<>]&?|[<>][&=]?|&[>&]?|\\|[&|]?/,\n\t\t\tinside: {\n\t\t\t\t'file-descriptor': {\n\t\t\t\t\tpattern: /^\\d/,\n\t\t\t\t\talias: 'important'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n\t\t'number': {\n\t\t\tpattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n\t\t\tlookbehind: true\n\t\t}\n\t};\n\n\tcommandAfterHeredoc.inside = Prism.languages.bash;\n\n\t/* Patterns in command substitution. */\n\tvar toBeCopied = [\n\t\t'comment',\n\t\t'function-name',\n\t\t'for-or-select',\n\t\t'assign-left',\n\t\t'parameter',\n\t\t'string',\n\t\t'environment',\n\t\t'function',\n\t\t'keyword',\n\t\t'builtin',\n\t\t'boolean',\n\t\t'file-descriptor',\n\t\t'operator',\n\t\t'punctuation',\n\t\t'number'\n\t];\n\tvar inside = insideString.variable[1].inside;\n\tfor (var i = 0; i < toBeCopied.length; i++) {\n\t\tinside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n\t}\n\n\tPrism.languages.sh = Prism.languages.bash;\n\tPrism.languages.shell = Prism.languages.bash;\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7874\n")},2356:function(){eval("(function (Prism) {\n\n\tvar javascript = Prism.util.clone(Prism.languages.javascript);\n\n\tvar space = /(?:\\s|\\/\\/.*(?!.)|\\/\\*(?:[^*]|\\*(?!\\/))\\*\\/)/.source;\n\tvar braces = /(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})/.source;\n\tvar spread = /(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})/.source;\n\n\t/**\n\t * @param {string} source\n\t * @param {string} [flags]\n\t */\n\tfunction re(source, flags) {\n\t\tsource = source\n\t\t\t.replace(/<S>/g, function () { return space; })\n\t\t\t.replace(/<BRACES>/g, function () { return braces; })\n\t\t\t.replace(/<SPREAD>/g, function () { return spread; });\n\t\treturn RegExp(source, flags);\n\t}\n\n\tspread = re(spread).source;\n\n\n\tPrism.languages.jsx = Prism.languages.extend('markup', javascript);\n\tPrism.languages.jsx.tag.pattern = re(\n\t\t/<\\/?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s{'\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\\/?)?>/.source\n\t);\n\n\tPrism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/;\n\tPrism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/;\n\tPrism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n\tPrism.languages.jsx.tag.inside['comment'] = javascript['comment'];\n\n\tPrism.languages.insertBefore('inside', 'attr-name', {\n\t\t'spread': {\n\t\t\tpattern: re(/<SPREAD>/.source),\n\t\t\tinside: Prism.languages.jsx\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\tPrism.languages.insertBefore('inside', 'special-attr', {\n\t\t'script': {\n\t\t\t// Allow for two levels of nesting\n\t\t\tpattern: re(/=<BRACES>/.source),\n\t\t\talias: 'language-javascript',\n\t\t\tinside: {\n\t\t\t\t'script-punctuation': {\n\t\t\t\t\tpattern: /^=(?=\\{)/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.jsx\n\t\t\t},\n\t\t}\n\t}, Prism.languages.jsx.tag);\n\n\t// The following will handle plain text inside tags\n\tvar stringifyToken = function (token) {\n\t\tif (!token) {\n\t\t\treturn '';\n\t\t}\n\t\tif (typeof token === 'string') {\n\t\t\treturn token;\n\t\t}\n\t\tif (typeof token.content === 'string') {\n\t\t\treturn token.content;\n\t\t}\n\t\treturn token.content.map(stringifyToken).join('');\n\t};\n\n\tvar walkTokens = function (tokens) {\n\t\tvar openedTags = [];\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tvar notTagNorBrace = false;\n\n\t\t\tif (typeof token !== 'string') {\n\t\t\t\tif (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n\t\t\t\t\t// We found a tag, now find its kind\n\n\t\t\t\t\tif (token.content[0].content[0].content === '</') {\n\t\t\t\t\t\t// Closing tag\n\t\t\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n\t\t\t\t\t\t\t// Pop matching opening tag\n\t\t\t\t\t\t\topenedTags.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (token.content[token.content.length - 1].content === '/>') {\n\t\t\t\t\t\t\t// Autoclosed tag, ignore\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Opening tag\n\t\t\t\t\t\t\topenedTags.push({\n\t\t\t\t\t\t\t\ttagName: stringifyToken(token.content[0].content[1]),\n\t\t\t\t\t\t\t\topenedBraces: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n\n\t\t\t\t\t// Here we might have entered a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces++;\n\n\t\t\t\t} else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n\n\t\t\t\t\t// Here we might have left a JSX context inside a tag\n\t\t\t\t\topenedTags[openedTags.length - 1].openedBraces--;\n\n\t\t\t\t} else {\n\t\t\t\t\tnotTagNorBrace = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (notTagNorBrace || typeof token === 'string') {\n\t\t\t\tif (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n\t\t\t\t\t// Here we are inside a tag, and not inside a JSX context.\n\t\t\t\t\t// That's plain text: drop any tokens matched.\n\t\t\t\t\tvar plainText = stringifyToken(token);\n\n\t\t\t\t\t// And merge text with adjacent text\n\t\t\t\t\tif (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText += stringifyToken(tokens[i + 1]);\n\t\t\t\t\t\ttokens.splice(i + 1, 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n\t\t\t\t\t\tplainText = stringifyToken(tokens[i - 1]) + plainText;\n\t\t\t\t\t\ttokens.splice(i - 1, 1);\n\t\t\t\t\t\ti--;\n\t\t\t\t\t}\n\n\t\t\t\t\ttokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (token.content && typeof token.content !== 'string') {\n\t\t\t\twalkTokens(token.content);\n\t\t\t}\n\t\t}\n\t};\n\n\tPrism.hooks.add('after-tokenize', function (env) {\n\t\tif (env.language !== 'jsx' && env.language !== 'tsx') {\n\t\t\treturn;\n\t\t}\n\t\twalkTokens(env.tokens);\n\t});\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2356\n")},1029:function(){eval("(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.tsx['parameter'];\n\tdelete Prism.languages.tsx['literal-property'];\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyOS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS10c3guanM/YmU1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKFByaXNtKSB7XG5cdHZhciB0eXBlc2NyaXB0ID0gUHJpc20udXRpbC5jbG9uZShQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdCk7XG5cdFByaXNtLmxhbmd1YWdlcy50c3ggPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqc3gnLCB0eXBlc2NyaXB0KTtcblxuXHQvLyBkb2Vzbid0IHdvcmsgd2l0aCBUUyBiZWNhdXNlIFRTIGlzIHRvbyBjb21wbGV4XG5cdGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHN4WydwYXJhbWV0ZXInXTtcblx0ZGVsZXRlIFByaXNtLmxhbmd1YWdlcy50c3hbJ2xpdGVyYWwtcHJvcGVydHknXTtcblxuXHQvLyBUaGlzIHdpbGwgcHJldmVudCBjb2xsaXNpb25zIGJldHdlZW4gVFNYIHRhZ3MgYW5kIFRTIGdlbmVyaWMgdHlwZXMuXG5cdC8vIElkZWEgYnkgaHR0cHM6Ly9naXRodWIuY29tL2thcmxob3JreVxuXHQvLyBEaXNjdXNzaW9uOiBodHRwczovL2dpdGh1Yi5jb20vUHJpc21KUy9wcmlzbS9pc3N1ZXMvMjU5NCNpc3N1ZWNvbW1lbnQtNzEwNjY2OTI4XG5cdHZhciB0YWcgPSBQcmlzbS5sYW5ndWFnZXMudHN4LnRhZztcblx0dGFnLnBhdHRlcm4gPSBSZWdFeHAoLyhefFteXFx3JF18KD89PFxcLykpLy5zb3VyY2UgKyAnKD86JyArIHRhZy5wYXR0ZXJuLnNvdXJjZSArICcpJywgdGFnLnBhdHRlcm4uZmxhZ3MpO1xuXHR0YWcubG9va2JlaGluZCA9IHRydWU7XG59KFByaXNtKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1029\n")},6836:function(){eval("(function (Prism) {\n\n\tPrism.languages.typescript = Prism.languages.extend('javascript', {\n\t\t'class-name': {\n\t\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: null // see below\n\t\t},\n\t\t'builtin': /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/,\n\t});\n\n\t// The keywords TypeScript adds to JavaScript\n\tPrism.languages.typescript.keyword.push(\n\t\t/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n\t\t// keywords that have to be followed by an identifier\n\t\t/\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n\t\t// This is for `import type *, {}`\n\t\t/\\btype\\b(?=\\s*(?:[\\{*]|$))/\n\t);\n\n\t// doesn't work with TS because TS is too complex\n\tdelete Prism.languages.typescript['parameter'];\n\tdelete Prism.languages.typescript['literal-property'];\n\n\t// a version of typescript specifically for highlighting types\n\tvar typeInside = Prism.languages.extend('typescript', {});\n\tdelete typeInside['class-name'];\n\n\tPrism.languages.typescript['class-name'].inside = typeInside;\n\n\tPrism.languages.insertBefore('typescript', 'function', {\n\t\t'decorator': {\n\t\t\tpattern: /@[$\\w\\xA0-\\uFFFF]+/,\n\t\t\tinside: {\n\t\t\t\t'at': {\n\t\t\t\t\tpattern: /^@/,\n\t\t\t\t\talias: 'operator'\n\t\t\t\t},\n\t\t\t\t'function': /^[\\s\\S]+/\n\t\t\t}\n\t\t},\n\t\t'generic-function': {\n\t\t\t// e.g. foo<T extends \"bar\" | \"baz\">( ...\n\t\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n\t\t\t\t'generic': {\n\t\t\t\t\tpattern: /<[\\s\\S]+/, // everything after the first <\n\t\t\t\t\talias: 'class-name',\n\t\t\t\t\tinside: typeInside\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.ts = Prism.languages.typescript;\n\n}(Prism));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjgzNi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FLG1DQUFtQztBQUNuQyx1QkFBdUI7QUFDdkI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly96ZWR1eC1kb2NzLy4vbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS10eXBlc2NyaXB0LmpzPzhlNDkiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChQcmlzbSkge1xuXG5cdFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnamF2YXNjcmlwdCcsIHtcblx0XHQnY2xhc3MtbmFtZSc6IHtcblx0XHRcdHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3x0eXBlKVxccyspKD8ha2V5b2ZcXGIpKD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/Olxccyo8KD86W148Pl18PCg/OltePD5dfDxbXjw+XSo+KSo+KSo+KT8vLFxuXHRcdFx0bG9va2JlaGluZDogdHJ1ZSxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcblx0XHR9LFxuXHRcdCdidWlsdGluJzogL1xcYig/OkFycmF5fEZ1bmN0aW9ufFByb21pc2V8YW55fGJvb2xlYW58Y29uc29sZXxuZXZlcnxudW1iZXJ8c3RyaW5nfHN5bWJvbHx1bmtub3duKVxcYi8sXG5cdH0pO1xuXG5cdC8vIFRoZSBrZXl3b3JkcyBUeXBlU2NyaXB0IGFkZHMgdG8gSmF2YVNjcmlwdFxuXHRQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdC5rZXl3b3JkLnB1c2goXG5cdFx0L1xcYig/OmFic3RyYWN0fGRlY2xhcmV8aXN8a2V5b2Z8cmVhZG9ubHl8cmVxdWlyZSlcXGIvLFxuXHRcdC8vIGtleXdvcmRzIHRoYXQgaGF2ZSB0byBiZSBmb2xsb3dlZCBieSBhbiBpZGVudGlmaWVyXG5cdFx0L1xcYig/OmFzc2VydHN8aW5mZXJ8aW50ZXJmYWNlfG1vZHVsZXxuYW1lc3BhY2V8dHlwZSlcXGIoPz1cXHMqKD86W3tfJGEtekEtWlxceEEwLVxcdUZGRkZdfCQpKS8sXG5cdFx0Ly8gVGhpcyBpcyBmb3IgYGltcG9ydCB0eXBlICosIHt9YFxuXHRcdC9cXGJ0eXBlXFxiKD89XFxzKig/OltcXHsqXXwkKSkvXG5cdCk7XG5cblx0Ly8gZG9lc24ndCB3b3JrIHdpdGggVFMgYmVjYXVzZSBUUyBpcyB0b28gY29tcGxleFxuXHRkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ3BhcmFtZXRlciddO1xuXHRkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ2xpdGVyYWwtcHJvcGVydHknXTtcblxuXHQvLyBhIHZlcnNpb24gb2YgdHlwZXNjcmlwdCBzcGVjaWZpY2FsbHkgZm9yIGhpZ2hsaWdodGluZyB0eXBlc1xuXHR2YXIgdHlwZUluc2lkZSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ3R5cGVzY3JpcHQnLCB7fSk7XG5cdGRlbGV0ZSB0eXBlSW5zaWRlWydjbGFzcy1uYW1lJ107XG5cblx0UHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ2NsYXNzLW5hbWUnXS5pbnNpZGUgPSB0eXBlSW5zaWRlO1xuXG5cdFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3R5cGVzY3JpcHQnLCAnZnVuY3Rpb24nLCB7XG5cdFx0J2RlY29yYXRvcic6IHtcblx0XHRcdHBhdHRlcm46IC9AWyRcXHdcXHhBMC1cXHVGRkZGXSsvLFxuXHRcdFx0aW5zaWRlOiB7XG5cdFx0XHRcdCdhdCc6IHtcblx0XHRcdFx0XHRwYXR0ZXJuOiAvXkAvLFxuXHRcdFx0XHRcdGFsaWFzOiAnb3BlcmF0b3InXG5cdFx0XHRcdH0sXG5cdFx0XHRcdCdmdW5jdGlvbic6IC9eW1xcc1xcU10rL1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0J2dlbmVyaWMtZnVuY3Rpb24nOiB7XG5cdFx0XHQvLyBlLmcuIGZvbzxUIGV4dGVuZHMgXCJiYXJcIiB8IFwiYmF6XCI+KCAuLi5cblx0XHRcdHBhdHRlcm46IC8jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSpcXHMqPCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPig/PVxccypcXCgpLyxcblx0XHRcdGdyZWVkeTogdHJ1ZSxcblx0XHRcdGluc2lkZToge1xuXHRcdFx0XHQnZnVuY3Rpb24nOiAvXiM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKi8sXG5cdFx0XHRcdCdnZW5lcmljJzoge1xuXHRcdFx0XHRcdHBhdHRlcm46IC88W1xcc1xcU10rLywgLy8gZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgPFxuXHRcdFx0XHRcdGFsaWFzOiAnY2xhc3MtbmFtZScsXG5cdFx0XHRcdFx0aW5zaWRlOiB0eXBlSW5zaWRlXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdFByaXNtLmxhbmd1YWdlcy50cyA9IFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0O1xuXG59KFByaXNtKSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6836\n")},5660:function(module,__unused_webpack_exports,__webpack_require__){eval("\n/* **********************************************\n     Begin prism-core.js\n********************************************** */\n\n/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism\u2019s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you\u2019re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif ( true && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof __webpack_require__.g !== 'undefined') {\n\t__webpack_require__.g.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n\n\n/* **********************************************\n     Begin prism-markup.js\n********************************************** */\n\nPrism.languages.markup = {\n\t'comment': {\n\t\tpattern: /\x3c!--(?:(?!\x3c!--)[\\s\\S])*?--\x3e/,\n\t\tgreedy: true\n\t},\n\t'prolog': {\n\t\tpattern: /<\\?[\\s\\S]+?\\?>/,\n\t\tgreedy: true\n\t},\n\t'doctype': {\n\t\t// https://www.w3.org/TR/xml/#NT-doctypedecl\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:[^<\"'\\]]|\"[^\"]*\"|'[^']*'|<(?!!--)|\x3c!--(?:[^-]|-(?!->))*--\x3e)*\\]\\s*)?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'internal-subset': {\n\t\t\t\tpattern: /(^[^\\[]*\\[)[\\s\\S]+(?=\\]>$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: null // see below\n\t\t\t},\n\t\t\t'string': {\n\t\t\t\tpattern: /\"[^\"]*\"|'[^']*'/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'punctuation': /^<!|>$|[[\\]]/,\n\t\t\t'doctype-tag': /^DOCTYPE/i,\n\t\t\t'name': /[^\\s<>'\"]+/\n\t\t}\n\t},\n\t'cdata': {\n\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\tgreedy: true\n\t},\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'special-attr': [],\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': [\n\t\t{\n\t\t\tpattern: /&[\\da-z]{1,8};/i,\n\t\t\talias: 'named-entity'\n\t\t},\n\t\t/&#x?[\\da-f]{1,8};/i\n\t]\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\nPrism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function (env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addAttribute', {\n\t/**\n\t * Adds an pattern to highlight languages embedded in HTML attributes.\n\t *\n\t * An example of an inlined language is CSS with `style` attributes.\n\t *\n\t * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addAttribute('style', 'css');\n\t */\n\tvalue: function (attrName, lang) {\n\t\tPrism.languages.markup.tag.inside['special-attr'].push({\n\t\t\tpattern: RegExp(\n\t\t\t\t/(^|[\"'\\s])/.source + '(?:' + attrName + ')' + /\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))/.source,\n\t\t\t\t'i'\n\t\t\t),\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attr-name': /^[^\\s=]+/,\n\t\t\t\t'attr-value': {\n\t\t\t\t\tpattern: /=[\\s\\S]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'value': {\n\t\t\t\t\t\t\tpattern: /(^=\\s*([\"']|(?![\"'])))\\S[\\s\\S]*(?=\\2$)/,\n\t\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\t\talias: [lang, 'language-' + lang],\n\t\t\t\t\t\t\tinside: Prism.languages[lang]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpattern: /^=/,\n\t\t\t\t\t\t\t\talias: 'attr-equals'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/\"|'/\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n});\n\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.ssml = Prism.languages.xml;\nPrism.languages.atom = Prism.languages.xml;\nPrism.languages.rss = Prism.languages.xml;\n\n\n/* **********************************************\n     Begin prism-css.js\n********************************************** */\n\n(function (Prism) {\n\n\tvar string = /(?:\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n])*')/;\n\n\tPrism.languages.css = {\n\t\t'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n\t\t'atrule': {\n\t\t\tpattern: RegExp('@[\\\\w-](?:' + /[^;{\\s\"']|\\s+(?!\\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\\s*\\{))/.source),\n\t\t\tinside: {\n\t\t\t\t'rule': /^@[\\w-]+/,\n\t\t\t\t'selector-function-argument': {\n\t\t\t\t\tpattern: /(\\bselector\\s*\\(\\s*(?![\\s)]))(?:[^()\\s]|\\s+(?![\\s)])|\\((?:[^()]|\\([^()]*\\))*\\))+(?=\\s*\\))/,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'selector'\n\t\t\t\t},\n\t\t\t\t'keyword': {\n\t\t\t\t\tpattern: /(^|[^\\w-])(?:and|not|only|or)(?![\\w-])/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t}\n\t\t\t\t// See rest below\n\t\t\t}\n\t\t},\n\t\t'url': {\n\t\t\t// https://drafts.csswg.org/css-values-3/#urls\n\t\t\tpattern: RegExp('\\\\burl\\\\((?:' + string.source + '|' + /(?:[^\\\\\\r\\n()\"']|\\\\[\\s\\S])*/.source + ')\\\\)', 'i'),\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'function': /^url/i,\n\t\t\t\t'punctuation': /^\\(|\\)$/,\n\t\t\t\t'string': {\n\t\t\t\t\tpattern: RegExp('^' + string.source + '$'),\n\t\t\t\t\talias: 'url'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'selector': {\n\t\t\tpattern: RegExp('(^|[{}\\\\s])[^{}\\\\s](?:[^{};\"\\'\\\\s]|\\\\s+(?![\\\\s{])|' + string.source + ')*(?=\\\\s*\\\\{)'),\n\t\t\tlookbehind: true\n\t\t},\n\t\t'string': {\n\t\t\tpattern: string,\n\t\t\tgreedy: true\n\t\t},\n\t\t'property': {\n\t\t\tpattern: /(^|[^-\\w\\xA0-\\uFFFF])(?!\\s)[-_a-z\\xA0-\\uFFFF](?:(?!\\s)[-\\w\\xA0-\\uFFFF])*(?=\\s*:)/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'important': /!important\\b/i,\n\t\t'function': {\n\t\t\tpattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\\()/i,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'punctuation': /[(){};:,]/\n\t};\n\n\tPrism.languages.css['atrule'].inside.rest = Prism.languages.css;\n\n\tvar markup = Prism.languages.markup;\n\tif (markup) {\n\t\tmarkup.tag.addInlined('style', 'css');\n\t\tmarkup.tag.addAttribute('style', 'css');\n\t}\n\n}(Prism));\n\n\n/* **********************************************\n     Begin prism-clike.js\n********************************************** */\n\nPrism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n\n\n/* **********************************************\n     Begin prism-javascript.js\n********************************************** */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n\n\n/* **********************************************\n     Begin prism-file-highlight.js\n********************************************** */\n\n(function () {\n\n\tif (typeof Prism === 'undefined' || typeof document === 'undefined') {\n\t\treturn;\n\t}\n\n\t// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\n\tif (!Element.prototype.matches) {\n\t\tElement.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\t}\n\n\tvar LOADING_MESSAGE = 'Loading\u2026';\n\tvar FAILURE_MESSAGE = function (status, message) {\n\t\treturn '\u2716 Error ' + status + ' while fetching file: ' + message;\n\t};\n\tvar FAILURE_EMPTY_MESSAGE = '\u2716 Error: File does not exist or is empty';\n\n\tvar EXTENSIONS = {\n\t\t'js': 'javascript',\n\t\t'py': 'python',\n\t\t'rb': 'ruby',\n\t\t'ps1': 'powershell',\n\t\t'psm1': 'powershell',\n\t\t'sh': 'bash',\n\t\t'bat': 'batch',\n\t\t'h': 'c',\n\t\t'tex': 'latex'\n\t};\n\n\tvar STATUS_ATTR = 'data-src-status';\n\tvar STATUS_LOADING = 'loading';\n\tvar STATUS_LOADED = 'loaded';\n\tvar STATUS_FAILED = 'failed';\n\n\tvar SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '=\"' + STATUS_LOADED + '\"])'\n\t\t+ ':not([' + STATUS_ATTR + '=\"' + STATUS_LOADING + '\"])';\n\n\t/**\n\t * Loads the given file.\n\t *\n\t * @param {string} src The URL or path of the source file to load.\n\t * @param {(result: string) => void} success\n\t * @param {(reason: string) => void} error\n\t */\n\tfunction loadFile(src, success, error) {\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', src, true);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState == 4) {\n\t\t\t\tif (xhr.status < 400 && xhr.responseText) {\n\t\t\t\t\tsuccess(xhr.responseText);\n\t\t\t\t} else {\n\t\t\t\t\tif (xhr.status >= 400) {\n\t\t\t\t\t\terror(FAILURE_MESSAGE(xhr.status, xhr.statusText));\n\t\t\t\t\t} else {\n\t\t\t\t\t\terror(FAILURE_EMPTY_MESSAGE);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\txhr.send(null);\n\t}\n\n\t/**\n\t * Parses the given range.\n\t *\n\t * This returns a range with inclusive ends.\n\t *\n\t * @param {string | null | undefined} range\n\t * @returns {[number, number | undefined] | undefined}\n\t */\n\tfunction parseRange(range) {\n\t\tvar m = /^\\s*(\\d+)\\s*(?:(,)\\s*(?:(\\d+)\\s*)?)?$/.exec(range || '');\n\t\tif (m) {\n\t\t\tvar start = Number(m[1]);\n\t\t\tvar comma = m[2];\n\t\t\tvar end = m[3];\n\n\t\t\tif (!comma) {\n\t\t\t\treturn [start, start];\n\t\t\t}\n\t\t\tif (!end) {\n\t\t\t\treturn [start, undefined];\n\t\t\t}\n\t\t\treturn [start, Number(end)];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tPrism.hooks.add('before-highlightall', function (env) {\n\t\tenv.selector += ', ' + SELECTOR;\n\t});\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = /** @type {HTMLPreElement} */ (env.element);\n\t\tif (pre.matches(SELECTOR)) {\n\t\t\tenv.code = ''; // fast-path the whole thing and go to complete\n\n\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading\n\n\t\t\t// add code element with loading message\n\t\t\tvar code = pre.appendChild(document.createElement('CODE'));\n\t\t\tcode.textContent = LOADING_MESSAGE;\n\n\t\t\tvar src = pre.getAttribute('data-src');\n\n\t\t\tvar language = env.language;\n\t\t\tif (language === 'none') {\n\t\t\t\t// the language might be 'none' because there is no language set;\n\t\t\t\t// in this case, we want to use the extension as the language\n\t\t\t\tvar extension = (/\\.(\\w+)$/.exec(src) || [, 'none'])[1];\n\t\t\t\tlanguage = EXTENSIONS[extension] || extension;\n\t\t\t}\n\n\t\t\t// set language classes\n\t\t\tPrism.util.setLanguage(code, language);\n\t\t\tPrism.util.setLanguage(pre, language);\n\n\t\t\t// preload the language\n\t\t\tvar autoloader = Prism.plugins.autoloader;\n\t\t\tif (autoloader) {\n\t\t\t\tautoloader.loadLanguages(language);\n\t\t\t}\n\n\t\t\t// load file\n\t\t\tloadFile(\n\t\t\t\tsrc,\n\t\t\t\tfunction (text) {\n\t\t\t\t\t// mark as loaded\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_LOADED);\n\n\t\t\t\t\t// handle data-range\n\t\t\t\t\tvar range = parseRange(pre.getAttribute('data-range'));\n\t\t\t\t\tif (range) {\n\t\t\t\t\t\tvar lines = text.split(/\\r\\n?|\\n/g);\n\n\t\t\t\t\t\t// the range is one-based and inclusive on both ends\n\t\t\t\t\t\tvar start = range[0];\n\t\t\t\t\t\tvar end = range[1] == null ? lines.length : range[1];\n\n\t\t\t\t\t\tif (start < 0) { start += lines.length; }\n\t\t\t\t\t\tstart = Math.max(0, Math.min(start - 1, lines.length));\n\t\t\t\t\t\tif (end < 0) { end += lines.length; }\n\t\t\t\t\t\tend = Math.max(0, Math.min(end, lines.length));\n\n\t\t\t\t\t\ttext = lines.slice(start, end).join('\\n');\n\n\t\t\t\t\t\t// add data-start for line numbers\n\t\t\t\t\t\tif (!pre.hasAttribute('data-start')) {\n\t\t\t\t\t\t\tpre.setAttribute('data-start', String(start + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// highlight code\n\t\t\t\t\tcode.textContent = text;\n\t\t\t\t\tPrism.highlightElement(code);\n\t\t\t\t},\n\t\t\t\tfunction (error) {\n\t\t\t\t\t// mark as failed\n\t\t\t\t\tpre.setAttribute(STATUS_ATTR, STATUS_FAILED);\n\n\t\t\t\t\tcode.textContent = error;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n\tPrism.plugins.fileHighlight = {\n\t\t/**\n\t\t * Executes the File Highlight plugin for all matching `pre` elements under the given container.\n\t\t *\n\t\t * Note: Elements which are already loaded or currently loading will not be touched by this method.\n\t\t *\n\t\t * @param {ParentNode} [container=document]\n\t\t */\n\t\thighlight: function highlight(container) {\n\t\t\tvar elements = (container || document).querySelectorAll(SELECTOR);\n\n\t\t\tfor (var i = 0, element; (element = elements[i++]);) {\n\t\t\t\tPrism.highlightElement(element);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar logged = false;\n\t/** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */\n\tPrism.fileHighlight = function () {\n\t\tif (!logged) {\n\t\t\tconsole.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');\n\t\t\tlogged = true;\n\t\t}\n\t\tPrism.plugins.fileHighlight.highlight.apply(this, arguments);\n\t};\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5660\n")},1880:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ _taggedTemplateLiteralLoose; }\n/* harmony export */ });\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4MC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3plZHV4LWRvY3MvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UuanM/NDg1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2Uoc3RyaW5ncywgcmF3KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgfVxuICBzdHJpbmdzLnJhdyA9IHJhdztcbiAgcmV0dXJuIHN0cmluZ3M7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1880\n')}}]);