"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9641],{1630:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'complex-params\',title:\'Complex Params\'};var contentTitle=undefined;var metadata={"unversionedId":"advanced/complex-params","id":"advanced/complex-params","title":"Complex Params","description":"Atom params and atom selector params must be serializable (with the exception of passing atom instances themselves). Though it isn\'t recommended, you can disable this requirement.","source":"@site/docs/advanced/complex-params.mdx","sourceDirName":"advanced","slug":"/advanced/complex-params","permalink":"/zedux/docs/advanced/complex-params","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/advanced/complex-params.mdx","tags":[],"version":"current","frontMatter":{"id":"complex-params","title":"Complex Params"},"sidebar":"react","previous":{"title":"Batching","permalink":"/zedux/docs/advanced/batching"},"next":{"title":"More Patterns","permalink":"/zedux/docs/advanced/more-patterns"}};var assets={};var toc=[{value:\'<code>complexParams</code>\',id:\'complexparams\',level:2},{value:\'Referential Equality\',id:\'referential-equality\',level:3},{value:\'Why not?\',id:\'why-not\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atom params and atom selector params must be serializable (with the exception of passing atom instances themselves). Though it isn\'t recommended, you can disable this requirement."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"How to make Zedux map non-serializable objects to serializable ids when creating atom instance and atom selector ids.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"complexparams"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h2"},"complexParams")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This ecosystem config option turns on param mapping for atom and atom selector params."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const ecosystem = createEcosystem({\\n  complexParams: true,\\n  id: \'root\',\\n})\\n// or\\n<EcosystemProvider complexParams id=\\"root\\">\\n  {children}\\n</EcosystemProvider>\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An example passing a filter function as an atom param:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts","metastring":"live resultVar=output","live":true,"resultVar":"output"},"const numbers = Array(10)\\n  .fill()\\n  .map((_, i) => i)\\n\\nconst numbersAtom = atom(\'numbers\', filter => numbers.filter(filter))\\n\\nconst ecosystem = createEcosystem({\\n  complexParams: true,\\n  id: \'atom-params-example\',\\n})\\n\\nconst evenNumbersInstance = ecosystem.getInstance(numbersAtom, [\\n  num => !(num % 2),\\n])\\n\\nconst oddNumbersInstance = ecosystem.getInstance(numbersAtom, [num => num % 2])\\n\\nconst output = {\\n  evenNumbers: evenNumbersInstance.getState(),\\n  oddNumbers: oddNumbersInstance.getState(),\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An example with atom selectors:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=blues resultVar=App","live":true,"ecosystemId":"blues","resultVar":"App"},"const colorsAtom = atom(\'colors\', () => [\\n  { name: \'azure\', base: \'blue\' },\\n  { name: \'navy\', base: \'blue\' },\\n  { name: \'burgundy\', base: \'red\' },\\n])\\n\\n// an atom selector:\\nconst getByFilter = ({ get }, filter) => get(colorsAtom).filter(filter)\\n\\n// a nice helper function we made\\nconst filterByBlues = item => item.base === \'blue\'\\n\\nfunction Blues() {\\n  // the `filterByBlues` param isn\'t serializable but we can pass it now thanks\\n  // to `complexParams`:\\n  const blues = useAtomSelector(getByFilter, filterByBlues)\\n\\n  return (\\n    <ul>\\n      {blues.map(item => (\\n        <li key={item.name}>{item.name}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nconst App = () => (\\n  <EcosystemProvider complexParams id=\\"blues\\">\\n    <Blues />\\n  </EcosystemProvider>\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Try clicking ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Log > Graph")," to see that Zedux generated an id for the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"getByFilter")," atom selector node\'s param."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"referential-equality"},"Referential Equality"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Typically you should extract the complex param into a separate variable so it can be shared across usages:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// these calls create different instances since the function reference changes:\\ngetInstance(numbersAtom, [num => num % 2])\\ngetInstance(numbersAtom, [num => num % 2])\\n\\n// declare the function separately so it can be reused:\\nconst getEvenNumbers = num => num % 2\\n\\n// now these calls reuse the same instance:\\ngetInstance(numbersAtom, [getEvenNumbers])\\ngetInstance(numbersAtom, [getEvenNumbers])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"why-not"},"Why not?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Using complex params is not recommended because the ids that Zedux generates can make your atom graph more difficult to read and debug. When working with multiple windows or realms of any sort, it also requires more work on your part to share object references across the realms so Zedux can recognize them."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1630\n')}}]);