"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9175],{9032:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return m},metadata:function(){return d},toc:function(){return l},default:function(){return p}});var s=n(3117),a=n(102),c=(n(7294),n(3905)),o=n(3052),i=["components"],r={id:"injectEcosystem",title:"injectEcosystem"},m=void 0,d={unversionedId:"api/injectors/injectEcosystem",id:"api/injectors/injectEcosystem",isDocsHomePage:!1,title:"injectEcosystem",description:"An injector that returns a reference to the ecosystem the current atom instance was (or is being) created in.",source:"@site/docs/api/injectors/injectEcosystem.mdx",sourceDirName:"api/injectors",slug:"/api/injectors/injectEcosystem",permalink:"/zedux/docs/api/injectors/injectEcosystem",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/injectors/injectEcosystem.mdx",tags:[],version:"current",frontMatter:{id:"injectEcosystem",title:"injectEcosystem"},sidebar:"react",previous:{title:"injectCallback",permalink:"/zedux/docs/api/injectors/injectCallback"},next:{title:"injectEffect",permalink:"/zedux/docs/api/injectors/injectEffect"}},l=[{value:"Example",id:"example",children:[],level:2},{value:"Signature",id:"signature",children:[],level:2}],u={toc:l};function p(e){var t=e.components,n=(0,a.Z)(e,i);return(0,c.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"import { injectEcosystem } from '@zedux/react'\n")),(0,c.kt)("p",null,"An ",(0,c.kt)("a",{parentName:"p",href:"../glossary#injector"},"injector")," that returns a reference to the ",(0,c.kt)("a",{parentName:"p",href:"../classes/Ecosystem"},"ecosystem")," the current atom instance was (or is being) created in."),(0,c.kt)("p",null,"Can be used to inspect other atom values without registering a graph dependency on those atom instances."),(0,c.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,c.kt)("div",{parentName:"div",className:"admonition-heading"},(0,c.kt)("h5",{parentName:"div"},(0,c.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,c.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,c.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,c.kt)("div",{parentName:"div",className:"admonition-content"},(0,c.kt)("p",{parentName:"div"},"This should be viewed as an escape hatch. There shouldn't be many use cases for accessing the ecosystem inside an evaluator function. Use sparingly."))),(0,c.kt)("h2",{id:"example"},"Example"),(0,c.kt)(o.u,{resultVar:"Seconds",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', () => {\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nconst lazyAtom = ion('lazy', ({ get }) => {\n  const currentEcosystem = injectEcosystem()\n\n  // ion's get function would register a dynamic graph dependency here.\n  // Try deleting \"currentEcosystem.\":\n  const seconds = currentEcosystem.get(secondsAtom)\n\n  return seconds\n})\n\nfunction Seconds() {\n  const lazySeconds = useAtomValue(lazyAtom)\n  const instance = useAtomInstance(lazyAtom)\n\n  return (\n    <>\n      <div>Unchanging Seconds: {lazySeconds}</div>\n      <button onClick={() => instance.invalidate()}>Force Update</button>\n    </>\n  )\n}\n"),(0,c.kt)("h2",{id:"signature"},"Signature"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ts"},"injectEcosystem() => Ecosystem\n")),(0,c.kt)("p",null,"Returns ",(0,c.kt)("a",{parentName:"p",href:"../classes/Ecosystem"},"an Ecosystem instance"),"."))}p.isMDXComponent=!0}}]);