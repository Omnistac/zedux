"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[5574],{6751:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var o=t(3117),s=t(102),a=(t(7294),t(3905)),r=t(3052),i=["components"],c={id:"AtomInstanceProvider",title:"AtomInstanceProvider"},d=void 0,p={unversionedId:"api/components/AtomInstanceProvider",id:"api/components/AtomInstanceProvider",isDocsHomePage:!1,title:"AtomInstanceProvider",description:"A component that provides one or more atom instances over React context.",source:"@site/docs/api/components/AtomInstanceProvider.mdx",sourceDirName:"api/components",slug:"/api/components/AtomInstanceProvider",permalink:"/zedux/docs/api/components/AtomInstanceProvider",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/components/AtomInstanceProvider.mdx",tags:[],version:"current",frontMatter:{id:"AtomInstanceProvider",title:"AtomInstanceProvider"},sidebar:"react",previous:{title:"EcosystemProvider",permalink:"/zedux/docs/api/components/EcosystemProvider"},next:{title:"metaTypes",permalink:"/zedux/docs/api/constants/metaTypes"}},m=[{value:"Example",id:"example",children:[],level:2},{value:"Props",id:"props",children:[{value:"<code>instance</code>",id:"instance",children:[],level:3},{value:"<code>instances</code>",id:"instances",children:[],level:3}],level:2}],l={toc:m};function u(e){var n=e.components,t=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { AtomInstanceProvider } from '@zedux/react'\n")),(0,a.kt)("p",null,"A component that provides one or more ",(0,a.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instances")," over React context."),(0,a.kt)("p",null,"To consume the provided instances, use ",(0,a.kt)("a",{parentName:"p",href:"../hooks/useAtomConsumer"},(0,a.kt)("inlineCode",{parentName:"a"},"useAtomConsumer()")),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(r.u,{resultVar:"Parent",mdxType:"LiveEditor"},"\nconst secondsAtom = atom('seconds', () => {\n  const store = injectStore(0)\n\n  injectEffect(() => {\n    const intervalId = setInterval(\n      () => store.setState(val => val + 1),\n      1000\n    )\n\n    return () => clearInterval(intervalId)\n  }, [])\n\n  return store\n})\n\nfunction Child() {\n  const instance = useAtomConsumer(secondsAtom)\n  const state = useAtomValue(instance) // subscribe\n\n  return (\n    <div>Child's Seconds: {state}</div>\n  )\n}\n\nfunction Parent() {\n  const instance = useAtomInstance(secondsAtom)\n\n  return (\n    <AtomInstanceProvider instance={instance}>\n      <Child />\n    </AtomInstanceProvider>\n  )\n}\n"),(0,a.kt)("p",null,"Providing multiple instances:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"<AtomInstanceProvider instances={[instanceA, instanceB]}>\n  {children}\n</AtomInstanceProvider>\n")),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("p",null,"AtomInstanceProvider accepts ",(0,a.kt)("strong",{parentName:"p"},"either")," an ",(0,a.kt)("inlineCode",{parentName:"p"},"instance")," prop with a single atom instance OR an ",(0,a.kt)("inlineCode",{parentName:"p"},"instances")," prop with an array of instances. You must pass one or the other."),(0,a.kt)("h3",{id:"instance"},(0,a.kt)("inlineCode",{parentName:"h3"},"instance")),(0,a.kt)("p",null,"Optional. A single ",(0,a.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instance"),". This instance will be provided over React context."),(0,a.kt)("h3",{id:"instances"},(0,a.kt)("inlineCode",{parentName:"h3"},"instances")),(0,a.kt)("p",null,"Optional. An array of atom instances. Each instance will be provided with a separate React context provider."))}u.isMDXComponent=!0}}]);