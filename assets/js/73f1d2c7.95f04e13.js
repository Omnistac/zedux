"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[8951],{7241:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return p},default:function(){return c}});var a=n(3117),o=n(102),i=(n(7294),n(3905)),s=["components"],r={id:"AtomConfig",title:"AtomConfig"},l=void 0,m={unversionedId:"api/types/AtomConfig",id:"api/types/AtomConfig",isDocsHomePage:!1,title:"AtomConfig",description:"An AtomConfig object is the 3rd argument passed to the atom() factory.",source:"@site/docs/api/types/AtomConfig.mdx",sourceDirName:"api/types",slug:"/api/types/AtomConfig",permalink:"/zedux/docs/api/types/AtomConfig",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/AtomConfig.mdx",tags:[],version:"current",frontMatter:{id:"AtomConfig",title:"AtomConfig"},sidebar:"react",previous:{title:"AsyncStore",permalink:"/zedux/docs/api/types/AsyncStore"},next:{title:"AtomGetters",permalink:"/zedux/docs/api/types/AtomGetters"}},p=[{value:"Definition",id:"definition",children:[{value:"<code>flags</code>",id:"flags",children:[],level:3},{value:"<code>forwardPromises</code>",id:"forwardpromises",children:[],level:3},{value:"<code>maxInstances</code>",id:"maxinstances",children:[],level:3},{value:"<code>ttl</code>",id:"ttl",children:[],level:3}],level:2}],d={toc:p};function c(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"An AtomConfig object is the 3rd argument passed to ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface AtomConfig {\n  flags?: string[]\n  maxInstances?: number\n  ttl?: number\n}\n")),(0,i.kt)("h3",{id:"flags"},(0,i.kt)("inlineCode",{parentName:"h3"},"flags")),(0,i.kt)("p",null,"Optional. An array of strings. These flags correlate to the ",(0,i.kt)("a",{parentName:"p",href:"../classes/Ecosystem#flags"},"Ecosystem's ",(0,i.kt)("inlineCode",{parentName:"a"},"flags")," property"),". See that page for an example."),(0,i.kt)("h3",{id:"forwardpromises"},(0,i.kt)("inlineCode",{parentName:"h3"},"forwardPromises")),(0,i.kt)("p",null,"Optional. A boolean. Whether instances of this atom should create a default ",(0,i.kt)("a",{parentName:"p",href:"../classes/AtomInstance#promise"},(0,i.kt)("inlineCode",{parentName:"a"},".promise")," property")," that is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise.all()")," of the atom instance's initial dependencies' promises. See ",(0,i.kt)("a",{parentName:"p",href:"../classes/Atom#forwardpromises"},"Atom#forwardPromises"),"."),(0,i.kt)("h3",{id:"maxinstances"},(0,i.kt)("inlineCode",{parentName:"h3"},"maxInstances")),(0,i.kt)("p",null,"Optional. A number. Indicates the largest ideal cache size for this atom. See ",(0,i.kt)("a",{parentName:"p",href:"../classes/Atom#maxinstances"},"Atom#maxInstances"),"."),(0,i.kt)("h3",{id:"ttl"},(0,i.kt)("inlineCode",{parentName:"h3"},"ttl")),(0,i.kt)("p",null,"Optional. A number. How long instances of the atom should stick around when stale. See ",(0,i.kt)("a",{parentName:"p",href:"../classes/Atom#ttl"},"Atom#ttl"),"."))}c.isMDXComponent=!0}}]);