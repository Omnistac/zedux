"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[5571],{8093:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'ssr\',title:\'SSR\'};var contentTitle=undefined;var metadata={"unversionedId":"advanced/ssr","id":"advanced/ssr","title":"SSR","description":"This guide assumes knowledge of the persistence guide. It\'s recommended to read that first.","source":"@site/docs/advanced/ssr.mdx","sourceDirName":"advanced","slug":"/advanced/ssr","permalink":"/zedux/docs/advanced/ssr","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/advanced/ssr.mdx","tags":[],"version":"current","frontMatter":{"id":"ssr","title":"SSR"},"sidebar":"react","previous":{"title":"Plugins","permalink":"/zedux/docs/advanced/plugins"},"next":{"title":"Store Composition","permalink":"/zedux/docs/advanced/store-composition"}};var assets={};var toc=[{value:\'SSR Setup\',id:\'ssr-setup\',level:2},{value:\'Server Dehydration\',id:\'server-dehydration\',level:2},{value:\'Promises\',id:\'promises\',level:3},{value:\'Prefetching\',id:\'prefetching\',level:3},{value:\'Other Techniques\',id:\'other-techniques\',level:3},{value:\'Client Hydration\',id:\'client-hydration\',level:2},{value:\'Recap\',id:\'recap\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"This guide assumes knowledge of the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"persistence"},"persistence guide"),". It\'s recommended to read that first.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"persistence"},"The persistence guide")," showed how to get an ecosystem\'s state snapshot and use it to rehydrate the entire ecosystem. There is only a little more to learn to get a full-fledged SSR setup going."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"How to use Zedux in a server-rendered app")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"ssr-setup"},"SSR Setup"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ssr")," ecosystem config option to turn on SSR mode for the entire ecosystem:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const ecosystem = createEcosystem({\\n  id: \'root\',\\n  ssr: true,\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In SSR mode, effects created via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectEffect")," don\'t run. This exactly mimics the behavior of React\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useEffect")," on the server. The vague wisdom behind this is that SSR is meant to only capture the initial render, while effects only have ... effect ... on subsequent renders."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"server-dehydration"},"Server Dehydration"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As you\'ve probably guessed, use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.dehydrate()")," to grab the initial state snapshot from the server. An example using an Express-esque route handler:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { createEcosystem } from \'@zedux/react\'\\nimport { renderToString } from \'react-dom/server\'\\n\\nfunction renderRoute(req, res) {\\n  const ecosystem = createEcosystem({\\n    id: \'root\',\\n    ssr: true\\n  })\\n\\n  const output = renderApp(ecosystem)\\n  const snapshot = ecosystem.dehydrate({ excludeFlags: [\'unserializable\'] })\\n\\n  // destroy the ecosystem, just to be safe:\\n  ecosystem.destroy(true)\\n\\n  res.send(`\\n    <div id=\\"root\\">${output}</div>\\n    <script>\\n      window.__SNAPSHOT = ${JSON.stringify(snapshot)}\\n    <\/script>\\n    <script src=\\"/my/app.js\\"><\/script>\\n  `)\\n}\\n\\nfunction renderApp(ecosystem) {\\n  return renderToString(\\n    <EcosystemProvider ecosystem={ecosystem}>\\n      <App />\\n    </Provider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"promises"},"Promises"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The promises of query atoms - e.g. inline promises or promises created via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectPromise"),"/",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectMemo")," - still run during SSR. This enables the double-rendering technique (which may or may not work for you). Simply render again after awaiting all promises:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"async function renderRoute(req, res) {\\n  const ecosystem = createEcosystem({\\n    id: \'root\',\\n    ssr: true,\\n  })\\n\\n  // highlight-next-line\\n  renderApp(ecosystem) // render once and discard the result\\n\\n  // grab the promise from every atom instance that has one:\\n  // highlight-start\\n  const promises = Object.values(ecosystem.findAll())\\n    .map(instance => instance.promise)\\n    .filter(Boolean)\\n  // highlight-end\\n\\n  // highlight-next-line\\n  await Promise.all(promises) // contrived warning - remember error handling\\n\\n  // all promises resolved! Render again\\n  // highlight-next-line\\n  const output = renderApp(ecosystem)\\n  const snapshot = ecosystem.dehydrate({ excludeFlags: [\'unserializable\'] })\\n\\n  ecosystem.destroy(true)\\n\\n  res.send(`\\n    <div id=\\"root\\">${output}</div>\\n    <script>\\n      window.__SNAPSHOT = ${JSON.stringify(snapshot)}\\n    <\/script>\\n    <script src=\\"/my/app.js\\"><\/script>\\n  `)\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"prefetching"},"Prefetching"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can also \\"prefetch\\" specific atoms before rendering:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"async function renderRoute(req, res) {\\n  const ecosystem = createEcosystem({\\n    id: \'root\',\\n    ssr: true,\\n  })\\n\\n  await prefetchAtoms(ecosystem)\\n\\n  const output = renderApp(ecosystem)\\n  const snapshot = ecosystem.dehydrate({ excludeFlags: [\'unserializable\'] })\\n\\n  ecosystem.destroy(true)\\n\\n  res.send(`\\n    <div id=\\"root\\">${output}</div>\\n    <script>\\n      window.__SNAPSHOT = ${JSON.stringify(snapshot)}\\n    <\/script>\\n    <script src=\\"/my/app.js\\"><\/script>\\n  `)\\n}\\n\\nfunction prefetchAtoms(ecosystem) {\\n  const fooInstance = ecosystem.getInstance(fooAtom)\\n  const barInstance = ecosystem.getInstance(barAtom)\\n\\n  return Promise.all([fooInstance.promise, barInstance.promise])\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"other-techniques"},"Other Techniques"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux gives you very transparent control over your state. There are many ways you can use this transparency to optimize SSR."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For example, it\'s possible to analyze your dependency graph and prefetch only highly-demanded atoms."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"renderApp(ecosystem)\\n\\nconst instancesByWeight = Object.values(ecosystem.findAll())\\n  .filter(instance => instance.promise) // only compare instances with promises\\n  .sort(\\n    (instanceA, instanceB) =>\\n      ecosystem._graph.nodes[instanceA.id].weight -\\n      ecosystem._graph.nodes[instanceB.id].weight\\n  )\\n\\n// instances with lower weight are typically used more:\\nconst mostUsedInstances = instancesByWeight.slice(\\n  0,\\n  Math.floor(instancesByWeight.length / 2)\\n)\\n\\n// wait for half of all the suspending atoms (the most-used half):\\nawait Promise.all(mostUsedInstances.map(instance => instance.promise))\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Many other techniques are possible. Some ideas:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"react-ssr-prepass")," to drill into nested suspense boundaries"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Prefetching only atoms with at least X dependents"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Using a fake user to periodically render routes during server downtime, caching lists of atoms that should be prefetched for that type of user on that route.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"client-hydration"},"Client Hydration"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When you have a snapshot of initial state on the server, you\'ll usually send it to the client by e.g. embedding it in the page\'s HTML output:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"res.send(`\\n  <div id=\\"root\\">${output}</div>\\n  <script>\\n    window.__SNAPSHOT = ${JSON.stringify(snapshot)}\\n  <\/script>\\n  <script src=\\"/my/app.js\\"><\/script>\\n`)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now the client app can pass that to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.hydrate()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { createEcosystem, EcosystemProvider } from \'@zedux/react\'\\n\\nconst ecosystem = createEcosystem({ id: \'root\' })\\necosystem.hydrate(window.__SNAPSHOT)\\n\\nfunction App() {\\n  return (\\n    <EcosystemProvider ecosystem={ecosystem}>\\n      <Routes />\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"All atom instances created by rendering ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"<Routes />")," will now have their initial state hydrated from the server snapshot."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ssr")," ecosystem config option to turn on SSR mode, preventing effects from running."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Dehydrate the state on the server with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.dehydrate()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"There are many ways to prefetch query atoms. Await many promises by grabbing the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},".promise")," off of each instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Hydrate the state on the client with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.hydrate()"),".")));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8093\n')}}]);