"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9379],{6734:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return p},default:function(){return d}});var a=n(3117),s=n(102),o=(n(7294),n(3905)),r=["components"],i={id:"AtomSetters",title:"AtomSetters"},c=void 0,m={unversionedId:"api/types/AtomSetters",id:"api/types/AtomSetters",isDocsHomePage:!1,title:"AtomSetters",description:"The object Zedux passes as the first parameter to ion setters.",source:"@site/docs/api/types/AtomSetters.mdx",sourceDirName:"api/types",slug:"/api/types/AtomSetters",permalink:"/zedux/docs/api/types/AtomSetters",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/AtomSetters.mdx",tags:[],version:"current",frontMatter:{id:"AtomSetters",title:"AtomSetters"},sidebar:"react",previous:{title:"AtomSelector",permalink:"/zedux/docs/api/types/AtomSelector"},next:{title:"DispatchInterceptor",permalink:"/zedux/docs/api/types/DispatchInterceptor"}},p=[{value:"Definition",id:"definition",children:[{value:"<code>ecosystem</code>",id:"ecosystem",children:[],level:3},{value:"<code>get</code>",id:"get",children:[],level:3},{value:"<code>getInstance</code>",id:"getinstance",children:[],level:3},{value:"<code>instance</code>",id:"instance",children:[],level:3},{value:"<code>set</code>",id:"set",children:[],level:3}],level:2}],l={toc:p};function d(e){var t=e.components,n=(0,s.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The object Zedux passes as the first parameter to ",(0,o.kt)("a",{parentName:"p",href:"../factories/ion#set"},"ion setters"),"."),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface AtomSetters<\n  State,\n  Params extends any[],\n  Exports extends Record<string, any>\n> {\n  ecosystem: Ecosystem\n\n  get<A extends Atom<any, []>>(atom: A): AtomStateType<A>\n\n  get<A extends Atom<any, [...any]>>(\n    atom: A,\n    params: AtomParamsType<A>\n  ): AtomStateType<A>\n\n  get<I extends AtomInstance>(instance: I): AtomInstanceStateType<I>\n\n  getInstance<A extends Atom<any, []>>(atom: A): AtomInstanceType<A>\n\n  getInstance<A extends Atom<any, [...any]>>(\n    atom: A,\n    params: AtomParamsType<A>\n  ): AtomInstanceType<A>\n\n  instance: AtomInstance<State, Params, Exports>\n\n  set<A extends Atom<any, []>>(\n    atom: A,\n    settable: Settable<AtomStateType<A>>\n  ): AtomStateType<A>\n\n  set<A extends Atom<any, [...any]>>(\n    atom: A,\n    params: AtomParamsType<A>,\n    settable: Settable<AtomStateType<A>>\n  ): AtomStateType<A>\n}\n")),(0,o.kt)("h3",{id:"ecosystem"},(0,o.kt)("inlineCode",{parentName:"h3"},"ecosystem")),(0,o.kt)("p",null,"A reference to the ",(0,o.kt)("a",{parentName:"p",href:"../classes/Ecosystem"},"ecosystem")," this ion instance was created in."),(0,o.kt)("h3",{id:"get"},(0,o.kt)("inlineCode",{parentName:"h3"},"get")),(0,o.kt)("p",null,"A function that returns the current state of an atom instance. You can pass either an instance directly or an atom and its params (if any)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"({ get }, newVal) => get(otherAtom)\n({ get }, newVal) => get(otherAtom, ['param 1', 'param 2'])\n({ get }, newVal) => get(anInstance)\n")),(0,o.kt)("h3",{id:"getinstance"},(0,o.kt)("inlineCode",{parentName:"h3"},"getInstance")),(0,o.kt)("p",null,"A function that returns an atom instance. Pass an atom and its params (if any)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"({ getInstance }, newVal) => getInstance(otherAtom)\n({ getInstance }, newVal) => getInstance(otherAtom, ['param 1', 'param 2'])\n")),(0,o.kt)("h3",{id:"instance"},(0,o.kt)("inlineCode",{parentName:"h3"},"instance")),(0,o.kt)("p",null,"A reference to the current ion ",(0,o.kt)("a",{parentName:"p",href:"../classes/AtomInstance"},"atom instance"),"."),(0,o.kt)("h3",{id:"set"},(0,o.kt)("inlineCode",{parentName:"h3"},"set")),(0,o.kt)("p",null,"A function that sets the state of an atom instance. Pass an atom and its params (if any) and either the new state or a function that receives the current state of that atom and returns the new state. Returns the new state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"({ set }, newVal) => set(otherAtom, newVal)\n({ set }, newVal) => set(otherAtom, ['param 1', 'param 2'], newVal)\n")))}d.isMDXComponent=!0}}]);