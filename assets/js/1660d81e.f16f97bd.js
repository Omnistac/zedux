"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[7052],{2822:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'react-context\',title:\'React Context\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/react-context","id":"walkthrough/react-context","title":"React Context","description":"The atomic model naturally fixes all the problems with React context. With Zedux atoms, you can use React context with all of its benefits and none of its downsides.","source":"@site/docs/walkthrough/react-context.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/react-context","permalink":"/zedux/docs/walkthrough/react-context","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/react-context.mdx","tags":[],"version":"current","frontMatter":{"id":"react-context","title":"React Context"},"sidebar":"react","previous":{"title":"Destruction","permalink":"/zedux/docs/walkthrough/destruction"},"next":{"title":"Suspense","permalink":"/zedux/docs/walkthrough/suspense"}};var assets={};var toc=[{value:\'Providing\',id:\'providing\',level:2},{value:\'Multiple Instances\',id:\'multiple-instances\',level:3},{value:\'Consuming\',id:\'consuming\',level:2},{value:\'If an Instance Wasn&#39;t Provided\',id:\'if-an-instance-wasnt-provided\',level:3},{value:\'Case #1: I want a default atom instance to be created, if none was provided.\',id:\'case-1-i-want-a-default-atom-instance-to-be-created-if-none-was-provided\',level:4},{value:\'Case #2: I don&#39;t ever want an instance to not be provided. Throw an error if I forget!\',id:\'case-2-i-dont-ever-want-an-instance-to-not-be-provided-throw-an-error-if-i-forget\',level:4},{value:\'Subscribing\',id:\'subscribing\',level:2},{value:\'Using Selectors\',id:\'using-selectors\',level:2},{value:\'Cool But Why?\',id:\'cool-but-why\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The atomic model naturally fixes all the problems with React context. With Zedux atoms, you can use React context with all of its benefits and none of its downsides."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The important philosophy here is that Zedux uses React context for Dependency Injection, not State Management. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://blog.testdouble.com/posts/2021-03-19-react-context-for-dependency-injection-not-state/"},"This article")," is an excellent breakdown of this technique."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to provide and consume atom instances over React context."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to control renders in both the providing and consuming component."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"providing"},"Providing"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An atom instance can be provided over React context via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/components/AtomInstanceProvider"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"<AtomInstanceProvider>")),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { AtomInstanceProvider, useAtomInstance } from \'@zedux/react\'\\n\\nfunction Parent() {\\n  const instance = useAtomInstance(myAtom)\\n\\n  return (\\n    <AtomInstanceProvider instance={instance}>\\n      <Child />\\n    </AtomInstanceProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"multiple-instances"},"Multiple Instances"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To provide instances of multiple atoms from the same component, you could nest a bunch of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"<AtomInstanceProvider>"),"s. But that isn\'t very aesthetically pleasing now, is it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To this end, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"AtomInstanceProvider")," accepts an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instances")," prop, whose value is an array of instances to provide. Only provide either an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance")," or an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instances")," prop, not both."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"return (\\n  <AtomInstanceProvider instances={[instanceA, instanceB]}>\\n    {children}\\n  </AtomInstanceProvider>\\n)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"consuming"},"Consuming"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Consume provided instances with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/hooks/useAtomConsumer"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomConsumer()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { useAtomConsumer } from \'@zedux/react\'\\n\\nfunction Child() {\\n  const instance = useAtomConsumer(myAtom)\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"if-an-instance-wasnt-provided"},"If an Instance Wasn\'t Provided"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If a component uses ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomConsumer()")," but no instance was provided by any parent, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomConsumer()")," returns undefined."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomConsumer(myAtom)\\ninstance.invalidate() // error! Cannot read properties of undefined\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"TypeScript users will be warned of this. But to get around it, you\'d have to put checks before everything you try to do with that instance. Sounds like a fast-track to annoyance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Fortunately (on purpose), ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomConsumer()")," has two overloads that help with this:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h4",{"id":"case-1-i-want-a-default-atom-instance-to-be-created-if-none-was-provided"},"Case #1: I want a default atom instance to be created, if none was provided."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can provide an array of params to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomConsumer()"),". These params must match the params of the atom. If no atom instance was provided, Zedux will use the passed default params to locate an existing atom instance or create a new instance if it doesn\'t exist yet."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomConsumer(myAtom, [\'default instance params\'])\\ninstance.invalidate() // all good! Even TS is happy\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If the atom doesn\'t take params, you must still pass an empty array for Zedux to find/create a default instance."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const paramlessInstance = useAtomConsumer(myAtom, [])\\ninstance.invalidate() // \\uD83D\\uDE0A\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h4",{"id":"case-2-i-dont-ever-want-an-instance-to-not-be-provided-throw-an-error-if-i-forget"},"Case #2: I don\'t ever want an instance to not be provided. Throw an error if I forget!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Instead of an array of default parameters, you can pass ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"true")," as the second param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomConsumer()"),". This tells Zedux to throw an error if no atom instance was provided."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const instance = useAtomConsumer(myAtom, true)\\ninstance.invalidate() // all good again! TS smiles upon you\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"#failfast! This overload is recommended in almost every situation.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"subscribing"},"Subscribing"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The amazing thing about using atoms for React context is that neither the providing nor consuming component subscribes to the atom instance by default. This gives you full control over rerenders."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Any component can set the state of the atom without subscribing to the state itself. And, of course, any component can subscribe itself to the atom instance using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/hooks/useAtomValue"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomValue()"))," or similar."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function Parent() {\\n  const instance = useAtomInstance(myAtom) // doesn\'t subscribe\\n  const value = useAtomValue(instance) // subscribes\\n\\n  return (\\n    <AtomInstanceProvider instance={instance}>\\n      <Child />\\n    </AtomInstanceProvider>\\n  )\\n}\\n\\nfunction Child() {\\n  const instance = useAtomConsumer(myAtom, true) // doesn\'t subscribe\\n  const value = useAtomValue(instance) // subscribes\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Full live example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=context/simple resultVar=Parent","live":true,"ecosystemId":"context/simple","resultVar":"Parent"},"const providedAtom = atom(\'provided\', \'the state!\')\\n\\nfunction Child() {\\n  const instance = useAtomConsumer(providedAtom)\\n  const [state, setState] = useAtomState(instance) // subscribe to changes\\n\\n  return (\\n    <>\\n      <div>Child State (subscribed): {state}</div>\\n      <button onClick={() => setState(\'new state!\')}>Change</button>\\n    </>\\n  )\\n}\\n\\nfunction Parent() {\\n  const instance = useAtomInstance(providedAtom)\\n\\n  return (\\n    <AtomInstanceProvider instance={instance}>\\n      <div>Parent State (not subscribed): {instance.getState()}</div>\\n      <Child />\\n    </AtomInstanceProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"try me","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Try changing the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Parent")," component above to be dynamic with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useAtomValue(instance)"),".")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"using-selectors"},"Using Selectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A common pattern is to pass the provided atom instance to an Atom Getter inside ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/hooks/useAtomSelector"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomSelector()"))," to limit component rerenders."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function Child() {\\n  const instance = useAtomConsumer(myAtom, true) // doesn\'t subscribe\\n\\n  // subscribe, but only cause a rerender when `someField` changes:\\n  // highlight-next-line\\n  const someField = useAtomSelector(({ get }) => get(instance).someField)\\n  // or pass the instance as an argument:\\n  useAtomSelector(mySelector, instance)\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"cool-but-why"},"Cool But Why?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Ecosystems essentially make all atom instances \\"global\\" to the whole component tree under an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"<EcosystemProvider>"),". So why would you need to provide an atom instance to a subtree?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The primary purpose of providing atom instances over React context is to give a reusable subtree an atom instance with specific parameters. The children in the subtree don\'t need to know what params to pass to the atom."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"function Child() {\\n  // without useAtomConsumer, you need to pass the right params every time you use the atom:\\n  const instance = useAtomInstance(myAtom, [\\n    \'my\',\\n    { specific: { params: \'here\' } },\\n  ])\\n\\n  // compare:\\n  const instance = useAtomConsumer(myAtom, true)\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is particularly useful for lists. Say we have a component that\'s rendered many times with different props:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function UserThumbnail({ id }) {\\n  return (\\n    <>\\n      <Avatar id={id} />\\n      <Nickname id={id} />\\n      <OnlineStatus id={id} />\\n    </>\\n  )\\n}\\n\\nfunction UserList({ users }) {\\n  return users.map(user => <UserThumbnail key={user.id} id={user.id} />)\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can see how all the children of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"UserThumbnail")," might need to use the id to fetch/maintain some state - their current profile picture, their preferred display name, and whether they\'re online. For example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function OnlineStatus({ id }) {\\n  const userData = useAtomValue(userData, [id])\\n\\n  return <div>{userData.isOnline ? <GreenDot /> : <RedDot />}</div>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"But with context, we can instead give the entire subtree its own isolated state:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function UserThumbnail({ id }) {\\n  const instance = useAtomInstance(userData, [id])\\n\\n  return (\\n    <AtomInstanceProvider instance={userInstance}>\\n      <Avatar />\\n      <Nickname />\\n      <OnlineStatus />\\n    </AtomInstanceProvider>\\n  )\\n}\\n\\nfunction OnlineStatus() {\\n  // no need to pass `id` prop!\\n  const userData = useAtomConsumer(userData, true)\\n\\n  return <div>{userData.isOnline ? <GreenDot /> : <RedDot />}</div>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is a simple example and doesn\'t fully demonstrate how powerful this can be for a big component tree. Jotai has documented use cases for this pattern in their docs about ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://jotai.org/docs/integrations/molecules"},"molecules")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://jotai.org/docs/guides/atoms-in-atom"},"atoms in atoms")," if you\'re curious."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s a very contrived, in-depth, live example if you want to review a little of what we\'ve learned so far. Otherwise, we\'re done here. Go next!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=react-context/list-example resultVar=TodoList","live":true,"ecosystemId":"react-context/list-example","resultVar":"TodoList"},"const isEditingTodosAtom = atom(\'isEditingTodos\', false)\\n\\nconst todoListAtom = atom(\'todoList\', () => [\\n  { id: 1, text: \'Go\' },\\n  { id: 2, text: \'Fight\' },\\n  { id: 3, text: \'Win\' },\\n])\\n\\nconst todoAtom = ion(\'todo\', ({ get, getInstance }, id: number) => {\\n  const todoListInstance = getInstance(todoListAtom)\\n\\n  // dynamicize the edge:\\n  const todo = get(todoListInstance).find(todo => todo.id === id)\\n  const textStore = injectStore(todo.text) // take an initial state snapshot\\n\\n  const saveChanges = () =>\\n    todoListInstance.setState(todos =>\\n      todos.map(todo =>\\n        todo.id === id ? { ...todo, text: textStore.getState() } : todo\\n      )\\n    )\\n\\n  return api(textStore).setExports({ saveChanges })\\n})\\n\\nfunction Todo() {\\n  const todoInstance = useAtomConsumer(todoAtom, true)\\n  const [text, setText] = useAtomState(todoInstance)\\n  const isEditing = useAtomValue(isEditingTodosAtom)\\n\\n  return (\\n    <div>\\n      {isEditing ? (\\n        <input onChange={event => setText(event.target.value)} value={text} />\\n      ) : (\\n        <span>{text}</span>\\n      )}\\n    </div>\\n  )\\n}\\n\\nfunction TodoList() {\\n  // this is a pretty advanced pattern - using a selector to get instances\\n  const instances = useAtomSelector(({ get, getInstance }) => {\\n    const todos = get(todoListAtom)\\n\\n    return todos.map(todo => getInstance(todoAtom, [todo.id]))\\n  })\\n\\n  const [isEditing, setIsEditing] = useAtomState(isEditingTodosAtom)\\n\\n  const saveAllChanges = () => {\\n    instances.forEach(instance => instance.exports.saveChanges())\\n    setIsEditing(false)\\n  }\\n\\n  return (\\n    <>\\n      {!isEditing && <button onClick={() => setIsEditing(true)}>Edit</button>}\\n      {instances.map(instance => (\\n        // vvv  Provide a different instance for each item  vvv\\n        <AtomInstanceProvider key={instance.id} instance={instance}>\\n          <Todo />\\n        </AtomInstanceProvider>\\n      ))}\\n      {isEditing && <button onClick={saveAllChanges}>Save Changes</button>}\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom instances can be provided over React context via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/components/AtomInstanceProvider"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"<AtomInstanceProvider>")),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Atom instances can be consumed from React context via ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/hooks/useAtomConsumer"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomConsumer()")),".",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"li"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomConsumer(myAtom, [...defaultParams])")," creates an atom instance with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"defaultParams")," if no instance was provided."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomConsumer(myAtom, true)")," throws an error if no atom instance was provided."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"You can subscribe any component to a consumed atom instance by using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/hooks/useAtomValue"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomValue()"))," or any other hook that creates a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/glossary#dynamic-graph-dependency"},"dynamic graph dependency"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"useAtomSelector()")," with a provided instance to selectively subscribe to updates.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"With React context mastered, there is only a little more about using atoms in React. Next up: ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"suspense"},"React suspense"),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2822\n')}}]);