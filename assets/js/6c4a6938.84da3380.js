"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[668],{8911:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return r},metadata:function(){return m},toc:function(){return d},AtomKeyDesc:function(){return p},default:function(){return u}});var n=a(3117),o=a(102),i=(a(7294),a(3905)),s=["components"],l={id:"Atom",title:"Atom"},r=void 0,m={unversionedId:"api/classes/Atom",id:"api/classes/Atom",isDocsHomePage:!1,title:"Atom",description:"export const AtomKeyDesc = () => (",source:"@site/docs/api/classes/Atom.mdx",sourceDirName:"api/classes",slug:"/api/classes/Atom",permalink:"/zedux/docs/api/classes/Atom",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/classes/Atom.mdx",tags:[],version:"current",frontMatter:{id:"Atom",title:"Atom"},sidebar:"react",previous:{title:"Suspense",permalink:"/zedux/docs/walkthrough/suspense"},next:{title:"AtomApi",permalink:"/zedux/docs/api/classes/AtomApi"}},d=[{value:"Creation",id:"creation",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"<code>.internalId</code>",id:"internalid",children:[],level:3},{value:"<code>.key</code>",id:"key",children:[],level:3},{value:"<code>.flags</code>",id:"flags",children:[],level:3},{value:"<code>.forwardPromises</code>",id:"forwardpromises",children:[],level:3},{value:"<code>.maxInstances</code>",id:"maxinstances",children:[],level:3},{value:"<code>.ttl</code>",id:"ttl",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"<code>.override</code>",id:"override",children:[{value:"<code>newValue</code>",id:"newvalue",children:[],level:4}],level:3}],level:2},{value:"Extending",id:"extending",children:[],level:2}],p=function(){return(0,i.kt)("div",null,"The key is the key to Dependency Injection - it's how ecosystems know which atoms to override. It also aids development - many errors will log the key of the atom they originated in. Keys also help with a codebase's grepability.")},c={toc:d,AtomKeyDesc:p};function u(e){var t=e.components,a=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The standard, default atom type. Instances of this class are passed to most of Zedux' hooks and injectors."),(0,i.kt)("p",null,'An atom defines a template that Zedux will use to create atom instances. Do not confuse "atom instances" with instances of this Atom class! Atom instances are actually instances of ',(0,i.kt)("a",{parentName:"p",href:"AtomInstance"},"the AtomInstance class"),' \ud83e\udd15. We refer to instances of this Atom class as simply "atoms".'),(0,i.kt)("h2",{id:"creation"},"Creation"),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory")," to create atoms:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Atom, atom } from '@zedux/react'\n\nconst exampleAtom = atom('example', 'initial state')\n\nexampleAtom instanceof Atom // true\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("p",null,"This class exposes the following properties:"),(0,i.kt)("h3",{id:"internalid"},(0,i.kt)("inlineCode",{parentName:"h3"},".internalId")),(0,i.kt)("p",null,"A string. Readonly. All atoms generate a basic, incrementing, unique id. Zedux uses this internally."),(0,i.kt)("h3",{id:"key"},(0,i.kt)("inlineCode",{parentName:"h3"},".key")),(0,i.kt)("p",null,"A string. Will always be set. This is the first parameter passed to ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,i.kt)(p,{mdxType:"AtomKeyDesc"}),(0,i.kt)("h3",{id:"flags"},(0,i.kt)("inlineCode",{parentName:"h3"},".flags")),(0,i.kt)("p",null,"An array of strings. May be undefined. The flags that will be checked alongside an ",(0,i.kt)("a",{parentName:"p",href:"Ecosystem#flags"},"ecosystem's flags")," to warn about unsafe atoms being used in certain environments."),(0,i.kt)("p",null,"Set this via the ",(0,i.kt)("a",{parentName:"p",href:"../types/AtomConfig#flags"},"AtomConfig option")," passed to ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,i.kt)("h3",{id:"forwardpromises"},(0,i.kt)("inlineCode",{parentName:"h3"},".forwardPromises")),(0,i.kt)("p",null,"A boolean. May be undefined. If not set, the ",(0,i.kt)("a",{parentName:"p",href:"Ecosystem#defaultforwardpromises"},"ecosystem's ",(0,i.kt)("inlineCode",{parentName:"a"},".defaultForwardPromises")," property")," will be used. If set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", this atom's instances will create a default ",(0,i.kt)("a",{parentName:"p",href:"AtomInstance#promise"},(0,i.kt)("inlineCode",{parentName:"a"},"promise")," property")," that is effectively a ",(0,i.kt)("inlineCode",{parentName:"p"},"Promise.all()")," of the atom instance's initial dependencies' promises."),(0,i.kt)("p",null,"No default promise will be created if:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"None of the initial dependencies have promises."),(0,i.kt)("li",{parentName:"ul"},"A promise is set manually via ",(0,i.kt)("a",{parentName:"li",href:"AtomApi#setpromise"},"AtomApi's ",(0,i.kt)("inlineCode",{parentName:"a"},".setPromise()")),".")),(0,i.kt)("p",null,"Setting this option overrides the ",(0,i.kt)("inlineCode",{parentName:"p"},".defaultForwardPromises")," config option set at ",(0,i.kt)("a",{parentName:"p",href:"Ecosystem#defaultforwardpromises"},"the ecosystem level"),"."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../../walkthrough/suspense"},"the suspense walkthrough")," for examples."),(0,i.kt)("p",null,"Set this via the ",(0,i.kt)("a",{parentName:"p",href:"../types/AtomConfig#forwardpromises"},"AtomConfig option")," passed to ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,i.kt)("h3",{id:"maxinstances"},(0,i.kt)("inlineCode",{parentName:"h3"},".maxInstances")),(0,i.kt)("p",null,"A number. May be undefined. Indicates the largest ideal cache size of the atom."),(0,i.kt)("p",null,"When more than ",(0,i.kt)("inlineCode",{parentName:"p"},"maxInstances")," number of atom instances of this atom are created in an ecosystem, Zedux' behavior will change regarding the cleanup of those instances. Zedux will ignore ",(0,i.kt)("inlineCode",{parentName:"p"},"ttl")," and instantly clean up instances when they go stale until the number of instances is back within ",(0,i.kt)("inlineCode",{parentName:"p"},"maxInstances"),"."),(0,i.kt)("p",null,"Set this via the ",(0,i.kt)("a",{parentName:"p",href:"../types/AtomConfig#maxinstances"},"AtomConfig option")," passed to ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,i.kt)("h3",{id:"ttl"},(0,i.kt)("inlineCode",{parentName:"h3"},".ttl")),(0,i.kt)("p",null,"A number. May be undefined. If not set, the ",(0,i.kt)("a",{parentName:"p",href:"Ecosystem#defaultttl"},"ecosystem's ",(0,i.kt)("inlineCode",{parentName:"a"},"defaultTtl"))," will be used. If the ecosystem doesn't set a default, instances of this atom will live forever by default. Setting this value will override any default."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set to ",(0,i.kt)("inlineCode",{parentName:"li"},"-1")," to make this atom's instances live forever."),(0,i.kt)("li",{parentName:"ul"},"Set to ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," to make all atom instances in this ecosystem die by default as soon as they go stale."),(0,i.kt)("li",{parentName:"ul"},"Set to any positive integer to make atoms live in a stale state for ",(0,i.kt)("inlineCode",{parentName:"li"},"<ttl>")," milliseconds before being cleaned up.")),(0,i.kt)("p",null,"This option can be overridden and configured more granularly by the atom instances themselves via ",(0,i.kt)("a",{parentName:"p",href:"AtomApi#setttl"},"AtomApi#setTtl"),"."),(0,i.kt)("p",null,"Set this via the ",(0,i.kt)("a",{parentName:"p",href:"../types/AtomConfig#ttl"},"AtomConfig option")," passed to ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("p",null,"This class exposes the following methods:"),(0,i.kt)("h3",{id:"override"},(0,i.kt)("inlineCode",{parentName:"h3"},".override")),(0,i.kt)("p",null,"Creates an exact clone of this atom, but with a different value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},".override(newValue) => Atom\n")),(0,i.kt)("p",null,"Returns the new atom."),(0,i.kt)("h4",{id:"newvalue"},(0,i.kt)("inlineCode",{parentName:"h4"},"newValue")),(0,i.kt)("p",null,"Can be any of the same ",(0,i.kt)("a",{parentName:"p",href:"../factories/atom#value"},"six value types")," that ",(0,i.kt)("inlineCode",{parentName:"p"},"atom()")," accepts."),(0,i.kt)("h2",{id:"extending"},"Extending"),(0,i.kt)("p",null,"When creating your own, custom atom types, you'll usually want to extend this class. Creating your own atom types is an advanced feature and we're not currently documenting it as the internals of these classes may change."))}u.isMDXComponent=!0}}]);