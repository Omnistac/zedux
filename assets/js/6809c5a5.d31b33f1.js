"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[8133],{7470:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'resets\',title:\'Resets\'};var contentTitle=undefined;var metadata={"unversionedId":"walkthrough/resets","id":"walkthrough/resets","title":"Resets","description":"There are many situations where you may want to reset the state of one or more atoms. While Zedux doesn\'t have any built-in atom reset helpers like Recoil or Jotai, there are many ways to go about resetting state.","source":"@site/docs/walkthrough/resets.mdx","sourceDirName":"walkthrough","slug":"/walkthrough/resets","permalink":"/zedux/docs/walkthrough/resets","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/walkthrough/resets.mdx","tags":[],"version":"current","frontMatter":{"id":"resets","title":"Resets"},"sidebar":"react","previous":{"title":"Custom Injectors","permalink":"/zedux/docs/walkthrough/custom-injectors"},"next":{"title":"State Machines","permalink":"/zedux/docs/walkthrough/state-machines"}};var assets={};var toc=[{value:\'Invalidation\',id:\'invalidation\',level:2},{value:\'Exports\',id:\'exports\',level:2},{value:\'Force Destruction\',id:\'force-destruction\',level:2},{value:\'Multiple Atoms\',id:\'multiple-atoms\',level:2},{value:\'Using A Stream\',id:\'using-a-stream\',level:3},{value:\'Ecosystem Resets\',id:\'ecosystem-resets\',level:2},{value:\'Recap\',id:\'recap\',level:2},{value:\'Next Steps\',id:\'next-steps\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There are many situations where you may want to reset the state of one or more atoms. While Zedux doesn\'t have any built-in atom reset helpers like Recoil or Jotai, there are many ways to go about resetting state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Several ways to reset an atom instance\'s state"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to reset the state of multiple atom instances at once"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to reset an entire ecosystem"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"invalidation"},"Invalidation"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"For atoms that don\'t inject their own stores, including ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"query-atoms"},"query atoms"),", you can use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.invalidate()")," to essentially \\"reset\\" an atom instance\'s state:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"// this atom never reevaluates unless someone calls `instance.invalidate()`:\\nconst todoListAtom = atom(\'todoList\', () => [])\\n\\nconst TodoResetButton = () => {\\n  const { invalidate } = useAtomInstance(todoListAtom)\\n\\n  return <button onClick={invalidate}>Reset</button>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s another example using the ecosystem to prevent registering a static dependency on the atom instance:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const todoListAtom = atom(\'todoList\', () => [])\\n\\nconst TodoResetButton = () => {\\n  const ecosystem = useEcosystem()\\n\\n  return (\\n    <button\\n      onClick={() => ecosystem.weakGetInstance(todoListAtom)?.invalidate()}\\n    >\\n      Reset\\n    </button>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"exports"},"Exports"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can export anything. This means they can export a function that selectively \\"resets\\" whatever you want:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const todoListAtom = atom(\'todoList\', () => {\\n  const store = injectStore([])\\n\\n  return api(store).setExports({\\n    reset: () => store.setState([]),\\n  })\\n})\\n\\nconst TodoResetButton = () => {\\n  const { reset } = useAtomInstance(todoListAtom).exports\\n\\n  return <button onClick={reset}>Reset</button>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s that example expanded in a live sandbox:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=resets/exports resultVar=Todos","live":true,"ecosystemId":"resets/exports","resultVar":"Todos"},"const todoListAtom = atom(\'todoList\', () => {\\n  const store = injectStore<string[]>([])\\n\\n  const addTodo = (text: string) =>\\n    store.setState(state => Array.from(new Set([...state, text])))\\n\\n  const reset = () => store.setState([])\\n\\n  return api(store).setExports({\\n    addTodo,\\n    reset,\\n  })\\n})\\n\\nfunction Controls() {\\n  const [text, setText] = useState(\'\')\\n  const { addTodo, reset } = useAtomInstance(todoListAtom).exports\\n\\n  return (\\n    <div>\\n      <input onChange={event => setText(event.target.value)} value={text} />\\n      <button\\n        onClick={() => {\\n          addTodo(text)\\n          setText(\'\')\\n        }}\\n      >\\n        + Add Todo\\n      </button>\\n      <button onClick={reset}>Reset</button>\\n    </div>\\n  )\\n}\\n\\nfunction TodoList() {\\n  const todos = useAtomValue(todoListAtom)\\n\\n  return (\\n    <ul>\\n      {todos.map(todo => (\\n        <li key={todo}>{todo}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nfunction Todos() {\\n  return (\\n    <>\\n      <TodoList />\\n      <Controls />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"force-destruction"},"Force Destruction"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As seen in the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"destruction"},"destruction walkthrough"),", every atom instance can be force-destroyed. This destroys the atom instance regardless of whether it has dependents."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If the atom instance does have dependents, those dependents will immediately recreate the instance. This resurrected instance is a completely new instance - fresh state, exports, promise, everything."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Just pass ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"true")," to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance#destroy"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"instance.destroy()")),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const todoListAtom = atom(\'todoList\', () => [])\\n\\nconst TodoResetButton = () => {\\n  // don\'t destructure the `destroy` AtomInstance class method:\\n  const instance = useAtomInstance(todoListAtom)\\n\\n  return <button onClick={() => instance.destroy(true)}>Reset</button>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is probably the most generally useful method of resetting state."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"multiple-atoms"},"Multiple Atoms"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"So far we\'ve looked at ways to reset a single atom instance. To reset several atom instances at once, there are many ways to go about it. For example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"custom-injectors"},"custom injector")," that hooks into global \\"reset\\" events and runs a callback."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create a \\"resetStream\\" atom that exposes an RxJS observable that can be piped off of to perform resets."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Create an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../advanced/plugins"},"ecosystem plugin")," or external helper with access to the ecosystem that invalidates or force-destroys multiple instances.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"using-a-stream"},"Using A Stream"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Here\'s an example using a custom ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectReset")," injector to hook into a universal \\"reset stream\\":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"// reset helpers:\\nconst resetAtom = atom(\'reset\', null)\\nconst injectReset = callback => {\\n  const resetInstance = injectAtomInstance(resetAtom)\\n\\n  injectEffect(() => {\\n    const subscription = resetInstance.store.subscribe({\\n      effects: () => callback(),\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  }, [resetInstance])\\n}\\n\\n// example usage:\\nconst todoListAtom = atom(\'todoList\', () => {\\n  const store = injectStore([])\\n\\n  // highlight-next-line\\n  injectReset(() => store.setState([]))\\n\\n  return store\\n})\\n\\nconst GlobalResetButton = () => {\\n  const instance = useAtomInstance(resetAtom)\\n\\n  return (\\n    <button onClick={() => instance.dispatch({ type: \'reset\' })}>Reset</button>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"And here\'s that example expanded in a live sandbox:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=resets/using-a-stream resultVar=Todos","live":true,"ecosystemId":"resets/using-a-stream","resultVar":"Todos"},"// reset helpers:\\nconst resetAtom = atom(\'reset\', () => {\\n  const store = injectStore()\\n\\n  const reset = () => store.dispatch({ type: \'reset\' })\\n\\n  return api(store).setExports({ reset })\\n})\\n\\nconst injectReset = callback => {\\n  const resetInstance = injectAtomInstance(resetAtom)\\n\\n  injectEffect(() => {\\n    const subscription = resetInstance.store.subscribe({\\n      effects: () => callback(),\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  }, [resetInstance])\\n}\\n\\n// todos app:\\nconst todoListAtom = atom(\'todoList\', () => {\\n  const store = injectStore<string[]>([])\\n\\n  const addTodo = (text: string) =>\\n    store.setState(state => Array.from(new Set([...state, text])))\\n\\n  injectReset(() => store.setState([]))\\n\\n  return api(store).setExports({ addTodo })\\n})\\n\\nfunction Controls() {\\n  const [text, setText] = useState(\'\')\\n  const { addTodo } = useAtomInstance(todoListAtom).exports\\n  const { reset } = useAtomInstance(resetAtom).exports\\n\\n  return (\\n    <div>\\n      <input onChange={event => setText(event.target.value)} value={text} />\\n      <button\\n        onClick={() => {\\n          addTodo(text)\\n          setText(\'\')\\n        }}\\n      >\\n        + Add Todo\\n      </button>\\n      <button onClick={reset}>Reset</button>\\n    </div>\\n  )\\n}\\n\\nfunction TodoList() {\\n  const todos = useAtomValue(todoListAtom)\\n\\n  return (\\n    <ul>\\n      {todos.map(todo => (\\n        <li key={todo}>{todo}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nfunction Todos() {\\n  return (\\n    <>\\n      <TodoList />\\n      <Controls />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"ecosystem-resets"},"Ecosystem Resets"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To surgically reset the state of every atom instance in the ecosystem, you\'d have to follow one of the above approaches. But for a basic global reset, you can use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#reset"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ecosystem.reset()")),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A single ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.reset()")," call will:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Force-destroy every atom instance and cached atom selector in the ecosystem."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Run the previous ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../api/types/EcosystemConfig#onready"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"onReady")," function"),"\'s cleanup function (if any)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Rerun the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"onReady")," function (if any)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Allow all external dependents (e.g. React components) to recreate their dependencies. These are the \\"leaf nodes\\" of the graph."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"The leaf nodes will recreate their own dependencies and so on up the graph tree.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The final result should contain every non-stale atom instance and every cached selector that existed before the reset, but of course as freshly initialized new references."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=resets/ecosystem-resets resultVar=Todos","live":true,"ecosystemId":"resets/ecosystem-resets","resultVar":"Todos"},"const todoListAtom = atom(\'todoList\', () => {\\n  const store = injectStore<string[]>([])\\n\\n  const addTodo = (text: string) =>\\n    store.setState(state => Array.from(new Set([...state, text])))\\n\\n  return api(store).setExports({ addTodo })\\n})\\n\\nfunction Controls() {\\n  const [text, setText] = useState(\'\')\\n  const { addTodo } = useAtomInstance(todoListAtom).exports\\n  // just grab the ecosystem:\\n  const ecosystem = useEcosystem()\\n\\n  return (\\n    <div>\\n      <input onChange={event => setText(event.target.value)} value={text} />\\n      <button\\n        onClick={() => {\\n          addTodo(text)\\n          setText(\'\')\\n        }}\\n      >\\n        + Add Todo\\n      </button>\\n      <button onClick={() => ecosystem.reset()}>Reset</button>\\n    </div>\\n  )\\n}\\n\\nfunction TodoList() {\\n  const todos = useAtomValue(todoListAtom)\\n\\n  return (\\n    <ul>\\n      {todos.map(todo => (\\n        <li key={todo}>{todo}</li>\\n      ))}\\n    </ul>\\n  )\\n}\\n\\nfunction Todos() {\\n  return (\\n    <>\\n      <TodoList />\\n      <Controls />\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The ecosystem can be reset anywhere - whether above or below an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/components/EcosystemProvider"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"EcosystemProvider"))," or completely outside React."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"While ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.reset()")," is incredibly effective, you probably won\'t find yourself using it in most apps. An approach like the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectReset()")," example adds more boilerplate, but is more powerful.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"instance.invalidate()")," to \\"reset\\" atoms that don\'t use stores in their state factory."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"instance.destroy(true)")," to \\"reset\\" any atom by fully destroying and recreating it."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use atom exports to gain more control over precisely what is reset."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Hook into another atom or external stream for the most control."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Reset an entire ecosystem with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.reset()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"next-steps"},"Next Steps"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There remains but ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"state-machines"},"one solitary concept")," to master ere thou be crowned king of the state. For now."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7470\n')}}]);