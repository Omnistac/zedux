(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[1463],{3357:function(e,t,o){"use strict";o.r(t),o.d(t,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return c},default:function(){return l}});var s=o(4034),n=o(9973),r=(o(7294),o(3905)),a={id:"EcosystemProvider",title:"EcosystemProvider"},i={unversionedId:"api/components/EcosystemProvider",id:"api/components/EcosystemProvider",isDocsHomePage:!1,title:"EcosystemProvider",description:"`ts",source:"@site/docs/api/components/EcosystemProvider.mdx",sourceDirName:"api/components",slug:"/api/components/EcosystemProvider",permalink:"/zedux/docs/api/components/EcosystemProvider",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/components/EcosystemProvider.mdx",version:"current",frontMatter:{id:"EcosystemProvider",title:"EcosystemProvider"},sidebar:"react",previous:{title:"Store",permalink:"/zedux/docs/api/classes/Store"},next:{title:"AtomInstanceProvider",permalink:"/zedux/docs/api/components/AtomInstanceProvider"}},c=[{value:"Examples",id:"examples",children:[]},{value:"Props",id:"props",children:[{value:"<code>context</code>",id:"context",children:[]},{value:"<code>destroyOnUnmount</code>",id:"destroyonunmount",children:[]},{value:"<code>ecosystem</code>",id:"ecosystem",children:[]},{value:"<code>flags</code>",id:"flags",children:[]},{value:"<code>id</code>",id:"id",children:[]},{value:"<code>overrides</code>",id:"overrides",children:[]},{value:"<code>preload</code>",id:"preload",children:[]}]}],d={toc:c};function l(e){var t=e.components,o=(0,n.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,s.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { EcosystemProvider } from '@zedux/react'\n")),(0,r.kt)("p",null,"A component that provides an ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem"},"ecosystem"),". The provided ecosystem will take command of all atom usages in any child components."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Passing an ecosystem:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { EcosystemProvider, ecosystem } from '@zedux/react'\n\nconst rootEcosystem = ecosystem({ id: 'root', overrides: [someAtom] })\n\nfunction App() {\n  return (\n    <EcosystemProvider ecosystem={rootEcosystem}>\n      <Routes />\n    </EcosystemProvider>\n  )\n}\n")),(0,r.kt)("p",null,"Passing configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function App() {\n  return (\n    <EcosystemProvider id="root" overrides={[someAtom]}>\n      <Routes />\n    </EcosystemProvider>\n  )\n}\n')),(0,r.kt)("p",null,"Consuming the ecosystem happens automatically every time you use any of Zedux' hooks in any child component."),(0,r.kt)("h2",{id:"props"},"Props"),(0,r.kt)("p",null,"You can pass either an existing ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem"},"ecosystem")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"ecosystem")," prop or any number of ",(0,r.kt)("a",{parentName:"p",href:"../types/EcosystemConfig"},"EcosystemConfig properties")," via their respectively named props."),(0,r.kt)("p",null,"When passing config properties, the EcosystemProvider will create an ecosystem for you. It is recommended to at least pass an id."),(0,r.kt)("h3",{id:"context"},(0,r.kt)("inlineCode",{parentName:"h3"},"context")),(0,r.kt)("p",null,"Optional. An object. The initial ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem#context"},"context")," for the created ecosystem."),(0,r.kt)("h3",{id:"destroyonunmount"},(0,r.kt)("inlineCode",{parentName:"h3"},"destroyOnUnmount")),(0,r.kt)("p",null,"Optional. A boolean. Default: ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Whether the created ecosystem should destroy itself when its last ",(0,r.kt)("a",{parentName:"p",href:"../components/EcosystemProvider"},(0,r.kt)("inlineCode",{parentName:"a"},"<EcosystemProvider>"))," unmounts."),(0,r.kt)("p",null,"Typically you'll want this to be true when creating an ecosystem via EcosystemProvider, so that it fully cleans up after itself when unmounting."),(0,r.kt)("h3",{id:"ecosystem"},(0,r.kt)("inlineCode",{parentName:"h3"},"ecosystem")),(0,r.kt)("p",null,"Optional. The ecosystem to provide. Don't pass any other props if passing this."),(0,r.kt)("h3",{id:"flags"},(0,r.kt)("inlineCode",{parentName:"h3"},"flags")),(0,r.kt)("p",null,"Optional. An array of strings. Will be set as the created ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem#flags"},"ecosystem's flags"),"."),(0,r.kt)("h3",{id:"id"},(0,r.kt)("inlineCode",{parentName:"h3"},"id")),(0,r.kt)("p",null,"Optional (recommended, if not passing ",(0,r.kt)("inlineCode",{parentName:"p"},"ecosystem"),"). A string. Identifies the created ecosystem in the ",(0,r.kt)("a",{parentName:"p",href:"../constants/zeduxGlobalStore"},"zeduxGlobalStore")," and in dev tools."),(0,r.kt)("h3",{id:"overrides"},(0,r.kt)("inlineCode",{parentName:"h3"},"overrides")),(0,r.kt)("p",null,"An array of ",(0,r.kt)("a",{parentName:"p",href:"../classes/Atom"},"atoms"),". Will be set as the created ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem#overrides"},"ecosystem's overrides"),". Used for ",(0,r.kt)("a",{parentName:"p",href:"../../walkthrough/dependency-injection"},"Dependency Injection"),"."),(0,r.kt)("p",null,"If you change this prop, EcosystemProvider will call ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem#setoverrides"},(0,r.kt)("inlineCode",{parentName:"a"},".setOverrides()"))," on the created ecosystem, destroying all atom instances from atoms in the previous or new overrides lists so they can be recreated."),(0,r.kt)("h3",{id:"preload"},(0,r.kt)("inlineCode",{parentName:"h3"},"preload")),(0,r.kt)("p",null,"A function. Will be called as soon as the ecosystem has initialized. Can be used to bootstrap data and preload atoms."),(0,r.kt)("p",null,"Signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(ecosystem, context) => void\n")),(0,r.kt)("p",null,"Receives the freshly initialized or reset ecosystem and the context object (if one was passed) as parameters."))}l.isMDXComponent=!0}}]);