"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4832],{4533:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'AtomSelector\',title:\'AtomSelector\'};var contentTitle=undefined;var metadata={"unversionedId":"api/types/AtomSelector","id":"api/types/AtomSelector","title":"AtomSelector","description":"A function that receives an AtomGetters object as its first parameter. It can take any number of other parameters and can return anything. It can use the AtomGetters to get atom values and run other AtomSelectors.","source":"@site/docs/api/types/AtomSelector.mdx","sourceDirName":"api/types","slug":"/api/types/AtomSelector","permalink":"/zedux/docs/api/types/AtomSelector","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/api/types/AtomSelector.mdx","tags":[],"version":"current","frontMatter":{"id":"AtomSelector","title":"AtomSelector"},"sidebar":"react","previous":{"title":"AtomInstanceTtl","permalink":"/zedux/docs/api/types/AtomInstanceTtl"},"next":{"title":"AtomSelectorConfig","permalink":"/zedux/docs/api/types/AtomSelectorConfig"}};var assets={};var toc=[{value:\'Definition\',id:\'definition\',level:2},{value:\'Examples\',id:\'examples\',level:2},{value:\'When Not to Use\',id:\'when-not-to-use\',level:2},{value:\'Converting AtomSelectors\',id:\'converting-atomselectors\',level:3},{value:\'Generic AtomSelectors\',id:\'generic-atomselectors\',level:2},{value:\'See Also\',id:\'see-also\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"A function that receives an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"AtomGetters"},"AtomGetters")," object as its first parameter. It can take any number of other parameters and can return anything. It can use the AtomGetters to get atom values and run other AtomSelectors."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This is the most basic tool for deriving state in Zedux. The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../../walkthrough/selectors"},"selectors walkthrough")," teaches the basics of AtomSelectors. This page will only cover a few things the walkthrough doesn\'t."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"AtomSelectors define a blueprint for pulling data from atoms. Similar to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"https://github.com/reduxjs/reselect#api"},"reselect selectors"),", they don\'t do anything until someone calls them. You \\"call\\" them by passing them to various functions:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../hooks/useAtomSelector"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"useAtomSelector()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../injectors/injectAtomSelector"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectAtomSelector()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../classes/Ecosystem#select"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ecosystem.select()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"AtomGetters#select"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"select")," AtomGetter function")," of other AtomSelectors (selector composition!)")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"You can also call them directly, passing an AtomGetters object. There is ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"#generic-atomselectors"},"one situation")," where this can be necessary."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Use AtomSelectors for:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Dynamically registering graph edges in components"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Getting part of an atom instance\'s state"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Simple calculations that don\'t need memoization"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"definition"},"Definition"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"type AtomSelector<T = any, Args extends any[] = []> = (\\n  getters: AtomGetters,\\n  ...args: Args\\n) => T\\n\\ninterface AtomSelectorConfig<T = any, Args extends any[] = []> {\\n  argsComparator?: (newArgs: Args, oldArgs: Args) => boolean\\n  name?: string\\n  resultsComparator?: (newResult: T, oldResult: T) => boolean\\n  selector: AtomSelector<T, Args>\\n}\\n\\ntype AtomSelectorOrConfig<T = any, Args extends any[] = []> =\\n  | AtomSelector<T, Args>\\n  | AtomSelectorConfig<T, Args>\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Everywhere Zedux accepts an AtomSelector, it also accepts an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"AtomSelectorConfig"},"AtomSelectorConfig")," object. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"AtomSelectorOrConfig")," is the type you\'ll see for this."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"examples"},"Examples"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"AtomSelectors are extremely flexible. They can be used and composed in many ways."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// basic derivation\\nconst finishedTodos = ({ get }) => get(todosAtom).filter(todo => todo.isDone)\\nconst uninishedTodos = ({ get }) => get(todosAtom).filter(todo => !todo.isDone)\\n\\n// composition using select()\\nconst separatedTodos = ({ select }) => {\\n  const finished = select(finishedTodos)\\n  const unfinished = select(unfinishedTodos)\\n\\n  return { finished, unfinished }\\n}\\n\\n// passing params\\nconst getTodos = ({ select }, isDone) => {\\n  const todos = select(isDone ? finishedTodos : unfinishedTodos)\\n}\\n\\nconst separatedTodosWithParams = ({ select }) => {\\n  const finished = select(getTodos, true)\\n  const unfinished = select(getTodos, false)\\n\\n  return { finished, unfinished }\\n}\\n\\n// in useAtomSelector()\\nconst withHook = useAtomSelector(finishedTodos)\\n\\n// in injectAtomSelector()\\nconst withInjector = injectAtomSelector(finishedTodos)\\n\\n// in ecosystem.select()\\nconst staticViaEcosystem = ecosystem.select(finishedTodos)\\n\\n// directly in ion body (not recommended)\\nconst exampleIon = ion(\'example\', getters => {\\n  const todos = finishedTodos(getters)\\n})\\n\\n// only run selector once\\nconst stateSnapshot = useAtomSelector({\\n  // argsComparator isn\'t called on the first run\\n  argsComparator: () => true,\\n  selector: mySelector,\\n})\\n\\n// only run the selector if the new args don\'t deep match the old args\\nconst limitedRuns = useAtomSelector(\\n  {\\n    argsComparator: _.isEqual,\\n    selector: mySelector,\\n  },\\n  arg1,\\n  arg2\\n)\\n\\n// only trigger updates if the new result doesn\'t deep match the old result\\nconst limitedUpdates = useAtomSelector({\\n  resultsComparator: _.isEqual,\\n  selector: mySelector,\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"While passing an inline config object like this is fine, you should try to avoid it when possible."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"Zedux caches selectors by reference. If the selector function or AtomSelectorConfig object reference change every evaluation/render, Zedux has to do extra work to reconfigure the dependency graph every time. While this is usually fine, be mindful of it in larger apps.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"when-not-to-use"},"When Not to Use"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"AtomSelectors aren\'t atoms. As such, you can\'t use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../glossary#injector"},"injectors")," in them. ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../classes/IonTemplate"},"Ions")," (or other atoms) should be preferred when you need:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"To memoize anything - use an atom with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../injectors/injectMemo"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectMemo()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"To create and update a new store - use an atom with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../injectors/injectStore"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectStore()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"To run side effects based on state updates - use an atom with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../injectors/injectEffect"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectEffect()"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"To manage promises or trigger React suspense - use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../classes/AtomApi#setpromise"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"AtomApi#setPromise()"))," in an atom.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"converting-atomselectors"},"Converting AtomSelectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"AtomSelectors are simple and have little overhead, hence it\'s usually desirable to try an AtomSelector first for most tasks. However, sometimes you\'ll find out later that an AtomSelector needs functionality only atoms have."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since AtomSelectors are so similar to ions, it\'s easy to convert an AtomSelector to an ion or a hook or injector."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// before:\\nconst getSortedList = ({ get }: AtomGetters) => [...get(listAtom)].sort()\\n\\n// after (as ion):\\nconst sortedList = ion(\'sortedList\', ({ get }) => {\\n  const list = get(listAtom)\\n  return injectMemo(() => [...list].sort(), [list]) // now we can memoize!\\n})\\n\\n// after (as injector):\\nconst injectSortedList = ({ get }: AtomGetters) => {\\n  const list = get(listAtom)\\n  return injectMemo(() => [...list].sort(), [list])\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If refactoring the AtomSelector is too much work or too tedious or risky, you can also create an ion that simply wraps the existing AtomSelector:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// before\\nconst getSortedList = ({ get }: AtomGetters) => [...get(listAtom)].sort()\\n\\n// (before usage):\\nconst sortedList = useAtomSelector(getSortedList)\\n\\n// after\\nconst getSortedListImpl = ({ get }: AtomGetters) => [...get(listAtom)].sort()\\n\\nconst getSortedList = ion(\'getSortedList\', ({ select }) =>\\n  select(getSortedListImpl)\\n)\\n\\n// (after usage):\\nconst sortedList = useAtomValue(getSortedList)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"generic-atomselectors"},"Generic AtomSelectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since Zedux calls your atom selector, there are some special considerations to take into account if your selector function takes generics. In TypeScript 4.7+, you can use an instantiation expression to capture the desired generics. In earlier TS versions, however, you may need to call the selector directly to get correct type inference:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// this AtomSelector takes a generic (T):\\nconst addExtraData = <T extends any[]>({ get }: AtomGetters, list: T) => {\\n  return list.map(item => ({\\n    initialData: item,\\n    extraData: get(extraDataAtom),\\n  }))\\n}\\n\\nconst list = [{ name: \'a\' }, { name: \'b\' }]\\n\\n// Using instantiation expressions (TS versions >= 4.7):\\nconst withExtraData = useAtomSelector(addExtraData<typeof list>, list)\\n\\n// With TS versions < 4.7, you\'ll need to call the selector directly:\\nconst withExtraData2 = useAtomSelector(getters => addExtraData(getters, list))\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Note that these are not exactly equivalent. Calling the selector directly essentially merges the called selector into the current selector or atom instance - the selector won\'t get its own node in the graph and will instead update the dependency graph of the current selector or atom instance. The above example works around that by wrapping the call in an inline selector, but that is undesirable in its own right."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"While undesirable, it isn\'t necessarily a problem. Still, prefer using instantiation expressions if they\'re available for you."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"see-also"},"See Also"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../../walkthrough/selectors"},"The Selectors walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"AtomSelectorConfig"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"AtomSelectorConfig")," type"))));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4533\n')}}]);