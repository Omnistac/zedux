"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[995],{995:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": function() { return /* binding */ Fu; },\n/* harmony export */   "uriTransformer": function() { return /* binding */ gr; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4359);\n\n\nconst ze = ["http", "https", "mailto", "tel"];\nfunction gr(n) {\n  const e = (n || "").trim(), t = e.charAt(0);\n  if (t === "#" || t === "/")\n    return e;\n  const r = e.indexOf(":");\n  if (r === -1)\n    return e;\n  let i = -1;\n  for (; ++i < ze.length; ) {\n    const l = ze[i];\n    if (r === l.length && e.slice(0, l.length).toLowerCase() === l)\n      return e;\n  }\n  return i = e.indexOf("?"), i !== -1 && r > i || (i = e.indexOf("#"), i !== -1 && r > i) ? e : "javascript:void(0)";\n}\n/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\nvar yr = function(e) {\n  return e != null && e.constructor != null && typeof e.constructor.isBuffer == "function" && e.constructor.isBuffer(e);\n};\nconst Pt = yr;\nfunction xr(n) {\n  return !n || typeof n != "object" ? "" : "position" in n || "type" in n ? Re(n.position) : "start" in n || "end" in n ? Re(n) : "line" in n || "column" in n ? he(n) : "";\n}\nfunction he(n) {\n  return _e(n && n.line) + ":" + _e(n && n.column);\n}\nfunction Re(n) {\n  return he(n && n.start) + "-" + he(n && n.end);\n}\nfunction _e(n) {\n  return n && typeof n == "number" ? n : 1;\n}\nclass cn extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > \ud83d\udc49 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `\'my-package:my-rule\'` or `\'my-rule\'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(e, t, r) {\n    const i = [null, null];\n    let l = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: { line: null, column: null },\n      // @ts-expect-error: "\n      end: { line: null, column: null }\n    };\n    if (super(), typeof t == "string" && (r = t, t = void 0), typeof r == "string") {\n      const o = r.indexOf(":");\n      o === -1 ? i[1] = r : (i[0] = r.slice(0, o), i[1] = r.slice(o + 1));\n    }\n    t && ("type" in t || "position" in t ? t.position && (l = t.position) : "start" in t || "end" in t ? l = t : ("line" in t || "column" in t) && (l.start = t)), this.name = xr(t) || "1:1", this.message = typeof e == "object" ? e.message : e, this.stack = "", typeof e == "object" && e.stack && (this.stack = e.stack), this.reason = this.message, this.fatal, this.line = l.start.line, this.column = l.start.column, this.position = l, this.source = i[0], this.ruleId = i[1], this.file, this.actual, this.expected, this.url, this.note;\n  }\n}\ncn.prototype.file = "";\ncn.prototype.name = "";\ncn.prototype.reason = "";\ncn.prototype.message = "";\ncn.prototype.stack = "";\ncn.prototype.fatal = null;\ncn.prototype.column = null;\ncn.prototype.line = null;\ncn.prototype.source = null;\ncn.prototype.ruleId = null;\ncn.prototype.position = null;\nconst mn = { basename: kr, dirname: br, extname: wr, join: Sr, sep: "/" };\nfunction kr(n, e) {\n  if (e !== void 0 && typeof e != "string")\n    throw new TypeError(\'"ext" argument must be a string\');\n  Hn(n);\n  let t = 0, r = -1, i = n.length, l;\n  if (e === void 0 || e.length === 0 || e.length > n.length) {\n    for (; i--; )\n      if (n.charCodeAt(i) === 47) {\n        if (l) {\n          t = i + 1;\n          break;\n        }\n      } else\n        r < 0 && (l = !0, r = i + 1);\n    return r < 0 ? "" : n.slice(t, r);\n  }\n  if (e === n)\n    return "";\n  let o = -1, u = e.length - 1;\n  for (; i--; )\n    if (n.charCodeAt(i) === 47) {\n      if (l) {\n        t = i + 1;\n        break;\n      }\n    } else\n      o < 0 && (l = !0, o = i + 1), u > -1 && (n.charCodeAt(i) === e.charCodeAt(u--) ? u < 0 && (r = i) : (u = -1, r = o));\n  return t === r ? r = o : r < 0 && (r = n.length), n.slice(t, r);\n}\nfunction br(n) {\n  if (Hn(n), n.length === 0)\n    return ".";\n  let e = -1, t = n.length, r;\n  for (; --t; )\n    if (n.charCodeAt(t) === 47) {\n      if (r) {\n        e = t;\n        break;\n      }\n    } else\n      r || (r = !0);\n  return e < 0 ? n.charCodeAt(0) === 47 ? "/" : "." : e === 1 && n.charCodeAt(0) === 47 ? "//" : n.slice(0, e);\n}\nfunction wr(n) {\n  Hn(n);\n  let e = n.length, t = -1, r = 0, i = -1, l = 0, o;\n  for (; e--; ) {\n    const u = n.charCodeAt(e);\n    if (u === 47) {\n      if (o) {\n        r = e + 1;\n        break;\n      }\n      continue;\n    }\n    t < 0 && (o = !0, t = e + 1), u === 46 ? i < 0 ? i = e : l !== 1 && (l = 1) : i > -1 && (l = -1);\n  }\n  return i < 0 || t < 0 || // We saw a non-dot character immediately before the dot.\n  l === 0 || // The (right-most) trimmed path component is exactly `..`.\n  l === 1 && i === t - 1 && i === r + 1 ? "" : n.slice(i, t);\n}\nfunction Sr(...n) {\n  let e = -1, t;\n  for (; ++e < n.length; )\n    Hn(n[e]), n[e] && (t = t === void 0 ? n[e] : t + "/" + n[e]);\n  return t === void 0 ? "." : Er(t);\n}\nfunction Er(n) {\n  Hn(n);\n  const e = n.charCodeAt(0) === 47;\n  let t = Cr(n, !e);\n  return t.length === 0 && !e && (t = "."), t.length > 0 && n.charCodeAt(n.length - 1) === 47 && (t += "/"), e ? "/" + t : t;\n}\nfunction Cr(n, e) {\n  let t = "", r = 0, i = -1, l = 0, o = -1, u, a;\n  for (; ++o <= n.length; ) {\n    if (o < n.length)\n      u = n.charCodeAt(o);\n    else {\n      if (u === 47)\n        break;\n      u = 47;\n    }\n    if (u === 47) {\n      if (!(i === o - 1 || l === 1))\n        if (i !== o - 1 && l === 2) {\n          if (t.length < 2 || r !== 2 || t.charCodeAt(t.length - 1) !== 46 || t.charCodeAt(t.length - 2) !== 46) {\n            if (t.length > 2) {\n              if (a = t.lastIndexOf("/"), a !== t.length - 1) {\n                a < 0 ? (t = "", r = 0) : (t = t.slice(0, a), r = t.length - 1 - t.lastIndexOf("/")), i = o, l = 0;\n                continue;\n              }\n            } else if (t.length > 0) {\n              t = "", r = 0, i = o, l = 0;\n              continue;\n            }\n          }\n          e && (t = t.length > 0 ? t + "/.." : "..", r = 2);\n        } else\n          t.length > 0 ? t += "/" + n.slice(i + 1, o) : t = n.slice(i + 1, o), r = o - i - 1;\n      i = o, l = 0;\n    } else\n      u === 46 && l > -1 ? l++ : l = -1;\n  }\n  return t;\n}\nfunction Hn(n) {\n  if (typeof n != "string")\n    throw new TypeError(\n      "Path must be a string. Received " + JSON.stringify(n)\n    );\n}\nconst Ar = { cwd: Pr };\nfunction Pr() {\n  return "/";\n}\nfunction me(n) {\n  return n !== null && typeof n == "object" && // @ts-expect-error: indexable.\n  n.href && // @ts-expect-error: indexable.\n  n.origin;\n}\nfunction Fr(n) {\n  if (typeof n == "string")\n    n = new URL(n);\n  else if (!me(n)) {\n    const e = new TypeError(\n      \'The "path" argument must be of type string or an instance of URL. Received `\' + n + "`"\n    );\n    throw e.code = "ERR_INVALID_ARG_TYPE", e;\n  }\n  if (n.protocol !== "file:") {\n    const e = new TypeError("The URL must be of scheme file");\n    throw e.code = "ERR_INVALID_URL_SCHEME", e;\n  }\n  return Tr(n);\n}\nfunction Tr(n) {\n  if (n.hostname !== "") {\n    const r = new TypeError(\n      \'File URL host must be "localhost" or empty on darwin\'\n    );\n    throw r.code = "ERR_INVALID_FILE_URL_HOST", r;\n  }\n  const e = n.pathname;\n  let t = -1;\n  for (; ++t < e.length; )\n    if (e.charCodeAt(t) === 37 && e.charCodeAt(t + 1) === 50) {\n      const r = e.charCodeAt(t + 2);\n      if (r === 70 || r === 102) {\n        const i = new TypeError(\n          "File URL path must not include encoded / characters"\n        );\n        throw i.code = "ERR_INVALID_FILE_URL_PATH", i;\n      }\n    }\n  return decodeURIComponent(e);\n}\nconst re = ["history", "path", "basename", "stem", "extname", "dirname"];\nclass Ft {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` \u2014 `{value: options}`\n   * *   `URL` \u2014 `{path: options}`\n   * *   `VFile` \u2014 shallow copies its data over to the new file\n   * *   `object` \u2014 all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(e) {\n    let t;\n    e ? typeof e == "string" || Ir(e) ? t = { value: e } : me(e) ? t = { path: e } : t = e : t = {}, this.data = {}, this.messages = [], this.history = [], this.cwd = Ar.cwd(), this.value, this.stored, this.result, this.map;\n    let r = -1;\n    for (; ++r < re.length; ) {\n      const l = re[r];\n      l in t && t[l] !== void 0 && t[l] !== null && (this[l] = l === "history" ? [...t[l]] : t[l]);\n    }\n    let i;\n    for (i in t)\n      re.includes(i) || (this[i] = t[i]);\n  }\n  /**\n   * Get the full path (example: `\'~/index.min.js\'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1];\n  }\n  /**\n   * Set the full path (example: `\'~/index.min.js\'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(e) {\n    me(e) && (e = Fr(e)), le(e, "path"), this.path !== e && this.history.push(e);\n  }\n  /**\n   * Get the parent path (example: `\'~\'`).\n   */\n  get dirname() {\n    return typeof this.path == "string" ? mn.dirname(this.path) : void 0;\n  }\n  /**\n   * Set the parent path (example: `\'~\'`).\n   *\n   * Cannot be set if there\u2019s no `path` yet.\n   */\n  set dirname(e) {\n    Me(this.basename, "dirname"), this.path = mn.join(e || "", this.basename);\n  }\n  /**\n   * Get the basename (including extname) (example: `\'index.min.js\'`).\n   */\n  get basename() {\n    return typeof this.path == "string" ? mn.basename(this.path) : void 0;\n  }\n  /**\n   * Set basename (including extname) (`\'index.min.js\'`).\n   *\n   * Cannot contain path separators (`\'/\'` on unix, macOS, and browsers, `\'\\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(e) {\n    le(e, "basename"), ie(e, "basename"), this.path = mn.join(this.dirname || "", e);\n  }\n  /**\n   * Get the extname (including dot) (example: `\'.js\'`).\n   */\n  get extname() {\n    return typeof this.path == "string" ? mn.extname(this.path) : void 0;\n  }\n  /**\n   * Set the extname (including dot) (example: `\'.js\'`).\n   *\n   * Cannot contain path separators (`\'/\'` on unix, macOS, and browsers, `\'\\\'`\n   * on windows).\n   * Cannot be set if there\u2019s no `path` yet.\n   */\n  set extname(e) {\n    if (ie(e, "extname"), Me(this.dirname, "extname"), e) {\n      if (e.charCodeAt(0) !== 46)\n        throw new Error("`extname` must start with `.`");\n      if (e.includes(".", 1))\n        throw new Error("`extname` cannot contain multiple dots");\n    }\n    this.path = mn.join(this.dirname, this.stem + (e || ""));\n  }\n  /**\n   * Get the stem (basename w/o extname) (example: `\'index.min\'`).\n   */\n  get stem() {\n    return typeof this.path == "string" ? mn.basename(this.path, this.extname) : void 0;\n  }\n  /**\n   * Set the stem (basename w/o extname) (example: `\'index.min\'`).\n   *\n   * Cannot contain path separators (`\'/\'` on unix, macOS, and browsers, `\'\\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(e) {\n    le(e, "stem"), ie(e, "stem"), this.path = mn.join(this.dirname || "", e + (this.extname || ""));\n  }\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding=\'utf8\']\n   *   Character encoding to understand `value` as when it\u2019s a `Buffer`\n   *   (default: `\'utf8\'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(e) {\n    return (this.value || "").toString(e || void 0);\n  }\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `\'my-package:my-rule\'` or `\'my-rule\'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(e, t, r) {\n    const i = new cn(e, t, r);\n    return this.path && (i.name = this.path + ":" + i.name, i.file = this.path), i.fatal = !1, this.messages.push(i), i;\n  }\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `\'my-package:my-rule\'` or `\'my-rule\'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(e, t, r) {\n    const i = this.message(e, t, r);\n    return i.fatal = null, i;\n  }\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > \ud83d\udc49 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `\'my-package:my-rule\'` or `\'my-rule\'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(e, t, r) {\n    const i = this.message(e, t, r);\n    throw i.fatal = !0, i;\n  }\n}\nfunction ie(n, e) {\n  if (n && n.includes(mn.sep))\n    throw new Error(\n      "`" + e + "` cannot be a path: did not expect `" + mn.sep + "`"\n    );\n}\nfunction le(n, e) {\n  if (!n)\n    throw new Error("`" + e + "` cannot be empty");\n}\nfunction Me(n, e) {\n  if (!n)\n    throw new Error("Setting `" + e + "` requires `path` to be set too");\n}\nfunction Ir(n) {\n  return Pt(n);\n}\nfunction Be(n) {\n  if (n)\n    throw n;\n}\nvar Yn = Object.prototype.hasOwnProperty, Tt = Object.prototype.toString, Ne = Object.defineProperty, je = Object.getOwnPropertyDescriptor, $e = function(e) {\n  return typeof Array.isArray == "function" ? Array.isArray(e) : Tt.call(e) === "[object Array]";\n}, He = function(e) {\n  if (!e || Tt.call(e) !== "[object Object]")\n    return !1;\n  var t = Yn.call(e, "constructor"), r = e.constructor && e.constructor.prototype && Yn.call(e.constructor.prototype, "isPrototypeOf");\n  if (e.constructor && !t && !r)\n    return !1;\n  var i;\n  for (i in e)\n    ;\n  return typeof i > "u" || Yn.call(e, i);\n}, Ue = function(e, t) {\n  Ne && t.name === "__proto__" ? Ne(e, t.name, {\n    enumerable: !0,\n    configurable: !0,\n    value: t.newValue,\n    writable: !0\n  }) : e[t.name] = t.newValue;\n}, Ve = function(e, t) {\n  if (t === "__proto__")\n    if (Yn.call(e, t)) {\n      if (je)\n        return je(e, t).value;\n    } else\n      return;\n  return e[t];\n}, qe = function n() {\n  var e, t, r, i, l, o, u = arguments[0], a = 1, c = arguments.length, s = !1;\n  for (typeof u == "boolean" && (s = u, u = arguments[1] || {}, a = 2), (u == null || typeof u != "object" && typeof u != "function") && (u = {}); a < c; ++a)\n    if (e = arguments[a], e != null)\n      for (t in e)\n        r = Ve(u, t), i = Ve(e, t), u !== i && (s && i && (He(i) || (l = $e(i))) ? (l ? (l = !1, o = r && $e(r) ? r : []) : o = r && He(r) ? r : {}, Ue(u, { name: t, newValue: n(s, o, i) })) : typeof i < "u" && Ue(u, { name: t, newValue: i }));\n  return u;\n};\nfunction de(n) {\n  if (typeof n != "object" || n === null)\n    return !1;\n  const e = Object.getPrototypeOf(n);\n  return (e === null || e === Object.prototype || Object.getPrototypeOf(e) === null) && !(Symbol.toStringTag in n) && !(Symbol.iterator in n);\n}\nfunction Or() {\n  const n = [], e = { run: t, use: r };\n  return e;\n  function t(...i) {\n    let l = -1;\n    const o = i.pop();\n    if (typeof o != "function")\n      throw new TypeError("Expected function as last argument, not " + o);\n    u(null, ...i);\n    function u(a, ...c) {\n      const s = n[++l];\n      let h = -1;\n      if (a) {\n        o(a);\n        return;\n      }\n      for (; ++h < i.length; )\n        (c[h] === null || c[h] === void 0) && (c[h] = i[h]);\n      i = c, s ? Lr(s, u)(...c) : o(null, ...c);\n    }\n  }\n  function r(i) {\n    if (typeof i != "function")\n      throw new TypeError(\n        "Expected `middelware` to be a function, not " + i\n      );\n    return n.push(i), e;\n  }\n}\nfunction Lr(n, e) {\n  let t;\n  return r;\n  function r(...o) {\n    const u = n.length > o.length;\n    let a;\n    u && o.push(i);\n    try {\n      a = n.apply(this, o);\n    } catch (c) {\n      const s = (\n        /** @type {Error} */\n        c\n      );\n      if (u && t)\n        throw s;\n      return i(s);\n    }\n    u || (a instanceof Promise ? a.then(l, i) : a instanceof Error ? i(a) : l(a));\n  }\n  function i(o, ...u) {\n    t || (t = !0, e(o, ...u));\n  }\n  function l(o) {\n    i(null, o);\n  }\n}\nconst Dr = Ot().freeze(), It = {}.hasOwnProperty;\nfunction Ot() {\n  const n = Or(), e = [];\n  let t = {}, r, i = -1;\n  return l.data = o, l.Parser = void 0, l.Compiler = void 0, l.freeze = u, l.attachers = e, l.use = a, l.parse = c, l.stringify = s, l.run = h, l.runSync = g, l.process = d, l.processSync = m, l;\n  function l() {\n    const y = Ot();\n    let x = -1;\n    for (; ++x < e.length; )\n      y.use(...e[x]);\n    return y.data(qe(!0, {}, t)), y;\n  }\n  function o(y, x) {\n    return typeof y == "string" ? arguments.length === 2 ? (ae("data", r), t[y] = x, l) : It.call(t, y) && t[y] || null : y ? (ae("data", r), t = y, l) : t;\n  }\n  function u() {\n    if (r)\n      return l;\n    for (; ++i < e.length; ) {\n      const [y, ...x] = e[i];\n      if (x[0] === !1)\n        continue;\n      x[0] === !0 && (x[0] = void 0);\n      const w = y.call(l, ...x);\n      typeof w == "function" && n.use(w);\n    }\n    return r = !0, i = Number.POSITIVE_INFINITY, l;\n  }\n  function a(y, ...x) {\n    let w;\n    if (ae("use", r), y != null)\n      if (typeof y == "function")\n        T(y, ...x);\n      else if (typeof y == "object")\n        Array.isArray(y) ? _(y) : A(y);\n      else\n        throw new TypeError("Expected usable value, not `" + y + "`");\n    return w && (t.settings = Object.assign(t.settings || {}, w)), l;\n    function v(b) {\n      if (typeof b == "function")\n        T(b);\n      else if (typeof b == "object")\n        if (Array.isArray(b)) {\n          const [I, ...R] = b;\n          T(I, ...R);\n        } else\n          A(b);\n      else\n        throw new TypeError("Expected usable value, not `" + b + "`");\n    }\n    function A(b) {\n      _(b.plugins), b.settings && (w = Object.assign(w || {}, b.settings));\n    }\n    function _(b) {\n      let I = -1;\n      if (b != null)\n        if (Array.isArray(b))\n          for (; ++I < b.length; ) {\n            const R = b[I];\n            v(R);\n          }\n        else\n          throw new TypeError("Expected a list of plugins, not `" + b + "`");\n    }\n    function T(b, I) {\n      let R = -1, M;\n      for (; ++R < e.length; )\n        if (e[R][0] === b) {\n          M = e[R];\n          break;\n        }\n      M ? (de(M[1]) && de(I) && (I = qe(!0, M[1], I)), M[1] = I) : e.push([...arguments]);\n    }\n  }\n  function c(y) {\n    l.freeze();\n    const x = jn(y), w = l.Parser;\n    return oe("parse", w), We(w, "parse") ? new w(String(x), x).parse() : w(String(x), x);\n  }\n  function s(y, x) {\n    l.freeze();\n    const w = jn(x), v = l.Compiler;\n    return ue("stringify", v), Ye(y), We(v, "compile") ? new v(y, w).compile() : v(y, w);\n  }\n  function h(y, x, w) {\n    if (Ye(y), l.freeze(), !w && typeof x == "function" && (w = x, x = void 0), !w)\n      return new Promise(v);\n    v(null, w);\n    function v(A, _) {\n      n.run(y, jn(x), T);\n      function T(b, I, R) {\n        I = I || y, b ? _(b) : A ? A(I) : w(null, I, R);\n      }\n    }\n  }\n  function g(y, x) {\n    let w, v;\n    return l.run(y, x, A), Qe("runSync", "run", v), w;\n    function A(_, T) {\n      Be(_), w = T, v = !0;\n    }\n  }\n  function d(y, x) {\n    if (l.freeze(), oe("process", l.Parser), ue("process", l.Compiler), !x)\n      return new Promise(w);\n    w(null, x);\n    function w(v, A) {\n      const _ = jn(y);\n      l.run(l.parse(_), _, (b, I, R) => {\n        if (b || !I || !R)\n          T(b);\n        else {\n          const M = l.stringify(I, R);\n          M == null || (Rr(M) ? R.value = M : R.result = M), T(b, R);\n        }\n      });\n      function T(b, I) {\n        b || !I ? A(b) : v ? v(I) : x(null, I);\n      }\n    }\n  }\n  function m(y) {\n    let x;\n    l.freeze(), oe("processSync", l.Parser), ue("processSync", l.Compiler);\n    const w = jn(y);\n    return l.process(w, v), Qe("processSync", "process", x), w;\n    function v(A) {\n      x = !0, Be(A);\n    }\n  }\n}\nfunction We(n, e) {\n  return typeof n == "function" && // Prototypes do exist.\n  // type-coverage:ignore-next-line\n  n.prototype && // A function with keys in its prototype is probably a constructor.\n  // Classes\u2019 prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  // type-coverage:ignore-next-line\n  (vr(n.prototype) || e in n.prototype);\n}\nfunction vr(n) {\n  let e;\n  for (e in n)\n    if (It.call(n, e))\n      return !0;\n  return !1;\n}\nfunction oe(n, e) {\n  if (typeof e != "function")\n    throw new TypeError("Cannot `" + n + "` without `Parser`");\n}\nfunction ue(n, e) {\n  if (typeof e != "function")\n    throw new TypeError("Cannot `" + n + "` without `Compiler`");\n}\nfunction ae(n, e) {\n  if (e)\n    throw new Error(\n      "Cannot call `" + n + "` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."\n    );\n}\nfunction Ye(n) {\n  if (!de(n) || typeof n.type != "string")\n    throw new TypeError("Expected node, got `" + n + "`");\n}\nfunction Qe(n, e, t) {\n  if (!t)\n    throw new Error(\n      "`" + n + "` finished async. Use `" + e + "` instead"\n    );\n}\nfunction jn(n) {\n  return zr(n) ? n : new Ft(n);\n}\nfunction zr(n) {\n  return !!(n && typeof n == "object" && "message" in n && "messages" in n);\n}\nfunction Rr(n) {\n  return typeof n == "string" || Pt(n);\n}\nfunction _r(n, e) {\n  const t = (e || {}).includeImageAlt;\n  return Lt(\n    n,\n    typeof t == "boolean" ? t : !0\n  );\n}\nfunction Lt(n, e) {\n  return Mr(n) && ("value" in n && n.value || e && "alt" in n && n.alt || "children" in n && Xe(n.children, e)) || Array.isArray(n) && Xe(n, e) || "";\n}\nfunction Xe(n, e) {\n  const t = [];\n  let r = -1;\n  for (; ++r < n.length; )\n    t[r] = Lt(n[r], e);\n  return t.join("");\n}\nfunction Mr(n) {\n  return !!(n && typeof n == "object");\n}\nfunction gn(n, e, t, r) {\n  const i = n.length;\n  let l = 0, o;\n  if (e < 0 ? e = -e > i ? 0 : i + e : e = e > i ? i : e, t = t > 0 ? t : 0, r.length < 1e4)\n    o = Array.from(r), o.unshift(e, t), [].splice.apply(n, o);\n  else\n    for (t && [].splice.apply(n, [e, t]); l < r.length; )\n      o = r.slice(l, l + 1e4), o.unshift(e, 0), [].splice.apply(n, o), l += 1e4, e += 1e4;\n}\nfunction an(n, e) {\n  return n.length > 0 ? (gn(n, n.length, 0, e), n) : e;\n}\nconst Ke = {}.hasOwnProperty;\nfunction Br(n) {\n  const e = {};\n  let t = -1;\n  for (; ++t < n.length; )\n    Nr(e, n[t]);\n  return e;\n}\nfunction Nr(n, e) {\n  let t;\n  for (t in e) {\n    const i = (Ke.call(n, t) ? n[t] : void 0) || (n[t] = {}), l = e[t];\n    let o;\n    for (o in l) {\n      Ke.call(i, o) || (i[o] = []);\n      const u = l[o];\n      jr(\n        // @ts-expect-error Looks like a list.\n        i[o],\n        Array.isArray(u) ? u : u ? [u] : []\n      );\n    }\n  }\n}\nfunction jr(n, e) {\n  let t = -1;\n  const r = [];\n  for (; ++t < e.length; )\n    (e[t].add === "after" ? n : r).push(e[t]);\n  gn(n, 0, 0, r);\n}\nconst $r = /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/, dn = An(/[A-Za-z]/), ge = An(/\\d/), Hr = An(/[\\dA-Fa-f]/), on = An(/[\\dA-Za-z]/), Ur = An(/[!-/:-@[-`{-~]/), Ge = An(/[#-\'*+\\--9=?A-Z^-~]/);\nfunction ye(n) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    n !== null && (n < 32 || n === 127)\n  );\n}\nfunction sn(n) {\n  return n !== null && (n < 0 || n === 32);\n}\nfunction L(n) {\n  return n !== null && n < -2;\n}\nfunction G(n) {\n  return n === -2 || n === -1 || n === 32;\n}\nconst Vr = An(/\\s/), qr = An($r);\nfunction An(n) {\n  return e;\n  function e(t) {\n    return t !== null && n.test(String.fromCharCode(t));\n  }\n}\nfunction U(n, e, t, r) {\n  const i = r ? r - 1 : Number.POSITIVE_INFINITY;\n  let l = 0;\n  return o;\n  function o(a) {\n    return G(a) ? (n.enter(t), u(a)) : e(a);\n  }\n  function u(a) {\n    return G(a) && l++ < i ? (n.consume(a), u) : (n.exit(t), e(a));\n  }\n}\nconst Wr = {\n  tokenize: Yr\n};\nfunction Yr(n) {\n  const e = n.attempt(\n    this.parser.constructs.contentInitial,\n    r,\n    i\n  );\n  let t;\n  return e;\n  function r(u) {\n    if (u === null) {\n      n.consume(u);\n      return;\n    }\n    return n.enter("lineEnding"), n.consume(u), n.exit("lineEnding"), U(n, e, "linePrefix");\n  }\n  function i(u) {\n    return n.enter("paragraph"), l(u);\n  }\n  function l(u) {\n    const a = n.enter("chunkText", {\n      contentType: "text",\n      previous: t\n    });\n    return t && (t.next = a), t = a, o(u);\n  }\n  function o(u) {\n    if (u === null) {\n      n.exit("chunkText"), n.exit("paragraph"), n.consume(u);\n      return;\n    }\n    return L(u) ? (n.consume(u), n.exit("chunkText"), l) : (n.consume(u), o);\n  }\n}\nconst Qr = {\n  tokenize: Xr\n}, Ze = {\n  tokenize: Kr\n};\nfunction Xr(n) {\n  const e = this, t = [];\n  let r = 0, i, l, o;\n  return u;\n  function u(A) {\n    if (r < t.length) {\n      const _ = t[r];\n      return e.containerState = _[1], n.attempt(\n        _[0].continuation,\n        a,\n        c\n      )(A);\n    }\n    return c(A);\n  }\n  function a(A) {\n    if (r++, e.containerState._closeFlow) {\n      e.containerState._closeFlow = void 0, i && v();\n      const _ = e.events.length;\n      let T = _, b;\n      for (; T--; )\n        if (e.events[T][0] === "exit" && e.events[T][1].type === "chunkFlow") {\n          b = e.events[T][1].end;\n          break;\n        }\n      w(r);\n      let I = _;\n      for (; I < e.events.length; )\n        e.events[I][1].end = Object.assign({}, b), I++;\n      return gn(\n        e.events,\n        T + 1,\n        0,\n        e.events.slice(_)\n      ), e.events.length = I, c(A);\n    }\n    return u(A);\n  }\n  function c(A) {\n    if (r === t.length) {\n      if (!i)\n        return g(A);\n      if (i.currentConstruct && i.currentConstruct.concrete)\n        return m(A);\n      e.interrupt = !!(i.currentConstruct && !i._gfmTableDynamicInterruptHack);\n    }\n    return e.containerState = {}, n.check(\n      Ze,\n      s,\n      h\n    )(A);\n  }\n  function s(A) {\n    return i && v(), w(r), g(A);\n  }\n  function h(A) {\n    return e.parser.lazy[e.now().line] = r !== t.length, o = e.now().offset, m(A);\n  }\n  function g(A) {\n    return e.containerState = {}, n.attempt(\n      Ze,\n      d,\n      m\n    )(A);\n  }\n  function d(A) {\n    return r++, t.push([e.currentConstruct, e.containerState]), g(A);\n  }\n  function m(A) {\n    if (A === null) {\n      i && v(), w(0), n.consume(A);\n      return;\n    }\n    return i = i || e.parser.flow(e.now()), n.enter("chunkFlow", {\n      contentType: "flow",\n      previous: l,\n      _tokenizer: i\n    }), y(A);\n  }\n  function y(A) {\n    if (A === null) {\n      x(n.exit("chunkFlow"), !0), w(0), n.consume(A);\n      return;\n    }\n    return L(A) ? (n.consume(A), x(n.exit("chunkFlow")), r = 0, e.interrupt = void 0, u) : (n.consume(A), y);\n  }\n  function x(A, _) {\n    const T = e.sliceStream(A);\n    if (_ && T.push(null), A.previous = l, l && (l.next = A), l = A, i.defineSkip(A.start), i.write(T), e.parser.lazy[A.start.line]) {\n      let b = i.events.length;\n      for (; b--; )\n        if (\n          // The token starts before the line ending\u2026\n          i.events[b][1].start.offset < o && // \u2026and either is not ended yet\u2026\n          (!i.events[b][1].end || // \u2026or ends after it.\n          i.events[b][1].end.offset > o)\n        )\n          return;\n      const I = e.events.length;\n      let R = I, M, X;\n      for (; R--; )\n        if (e.events[R][0] === "exit" && e.events[R][1].type === "chunkFlow") {\n          if (M) {\n            X = e.events[R][1].end;\n            break;\n          }\n          M = !0;\n        }\n      for (w(r), b = I; b < e.events.length; )\n        e.events[b][1].end = Object.assign({}, X), b++;\n      gn(\n        e.events,\n        R + 1,\n        0,\n        e.events.slice(I)\n      ), e.events.length = b;\n    }\n  }\n  function w(A) {\n    let _ = t.length;\n    for (; _-- > A; ) {\n      const T = t[_];\n      e.containerState = T[1], T[0].exit.call(e, n);\n    }\n    t.length = A;\n  }\n  function v() {\n    i.write([null]), l = void 0, i = void 0, e.containerState._closeFlow = void 0;\n  }\n}\nfunction Kr(n, e, t) {\n  return U(\n    n,\n    n.attempt(this.parser.constructs.document, e, t),\n    "linePrefix",\n    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4\n  );\n}\nfunction Je(n) {\n  if (n === null || sn(n) || Vr(n))\n    return 1;\n  if (qr(n))\n    return 2;\n}\nfunction Ce(n, e, t) {\n  const r = [];\n  let i = -1;\n  for (; ++i < n.length; ) {\n    const l = n[i].resolveAll;\n    l && !r.includes(l) && (e = l(e, t), r.push(l));\n  }\n  return e;\n}\nconst xe = {\n  name: "attention",\n  tokenize: Zr,\n  resolveAll: Gr\n};\nfunction Gr(n, e) {\n  let t = -1, r, i, l, o, u, a, c, s;\n  for (; ++t < n.length; )\n    if (n[t][0] === "enter" && n[t][1].type === "attentionSequence" && n[t][1]._close) {\n      for (r = t; r--; )\n        if (n[r][0] === "exit" && n[r][1].type === "attentionSequence" && n[r][1]._open && // If the markers are the same:\n        e.sliceSerialize(n[r][1]).charCodeAt(0) === e.sliceSerialize(n[t][1]).charCodeAt(0)) {\n          if ((n[r][1]._close || n[t][1]._open) && (n[t][1].end.offset - n[t][1].start.offset) % 3 && !((n[r][1].end.offset - n[r][1].start.offset + n[t][1].end.offset - n[t][1].start.offset) % 3))\n            continue;\n          a = n[r][1].end.offset - n[r][1].start.offset > 1 && n[t][1].end.offset - n[t][1].start.offset > 1 ? 2 : 1;\n          const h = Object.assign({}, n[r][1].end), g = Object.assign({}, n[t][1].start);\n          nt(h, -a), nt(g, a), o = {\n            type: a > 1 ? "strongSequence" : "emphasisSequence",\n            start: h,\n            end: Object.assign({}, n[r][1].end)\n          }, u = {\n            type: a > 1 ? "strongSequence" : "emphasisSequence",\n            start: Object.assign({}, n[t][1].start),\n            end: g\n          }, l = {\n            type: a > 1 ? "strongText" : "emphasisText",\n            start: Object.assign({}, n[r][1].end),\n            end: Object.assign({}, n[t][1].start)\n          }, i = {\n            type: a > 1 ? "strong" : "emphasis",\n            start: Object.assign({}, o.start),\n            end: Object.assign({}, u.end)\n          }, n[r][1].end = Object.assign({}, o.start), n[t][1].start = Object.assign({}, u.end), c = [], n[r][1].end.offset - n[r][1].start.offset && (c = an(c, [\n            ["enter", n[r][1], e],\n            ["exit", n[r][1], e]\n          ])), c = an(c, [\n            ["enter", i, e],\n            ["enter", o, e],\n            ["exit", o, e],\n            ["enter", l, e]\n          ]), c = an(\n            c,\n            Ce(\n              e.parser.constructs.insideSpan.null,\n              n.slice(r + 1, t),\n              e\n            )\n          ), c = an(c, [\n            ["exit", l, e],\n            ["enter", u, e],\n            ["exit", u, e],\n            ["exit", i, e]\n          ]), n[t][1].end.offset - n[t][1].start.offset ? (s = 2, c = an(c, [\n            ["enter", n[t][1], e],\n            ["exit", n[t][1], e]\n          ])) : s = 0, gn(n, r - 1, t - r + 3, c), t = r + c.length - s - 2;\n          break;\n        }\n    }\n  for (t = -1; ++t < n.length; )\n    n[t][1].type === "attentionSequence" && (n[t][1].type = "data");\n  return n;\n}\nfunction Zr(n, e) {\n  const t = this.parser.constructs.attentionMarkers.null, r = this.previous, i = Je(r);\n  let l;\n  return o;\n  function o(a) {\n    return n.enter("attentionSequence"), l = a, u(a);\n  }\n  function u(a) {\n    if (a === l)\n      return n.consume(a), u;\n    const c = n.exit("attentionSequence"), s = Je(a), h = !s || s === 2 && i || t.includes(a), g = !i || i === 2 && s || t.includes(r);\n    return c._open = !!(l === 42 ? h : h && (i || !g)), c._close = !!(l === 42 ? g : g && (s || !h)), e(a);\n  }\n}\nfunction nt(n, e) {\n  n.column += e, n.offset += e, n._bufferIndex += e;\n}\nconst Jr = {\n  name: "autolink",\n  tokenize: ni\n};\nfunction ni(n, e, t) {\n  let r = 1;\n  return i;\n  function i(m) {\n    return n.enter("autolink"), n.enter("autolinkMarker"), n.consume(m), n.exit("autolinkMarker"), n.enter("autolinkProtocol"), l;\n  }\n  function l(m) {\n    return dn(m) ? (n.consume(m), o) : Ge(m) ? c(m) : t(m);\n  }\n  function o(m) {\n    return m === 43 || m === 45 || m === 46 || on(m) ? u(m) : c(m);\n  }\n  function u(m) {\n    return m === 58 ? (n.consume(m), a) : (m === 43 || m === 45 || m === 46 || on(m)) && r++ < 32 ? (n.consume(m), u) : c(m);\n  }\n  function a(m) {\n    return m === 62 ? (n.exit("autolinkProtocol"), d(m)) : m === null || m === 32 || m === 60 || ye(m) ? t(m) : (n.consume(m), a);\n  }\n  function c(m) {\n    return m === 64 ? (n.consume(m), r = 0, s) : Ge(m) ? (n.consume(m), c) : t(m);\n  }\n  function s(m) {\n    return on(m) ? h(m) : t(m);\n  }\n  function h(m) {\n    return m === 46 ? (n.consume(m), r = 0, s) : m === 62 ? (n.exit("autolinkProtocol").type = "autolinkEmail", d(m)) : g(m);\n  }\n  function g(m) {\n    return (m === 45 || on(m)) && r++ < 63 ? (n.consume(m), m === 45 ? g : h) : t(m);\n  }\n  function d(m) {\n    return n.enter("autolinkMarker"), n.consume(m), n.exit("autolinkMarker"), n.exit("autolink"), e;\n  }\n}\nconst Zn = {\n  tokenize: ei,\n  partial: !0\n};\nfunction ei(n, e, t) {\n  return U(n, r, "linePrefix");\n  function r(i) {\n    return i === null || L(i) ? e(i) : t(i);\n  }\n}\nconst Dt = {\n  name: "blockQuote",\n  tokenize: ti,\n  continuation: {\n    tokenize: ri\n  },\n  exit: ii\n};\nfunction ti(n, e, t) {\n  const r = this;\n  return i;\n  function i(o) {\n    if (o === 62) {\n      const u = r.containerState;\n      return u.open || (n.enter("blockQuote", {\n        _container: !0\n      }), u.open = !0), n.enter("blockQuotePrefix"), n.enter("blockQuoteMarker"), n.consume(o), n.exit("blockQuoteMarker"), l;\n    }\n    return t(o);\n  }\n  function l(o) {\n    return G(o) ? (n.enter("blockQuotePrefixWhitespace"), n.consume(o), n.exit("blockQuotePrefixWhitespace"), n.exit("blockQuotePrefix"), e) : (n.exit("blockQuotePrefix"), e(o));\n  }\n}\nfunction ri(n, e, t) {\n  return U(\n    n,\n    n.attempt(Dt, e, t),\n    "linePrefix",\n    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4\n  );\n}\nfunction ii(n) {\n  n.exit("blockQuote");\n}\nconst vt = {\n  name: "characterEscape",\n  tokenize: li\n};\nfunction li(n, e, t) {\n  return r;\n  function r(l) {\n    return n.enter("characterEscape"), n.enter("escapeMarker"), n.consume(l), n.exit("escapeMarker"), i;\n  }\n  function i(l) {\n    return Ur(l) ? (n.enter("characterEscapeValue"), n.consume(l), n.exit("characterEscapeValue"), n.exit("characterEscape"), e) : t(l);\n  }\n}\nconst et = document.createElement("i");\nfunction Ae(n) {\n  const e = "&" + n + ";";\n  et.innerHTML = e;\n  const t = et.textContent;\n  return t.charCodeAt(t.length - 1) === 59 && n !== "semi" || t === e ? !1 : t;\n}\nconst zt = {\n  name: "characterReference",\n  tokenize: oi\n};\nfunction oi(n, e, t) {\n  const r = this;\n  let i = 0, l, o;\n  return u;\n  function u(h) {\n    return n.enter("characterReference"), n.enter("characterReferenceMarker"), n.consume(h), n.exit("characterReferenceMarker"), a;\n  }\n  function a(h) {\n    return h === 35 ? (n.enter("characterReferenceMarkerNumeric"), n.consume(h), n.exit("characterReferenceMarkerNumeric"), c) : (n.enter("characterReferenceValue"), l = 31, o = on, s(h));\n  }\n  function c(h) {\n    return h === 88 || h === 120 ? (n.enter("characterReferenceMarkerHexadecimal"), n.consume(h), n.exit("characterReferenceMarkerHexadecimal"), n.enter("characterReferenceValue"), l = 6, o = Hr, s) : (n.enter("characterReferenceValue"), l = 7, o = ge, s(h));\n  }\n  function s(h) {\n    let g;\n    return h === 59 && i ? (g = n.exit("characterReferenceValue"), o === on && !Ae(r.sliceSerialize(g)) ? t(h) : (n.enter("characterReferenceMarker"), n.consume(h), n.exit("characterReferenceMarker"), n.exit("characterReference"), e)) : o(h) && i++ < l ? (n.consume(h), s) : t(h);\n  }\n}\nconst tt = {\n  name: "codeFenced",\n  tokenize: ui,\n  concrete: !0\n};\nfunction ui(n, e, t) {\n  const r = this, i = {\n    tokenize: T,\n    partial: !0\n  }, l = {\n    tokenize: _,\n    partial: !0\n  }, o = this.events[this.events.length - 1], u = o && o[1].type === "linePrefix" ? o[2].sliceSerialize(o[1], !0).length : 0;\n  let a = 0, c;\n  return s;\n  function s(b) {\n    return n.enter("codeFenced"), n.enter("codeFencedFence"), n.enter("codeFencedFenceSequence"), c = b, h(b);\n  }\n  function h(b) {\n    return b === c ? (n.consume(b), a++, h) : (n.exit("codeFencedFenceSequence"), a < 3 ? t(b) : U(n, g, "whitespace")(b));\n  }\n  function g(b) {\n    return b === null || L(b) ? x(b) : (n.enter("codeFencedFenceInfo"), n.enter("chunkString", {\n      contentType: "string"\n    }), d(b));\n  }\n  function d(b) {\n    return b === null || sn(b) ? (n.exit("chunkString"), n.exit("codeFencedFenceInfo"), U(n, m, "whitespace")(b)) : b === 96 && b === c ? t(b) : (n.consume(b), d);\n  }\n  function m(b) {\n    return b === null || L(b) ? x(b) : (n.enter("codeFencedFenceMeta"), n.enter("chunkString", {\n      contentType: "string"\n    }), y(b));\n  }\n  function y(b) {\n    return b === null || L(b) ? (n.exit("chunkString"), n.exit("codeFencedFenceMeta"), x(b)) : b === 96 && b === c ? t(b) : (n.consume(b), y);\n  }\n  function x(b) {\n    return n.exit("codeFencedFence"), r.interrupt ? e(b) : w(b);\n  }\n  function w(b) {\n    return b === null ? A(b) : L(b) ? n.attempt(\n      l,\n      n.attempt(\n        i,\n        A,\n        u ? U(\n          n,\n          w,\n          "linePrefix",\n          u + 1\n        ) : w\n      ),\n      A\n    )(b) : (n.enter("codeFlowValue"), v(b));\n  }\n  function v(b) {\n    return b === null || L(b) ? (n.exit("codeFlowValue"), w(b)) : (n.consume(b), v);\n  }\n  function A(b) {\n    return n.exit("codeFenced"), e(b);\n  }\n  function _(b, I, R) {\n    const M = this;\n    return X;\n    function X(F) {\n      return b.enter("lineEnding"), b.consume(F), b.exit("lineEnding"), C;\n    }\n    function C(F) {\n      return M.parser.lazy[M.now().line] ? R(F) : I(F);\n    }\n  }\n  function T(b, I, R) {\n    let M = 0;\n    return U(\n      b,\n      X,\n      "linePrefix",\n      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4\n    );\n    function X(B) {\n      return b.enter("codeFencedFence"), b.enter("codeFencedFenceSequence"), C(B);\n    }\n    function C(B) {\n      return B === c ? (b.consume(B), M++, C) : M < a ? R(B) : (b.exit("codeFencedFenceSequence"), U(b, F, "whitespace")(B));\n    }\n    function F(B) {\n      return B === null || L(B) ? (b.exit("codeFencedFence"), I(B)) : R(B);\n    }\n  }\n}\nconst se = {\n  name: "codeIndented",\n  tokenize: si\n}, ai = {\n  tokenize: ci,\n  partial: !0\n};\nfunction si(n, e, t) {\n  const r = this;\n  return i;\n  function i(c) {\n    return n.enter("codeIndented"), U(n, l, "linePrefix", 4 + 1)(c);\n  }\n  function l(c) {\n    const s = r.events[r.events.length - 1];\n    return s && s[1].type === "linePrefix" && s[2].sliceSerialize(s[1], !0).length >= 4 ? o(c) : t(c);\n  }\n  function o(c) {\n    return c === null ? a(c) : L(c) ? n.attempt(ai, o, a)(c) : (n.enter("codeFlowValue"), u(c));\n  }\n  function u(c) {\n    return c === null || L(c) ? (n.exit("codeFlowValue"), o(c)) : (n.consume(c), u);\n  }\n  function a(c) {\n    return n.exit("codeIndented"), e(c);\n  }\n}\nfunction ci(n, e, t) {\n  const r = this;\n  return i;\n  function i(o) {\n    return r.parser.lazy[r.now().line] ? t(o) : L(o) ? (n.enter("lineEnding"), n.consume(o), n.exit("lineEnding"), i) : U(n, l, "linePrefix", 4 + 1)(o);\n  }\n  function l(o) {\n    const u = r.events[r.events.length - 1];\n    return u && u[1].type === "linePrefix" && u[2].sliceSerialize(u[1], !0).length >= 4 ? e(o) : L(o) ? i(o) : t(o);\n  }\n}\nconst pi = {\n  name: "codeText",\n  tokenize: mi,\n  resolve: fi,\n  previous: hi\n};\nfunction fi(n) {\n  let e = n.length - 4, t = 3, r, i;\n  if ((n[t][1].type === "lineEnding" || n[t][1].type === "space") && (n[e][1].type === "lineEnding" || n[e][1].type === "space")) {\n    for (r = t; ++r < e; )\n      if (n[r][1].type === "codeTextData") {\n        n[t][1].type = "codeTextPadding", n[e][1].type = "codeTextPadding", t += 2, e -= 2;\n        break;\n      }\n  }\n  for (r = t - 1, e++; ++r <= e; )\n    i === void 0 ? r !== e && n[r][1].type !== "lineEnding" && (i = r) : (r === e || n[r][1].type === "lineEnding") && (n[i][1].type = "codeTextData", r !== i + 2 && (n[i][1].end = n[r - 1][1].end, n.splice(i + 2, r - i - 2), e -= r - i - 2, r = i + 2), i = void 0);\n  return n;\n}\nfunction hi(n) {\n  return n !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";\n}\nfunction mi(n, e, t) {\n  let r = 0, i, l;\n  return o;\n  function o(h) {\n    return n.enter("codeText"), n.enter("codeTextSequence"), u(h);\n  }\n  function u(h) {\n    return h === 96 ? (n.consume(h), r++, u) : (n.exit("codeTextSequence"), a(h));\n  }\n  function a(h) {\n    return h === null ? t(h) : h === 96 ? (l = n.enter("codeTextSequence"), i = 0, s(h)) : h === 32 ? (n.enter("space"), n.consume(h), n.exit("space"), a) : L(h) ? (n.enter("lineEnding"), n.consume(h), n.exit("lineEnding"), a) : (n.enter("codeTextData"), c(h));\n  }\n  function c(h) {\n    return h === null || h === 32 || h === 96 || L(h) ? (n.exit("codeTextData"), a(h)) : (n.consume(h), c);\n  }\n  function s(h) {\n    return h === 96 ? (n.consume(h), i++, s) : i === r ? (n.exit("codeTextSequence"), n.exit("codeText"), e(h)) : (l.type = "codeTextData", c(h));\n  }\n}\nfunction Rt(n) {\n  const e = {};\n  let t = -1, r, i, l, o, u, a, c;\n  for (; ++t < n.length; ) {\n    for (; t in e; )\n      t = e[t];\n    if (r = n[t], t && r[1].type === "chunkFlow" && n[t - 1][1].type === "listItemPrefix" && (a = r[1]._tokenizer.events, l = 0, l < a.length && a[l][1].type === "lineEndingBlank" && (l += 2), l < a.length && a[l][1].type === "content"))\n      for (; ++l < a.length && a[l][1].type !== "content"; )\n        a[l][1].type === "chunkText" && (a[l][1]._isInFirstContentOfListItem = !0, l++);\n    if (r[0] === "enter")\n      r[1].contentType && (Object.assign(e, di(n, t)), t = e[t], c = !0);\n    else if (r[1]._container) {\n      for (l = t, i = void 0; l-- && (o = n[l], o[1].type === "lineEnding" || o[1].type === "lineEndingBlank"); )\n        o[0] === "enter" && (i && (n[i][1].type = "lineEndingBlank"), o[1].type = "lineEnding", i = l);\n      i && (r[1].end = Object.assign({}, n[i][1].start), u = n.slice(i, t), u.unshift(r), gn(n, i, t - i + 1, u));\n    }\n  }\n  return !c;\n}\nfunction di(n, e) {\n  const t = n[e][1], r = n[e][2];\n  let i = e - 1;\n  const l = [], o = t._tokenizer || r.parser[t.contentType](t.start), u = o.events, a = [], c = {};\n  let s, h, g = -1, d = t, m = 0, y = 0;\n  const x = [y];\n  for (; d; ) {\n    for (; n[++i][1] !== d; )\n      ;\n    l.push(i), d._tokenizer || (s = r.sliceStream(d), d.next || s.push(null), h && o.defineSkip(d.start), d._isInFirstContentOfListItem && (o._gfmTasklistFirstContentOfListItem = !0), o.write(s), d._isInFirstContentOfListItem && (o._gfmTasklistFirstContentOfListItem = void 0)), h = d, d = d.next;\n  }\n  for (d = t; ++g < u.length; )\n    // Find a void token that includes a break.\n    u[g][0] === "exit" && u[g - 1][0] === "enter" && u[g][1].type === u[g - 1][1].type && u[g][1].start.line !== u[g][1].end.line && (y = g + 1, x.push(y), d._tokenizer = void 0, d.previous = void 0, d = d.next);\n  for (o.events = [], d ? (d._tokenizer = void 0, d.previous = void 0) : x.pop(), g = x.length; g--; ) {\n    const w = u.slice(x[g], x[g + 1]), v = l.pop();\n    a.unshift([v, v + w.length - 1]), gn(n, v, 2, w);\n  }\n  for (g = -1; ++g < a.length; )\n    c[m + a[g][0]] = m + a[g][1], m += a[g][1] - a[g][0] - 1;\n  return c;\n}\nconst gi = {\n  tokenize: ki,\n  resolve: xi\n}, yi = {\n  tokenize: bi,\n  partial: !0\n};\nfunction xi(n) {\n  return Rt(n), n;\n}\nfunction ki(n, e) {\n  let t;\n  return r;\n  function r(u) {\n    return n.enter("content"), t = n.enter("chunkContent", {\n      contentType: "content"\n    }), i(u);\n  }\n  function i(u) {\n    return u === null ? l(u) : L(u) ? n.check(\n      yi,\n      o,\n      l\n    )(u) : (n.consume(u), i);\n  }\n  function l(u) {\n    return n.exit("chunkContent"), n.exit("content"), e(u);\n  }\n  function o(u) {\n    return n.consume(u), n.exit("chunkContent"), t.next = n.enter("chunkContent", {\n      contentType: "content",\n      previous: t\n    }), t = t.next, i;\n  }\n}\nfunction bi(n, e, t) {\n  const r = this;\n  return i;\n  function i(o) {\n    return n.exit("chunkContent"), n.enter("lineEnding"), n.consume(o), n.exit("lineEnding"), U(n, l, "linePrefix");\n  }\n  function l(o) {\n    if (o === null || L(o))\n      return t(o);\n    const u = r.events[r.events.length - 1];\n    return !r.parser.constructs.disable.null.includes("codeIndented") && u && u[1].type === "linePrefix" && u[2].sliceSerialize(u[1], !0).length >= 4 ? e(o) : n.interrupt(r.parser.constructs.flow, t, e)(o);\n  }\n}\nfunction _t(n, e, t, r, i, l, o, u, a) {\n  const c = a || Number.POSITIVE_INFINITY;\n  let s = 0;\n  return h;\n  function h(w) {\n    return w === 60 ? (n.enter(r), n.enter(i), n.enter(l), n.consume(w), n.exit(l), g) : w === null || w === 41 || ye(w) ? t(w) : (n.enter(r), n.enter(o), n.enter(u), n.enter("chunkString", {\n      contentType: "string"\n    }), y(w));\n  }\n  function g(w) {\n    return w === 62 ? (n.enter(l), n.consume(w), n.exit(l), n.exit(i), n.exit(r), e) : (n.enter(u), n.enter("chunkString", {\n      contentType: "string"\n    }), d(w));\n  }\n  function d(w) {\n    return w === 62 ? (n.exit("chunkString"), n.exit(u), g(w)) : w === null || w === 60 || L(w) ? t(w) : (n.consume(w), w === 92 ? m : d);\n  }\n  function m(w) {\n    return w === 60 || w === 62 || w === 92 ? (n.consume(w), d) : d(w);\n  }\n  function y(w) {\n    return w === 40 ? ++s > c ? t(w) : (n.consume(w), y) : w === 41 ? s-- ? (n.consume(w), y) : (n.exit("chunkString"), n.exit(u), n.exit(o), n.exit(r), e(w)) : w === null || sn(w) ? s ? t(w) : (n.exit("chunkString"), n.exit(u), n.exit(o), n.exit(r), e(w)) : ye(w) ? t(w) : (n.consume(w), w === 92 ? x : y);\n  }\n  function x(w) {\n    return w === 40 || w === 41 || w === 92 ? (n.consume(w), y) : y(w);\n  }\n}\nfunction Mt(n, e, t, r, i, l) {\n  const o = this;\n  let u = 0, a;\n  return c;\n  function c(d) {\n    return n.enter(r), n.enter(i), n.consume(d), n.exit(i), n.enter(l), s;\n  }\n  function s(d) {\n    return d === null || d === 91 || d === 93 && !a || /* To do: remove in the future once we\u2019ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn\u2019t need this */\n    /* Hidden footnotes hook */\n    /* c8 ignore next 3 */\n    d === 94 && !u && "_hiddenFootnoteSupport" in o.parser.constructs || u > 999 ? t(d) : d === 93 ? (n.exit(l), n.enter(i), n.consume(d), n.exit(i), n.exit(r), e) : L(d) ? (n.enter("lineEnding"), n.consume(d), n.exit("lineEnding"), s) : (n.enter("chunkString", {\n      contentType: "string"\n    }), h(d));\n  }\n  function h(d) {\n    return d === null || d === 91 || d === 93 || L(d) || u++ > 999 ? (n.exit("chunkString"), s(d)) : (n.consume(d), a = a || !G(d), d === 92 ? g : h);\n  }\n  function g(d) {\n    return d === 91 || d === 92 || d === 93 ? (n.consume(d), u++, h) : h(d);\n  }\n}\nfunction Bt(n, e, t, r, i, l) {\n  let o;\n  return u;\n  function u(g) {\n    return n.enter(r), n.enter(i), n.consume(g), n.exit(i), o = g === 40 ? 41 : g, a;\n  }\n  function a(g) {\n    return g === o ? (n.enter(i), n.consume(g), n.exit(i), n.exit(r), e) : (n.enter(l), c(g));\n  }\n  function c(g) {\n    return g === o ? (n.exit(l), a(o)) : g === null ? t(g) : L(g) ? (n.enter("lineEnding"), n.consume(g), n.exit("lineEnding"), U(n, c, "linePrefix")) : (n.enter("chunkString", {\n      contentType: "string"\n    }), s(g));\n  }\n  function s(g) {\n    return g === o || g === null || L(g) ? (n.exit("chunkString"), c(g)) : (n.consume(g), g === 92 ? h : s);\n  }\n  function h(g) {\n    return g === o || g === 92 ? (n.consume(g), s) : s(g);\n  }\n}\nfunction $n(n, e) {\n  let t;\n  return r;\n  function r(i) {\n    return L(i) ? (n.enter("lineEnding"), n.consume(i), n.exit("lineEnding"), t = !0, r) : G(i) ? U(\n      n,\n      r,\n      t ? "linePrefix" : "lineSuffix"\n    )(i) : e(i);\n  }\n}\nfunction Ln(n) {\n  return n.replace(/[\\t\\n\\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();\n}\nconst wi = {\n  name: "definition",\n  tokenize: Ei\n}, Si = {\n  tokenize: Ci,\n  partial: !0\n};\nfunction Ei(n, e, t) {\n  const r = this;\n  let i;\n  return l;\n  function l(a) {\n    return n.enter("definition"), Mt.call(\n      r,\n      n,\n      o,\n      t,\n      "definitionLabel",\n      "definitionLabelMarker",\n      "definitionLabelString"\n    )(a);\n  }\n  function o(a) {\n    return i = Ln(\n      r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)\n    ), a === 58 ? (n.enter("definitionMarker"), n.consume(a), n.exit("definitionMarker"), $n(\n      n,\n      _t(\n        n,\n        n.attempt(\n          Si,\n          U(n, u, "whitespace"),\n          U(n, u, "whitespace")\n        ),\n        t,\n        "definitionDestination",\n        "definitionDestinationLiteral",\n        "definitionDestinationLiteralMarker",\n        "definitionDestinationRaw",\n        "definitionDestinationString"\n      )\n    )) : t(a);\n  }\n  function u(a) {\n    return a === null || L(a) ? (n.exit("definition"), r.parser.defined.includes(i) || r.parser.defined.push(i), e(a)) : t(a);\n  }\n}\nfunction Ci(n, e, t) {\n  return r;\n  function r(o) {\n    return sn(o) ? $n(n, i)(o) : t(o);\n  }\n  function i(o) {\n    return o === 34 || o === 39 || o === 40 ? Bt(\n      n,\n      U(n, l, "whitespace"),\n      t,\n      "definitionTitle",\n      "definitionTitleMarker",\n      "definitionTitleString"\n    )(o) : t(o);\n  }\n  function l(o) {\n    return o === null || L(o) ? e(o) : t(o);\n  }\n}\nconst Ai = {\n  name: "hardBreakEscape",\n  tokenize: Pi\n};\nfunction Pi(n, e, t) {\n  return r;\n  function r(l) {\n    return n.enter("hardBreakEscape"), n.enter("escapeMarker"), n.consume(l), i;\n  }\n  function i(l) {\n    return L(l) ? (n.exit("escapeMarker"), n.exit("hardBreakEscape"), e(l)) : t(l);\n  }\n}\nconst Fi = {\n  name: "headingAtx",\n  tokenize: Ii,\n  resolve: Ti\n};\nfunction Ti(n, e) {\n  let t = n.length - 2, r = 3, i, l;\n  return n[r][1].type === "whitespace" && (r += 2), t - 2 > r && n[t][1].type === "whitespace" && (t -= 2), n[t][1].type === "atxHeadingSequence" && (r === t - 1 || t - 4 > r && n[t - 2][1].type === "whitespace") && (t -= r + 1 === t ? 2 : 4), t > r && (i = {\n    type: "atxHeadingText",\n    start: n[r][1].start,\n    end: n[t][1].end\n  }, l = {\n    type: "chunkText",\n    start: n[r][1].start,\n    end: n[t][1].end,\n    // @ts-expect-error Constants are fine to assign.\n    contentType: "text"\n  }, gn(n, r, t - r + 1, [\n    ["enter", i, e],\n    ["enter", l, e],\n    ["exit", l, e],\n    ["exit", i, e]\n  ])), n;\n}\nfunction Ii(n, e, t) {\n  const r = this;\n  let i = 0;\n  return l;\n  function l(s) {\n    return n.enter("atxHeading"), n.enter("atxHeadingSequence"), o(s);\n  }\n  function o(s) {\n    return s === 35 && i++ < 6 ? (n.consume(s), o) : s === null || sn(s) ? (n.exit("atxHeadingSequence"), r.interrupt ? e(s) : u(s)) : t(s);\n  }\n  function u(s) {\n    return s === 35 ? (n.enter("atxHeadingSequence"), a(s)) : s === null || L(s) ? (n.exit("atxHeading"), e(s)) : G(s) ? U(n, u, "whitespace")(s) : (n.enter("atxHeadingText"), c(s));\n  }\n  function a(s) {\n    return s === 35 ? (n.consume(s), a) : (n.exit("atxHeadingSequence"), u(s));\n  }\n  function c(s) {\n    return s === null || s === 35 || sn(s) ? (n.exit("atxHeadingText"), u(s)) : (n.consume(s), c);\n  }\n}\nconst Oi = [\n  "address",\n  "article",\n  "aside",\n  "base",\n  "basefont",\n  "blockquote",\n  "body",\n  "caption",\n  "center",\n  "col",\n  "colgroup",\n  "dd",\n  "details",\n  "dialog",\n  "dir",\n  "div",\n  "dl",\n  "dt",\n  "fieldset",\n  "figcaption",\n  "figure",\n  "footer",\n  "form",\n  "frame",\n  "frameset",\n  "h1",\n  "h2",\n  "h3",\n  "h4",\n  "h5",\n  "h6",\n  "head",\n  "header",\n  "hr",\n  "html",\n  "iframe",\n  "legend",\n  "li",\n  "link",\n  "main",\n  "menu",\n  "menuitem",\n  "nav",\n  "noframes",\n  "ol",\n  "optgroup",\n  "option",\n  "p",\n  "param",\n  "section",\n  "summary",\n  "table",\n  "tbody",\n  "td",\n  "tfoot",\n  "th",\n  "thead",\n  "title",\n  "tr",\n  "track",\n  "ul"\n], rt = ["pre", "script", "style", "textarea"], Li = {\n  name: "htmlFlow",\n  tokenize: zi,\n  resolveTo: vi,\n  concrete: !0\n}, Di = {\n  tokenize: Ri,\n  partial: !0\n};\nfunction vi(n) {\n  let e = n.length;\n  for (; e-- && !(n[e][0] === "enter" && n[e][1].type === "htmlFlow"); )\n    ;\n  return e > 1 && n[e - 2][1].type === "linePrefix" && (n[e][1].start = n[e - 2][1].start, n[e + 1][1].start = n[e - 2][1].start, n.splice(e - 2, 2)), n;\n}\nfunction zi(n, e, t) {\n  const r = this;\n  let i, l, o, u, a;\n  return c;\n  function c(p) {\n    return n.enter("htmlFlow"), n.enter("htmlFlowData"), n.consume(p), s;\n  }\n  function s(p) {\n    return p === 33 ? (n.consume(p), h) : p === 47 ? (n.consume(p), m) : p === 63 ? (n.consume(p), i = 3, r.interrupt ? e : J) : dn(p) ? (n.consume(p), o = String.fromCharCode(p), l = !0, y) : t(p);\n  }\n  function h(p) {\n    return p === 45 ? (n.consume(p), i = 2, g) : p === 91 ? (n.consume(p), i = 5, o = "CDATA[", u = 0, d) : dn(p) ? (n.consume(p), i = 4, r.interrupt ? e : J) : t(p);\n  }\n  function g(p) {\n    return p === 45 ? (n.consume(p), r.interrupt ? e : J) : t(p);\n  }\n  function d(p) {\n    return p === o.charCodeAt(u++) ? (n.consume(p), u === o.length ? r.interrupt ? e : C : d) : t(p);\n  }\n  function m(p) {\n    return dn(p) ? (n.consume(p), o = String.fromCharCode(p), y) : t(p);\n  }\n  function y(p) {\n    return p === null || p === 47 || p === 62 || sn(p) ? p !== 47 && l && rt.includes(o.toLowerCase()) ? (i = 1, r.interrupt ? e(p) : C(p)) : Oi.includes(o.toLowerCase()) ? (i = 6, p === 47 ? (n.consume(p), x) : r.interrupt ? e(p) : C(p)) : (i = 7, r.interrupt && !r.parser.lazy[r.now().line] ? t(p) : l ? v(p) : w(p)) : p === 45 || on(p) ? (n.consume(p), o += String.fromCharCode(p), y) : t(p);\n  }\n  function x(p) {\n    return p === 62 ? (n.consume(p), r.interrupt ? e : C) : t(p);\n  }\n  function w(p) {\n    return G(p) ? (n.consume(p), w) : M(p);\n  }\n  function v(p) {\n    return p === 47 ? (n.consume(p), M) : p === 58 || p === 95 || dn(p) ? (n.consume(p), A) : G(p) ? (n.consume(p), v) : M(p);\n  }\n  function A(p) {\n    return p === 45 || p === 46 || p === 58 || p === 95 || on(p) ? (n.consume(p), A) : _(p);\n  }\n  function _(p) {\n    return p === 61 ? (n.consume(p), T) : G(p) ? (n.consume(p), _) : v(p);\n  }\n  function T(p) {\n    return p === null || p === 60 || p === 61 || p === 62 || p === 96 ? t(p) : p === 34 || p === 39 ? (n.consume(p), a = p, b) : G(p) ? (n.consume(p), T) : (a = null, I(p));\n  }\n  function b(p) {\n    return p === null || L(p) ? t(p) : p === a ? (n.consume(p), R) : (n.consume(p), b);\n  }\n  function I(p) {\n    return p === null || p === 34 || p === 39 || p === 60 || p === 61 || p === 62 || p === 96 || sn(p) ? _(p) : (n.consume(p), I);\n  }\n  function R(p) {\n    return p === 47 || p === 62 || G(p) ? v(p) : t(p);\n  }\n  function M(p) {\n    return p === 62 ? (n.consume(p), X) : t(p);\n  }\n  function X(p) {\n    return G(p) ? (n.consume(p), X) : p === null || L(p) ? C(p) : t(p);\n  }\n  function C(p) {\n    return p === 45 && i === 2 ? (n.consume(p), en) : p === 60 && i === 1 ? (n.consume(p), un) : p === 62 && i === 4 ? (n.consume(p), W) : p === 63 && i === 3 ? (n.consume(p), J) : p === 93 && i === 5 ? (n.consume(p), q) : L(p) && (i === 6 || i === 7) ? n.check(\n      Di,\n      W,\n      F\n    )(p) : p === null || L(p) ? F(p) : (n.consume(p), C);\n  }\n  function F(p) {\n    return n.exit("htmlFlowData"), B(p);\n  }\n  function B(p) {\n    return p === null ? f(p) : L(p) ? n.attempt(\n      {\n        tokenize: Z,\n        partial: !0\n      },\n      B,\n      f\n    )(p) : (n.enter("htmlFlowData"), C(p));\n  }\n  function Z(p, kn, Pn) {\n    return bn;\n    function bn(rn) {\n      return p.enter("lineEnding"), p.consume(rn), p.exit("lineEnding"), Y;\n    }\n    function Y(rn) {\n      return r.parser.lazy[r.now().line] ? Pn(rn) : kn(rn);\n    }\n  }\n  function en(p) {\n    return p === 45 ? (n.consume(p), J) : C(p);\n  }\n  function un(p) {\n    return p === 47 ? (n.consume(p), o = "", tn) : C(p);\n  }\n  function tn(p) {\n    return p === 62 && rt.includes(o.toLowerCase()) ? (n.consume(p), W) : dn(p) && o.length < 8 ? (n.consume(p), o += String.fromCharCode(p), tn) : C(p);\n  }\n  function q(p) {\n    return p === 93 ? (n.consume(p), J) : C(p);\n  }\n  function J(p) {\n    return p === 62 ? (n.consume(p), W) : p === 45 && i === 2 ? (n.consume(p), J) : C(p);\n  }\n  function W(p) {\n    return p === null || L(p) ? (n.exit("htmlFlowData"), f(p)) : (n.consume(p), W);\n  }\n  function f(p) {\n    return n.exit("htmlFlow"), e(p);\n  }\n}\nfunction Ri(n, e, t) {\n  return r;\n  function r(i) {\n    return n.exit("htmlFlowData"), n.enter("lineEndingBlank"), n.consume(i), n.exit("lineEndingBlank"), n.attempt(Zn, e, t);\n  }\n}\nconst _i = {\n  name: "htmlText",\n  tokenize: Mi\n};\nfunction Mi(n, e, t) {\n  const r = this;\n  let i, l, o, u;\n  return a;\n  function a(f) {\n    return n.enter("htmlText"), n.enter("htmlTextData"), n.consume(f), c;\n  }\n  function c(f) {\n    return f === 33 ? (n.consume(f), s) : f === 47 ? (n.consume(f), I) : f === 63 ? (n.consume(f), T) : dn(f) ? (n.consume(f), X) : t(f);\n  }\n  function s(f) {\n    return f === 45 ? (n.consume(f), h) : f === 91 ? (n.consume(f), l = "CDATA[", o = 0, x) : dn(f) ? (n.consume(f), _) : t(f);\n  }\n  function h(f) {\n    return f === 45 ? (n.consume(f), g) : t(f);\n  }\n  function g(f) {\n    return f === null || f === 62 ? t(f) : f === 45 ? (n.consume(f), d) : m(f);\n  }\n  function d(f) {\n    return f === null || f === 62 ? t(f) : m(f);\n  }\n  function m(f) {\n    return f === null ? t(f) : f === 45 ? (n.consume(f), y) : L(f) ? (u = m, q(f)) : (n.consume(f), m);\n  }\n  function y(f) {\n    return f === 45 ? (n.consume(f), W) : m(f);\n  }\n  function x(f) {\n    return f === l.charCodeAt(o++) ? (n.consume(f), o === l.length ? w : x) : t(f);\n  }\n  function w(f) {\n    return f === null ? t(f) : f === 93 ? (n.consume(f), v) : L(f) ? (u = w, q(f)) : (n.consume(f), w);\n  }\n  function v(f) {\n    return f === 93 ? (n.consume(f), A) : w(f);\n  }\n  function A(f) {\n    return f === 62 ? W(f) : f === 93 ? (n.consume(f), A) : w(f);\n  }\n  function _(f) {\n    return f === null || f === 62 ? W(f) : L(f) ? (u = _, q(f)) : (n.consume(f), _);\n  }\n  function T(f) {\n    return f === null ? t(f) : f === 63 ? (n.consume(f), b) : L(f) ? (u = T, q(f)) : (n.consume(f), T);\n  }\n  function b(f) {\n    return f === 62 ? W(f) : T(f);\n  }\n  function I(f) {\n    return dn(f) ? (n.consume(f), R) : t(f);\n  }\n  function R(f) {\n    return f === 45 || on(f) ? (n.consume(f), R) : M(f);\n  }\n  function M(f) {\n    return L(f) ? (u = M, q(f)) : G(f) ? (n.consume(f), M) : W(f);\n  }\n  function X(f) {\n    return f === 45 || on(f) ? (n.consume(f), X) : f === 47 || f === 62 || sn(f) ? C(f) : t(f);\n  }\n  function C(f) {\n    return f === 47 ? (n.consume(f), W) : f === 58 || f === 95 || dn(f) ? (n.consume(f), F) : L(f) ? (u = C, q(f)) : G(f) ? (n.consume(f), C) : W(f);\n  }\n  function F(f) {\n    return f === 45 || f === 46 || f === 58 || f === 95 || on(f) ? (n.consume(f), F) : B(f);\n  }\n  function B(f) {\n    return f === 61 ? (n.consume(f), Z) : L(f) ? (u = B, q(f)) : G(f) ? (n.consume(f), B) : C(f);\n  }\n  function Z(f) {\n    return f === null || f === 60 || f === 61 || f === 62 || f === 96 ? t(f) : f === 34 || f === 39 ? (n.consume(f), i = f, en) : L(f) ? (u = Z, q(f)) : G(f) ? (n.consume(f), Z) : (n.consume(f), i = void 0, tn);\n  }\n  function en(f) {\n    return f === i ? (n.consume(f), un) : f === null ? t(f) : L(f) ? (u = en, q(f)) : (n.consume(f), en);\n  }\n  function un(f) {\n    return f === 62 || f === 47 || sn(f) ? C(f) : t(f);\n  }\n  function tn(f) {\n    return f === null || f === 34 || f === 39 || f === 60 || f === 61 || f === 96 ? t(f) : f === 62 || sn(f) ? C(f) : (n.consume(f), tn);\n  }\n  function q(f) {\n    return n.exit("htmlTextData"), n.enter("lineEnding"), n.consume(f), n.exit("lineEnding"), U(\n      n,\n      J,\n      "linePrefix",\n      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4\n    );\n  }\n  function J(f) {\n    return n.enter("htmlTextData"), u(f);\n  }\n  function W(f) {\n    return f === 62 ? (n.consume(f), n.exit("htmlTextData"), n.exit("htmlText"), e) : t(f);\n  }\n}\nconst Pe = {\n  name: "labelEnd",\n  tokenize: Ui,\n  resolveTo: Hi,\n  resolveAll: $i\n}, Bi = {\n  tokenize: Vi\n}, Ni = {\n  tokenize: qi\n}, ji = {\n  tokenize: Wi\n};\nfunction $i(n) {\n  let e = -1, t;\n  for (; ++e < n.length; )\n    t = n[e][1], (t.type === "labelImage" || t.type === "labelLink" || t.type === "labelEnd") && (n.splice(e + 1, t.type === "labelImage" ? 4 : 2), t.type = "data", e++);\n  return n;\n}\nfunction Hi(n, e) {\n  let t = n.length, r = 0, i, l, o, u;\n  for (; t--; )\n    if (i = n[t][1], l) {\n      if (i.type === "link" || i.type === "labelLink" && i._inactive)\n        break;\n      n[t][0] === "enter" && i.type === "labelLink" && (i._inactive = !0);\n    } else if (o) {\n      if (n[t][0] === "enter" && (i.type === "labelImage" || i.type === "labelLink") && !i._balanced && (l = t, i.type !== "labelLink")) {\n        r = 2;\n        break;\n      }\n    } else\n      i.type === "labelEnd" && (o = t);\n  const a = {\n    type: n[l][1].type === "labelLink" ? "link" : "image",\n    start: Object.assign({}, n[l][1].start),\n    end: Object.assign({}, n[n.length - 1][1].end)\n  }, c = {\n    type: "label",\n    start: Object.assign({}, n[l][1].start),\n    end: Object.assign({}, n[o][1].end)\n  }, s = {\n    type: "labelText",\n    start: Object.assign({}, n[l + r + 2][1].end),\n    end: Object.assign({}, n[o - 2][1].start)\n  };\n  return u = [\n    ["enter", a, e],\n    ["enter", c, e]\n  ], u = an(u, n.slice(l + 1, l + r + 3)), u = an(u, [["enter", s, e]]), u = an(\n    u,\n    Ce(\n      e.parser.constructs.insideSpan.null,\n      n.slice(l + r + 4, o - 3),\n      e\n    )\n  ), u = an(u, [\n    ["exit", s, e],\n    n[o - 2],\n    n[o - 1],\n    ["exit", c, e]\n  ]), u = an(u, n.slice(o + 1)), u = an(u, [["exit", a, e]]), gn(n, l, n.length, u), n;\n}\nfunction Ui(n, e, t) {\n  const r = this;\n  let i = r.events.length, l, o;\n  for (; i--; )\n    if ((r.events[i][1].type === "labelImage" || r.events[i][1].type === "labelLink") && !r.events[i][1]._balanced) {\n      l = r.events[i][1];\n      break;\n    }\n  return u;\n  function u(s) {\n    return l ? l._inactive ? c(s) : (o = r.parser.defined.includes(\n      Ln(\n        r.sliceSerialize({\n          start: l.end,\n          end: r.now()\n        })\n      )\n    ), n.enter("labelEnd"), n.enter("labelMarker"), n.consume(s), n.exit("labelMarker"), n.exit("labelEnd"), a) : t(s);\n  }\n  function a(s) {\n    return s === 40 ? n.attempt(\n      Bi,\n      e,\n      o ? e : c\n    )(s) : s === 91 ? n.attempt(\n      Ni,\n      e,\n      o ? n.attempt(ji, e, c) : c\n    )(s) : o ? e(s) : c(s);\n  }\n  function c(s) {\n    return l._balanced = !0, t(s);\n  }\n}\nfunction Vi(n, e, t) {\n  return r;\n  function r(a) {\n    return n.enter("resource"), n.enter("resourceMarker"), n.consume(a), n.exit("resourceMarker"), $n(n, i);\n  }\n  function i(a) {\n    return a === 41 ? u(a) : _t(\n      n,\n      l,\n      t,\n      "resourceDestination",\n      "resourceDestinationLiteral",\n      "resourceDestinationLiteralMarker",\n      "resourceDestinationRaw",\n      "resourceDestinationString",\n      32\n    )(a);\n  }\n  function l(a) {\n    return sn(a) ? $n(n, o)(a) : u(a);\n  }\n  function o(a) {\n    return a === 34 || a === 39 || a === 40 ? Bt(\n      n,\n      $n(n, u),\n      t,\n      "resourceTitle",\n      "resourceTitleMarker",\n      "resourceTitleString"\n    )(a) : u(a);\n  }\n  function u(a) {\n    return a === 41 ? (n.enter("resourceMarker"), n.consume(a), n.exit("resourceMarker"), n.exit("resource"), e) : t(a);\n  }\n}\nfunction qi(n, e, t) {\n  const r = this;\n  return i;\n  function i(o) {\n    return Mt.call(\n      r,\n      n,\n      l,\n      t,\n      "reference",\n      "referenceMarker",\n      "referenceString"\n    )(o);\n  }\n  function l(o) {\n    return r.parser.defined.includes(\n      Ln(\n        r.sliceSerialize(r.events[r.events.length - 1][1]).slice(1, -1)\n      )\n    ) ? e(o) : t(o);\n  }\n}\nfunction Wi(n, e, t) {\n  return r;\n  function r(l) {\n    return n.enter("reference"), n.enter("referenceMarker"), n.consume(l), n.exit("referenceMarker"), i;\n  }\n  function i(l) {\n    return l === 93 ? (n.enter("referenceMarker"), n.consume(l), n.exit("referenceMarker"), n.exit("reference"), e) : t(l);\n  }\n}\nconst Yi = {\n  name: "labelStartImage",\n  tokenize: Qi,\n  resolveAll: Pe.resolveAll\n};\nfunction Qi(n, e, t) {\n  const r = this;\n  return i;\n  function i(u) {\n    return n.enter("labelImage"), n.enter("labelImageMarker"), n.consume(u), n.exit("labelImageMarker"), l;\n  }\n  function l(u) {\n    return u === 91 ? (n.enter("labelMarker"), n.consume(u), n.exit("labelMarker"), n.exit("labelImage"), o) : t(u);\n  }\n  function o(u) {\n    return u === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? t(u) : e(u);\n  }\n}\nconst Xi = {\n  name: "labelStartLink",\n  tokenize: Ki,\n  resolveAll: Pe.resolveAll\n};\nfunction Ki(n, e, t) {\n  const r = this;\n  return i;\n  function i(o) {\n    return n.enter("labelLink"), n.enter("labelMarker"), n.consume(o), n.exit("labelMarker"), n.exit("labelLink"), l;\n  }\n  function l(o) {\n    return o === 94 && "_hiddenFootnoteSupport" in r.parser.constructs ? t(o) : e(o);\n  }\n}\nconst ce = {\n  name: "lineEnding",\n  tokenize: Gi\n};\nfunction Gi(n, e) {\n  return t;\n  function t(r) {\n    return n.enter("lineEnding"), n.consume(r), n.exit("lineEnding"), U(n, e, "linePrefix");\n  }\n}\nconst Qn = {\n  name: "thematicBreak",\n  tokenize: Zi\n};\nfunction Zi(n, e, t) {\n  let r = 0, i;\n  return l;\n  function l(a) {\n    return n.enter("thematicBreak"), i = a, o(a);\n  }\n  function o(a) {\n    return a === i ? (n.enter("thematicBreakSequence"), u(a)) : G(a) ? U(n, o, "whitespace")(a) : r < 3 || a !== null && !L(a) ? t(a) : (n.exit("thematicBreak"), e(a));\n  }\n  function u(a) {\n    return a === i ? (n.consume(a), r++, u) : (n.exit("thematicBreakSequence"), o(a));\n  }\n}\nconst nn = {\n  name: "list",\n  tokenize: el,\n  continuation: {\n    tokenize: tl\n  },\n  exit: il\n}, Ji = {\n  tokenize: ll,\n  partial: !0\n}, nl = {\n  tokenize: rl,\n  partial: !0\n};\nfunction el(n, e, t) {\n  const r = this, i = r.events[r.events.length - 1];\n  let l = i && i[1].type === "linePrefix" ? i[2].sliceSerialize(i[1], !0).length : 0, o = 0;\n  return u;\n  function u(d) {\n    const m = r.containerState.type || (d === 42 || d === 43 || d === 45 ? "listUnordered" : "listOrdered");\n    if (m === "listUnordered" ? !r.containerState.marker || d === r.containerState.marker : ge(d)) {\n      if (r.containerState.type || (r.containerState.type = m, n.enter(m, {\n        _container: !0\n      })), m === "listUnordered")\n        return n.enter("listItemPrefix"), d === 42 || d === 45 ? n.check(Qn, t, c)(d) : c(d);\n      if (!r.interrupt || d === 49)\n        return n.enter("listItemPrefix"), n.enter("listItemValue"), a(d);\n    }\n    return t(d);\n  }\n  function a(d) {\n    return ge(d) && ++o < 10 ? (n.consume(d), a) : (!r.interrupt || o < 2) && (r.containerState.marker ? d === r.containerState.marker : d === 41 || d === 46) ? (n.exit("listItemValue"), c(d)) : t(d);\n  }\n  function c(d) {\n    return n.enter("listItemMarker"), n.consume(d), n.exit("listItemMarker"), r.containerState.marker = r.containerState.marker || d, n.check(\n      Zn,\n      // Can\u2019t be empty when interrupting.\n      r.interrupt ? t : s,\n      n.attempt(\n        Ji,\n        g,\n        h\n      )\n    );\n  }\n  function s(d) {\n    return r.containerState.initialBlankLine = !0, l++, g(d);\n  }\n  function h(d) {\n    return G(d) ? (n.enter("listItemPrefixWhitespace"), n.consume(d), n.exit("listItemPrefixWhitespace"), g) : t(d);\n  }\n  function g(d) {\n    return r.containerState.size = l + r.sliceSerialize(n.exit("listItemPrefix"), !0).length, e(d);\n  }\n}\nfunction tl(n, e, t) {\n  const r = this;\n  return r.containerState._closeFlow = void 0, n.check(Zn, i, l);\n  function i(u) {\n    return r.containerState.furtherBlankLines = r.containerState.furtherBlankLines || r.containerState.initialBlankLine, U(\n      n,\n      e,\n      "listItemIndent",\n      r.containerState.size + 1\n    )(u);\n  }\n  function l(u) {\n    return r.containerState.furtherBlankLines || !G(u) ? (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, o(u)) : (r.containerState.furtherBlankLines = void 0, r.containerState.initialBlankLine = void 0, n.attempt(nl, e, o)(u));\n  }\n  function o(u) {\n    return r.containerState._closeFlow = !0, r.interrupt = void 0, U(\n      n,\n      n.attempt(nn, e, t),\n      "linePrefix",\n      r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4\n    )(u);\n  }\n}\nfunction rl(n, e, t) {\n  const r = this;\n  return U(\n    n,\n    i,\n    "listItemIndent",\n    r.containerState.size + 1\n  );\n  function i(l) {\n    const o = r.events[r.events.length - 1];\n    return o && o[1].type === "listItemIndent" && o[2].sliceSerialize(o[1], !0).length === r.containerState.size ? e(l) : t(l);\n  }\n}\nfunction il(n) {\n  n.exit(this.containerState.type);\n}\nfunction ll(n, e, t) {\n  const r = this;\n  return U(\n    n,\n    i,\n    "listItemPrefixWhitespace",\n    r.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1\n  );\n  function i(l) {\n    const o = r.events[r.events.length - 1];\n    return !G(l) && o && o[1].type === "listItemPrefixWhitespace" ? e(l) : t(l);\n  }\n}\nconst it = {\n  name: "setextUnderline",\n  tokenize: ul,\n  resolveTo: ol\n};\nfunction ol(n, e) {\n  let t = n.length, r, i, l;\n  for (; t--; )\n    if (n[t][0] === "enter") {\n      if (n[t][1].type === "content") {\n        r = t;\n        break;\n      }\n      n[t][1].type === "paragraph" && (i = t);\n    } else\n      n[t][1].type === "content" && n.splice(t, 1), !l && n[t][1].type === "definition" && (l = t);\n  const o = {\n    type: "setextHeading",\n    start: Object.assign({}, n[i][1].start),\n    end: Object.assign({}, n[n.length - 1][1].end)\n  };\n  return n[i][1].type = "setextHeadingText", l ? (n.splice(i, 0, ["enter", o, e]), n.splice(l + 1, 0, ["exit", n[r][1], e]), n[r][1].end = Object.assign({}, n[l][1].end)) : n[r][1] = o, n.push(["exit", o, e]), n;\n}\nfunction ul(n, e, t) {\n  const r = this;\n  let i = r.events.length, l, o;\n  for (; i--; )\n    if (r.events[i][1].type !== "lineEnding" && r.events[i][1].type !== "linePrefix" && r.events[i][1].type !== "content") {\n      o = r.events[i][1].type === "paragraph";\n      break;\n    }\n  return u;\n  function u(s) {\n    return !r.parser.lazy[r.now().line] && (r.interrupt || o) ? (n.enter("setextHeadingLine"), n.enter("setextHeadingLineSequence"), l = s, a(s)) : t(s);\n  }\n  function a(s) {\n    return s === l ? (n.consume(s), a) : (n.exit("setextHeadingLineSequence"), U(n, c, "lineSuffix")(s));\n  }\n  function c(s) {\n    return s === null || L(s) ? (n.exit("setextHeadingLine"), e(s)) : t(s);\n  }\n}\nconst al = {\n  tokenize: sl\n};\nfunction sl(n) {\n  const e = this, t = n.attempt(\n    // Try to parse a blank line.\n    Zn,\n    r,\n    // Try to parse initial flow (essentially, only code).\n    n.attempt(\n      this.parser.constructs.flowInitial,\n      i,\n      U(\n        n,\n        n.attempt(\n          this.parser.constructs.flow,\n          i,\n          n.attempt(gi, i)\n        ),\n        "linePrefix"\n      )\n    )\n  );\n  return t;\n  function r(l) {\n    if (l === null) {\n      n.consume(l);\n      return;\n    }\n    return n.enter("lineEndingBlank"), n.consume(l), n.exit("lineEndingBlank"), e.currentConstruct = void 0, t;\n  }\n  function i(l) {\n    if (l === null) {\n      n.consume(l);\n      return;\n    }\n    return n.enter("lineEnding"), n.consume(l), n.exit("lineEnding"), e.currentConstruct = void 0, t;\n  }\n}\nconst cl = {\n  resolveAll: jt()\n}, pl = Nt("string"), fl = Nt("text");\nfunction Nt(n) {\n  return {\n    tokenize: e,\n    resolveAll: jt(\n      n === "text" ? hl : void 0\n    )\n  };\n  function e(t) {\n    const r = this, i = this.parser.constructs[n], l = t.attempt(i, o, u);\n    return o;\n    function o(s) {\n      return c(s) ? l(s) : u(s);\n    }\n    function u(s) {\n      if (s === null) {\n        t.consume(s);\n        return;\n      }\n      return t.enter("data"), t.consume(s), a;\n    }\n    function a(s) {\n      return c(s) ? (t.exit("data"), l(s)) : (t.consume(s), a);\n    }\n    function c(s) {\n      if (s === null)\n        return !0;\n      const h = i[s];\n      let g = -1;\n      if (h)\n        for (; ++g < h.length; ) {\n          const d = h[g];\n          if (!d.previous || d.previous.call(r, r.previous))\n            return !0;\n        }\n      return !1;\n    }\n  }\n}\nfunction jt(n) {\n  return e;\n  function e(t, r) {\n    let i = -1, l;\n    for (; ++i <= t.length; )\n      l === void 0 ? t[i] && t[i][1].type === "data" && (l = i, i++) : (!t[i] || t[i][1].type !== "data") && (i !== l + 2 && (t[l][1].end = t[i - 1][1].end, t.splice(l + 2, i - l - 2), i = l + 2), l = void 0);\n    return n ? n(t, r) : t;\n  }\n}\nfunction hl(n, e) {\n  let t = 0;\n  for (; ++t <= n.length; )\n    if ((t === n.length || n[t][1].type === "lineEnding") && n[t - 1][1].type === "data") {\n      const r = n[t - 1][1], i = e.sliceStream(r);\n      let l = i.length, o = -1, u = 0, a;\n      for (; l--; ) {\n        const c = i[l];\n        if (typeof c == "string") {\n          for (o = c.length; c.charCodeAt(o - 1) === 32; )\n            u++, o--;\n          if (o)\n            break;\n          o = -1;\n        } else if (c === -2)\n          a = !0, u++;\n        else if (c !== -1) {\n          l++;\n          break;\n        }\n      }\n      if (u) {\n        const c = {\n          type: t === n.length || a || u < 2 ? "lineSuffix" : "hardBreakTrailing",\n          start: {\n            line: r.end.line,\n            column: r.end.column - u,\n            offset: r.end.offset - u,\n            _index: r.start._index + l,\n            _bufferIndex: l ? o : r.start._bufferIndex + o\n          },\n          end: Object.assign({}, r.end)\n        };\n        r.end = Object.assign({}, c.start), r.start.offset === r.end.offset ? Object.assign(r, c) : (n.splice(\n          t,\n          0,\n          ["enter", c, e],\n          ["exit", c, e]\n        ), t += 2);\n      }\n      t++;\n    }\n  return n;\n}\nfunction ml(n, e, t) {\n  let r = Object.assign(\n    t ? Object.assign({}, t) : {\n      line: 1,\n      column: 1,\n      offset: 0\n    },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  );\n  const i = {}, l = [];\n  let o = [], u = [];\n  const a = {\n    consume: v,\n    enter: A,\n    exit: _,\n    attempt: I(T),\n    check: I(b),\n    interrupt: I(b, {\n      interrupt: !0\n    })\n  }, c = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser: n,\n    sliceStream: d,\n    sliceSerialize: g,\n    now: m,\n    defineSkip: y,\n    write: h\n  };\n  let s = e.tokenize.call(c, a);\n  return e.resolveAll && l.push(e), c;\n  function h(C) {\n    return o = an(o, C), x(), o[o.length - 1] !== null ? [] : (R(e, 0), c.events = Ce(l, c.events, c), c.events);\n  }\n  function g(C, F) {\n    return gl(d(C), F);\n  }\n  function d(C) {\n    return dl(o, C);\n  }\n  function m() {\n    return Object.assign({}, r);\n  }\n  function y(C) {\n    i[C.line] = C.column, X();\n  }\n  function x() {\n    let C;\n    for (; r._index < o.length; ) {\n      const F = o[r._index];\n      if (typeof F == "string")\n        for (C = r._index, r._bufferIndex < 0 && (r._bufferIndex = 0); r._index === C && r._bufferIndex < F.length; )\n          w(F.charCodeAt(r._bufferIndex));\n      else\n        w(F);\n    }\n  }\n  function w(C) {\n    s = s(C);\n  }\n  function v(C) {\n    L(C) ? (r.line++, r.column = 1, r.offset += C === -3 ? 2 : 1, X()) : C !== -1 && (r.column++, r.offset++), r._bufferIndex < 0 ? r._index++ : (r._bufferIndex++, r._bufferIndex === o[r._index].length && (r._bufferIndex = -1, r._index++)), c.previous = C;\n  }\n  function A(C, F) {\n    const B = F || {};\n    return B.type = C, B.start = m(), c.events.push(["enter", B, c]), u.push(B), B;\n  }\n  function _(C) {\n    const F = u.pop();\n    return F.end = m(), c.events.push(["exit", F, c]), F;\n  }\n  function T(C, F) {\n    R(C, F.from);\n  }\n  function b(C, F) {\n    F.restore();\n  }\n  function I(C, F) {\n    return B;\n    function B(Z, en, un) {\n      let tn, q, J, W;\n      return Array.isArray(Z) ? (\n        /* c8 ignore next 1 */\n        p(Z)\n      ) : "tokenize" in Z ? p([Z]) : f(Z);\n      function f(Y) {\n        return rn;\n        function rn(hn) {\n          const wn = hn !== null && Y[hn], Sn = hn !== null && Y.null, Rn = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...Array.isArray(wn) ? wn : wn ? [wn] : [],\n            ...Array.isArray(Sn) ? Sn : Sn ? [Sn] : []\n          ];\n          return p(Rn)(hn);\n        }\n      }\n      function p(Y) {\n        return tn = Y, q = 0, Y.length === 0 ? un : kn(Y[q]);\n      }\n      function kn(Y) {\n        return rn;\n        function rn(hn) {\n          return W = M(), J = Y, Y.partial || (c.currentConstruct = Y), Y.name && c.parser.constructs.disable.null.includes(Y.name) ? bn() : Y.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a \u201clive binding\u201d, which is needed for `interrupt`.\n            F ? Object.assign(Object.create(c), F) : c,\n            a,\n            Pn,\n            bn\n          )(hn);\n        }\n      }\n      function Pn(Y) {\n        return C(J, W), en;\n      }\n      function bn(Y) {\n        return W.restore(), ++q < tn.length ? kn(tn[q]) : un;\n      }\n    }\n  }\n  function R(C, F) {\n    C.resolveAll && !l.includes(C) && l.push(C), C.resolve && gn(\n      c.events,\n      F,\n      c.events.length - F,\n      C.resolve(c.events.slice(F), c)\n    ), C.resolveTo && (c.events = C.resolveTo(c.events, c));\n  }\n  function M() {\n    const C = m(), F = c.previous, B = c.currentConstruct, Z = c.events.length, en = Array.from(u);\n    return {\n      restore: un,\n      from: Z\n    };\n    function un() {\n      r = C, c.previous = F, c.currentConstruct = B, c.events.length = Z, u = en, X();\n    }\n  }\n  function X() {\n    r.line in i && r.column < 2 && (r.column = i[r.line], r.offset += i[r.line] - 1);\n  }\n}\nfunction dl(n, e) {\n  const t = e.start._index, r = e.start._bufferIndex, i = e.end._index, l = e.end._bufferIndex;\n  let o;\n  return t === i ? o = [n[t].slice(r, l)] : (o = n.slice(t, i), r > -1 && (o[0] = o[0].slice(r)), l > 0 && o.push(n[i].slice(0, l))), o;\n}\nfunction gl(n, e) {\n  let t = -1;\n  const r = [];\n  let i;\n  for (; ++t < n.length; ) {\n    const l = n[t];\n    let o;\n    if (typeof l == "string")\n      o = l;\n    else\n      switch (l) {\n        case -5: {\n          o = "\\r";\n          break;\n        }\n        case -4: {\n          o = `\n`;\n          break;\n        }\n        case -3: {\n          o = `\\r\n`;\n          break;\n        }\n        case -2: {\n          o = e ? " " : "\t";\n          break;\n        }\n        case -1: {\n          if (!e && i)\n            continue;\n          o = " ";\n          break;\n        }\n        default:\n          o = String.fromCharCode(l);\n      }\n    i = l === -2, r.push(o);\n  }\n  return r.join("");\n}\nconst yl = {\n  [42]: nn,\n  [43]: nn,\n  [45]: nn,\n  [48]: nn,\n  [49]: nn,\n  [50]: nn,\n  [51]: nn,\n  [52]: nn,\n  [53]: nn,\n  [54]: nn,\n  [55]: nn,\n  [56]: nn,\n  [57]: nn,\n  [62]: Dt\n}, xl = {\n  [91]: wi\n}, kl = {\n  [-2]: se,\n  [-1]: se,\n  [32]: se\n}, bl = {\n  [35]: Fi,\n  [42]: Qn,\n  [45]: [it, Qn],\n  [60]: Li,\n  [61]: it,\n  [95]: Qn,\n  [96]: tt,\n  [126]: tt\n}, wl = {\n  [38]: zt,\n  [92]: vt\n}, Sl = {\n  [-5]: ce,\n  [-4]: ce,\n  [-3]: ce,\n  [33]: Yi,\n  [38]: zt,\n  [42]: xe,\n  [60]: [Jr, _i],\n  [91]: Xi,\n  [92]: [Ai, vt],\n  [93]: Pe,\n  [95]: xe,\n  [96]: pi\n}, El = {\n  null: [xe, cl]\n}, Cl = {\n  null: [42, 95]\n}, Al = {\n  null: []\n}, Pl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  attentionMarkers: Cl,\n  contentInitial: xl,\n  disable: Al,\n  document: yl,\n  flow: bl,\n  flowInitial: kl,\n  insideSpan: El,\n  string: wl,\n  text: Sl\n}, Symbol.toStringTag, { value: "Module" }));\nfunction Fl(n = {}) {\n  const e = Br(\n    // @ts-expect-error Same as above.\n    [Pl].concat(n.extensions || [])\n  ), t = {\n    defined: [],\n    lazy: {},\n    constructs: e,\n    content: r(Wr),\n    document: r(Qr),\n    flow: r(al),\n    string: r(pl),\n    text: r(fl)\n  };\n  return t;\n  function r(i) {\n    return l;\n    function l(o) {\n      return ml(t, i, o);\n    }\n  }\n}\nconst lt = /[\\0\\t\\n\\r]/g;\nfunction Tl() {\n  let n = 1, e = "", t = !0, r;\n  return i;\n  function i(l, o, u) {\n    const a = [];\n    let c, s, h, g, d;\n    for (l = e + l.toString(o), h = 0, e = "", t && (l.charCodeAt(0) === 65279 && h++, t = void 0); h < l.length; ) {\n      if (lt.lastIndex = h, c = lt.exec(l), g = c && c.index !== void 0 ? c.index : l.length, d = l.charCodeAt(g), !c) {\n        e = l.slice(h);\n        break;\n      }\n      if (d === 10 && h === g && r)\n        a.push(-3), r = void 0;\n      else\n        switch (r && (a.push(-5), r = void 0), h < g && (a.push(l.slice(h, g)), n += g - h), d) {\n          case 0: {\n            a.push(65533), n++;\n            break;\n          }\n          case 9: {\n            for (s = Math.ceil(n / 4) * 4, a.push(-2); n++ < s; )\n              a.push(-1);\n            break;\n          }\n          case 10: {\n            a.push(-4), n = 1;\n            break;\n          }\n          default:\n            r = !0, n = 1;\n        }\n      h = g + 1;\n    }\n    return u && (r && a.push(-5), e && a.push(e), a.push(null)), a;\n  }\n}\nfunction Il(n) {\n  for (; !Rt(n); )\n    ;\n  return n;\n}\nfunction $t(n, e) {\n  const t = Number.parseInt(n, e);\n  return (\n    // C0 except for HT, LF, FF, CR, space\n    t < 9 || t === 11 || t > 13 && t < 32 || // Control character (DEL) of the basic block and C1 controls.\n    t > 126 && t < 160 || // Lone high surrogates and low surrogates.\n    t > 55295 && t < 57344 || // Noncharacters.\n    t > 64975 && t < 65008 || (t & 65535) === 65535 || (t & 65535) === 65534 || // Out of range\n    t > 1114111 ? "\ufffd" : String.fromCharCode(t)\n  );\n}\nconst Ol = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\nfunction Ll(n) {\n  return n.replace(Ol, Dl);\n}\nfunction Dl(n, e, t) {\n  if (e)\n    return e;\n  if (t.charCodeAt(0) === 35) {\n    const i = t.charCodeAt(1), l = i === 120 || i === 88;\n    return $t(t.slice(l ? 2 : 1), l ? 16 : 10);\n  }\n  return Ae(t) || n;\n}\nfunction Xn(n) {\n  return !n || typeof n != "object" ? "" : "position" in n || "type" in n ? ot(n.position) : "start" in n || "end" in n ? ot(n) : "line" in n || "column" in n ? ke(n) : "";\n}\nfunction ke(n) {\n  return ut(n && n.line) + ":" + ut(n && n.column);\n}\nfunction ot(n) {\n  return ke(n && n.start) + "-" + ke(n && n.end);\n}\nfunction ut(n) {\n  return n && typeof n == "number" ? n : 1;\n}\nconst Ht = {}.hasOwnProperty, vl = (\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function(n, e, t) {\n    return typeof e != "string" && (t = e, e = void 0), zl(t)(\n      Il(\n        // @ts-expect-error: micromark types need to accept `null`.\n        Fl(t).document().write(Tl()(n, e, !0))\n      )\n    );\n  }\n);\nfunction zl(n) {\n  const e = {\n    transforms: [],\n    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],\n    enter: {\n      autolink: u(De),\n      autolinkProtocol: C,\n      autolinkEmail: C,\n      atxHeading: u(Fn),\n      blockQuote: u(Rn),\n      characterEscape: C,\n      characterReference: C,\n      codeFenced: u(Vn),\n      codeFencedFenceInfo: a,\n      codeFencedFenceMeta: a,\n      codeIndented: u(Vn, a),\n      codeText: u(ee, a),\n      codeTextData: C,\n      data: C,\n      codeFlowValue: C,\n      definition: u(P),\n      definitionDestinationString: a,\n      definitionLabelString: a,\n      definitionTitleString: a,\n      emphasis: u(_n),\n      hardBreakEscape: u(Mn),\n      hardBreakTrailing: u(Mn),\n      htmlFlow: u(Le, a),\n      htmlFlowData: C,\n      htmlText: u(Le, a),\n      htmlTextData: C,\n      image: u(sr),\n      label: a,\n      link: u(De),\n      listItem: u(cr),\n      listItemValue: m,\n      listOrdered: u(ve, d),\n      listUnordered: u(ve),\n      paragraph: u(pr),\n      reference: bn,\n      referenceString: a,\n      resourceDestinationString: a,\n      resourceTitleString: a,\n      setextHeading: u(Fn),\n      strong: u(fr),\n      thematicBreak: u(mr)\n    },\n    exit: {\n      atxHeading: s(),\n      atxHeadingSequence: I,\n      autolink: s(),\n      autolinkEmail: Sn,\n      autolinkProtocol: wn,\n      blockQuote: s(),\n      characterEscapeValue: F,\n      characterReferenceMarkerHexadecimal: rn,\n      characterReferenceMarkerNumeric: rn,\n      characterReferenceValue: hn,\n      codeFenced: s(v),\n      codeFencedFence: w,\n      codeFencedFenceInfo: y,\n      codeFencedFenceMeta: x,\n      codeFlowValue: F,\n      codeIndented: s(A),\n      codeText: s(tn),\n      codeTextData: F,\n      data: F,\n      definition: s(),\n      definitionDestinationString: b,\n      definitionLabelString: _,\n      definitionTitleString: T,\n      emphasis: s(),\n      hardBreakEscape: s(Z),\n      hardBreakTrailing: s(Z),\n      htmlFlow: s(en),\n      htmlFlowData: F,\n      htmlText: s(un),\n      htmlTextData: F,\n      image: s(J),\n      label: f,\n      labelText: W,\n      lineEnding: B,\n      link: s(q),\n      listItem: s(),\n      listOrdered: s(),\n      listUnordered: s(),\n      paragraph: s(),\n      referenceString: Y,\n      resourceDestinationString: p,\n      resourceTitleString: kn,\n      resource: Pn,\n      setextHeading: s(X),\n      setextHeadingLineSequence: M,\n      setextHeadingText: R,\n      strong: s(),\n      thematicBreak: s()\n    }\n  };\n  Ut(e, (n || {}).mdastExtensions || []);\n  const t = {};\n  return r;\n  function r(k) {\n    let E = {\n      type: "root",\n      children: []\n    };\n    const O = {\n      stack: [E],\n      tokenStack: [],\n      config: e,\n      enter: c,\n      exit: h,\n      buffer: a,\n      resume: g,\n      setData: l,\n      getData: o\n    }, $ = [];\n    let H = -1;\n    for (; ++H < k.length; )\n      if (k[H][1].type === "listOrdered" || k[H][1].type === "listUnordered")\n        if (k[H][0] === "enter")\n          $.push(H);\n        else {\n          const fn = $.pop();\n          H = i(k, fn, H);\n        }\n    for (H = -1; ++H < k.length; ) {\n      const fn = e[k[H][0]];\n      Ht.call(fn, k[H][1].type) && fn[k[H][1].type].call(\n        Object.assign(\n          {\n            sliceSerialize: k[H][2].sliceSerialize\n          },\n          O\n        ),\n        k[H][1]\n      );\n    }\n    if (O.tokenStack.length > 0) {\n      const fn = O.tokenStack[O.tokenStack.length - 1];\n      (fn[1] || at).call(O, void 0, fn[0]);\n    }\n    for (E.position = {\n      start: Cn(\n        k.length > 0 ? k[0][1].start : {\n          line: 1,\n          column: 1,\n          offset: 0\n        }\n      ),\n      end: Cn(\n        k.length > 0 ? k[k.length - 2][1].end : {\n          line: 1,\n          column: 1,\n          offset: 0\n        }\n      )\n    }, H = -1; ++H < e.transforms.length; )\n      E = e.transforms[H](E) || E;\n    return E;\n  }\n  function i(k, E, O) {\n    let $ = E - 1, H = -1, fn = !1, En, yn, Bn, Nn;\n    for (; ++$ <= O; ) {\n      const Q = k[$];\n      if (Q[1].type === "listUnordered" || Q[1].type === "listOrdered" || Q[1].type === "blockQuote" ? (Q[0] === "enter" ? H++ : H--, Nn = void 0) : Q[1].type === "lineEndingBlank" ? Q[0] === "enter" && (En && !Nn && !H && !Bn && (Bn = $), Nn = void 0) : Q[1].type === "linePrefix" || Q[1].type === "listItemValue" || Q[1].type === "listItemMarker" || Q[1].type === "listItemPrefix" || Q[1].type === "listItemPrefixWhitespace" || (Nn = void 0), !H && Q[0] === "enter" && Q[1].type === "listItemPrefix" || H === -1 && Q[0] === "exit" && (Q[1].type === "listUnordered" || Q[1].type === "listOrdered")) {\n        if (En) {\n          let te = $;\n          for (yn = void 0; te--; ) {\n            const xn = k[te];\n            if (xn[1].type === "lineEnding" || xn[1].type === "lineEndingBlank") {\n              if (xn[0] === "exit")\n                continue;\n              yn && (k[yn][1].type = "lineEndingBlank", fn = !0), xn[1].type = "lineEnding", yn = te;\n            } else if (!(xn[1].type === "linePrefix" || xn[1].type === "blockQuotePrefix" || xn[1].type === "blockQuotePrefixWhitespace" || xn[1].type === "blockQuoteMarker" || xn[1].type === "listItemIndent"))\n              break;\n          }\n          Bn && (!yn || Bn < yn) && (En._spread = !0), En.end = Object.assign(\n            {},\n            yn ? k[yn][1].start : Q[1].end\n          ), k.splice(yn || $, 0, ["exit", En, Q[2]]), $++, O++;\n        }\n        Q[1].type === "listItemPrefix" && (En = {\n          type: "listItem",\n          // @ts-expect-error Patched\n          _spread: !1,\n          start: Object.assign({}, Q[1].start)\n        }, k.splice($, 0, ["enter", En, Q[2]]), $++, O++, Bn = void 0, Nn = !0);\n      }\n    }\n    return k[E][1]._spread = fn, O;\n  }\n  function l(k, E) {\n    t[k] = E;\n  }\n  function o(k) {\n    return t[k];\n  }\n  function u(k, E) {\n    return O;\n    function O($) {\n      c.call(this, k($), $), E && E.call(this, $);\n    }\n  }\n  function a() {\n    this.stack.push({\n      type: "fragment",\n      children: []\n    });\n  }\n  function c(k, E, O) {\n    return this.stack[this.stack.length - 1].children.push(k), this.stack.push(k), this.tokenStack.push([E, O]), k.position = {\n      start: Cn(E.start)\n    }, k;\n  }\n  function s(k) {\n    return E;\n    function E(O) {\n      k && k.call(this, O), h.call(this, O);\n    }\n  }\n  function h(k, E) {\n    const O = this.stack.pop(), $ = this.tokenStack.pop();\n    if ($)\n      $[0].type !== k.type && (E ? E.call(this, k, $[0]) : ($[1] || at).call(this, k, $[0]));\n    else\n      throw new Error(\n        "Cannot close `" + k.type + "` (" + Xn({\n          start: k.start,\n          end: k.end\n        }) + "): it\u2019s not open"\n      );\n    return O.position.end = Cn(k.end), O;\n  }\n  function g() {\n    return _r(this.stack.pop());\n  }\n  function d() {\n    l("expectingFirstListItemValue", !0);\n  }\n  function m(k) {\n    if (o("expectingFirstListItemValue")) {\n      const E = this.stack[this.stack.length - 2];\n      E.start = Number.parseInt(this.sliceSerialize(k), 10), l("expectingFirstListItemValue");\n    }\n  }\n  function y() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.lang = k;\n  }\n  function x() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.meta = k;\n  }\n  function w() {\n    o("flowCodeInside") || (this.buffer(), l("flowCodeInside", !0));\n  }\n  function v() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.value = k.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, ""), l("flowCodeInside");\n  }\n  function A() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.value = k.replace(/(\\r?\\n|\\r)$/g, "");\n  }\n  function _(k) {\n    const E = this.resume(), O = this.stack[this.stack.length - 1];\n    O.label = E, O.identifier = Ln(\n      this.sliceSerialize(k)\n    ).toLowerCase();\n  }\n  function T() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.title = k;\n  }\n  function b() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.url = k;\n  }\n  function I(k) {\n    const E = this.stack[this.stack.length - 1];\n    if (!E.depth) {\n      const O = this.sliceSerialize(k).length;\n      E.depth = O;\n    }\n  }\n  function R() {\n    l("setextHeadingSlurpLineEnding", !0);\n  }\n  function M(k) {\n    const E = this.stack[this.stack.length - 1];\n    E.depth = this.sliceSerialize(k).charCodeAt(0) === 61 ? 1 : 2;\n  }\n  function X() {\n    l("setextHeadingSlurpLineEnding");\n  }\n  function C(k) {\n    const E = this.stack[this.stack.length - 1];\n    let O = E.children[E.children.length - 1];\n    (!O || O.type !== "text") && (O = hr(), O.position = {\n      start: Cn(k.start)\n    }, E.children.push(O)), this.stack.push(O);\n  }\n  function F(k) {\n    const E = this.stack.pop();\n    E.value += this.sliceSerialize(k), E.position.end = Cn(k.end);\n  }\n  function B(k) {\n    const E = this.stack[this.stack.length - 1];\n    if (o("atHardBreak")) {\n      const O = E.children[E.children.length - 1];\n      O.position.end = Cn(k.end), l("atHardBreak");\n      return;\n    }\n    !o("setextHeadingSlurpLineEnding") && e.canContainEols.includes(E.type) && (C.call(this, k), F.call(this, k));\n  }\n  function Z() {\n    l("atHardBreak", !0);\n  }\n  function en() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.value = k;\n  }\n  function un() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.value = k;\n  }\n  function tn() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.value = k;\n  }\n  function q() {\n    const k = this.stack[this.stack.length - 1];\n    if (o("inReference")) {\n      const E = o("referenceType") || "shortcut";\n      k.type += "Reference", k.referenceType = E, delete k.url, delete k.title;\n    } else\n      delete k.identifier, delete k.label;\n    l("referenceType");\n  }\n  function J() {\n    const k = this.stack[this.stack.length - 1];\n    if (o("inReference")) {\n      const E = o("referenceType") || "shortcut";\n      k.type += "Reference", k.referenceType = E, delete k.url, delete k.title;\n    } else\n      delete k.identifier, delete k.label;\n    l("referenceType");\n  }\n  function W(k) {\n    const E = this.sliceSerialize(k), O = this.stack[this.stack.length - 2];\n    O.label = Ll(E), O.identifier = Ln(E).toLowerCase();\n  }\n  function f() {\n    const k = this.stack[this.stack.length - 1], E = this.resume(), O = this.stack[this.stack.length - 1];\n    if (l("inReference", !0), O.type === "link") {\n      const $ = k.children;\n      O.children = $;\n    } else\n      O.alt = E;\n  }\n  function p() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.url = k;\n  }\n  function kn() {\n    const k = this.resume(), E = this.stack[this.stack.length - 1];\n    E.title = k;\n  }\n  function Pn() {\n    l("inReference");\n  }\n  function bn() {\n    l("referenceType", "collapsed");\n  }\n  function Y(k) {\n    const E = this.resume(), O = this.stack[this.stack.length - 1];\n    O.label = E, O.identifier = Ln(\n      this.sliceSerialize(k)\n    ).toLowerCase(), l("referenceType", "full");\n  }\n  function rn(k) {\n    l("characterReferenceType", k.type);\n  }\n  function hn(k) {\n    const E = this.sliceSerialize(k), O = o("characterReferenceType");\n    let $;\n    O ? ($ = $t(\n      E,\n      O === "characterReferenceMarkerNumeric" ? 10 : 16\n    ), l("characterReferenceType")) : $ = Ae(E);\n    const H = this.stack.pop();\n    H.value += $, H.position.end = Cn(k.end);\n  }\n  function wn(k) {\n    F.call(this, k);\n    const E = this.stack[this.stack.length - 1];\n    E.url = this.sliceSerialize(k);\n  }\n  function Sn(k) {\n    F.call(this, k);\n    const E = this.stack[this.stack.length - 1];\n    E.url = "mailto:" + this.sliceSerialize(k);\n  }\n  function Rn() {\n    return {\n      type: "blockquote",\n      children: []\n    };\n  }\n  function Vn() {\n    return {\n      type: "code",\n      lang: null,\n      meta: null,\n      value: ""\n    };\n  }\n  function ee() {\n    return {\n      type: "inlineCode",\n      value: ""\n    };\n  }\n  function P() {\n    return {\n      type: "definition",\n      identifier: "",\n      label: null,\n      title: null,\n      url: ""\n    };\n  }\n  function _n() {\n    return {\n      type: "emphasis",\n      children: []\n    };\n  }\n  function Fn() {\n    return {\n      type: "heading",\n      depth: void 0,\n      children: []\n    };\n  }\n  function Mn() {\n    return {\n      type: "break"\n    };\n  }\n  function Le() {\n    return {\n      type: "html",\n      value: ""\n    };\n  }\n  function sr() {\n    return {\n      type: "image",\n      title: null,\n      url: "",\n      alt: null\n    };\n  }\n  function De() {\n    return {\n      type: "link",\n      title: null,\n      url: "",\n      children: []\n    };\n  }\n  function ve(k) {\n    return {\n      type: "list",\n      ordered: k.type === "listOrdered",\n      start: null,\n      // @ts-expect-error Patched.\n      spread: k._spread,\n      children: []\n    };\n  }\n  function cr(k) {\n    return {\n      type: "listItem",\n      // @ts-expect-error Patched.\n      spread: k._spread,\n      checked: null,\n      children: []\n    };\n  }\n  function pr() {\n    return {\n      type: "paragraph",\n      children: []\n    };\n  }\n  function fr() {\n    return {\n      type: "strong",\n      children: []\n    };\n  }\n  function hr() {\n    return {\n      type: "text",\n      value: ""\n    };\n  }\n  function mr() {\n    return {\n      type: "thematicBreak"\n    };\n  }\n}\nfunction Cn(n) {\n  return {\n    line: n.line,\n    column: n.column,\n    offset: n.offset\n  };\n}\nfunction Ut(n, e) {\n  let t = -1;\n  for (; ++t < e.length; ) {\n    const r = e[t];\n    Array.isArray(r) ? Ut(n, r) : Rl(n, r);\n  }\n}\nfunction Rl(n, e) {\n  let t;\n  for (t in e)\n    if (Ht.call(e, t)) {\n      if (t === "canContainEols") {\n        const r = e[t];\n        r && n[t].push(...r);\n      } else if (t === "transforms") {\n        const r = e[t];\n        r && n[t].push(...r);\n      } else if (t === "enter" || t === "exit") {\n        const r = e[t];\n        r && Object.assign(n[t], r);\n      }\n    }\n}\nfunction at(n, e) {\n  throw n ? new Error(\n    "Cannot close `" + n.type + "` (" + Xn({\n      start: n.start,\n      end: n.end\n    }) + "): a different token (`" + e.type + "`, " + Xn({\n      start: e.start,\n      end: e.end\n    }) + ") is open"\n  ) : new Error(\n    "Cannot close document, a token (`" + e.type + "`, " + Xn({\n      start: e.start,\n      end: e.end\n    }) + ") is still open"\n  );\n}\nfunction _l(n) {\n  Object.assign(this, { Parser: (t) => {\n    const r = (\n      /** @type {Options} */\n      this.data("settings")\n    );\n    return vl(\n      t,\n      Object.assign({}, r, n, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data("micromarkExtensions") || [],\n        mdastExtensions: this.data("fromMarkdownExtensions") || []\n      })\n    );\n  } });\n}\nfunction Ml(n, e) {\n  const t = {\n    type: "element",\n    tagName: "blockquote",\n    properties: {},\n    children: n.wrap(n.all(e), !0)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction Bl(n, e) {\n  const t = { type: "element", tagName: "br", properties: {}, children: [] };\n  return n.patch(e, t), [n.applyData(e, t), { type: "text", value: `\n` }];\n}\nfunction Nl(n, e) {\n  const t = e.value ? e.value + `\n` : "", r = e.lang ? e.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null, i = {};\n  r && (i.className = ["language-" + r]);\n  let l = {\n    type: "element",\n    tagName: "code",\n    properties: i,\n    children: [{ type: "text", value: t }]\n  };\n  return e.meta && (l.data = { meta: e.meta }), n.patch(e, l), l = n.applyData(e, l), l = { type: "element", tagName: "pre", properties: {}, children: [l] }, n.patch(e, l), l;\n}\nfunction jl(n, e) {\n  const t = {\n    type: "element",\n    tagName: "del",\n    properties: {},\n    children: n.all(e)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction $l(n, e) {\n  const t = {\n    type: "element",\n    tagName: "em",\n    properties: {},\n    children: n.all(e)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction vn(n) {\n  const e = [];\n  let t = -1, r = 0, i = 0;\n  for (; ++t < n.length; ) {\n    const l = n.charCodeAt(t);\n    let o = "";\n    if (l === 37 && on(n.charCodeAt(t + 1)) && on(n.charCodeAt(t + 2)))\n      i = 2;\n    else if (l < 128)\n      /[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(l)) || (o = String.fromCharCode(l));\n    else if (l > 55295 && l < 57344) {\n      const u = n.charCodeAt(t + 1);\n      l < 56320 && u > 56319 && u < 57344 ? (o = String.fromCharCode(l, u), i = 1) : o = "\ufffd";\n    } else\n      o = String.fromCharCode(l);\n    o && (e.push(n.slice(r, t), encodeURIComponent(o)), r = t + i + 1, o = ""), i && (t += i, i = 0);\n  }\n  return e.join("") + n.slice(r);\n}\nfunction Vt(n, e) {\n  const t = String(e.identifier).toUpperCase(), r = vn(t.toLowerCase()), i = n.footnoteOrder.indexOf(t);\n  let l;\n  i === -1 ? (n.footnoteOrder.push(t), n.footnoteCounts[t] = 1, l = n.footnoteOrder.length) : (n.footnoteCounts[t]++, l = i + 1);\n  const o = n.footnoteCounts[t], u = {\n    type: "element",\n    tagName: "a",\n    properties: {\n      href: "#" + n.clobberPrefix + "fn-" + r,\n      id: n.clobberPrefix + "fnref-" + r + (o > 1 ? "-" + o : ""),\n      dataFootnoteRef: !0,\n      ariaDescribedBy: ["footnote-label"]\n    },\n    children: [{ type: "text", value: String(l) }]\n  };\n  n.patch(e, u);\n  const a = {\n    type: "element",\n    tagName: "sup",\n    properties: {},\n    children: [u]\n  };\n  return n.patch(e, a), n.applyData(e, a);\n}\nfunction Hl(n, e) {\n  const t = n.footnoteById;\n  let r = 1;\n  for (; r in t; )\n    r++;\n  const i = String(r);\n  return t[i] = {\n    type: "footnoteDefinition",\n    identifier: i,\n    children: [{ type: "paragraph", children: e.children }],\n    position: e.position\n  }, Vt(n, {\n    type: "footnoteReference",\n    identifier: i,\n    position: e.position\n  });\n}\nfunction Ul(n, e) {\n  const t = {\n    type: "element",\n    tagName: "h" + e.depth,\n    properties: {},\n    children: n.all(e)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction Vl(n, e) {\n  if (n.dangerous) {\n    const t = { type: "raw", value: e.value };\n    return n.patch(e, t), n.applyData(e, t);\n  }\n  return null;\n}\nfunction qt(n, e) {\n  const t = e.referenceType;\n  let r = "]";\n  if (t === "collapsed" ? r += "[]" : t === "full" && (r += "[" + (e.label || e.identifier) + "]"), e.type === "imageReference")\n    return { type: "text", value: "![" + e.alt + r };\n  const i = n.all(e), l = i[0];\n  l && l.type === "text" ? l.value = "[" + l.value : i.unshift({ type: "text", value: "[" });\n  const o = i[i.length - 1];\n  return o && o.type === "text" ? o.value += r : i.push({ type: "text", value: r }), i;\n}\nfunction ql(n, e) {\n  const t = n.definition(e.identifier);\n  if (!t)\n    return qt(n, e);\n  const r = { src: vn(t.url || ""), alt: e.alt };\n  t.title !== null && t.title !== void 0 && (r.title = t.title);\n  const i = { type: "element", tagName: "img", properties: r, children: [] };\n  return n.patch(e, i), n.applyData(e, i);\n}\nfunction Wl(n, e) {\n  const t = { src: vn(e.url) };\n  e.alt !== null && e.alt !== void 0 && (t.alt = e.alt), e.title !== null && e.title !== void 0 && (t.title = e.title);\n  const r = { type: "element", tagName: "img", properties: t, children: [] };\n  return n.patch(e, r), n.applyData(e, r);\n}\nfunction Yl(n, e) {\n  const t = { type: "text", value: e.value.replace(/\\r?\\n|\\r/g, " ") };\n  n.patch(e, t);\n  const r = {\n    type: "element",\n    tagName: "code",\n    properties: {},\n    children: [t]\n  };\n  return n.patch(e, r), n.applyData(e, r);\n}\nfunction Ql(n, e) {\n  const t = n.definition(e.identifier);\n  if (!t)\n    return qt(n, e);\n  const r = { href: vn(t.url || "") };\n  t.title !== null && t.title !== void 0 && (r.title = t.title);\n  const i = {\n    type: "element",\n    tagName: "a",\n    properties: r,\n    children: n.all(e)\n  };\n  return n.patch(e, i), n.applyData(e, i);\n}\nfunction Xl(n, e) {\n  const t = { href: vn(e.url) };\n  e.title !== null && e.title !== void 0 && (t.title = e.title);\n  const r = {\n    type: "element",\n    tagName: "a",\n    properties: t,\n    children: n.all(e)\n  };\n  return n.patch(e, r), n.applyData(e, r);\n}\nfunction Kl(n, e, t) {\n  const r = n.all(e), i = t ? Gl(t) : Wt(e), l = {}, o = [];\n  if (typeof e.checked == "boolean") {\n    const s = r[0];\n    let h;\n    s && s.type === "element" && s.tagName === "p" ? h = s : (h = { type: "element", tagName: "p", properties: {}, children: [] }, r.unshift(h)), h.children.length > 0 && h.children.unshift({ type: "text", value: " " }), h.children.unshift({\n      type: "element",\n      tagName: "input",\n      properties: { type: "checkbox", checked: e.checked, disabled: !0 },\n      children: []\n    }), l.className = ["task-list-item"];\n  }\n  let u = -1;\n  for (; ++u < r.length; ) {\n    const s = r[u];\n    (i || u !== 0 || s.type !== "element" || s.tagName !== "p") && o.push({ type: "text", value: `\n` }), s.type === "element" && s.tagName === "p" && !i ? o.push(...s.children) : o.push(s);\n  }\n  const a = r[r.length - 1];\n  a && (i || a.type !== "element" || a.tagName !== "p") && o.push({ type: "text", value: `\n` });\n  const c = { type: "element", tagName: "li", properties: l, children: o };\n  return n.patch(e, c), n.applyData(e, c);\n}\nfunction Gl(n) {\n  let e = !1;\n  if (n.type === "list") {\n    e = n.spread || !1;\n    const t = n.children;\n    let r = -1;\n    for (; !e && ++r < t.length; )\n      e = Wt(t[r]);\n  }\n  return e;\n}\nfunction Wt(n) {\n  const e = n.spread;\n  return e ?? n.children.length > 1;\n}\nfunction Zl(n, e) {\n  const t = {}, r = n.all(e);\n  let i = -1;\n  for (typeof e.start == "number" && e.start !== 1 && (t.start = e.start); ++i < r.length; ) {\n    const o = r[i];\n    if (o.type === "element" && o.tagName === "li" && o.properties && Array.isArray(o.properties.className) && o.properties.className.includes("task-list-item")) {\n      t.className = ["contains-task-list"];\n      break;\n    }\n  }\n  const l = {\n    type: "element",\n    tagName: e.ordered ? "ol" : "ul",\n    properties: t,\n    children: n.wrap(r, !0)\n  };\n  return n.patch(e, l), n.applyData(e, l);\n}\nfunction Jl(n, e) {\n  const t = {\n    type: "element",\n    tagName: "p",\n    properties: {},\n    children: n.all(e)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction no(n, e) {\n  const t = { type: "root", children: n.wrap(n.all(e)) };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction eo(n, e) {\n  const t = {\n    type: "element",\n    tagName: "strong",\n    properties: {},\n    children: n.all(e)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nconst Fe = Yt("start"), Te = Yt("end");\nfunction to(n) {\n  return { start: Fe(n), end: Te(n) };\n}\nfunction Yt(n) {\n  return e;\n  function e(t) {\n    const r = t && t.position && t.position[n] || {};\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: r.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: r.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: r.offset > -1 ? r.offset : null\n    };\n  }\n}\nfunction ro(n, e) {\n  const t = n.all(e), r = t.shift(), i = [];\n  if (r) {\n    const o = {\n      type: "element",\n      tagName: "thead",\n      properties: {},\n      children: n.wrap([r], !0)\n    };\n    n.patch(e.children[0], o), i.push(o);\n  }\n  if (t.length > 0) {\n    const o = {\n      type: "element",\n      tagName: "tbody",\n      properties: {},\n      children: n.wrap(t, !0)\n    }, u = Fe(e.children[1]), a = Te(e.children[e.children.length - 1]);\n    u.line && a.line && (o.position = { start: u, end: a }), i.push(o);\n  }\n  const l = {\n    type: "element",\n    tagName: "table",\n    properties: {},\n    children: n.wrap(i, !0)\n  };\n  return n.patch(e, l), n.applyData(e, l);\n}\nfunction io(n, e, t) {\n  const r = t ? t.children : void 0, l = (r ? r.indexOf(e) : 1) === 0 ? "th" : "td", o = t && t.type === "table" ? t.align : void 0, u = o ? o.length : e.children.length;\n  let a = -1;\n  const c = [];\n  for (; ++a < u; ) {\n    const h = e.children[a], g = {}, d = o ? o[a] : void 0;\n    d && (g.align = d);\n    let m = { type: "element", tagName: l, properties: g, children: [] };\n    h && (m.children = n.all(h), n.patch(h, m), m = n.applyData(e, m)), c.push(m);\n  }\n  const s = {\n    type: "element",\n    tagName: "tr",\n    properties: {},\n    children: n.wrap(c, !0)\n  };\n  return n.patch(e, s), n.applyData(e, s);\n}\nfunction lo(n, e) {\n  const t = {\n    type: "element",\n    tagName: "td",\n    // Assume body cell.\n    properties: {},\n    children: n.all(e)\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nconst st = 9, ct = 32;\nfunction oo(n) {\n  const e = String(n), t = /\\r?\\n|\\r/g;\n  let r = t.exec(e), i = 0;\n  const l = [];\n  for (; r; )\n    l.push(\n      pt(e.slice(i, r.index), i > 0, !0),\n      r[0]\n    ), i = r.index + r[0].length, r = t.exec(e);\n  return l.push(pt(e.slice(i), i > 0, !1)), l.join("");\n}\nfunction pt(n, e, t) {\n  let r = 0, i = n.length;\n  if (e) {\n    let l = n.codePointAt(r);\n    for (; l === st || l === ct; )\n      r++, l = n.codePointAt(r);\n  }\n  if (t) {\n    let l = n.codePointAt(i - 1);\n    for (; l === st || l === ct; )\n      i--, l = n.codePointAt(i - 1);\n  }\n  return i > r ? n.slice(r, i) : "";\n}\nfunction uo(n, e) {\n  const t = { type: "text", value: oo(String(e.value)) };\n  return n.patch(e, t), n.applyData(e, t);\n}\nfunction ao(n, e) {\n  const t = {\n    type: "element",\n    tagName: "hr",\n    properties: {},\n    children: []\n  };\n  return n.patch(e, t), n.applyData(e, t);\n}\nconst so = {\n  blockquote: Ml,\n  break: Bl,\n  code: Nl,\n  delete: jl,\n  emphasis: $l,\n  footnoteReference: Vt,\n  footnote: Hl,\n  heading: Ul,\n  html: Vl,\n  imageReference: ql,\n  image: Wl,\n  inlineCode: Yl,\n  linkReference: Ql,\n  link: Xl,\n  listItem: Kl,\n  list: Zl,\n  paragraph: Jl,\n  root: no,\n  strong: eo,\n  table: ro,\n  tableCell: lo,\n  tableRow: io,\n  text: uo,\n  thematicBreak: ao,\n  toml: qn,\n  yaml: qn,\n  definition: qn,\n  footnoteDefinition: qn\n};\nfunction qn() {\n  return null;\n}\nconst Qt = (\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  /**\n   * @param {Test} [test]\n   * @returns {AssertAnything}\n   */\n  function(n) {\n    if (n == null)\n      return ho;\n    if (typeof n == "string")\n      return fo(n);\n    if (typeof n == "object")\n      return Array.isArray(n) ? co(n) : po(n);\n    if (typeof n == "function")\n      return Jn(n);\n    throw new Error("Expected function, string, or object as test");\n  }\n);\nfunction co(n) {\n  const e = [];\n  let t = -1;\n  for (; ++t < n.length; )\n    e[t] = Qt(n[t]);\n  return Jn(r);\n  function r(...i) {\n    let l = -1;\n    for (; ++l < e.length; )\n      if (e[l].call(this, ...i))\n        return !0;\n    return !1;\n  }\n}\nfunction po(n) {\n  return Jn(e);\n  function e(t) {\n    let r;\n    for (r in n)\n      if (t[r] !== n[r])\n        return !1;\n    return !0;\n  }\n}\nfunction fo(n) {\n  return Jn(e);\n  function e(t) {\n    return t && t.type === n;\n  }\n}\nfunction Jn(n) {\n  return e;\n  function e(t, ...r) {\n    return !!(t && typeof t == "object" && "type" in t && n.call(this, t, ...r));\n  }\n}\nfunction ho() {\n  return !0;\n}\nconst mo = !0, ft = !1, go = "skip", yo = (\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  /**\n   * @param {Node} tree\n   * @param {Test} test\n   * @param {Visitor<Node>} visitor\n   * @param {boolean | null | undefined} [reverse]\n   * @returns {void}\n   */\n  function(n, e, t, r) {\n    typeof e == "function" && typeof t != "function" && (r = t, t = e, e = null);\n    const i = Qt(e), l = r ? -1 : 1;\n    o(n, void 0, [])();\n    function o(u, a, c) {\n      const s = u && typeof u == "object" ? u : {};\n      if (typeof s.type == "string") {\n        const g = (\n          // `hast`\n          typeof s.tagName == "string" ? s.tagName : (\n            // `xast`\n            typeof s.name == "string" ? s.name : void 0\n          )\n        );\n        Object.defineProperty(h, "name", {\n          value: "node (" + (u.type + (g ? "<" + g + ">" : "")) + ")"\n        });\n      }\n      return h;\n      function h() {\n        let g = [], d, m, y;\n        if ((!e || i(u, a, c[c.length - 1] || null)) && (g = xo(t(u, c)), g[0] === ft))\n          return g;\n        if (u.children && g[0] !== go)\n          for (m = (r ? u.children.length : -1) + l, y = c.concat(u); m > -1 && m < u.children.length; ) {\n            if (d = o(u.children[m], m, y)(), d[0] === ft)\n              return d;\n            m = typeof d[1] == "number" ? d[1] : m + l;\n          }\n        return g;\n      }\n    }\n  }\n);\nfunction xo(n) {\n  return Array.isArray(n) ? n : typeof n == "number" ? [mo, n] : [n];\n}\nconst Xt = (\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  /**\n   * @param {Node} tree\n   * @param {Test} test\n   * @param {Visitor} visitor\n   * @param {boolean | null | undefined} [reverse]\n   * @returns {void}\n   */\n  function(n, e, t, r) {\n    typeof e == "function" && typeof t != "function" && (r = t, t = e, e = null), yo(n, e, i, r);\n    function i(l, o) {\n      const u = o[o.length - 1];\n      return t(\n        l,\n        u ? u.children.indexOf(l) : null,\n        u\n      );\n    }\n  }\n);\nfunction ko(n) {\n  return !n || !n.position || !n.position.start || !n.position.start.line || !n.position.start.column || !n.position.end || !n.position.end.line || !n.position.end.column;\n}\nconst ht = {}.hasOwnProperty;\nfunction bo(n) {\n  const e = /* @__PURE__ */ Object.create(null);\n  if (!n || !n.type)\n    throw new Error("mdast-util-definitions expected node");\n  return Xt(n, "definition", (r) => {\n    const i = mt(r.identifier);\n    i && !ht.call(e, i) && (e[i] = r);\n  }), t;\n  function t(r) {\n    const i = mt(r);\n    return i && ht.call(e, i) ? e[i] : null;\n  }\n}\nfunction mt(n) {\n  return String(n || "").toUpperCase();\n}\nconst Kn = {}.hasOwnProperty;\nfunction wo(n, e) {\n  const t = e || {}, r = t.allowDangerousHtml || !1, i = {};\n  return o.dangerous = r, o.clobberPrefix = t.clobberPrefix === void 0 || t.clobberPrefix === null ? "user-content-" : t.clobberPrefix, o.footnoteLabel = t.footnoteLabel || "Footnotes", o.footnoteLabelTagName = t.footnoteLabelTagName || "h2", o.footnoteLabelProperties = t.footnoteLabelProperties || {\n    className: ["sr-only"]\n  }, o.footnoteBackLabel = t.footnoteBackLabel || "Back to content", o.unknownHandler = t.unknownHandler, o.passThrough = t.passThrough, o.handlers = { ...so, ...t.handlers }, o.definition = bo(n), o.footnoteById = i, o.footnoteOrder = [], o.footnoteCounts = {}, o.patch = So, o.applyData = Eo, o.one = u, o.all = a, o.wrap = Ao, o.augment = l, Xt(n, "footnoteDefinition", (c) => {\n    const s = String(c.identifier).toUpperCase();\n    Kn.call(i, s) || (i[s] = c);\n  }), o;\n  function l(c, s) {\n    if (c && "data" in c && c.data) {\n      const h = c.data;\n      h.hName && (s.type !== "element" && (s = {\n        type: "element",\n        tagName: "",\n        properties: {},\n        children: []\n      }), s.tagName = h.hName), s.type === "element" && h.hProperties && (s.properties = { ...s.properties, ...h.hProperties }), "children" in s && s.children && h.hChildren && (s.children = h.hChildren);\n    }\n    if (c) {\n      const h = "type" in c ? c : { position: c };\n      ko(h) || (s.position = { start: Fe(h), end: Te(h) });\n    }\n    return s;\n  }\n  function o(c, s, h, g) {\n    return Array.isArray(h) && (g = h, h = {}), l(c, {\n      type: "element",\n      tagName: s,\n      properties: h || {},\n      children: g || []\n    });\n  }\n  function u(c, s) {\n    return Kt(o, c, s);\n  }\n  function a(c) {\n    return Ie(o, c);\n  }\n}\nfunction So(n, e) {\n  n.position && (e.position = to(n));\n}\nfunction Eo(n, e) {\n  let t = e;\n  if (n && n.data) {\n    const r = n.data.hName, i = n.data.hChildren, l = n.data.hProperties;\n    typeof r == "string" && (t.type === "element" ? t.tagName = r : t = {\n      type: "element",\n      tagName: r,\n      properties: {},\n      children: []\n    }), t.type === "element" && l && (t.properties = { ...t.properties, ...l }), "children" in t && t.children && i !== null && i !== void 0 && (t.children = i);\n  }\n  return t;\n}\nfunction Kt(n, e, t) {\n  const r = e && e.type;\n  if (!r)\n    throw new Error("Expected node, got `" + e + "`");\n  return Kn.call(n.handlers, r) ? n.handlers[r](n, e, t) : n.passThrough && n.passThrough.includes(r) ? "children" in e ? { ...e, children: Ie(n, e) } : e : n.unknownHandler ? n.unknownHandler(n, e, t) : Co(n, e);\n}\nfunction Ie(n, e) {\n  const t = [];\n  if ("children" in e) {\n    const r = e.children;\n    let i = -1;\n    for (; ++i < r.length; ) {\n      const l = Kt(n, r[i], e);\n      if (l) {\n        if (i && r[i - 1].type === "break" && (!Array.isArray(l) && l.type === "text" && (l.value = l.value.replace(/^\\s+/, "")), !Array.isArray(l) && l.type === "element")) {\n          const o = l.children[0];\n          o && o.type === "text" && (o.value = o.value.replace(/^\\s+/, ""));\n        }\n        Array.isArray(l) ? t.push(...l) : t.push(l);\n      }\n    }\n  }\n  return t;\n}\nfunction Co(n, e) {\n  const t = e.data || {}, r = "value" in e && !(Kn.call(t, "hProperties") || Kn.call(t, "hChildren")) ? { type: "text", value: e.value } : {\n    type: "element",\n    tagName: "div",\n    properties: {},\n    children: Ie(n, e)\n  };\n  return n.patch(e, r), n.applyData(e, r);\n}\nfunction Ao(n, e) {\n  const t = [];\n  let r = -1;\n  for (e && t.push({ type: "text", value: `\n` }); ++r < n.length; )\n    r && t.push({ type: "text", value: `\n` }), t.push(n[r]);\n  return e && n.length > 0 && t.push({ type: "text", value: `\n` }), t;\n}\nfunction Po(n) {\n  const e = [];\n  let t = -1;\n  for (; ++t < n.footnoteOrder.length; ) {\n    const r = n.footnoteById[n.footnoteOrder[t]];\n    if (!r)\n      continue;\n    const i = n.all(r), l = String(r.identifier).toUpperCase(), o = vn(l.toLowerCase());\n    let u = 0;\n    const a = [];\n    for (; ++u <= n.footnoteCounts[l]; ) {\n      const h = {\n        type: "element",\n        tagName: "a",\n        properties: {\n          href: "#" + n.clobberPrefix + "fnref-" + o + (u > 1 ? "-" + u : ""),\n          dataFootnoteBackref: !0,\n          className: ["data-footnote-backref"],\n          ariaLabel: n.footnoteBackLabel\n        },\n        children: [{ type: "text", value: "\u21a9" }]\n      };\n      u > 1 && h.children.push({\n        type: "element",\n        tagName: "sup",\n        children: [{ type: "text", value: String(u) }]\n      }), a.length > 0 && a.push({ type: "text", value: " " }), a.push(h);\n    }\n    const c = i[i.length - 1];\n    if (c && c.type === "element" && c.tagName === "p") {\n      const h = c.children[c.children.length - 1];\n      h && h.type === "text" ? h.value += " " : c.children.push({ type: "text", value: " " }), c.children.push(...a);\n    } else\n      i.push(...a);\n    const s = {\n      type: "element",\n      tagName: "li",\n      properties: { id: n.clobberPrefix + "fn-" + o },\n      children: n.wrap(i, !0)\n    };\n    n.patch(r, s), e.push(s);\n  }\n  if (e.length !== 0)\n    return {\n      type: "element",\n      tagName: "section",\n      properties: { dataFootnotes: !0, className: ["footnotes"] },\n      children: [\n        {\n          type: "element",\n          tagName: n.footnoteLabelTagName,\n          properties: {\n            // To do: use structured clone.\n            ...JSON.parse(JSON.stringify(n.footnoteLabelProperties)),\n            id: "footnote-label"\n          },\n          children: [{ type: "text", value: n.footnoteLabel }]\n        },\n        { type: "text", value: `\n` },\n        {\n          type: "element",\n          tagName: "ol",\n          properties: {},\n          children: n.wrap(e, !0)\n        },\n        { type: "text", value: `\n` }\n      ]\n    };\n}\nfunction Gt(n, e) {\n  const t = wo(n, e), r = t.one(n, null), i = Po(t);\n  return i && r.children.push({ type: "text", value: `\n` }, i), Array.isArray(r) ? { type: "root", children: r } : r;\n}\nconst Fo = (\n  /** @type {(import(\'unified\').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  function(n, e) {\n    return n && "run" in n ? Io(n, e) : Oo(n || e);\n  }\n), To = Fo;\nfunction Io(n, e) {\n  return (t, r, i) => {\n    n.run(Gt(t, e), r, (l) => {\n      i(l);\n    });\n  };\n}\nfunction Oo(n) {\n  return (e) => Gt(e, n);\n}\nclass Un {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(e, t, r) {\n    this.property = e, this.normal = t, r && (this.space = r);\n  }\n}\nUn.prototype.property = {};\nUn.prototype.normal = {};\nUn.prototype.space = null;\nfunction Zt(n, e) {\n  const t = {}, r = {};\n  let i = -1;\n  for (; ++i < n.length; )\n    Object.assign(t, n[i].property), Object.assign(r, n[i].normal);\n  return new Un(t, r, e);\n}\nfunction be(n) {\n  return n.toLowerCase();\n}\nclass pn {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(e, t) {\n    this.property = e, this.attribute = t;\n  }\n}\npn.prototype.space = null;\npn.prototype.boolean = !1;\npn.prototype.booleanish = !1;\npn.prototype.overloadedBoolean = !1;\npn.prototype.number = !1;\npn.prototype.commaSeparated = !1;\npn.prototype.spaceSeparated = !1;\npn.prototype.commaOrSpaceSeparated = !1;\npn.prototype.mustUseProperty = !1;\npn.prototype.defined = !1;\nlet Lo = 0;\nconst z = In(), K = In(), Jt = In(), S = In(), V = In(), Dn = In(), ln = In();\nfunction In() {\n  return 2 ** ++Lo;\n}\nconst we = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  boolean: z,\n  booleanish: K,\n  commaOrSpaceSeparated: ln,\n  commaSeparated: Dn,\n  number: S,\n  overloadedBoolean: Jt,\n  spaceSeparated: V\n}, Symbol.toStringTag, { value: "Module" })), pe = Object.keys(we);\nclass Oe extends pn {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(e, t, r, i) {\n    let l = -1;\n    if (super(e, t), dt(this, "space", i), typeof r == "number")\n      for (; ++l < pe.length; ) {\n        const o = pe[l];\n        dt(this, pe[l], (r & we[o]) === we[o]);\n      }\n  }\n}\nOe.prototype.defined = !0;\nfunction dt(n, e, t) {\n  t && (n[e] = t);\n}\nconst Do = {}.hasOwnProperty;\nfunction zn(n) {\n  const e = {}, t = {};\n  let r;\n  for (r in n.properties)\n    if (Do.call(n.properties, r)) {\n      const i = n.properties[r], l = new Oe(\n        r,\n        n.transform(n.attributes || {}, r),\n        i,\n        n.space\n      );\n      n.mustUseProperty && n.mustUseProperty.includes(r) && (l.mustUseProperty = !0), e[r] = l, t[be(r)] = r, t[be(l.attribute)] = r;\n    }\n  return new Un(e, t, n.space);\n}\nconst nr = zn({\n  space: "xlink",\n  transform(n, e) {\n    return "xlink:" + e.slice(5).toLowerCase();\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n}), er = zn({\n  space: "xml",\n  transform(n, e) {\n    return "xml:" + e.slice(3).toLowerCase();\n  },\n  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }\n});\nfunction tr(n, e) {\n  return e in n ? n[e] : e;\n}\nfunction rr(n, e) {\n  return tr(n, e.toLowerCase());\n}\nconst ir = zn({\n  space: "xmlns",\n  attributes: { xmlnsxlink: "xmlns:xlink" },\n  transform: rr,\n  properties: { xmlns: null, xmlnsXLink: null }\n}), lr = zn({\n  transform(n, e) {\n    return e === "role" ? e : "aria-" + e.slice(4).toLowerCase();\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: K,\n    ariaAutoComplete: null,\n    ariaBusy: K,\n    ariaChecked: K,\n    ariaColCount: S,\n    ariaColIndex: S,\n    ariaColSpan: S,\n    ariaControls: V,\n    ariaCurrent: null,\n    ariaDescribedBy: V,\n    ariaDetails: null,\n    ariaDisabled: K,\n    ariaDropEffect: V,\n    ariaErrorMessage: null,\n    ariaExpanded: K,\n    ariaFlowTo: V,\n    ariaGrabbed: K,\n    ariaHasPopup: null,\n    ariaHidden: K,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: V,\n    ariaLevel: S,\n    ariaLive: null,\n    ariaModal: K,\n    ariaMultiLine: K,\n    ariaMultiSelectable: K,\n    ariaOrientation: null,\n    ariaOwns: V,\n    ariaPlaceholder: null,\n    ariaPosInSet: S,\n    ariaPressed: K,\n    ariaReadOnly: K,\n    ariaRelevant: null,\n    ariaRequired: K,\n    ariaRoleDescription: V,\n    ariaRowCount: S,\n    ariaRowIndex: S,\n    ariaRowSpan: S,\n    ariaSelected: K,\n    ariaSetSize: S,\n    ariaSort: null,\n    ariaValueMax: S,\n    ariaValueMin: S,\n    ariaValueNow: S,\n    ariaValueText: null,\n    role: null\n  }\n}), vo = zn({\n  space: "html",\n  attributes: {\n    acceptcharset: "accept-charset",\n    classname: "class",\n    htmlfor: "for",\n    httpequiv: "http-equiv"\n  },\n  transform: rr,\n  mustUseProperty: ["checked", "multiple", "muted", "selected"],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: Dn,\n    acceptCharset: V,\n    accessKey: V,\n    action: null,\n    allow: null,\n    allowFullScreen: z,\n    allowPaymentRequest: z,\n    allowUserMedia: z,\n    alt: null,\n    as: null,\n    async: z,\n    autoCapitalize: null,\n    autoComplete: V,\n    autoFocus: z,\n    autoPlay: z,\n    capture: z,\n    charSet: null,\n    checked: z,\n    cite: null,\n    className: V,\n    cols: S,\n    colSpan: null,\n    content: null,\n    contentEditable: K,\n    controls: z,\n    controlsList: V,\n    coords: S | Dn,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: z,\n    defer: z,\n    dir: null,\n    dirName: null,\n    disabled: z,\n    download: Jt,\n    draggable: K,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: z,\n    formTarget: null,\n    headers: V,\n    height: S,\n    hidden: z,\n    high: S,\n    href: null,\n    hrefLang: null,\n    htmlFor: V,\n    httpEquiv: V,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: z,\n    itemId: null,\n    itemProp: V,\n    itemRef: V,\n    itemScope: z,\n    itemType: V,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: z,\n    low: S,\n    manifest: null,\n    max: null,\n    maxLength: S,\n    media: null,\n    method: null,\n    min: null,\n    minLength: S,\n    multiple: z,\n    muted: z,\n    name: null,\n    nonce: null,\n    noModule: z,\n    noValidate: z,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: z,\n    optimum: S,\n    pattern: null,\n    ping: V,\n    placeholder: null,\n    playsInline: z,\n    poster: null,\n    preload: null,\n    readOnly: z,\n    referrerPolicy: null,\n    rel: V,\n    required: z,\n    reversed: z,\n    rows: S,\n    rowSpan: S,\n    sandbox: V,\n    scope: null,\n    scoped: z,\n    seamless: z,\n    selected: z,\n    shape: null,\n    size: S,\n    sizes: null,\n    slot: null,\n    span: S,\n    spellCheck: K,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: S,\n    step: null,\n    style: null,\n    tabIndex: S,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: z,\n    useMap: null,\n    value: K,\n    width: S,\n    wrap: null,\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null,\n    // Several. Use CSS `text-align` instead,\n    aLink: null,\n    // `<body>`. Use CSS `a:active {color}` instead\n    archive: V,\n    // `<object>`. List of URIs to archives\n    axis: null,\n    // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null,\n    // `<body>`. Use CSS `background-image` instead\n    bgColor: null,\n    // `<body>` and table elements. Use CSS `background-color` instead\n    border: S,\n    // `<table>`. Use CSS `border-width` instead,\n    borderColor: null,\n    // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: S,\n    // `<body>`\n    cellPadding: null,\n    // `<table>`\n    cellSpacing: null,\n    // `<table>`\n    char: null,\n    // Several table elements. When `align=char`, sets the character to align on\n    charOff: null,\n    // Several table elements. When `char`, offsets the alignment\n    classId: null,\n    // `<object>`\n    clear: null,\n    // `<br>`. Use CSS `clear` instead\n    code: null,\n    // `<object>`\n    codeBase: null,\n    // `<object>`\n    codeType: null,\n    // `<object>`\n    color: null,\n    // `<font>` and `<hr>`. Use CSS instead\n    compact: z,\n    // Lists. Use CSS to reduce space between items instead\n    declare: z,\n    // `<object>`\n    event: null,\n    // `<script>`\n    face: null,\n    // `<font>`. Use CSS instead\n    frame: null,\n    // `<table>`\n    frameBorder: null,\n    // `<iframe>`. Use CSS `border` instead\n    hSpace: S,\n    // `<img>` and `<object>`\n    leftMargin: S,\n    // `<body>`\n    link: null,\n    // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null,\n    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null,\n    // `<img>`. Use a `<picture>`\n    marginHeight: S,\n    // `<body>`\n    marginWidth: S,\n    // `<body>`\n    noResize: z,\n    // `<frame>`\n    noHref: z,\n    // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: z,\n    // `<hr>`. Use background-color and height instead of borders\n    noWrap: z,\n    // `<td>` and `<th>`\n    object: null,\n    // `<applet>`\n    profile: null,\n    // `<head>`\n    prompt: null,\n    // `<isindex>`\n    rev: null,\n    // `<link>`\n    rightMargin: S,\n    // `<body>`\n    rules: null,\n    // `<table>`\n    scheme: null,\n    // `<meta>`\n    scrolling: K,\n    // `<frame>`. Use overflow in the child context\n    standby: null,\n    // `<object>`\n    summary: null,\n    // `<table>`\n    text: null,\n    // `<body>`. Use CSS `color` instead\n    topMargin: S,\n    // `<body>`\n    valueType: null,\n    // `<param>`\n    version: null,\n    // `<html>`. Use a doctype.\n    vAlign: null,\n    // Several. Use CSS `vertical-align` instead\n    vLink: null,\n    // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: S,\n    // `<img>` and `<object>`\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: z,\n    disableRemotePlayback: z,\n    prefix: null,\n    property: null,\n    results: S,\n    security: null,\n    unselectable: null\n  }\n}), zo = zn({\n  space: "svg",\n  attributes: {\n    accentHeight: "accent-height",\n    alignmentBaseline: "alignment-baseline",\n    arabicForm: "arabic-form",\n    baselineShift: "baseline-shift",\n    capHeight: "cap-height",\n    className: "class",\n    clipPath: "clip-path",\n    clipRule: "clip-rule",\n    colorInterpolation: "color-interpolation",\n    colorInterpolationFilters: "color-interpolation-filters",\n    colorProfile: "color-profile",\n    colorRendering: "color-rendering",\n    crossOrigin: "crossorigin",\n    dataType: "datatype",\n    dominantBaseline: "dominant-baseline",\n    enableBackground: "enable-background",\n    fillOpacity: "fill-opacity",\n    fillRule: "fill-rule",\n    floodColor: "flood-color",\n    floodOpacity: "flood-opacity",\n    fontFamily: "font-family",\n    fontSize: "font-size",\n    fontSizeAdjust: "font-size-adjust",\n    fontStretch: "font-stretch",\n    fontStyle: "font-style",\n    fontVariant: "font-variant",\n    fontWeight: "font-weight",\n    glyphName: "glyph-name",\n    glyphOrientationHorizontal: "glyph-orientation-horizontal",\n    glyphOrientationVertical: "glyph-orientation-vertical",\n    hrefLang: "hreflang",\n    horizAdvX: "horiz-adv-x",\n    horizOriginX: "horiz-origin-x",\n    horizOriginY: "horiz-origin-y",\n    imageRendering: "image-rendering",\n    letterSpacing: "letter-spacing",\n    lightingColor: "lighting-color",\n    markerEnd: "marker-end",\n    markerMid: "marker-mid",\n    markerStart: "marker-start",\n    navDown: "nav-down",\n    navDownLeft: "nav-down-left",\n    navDownRight: "nav-down-right",\n    navLeft: "nav-left",\n    navNext: "nav-next",\n    navPrev: "nav-prev",\n    navRight: "nav-right",\n    navUp: "nav-up",\n    navUpLeft: "nav-up-left",\n    navUpRight: "nav-up-right",\n    onAbort: "onabort",\n    onActivate: "onactivate",\n    onAfterPrint: "onafterprint",\n    onBeforePrint: "onbeforeprint",\n    onBegin: "onbegin",\n    onCancel: "oncancel",\n    onCanPlay: "oncanplay",\n    onCanPlayThrough: "oncanplaythrough",\n    onChange: "onchange",\n    onClick: "onclick",\n    onClose: "onclose",\n    onCopy: "oncopy",\n    onCueChange: "oncuechange",\n    onCut: "oncut",\n    onDblClick: "ondblclick",\n    onDrag: "ondrag",\n    onDragEnd: "ondragend",\n    onDragEnter: "ondragenter",\n    onDragExit: "ondragexit",\n    onDragLeave: "ondragleave",\n    onDragOver: "ondragover",\n    onDragStart: "ondragstart",\n    onDrop: "ondrop",\n    onDurationChange: "ondurationchange",\n    onEmptied: "onemptied",\n    onEnd: "onend",\n    onEnded: "onended",\n    onError: "onerror",\n    onFocus: "onfocus",\n    onFocusIn: "onfocusin",\n    onFocusOut: "onfocusout",\n    onHashChange: "onhashchange",\n    onInput: "oninput",\n    onInvalid: "oninvalid",\n    onKeyDown: "onkeydown",\n    onKeyPress: "onkeypress",\n    onKeyUp: "onkeyup",\n    onLoad: "onload",\n    onLoadedData: "onloadeddata",\n    onLoadedMetadata: "onloadedmetadata",\n    onLoadStart: "onloadstart",\n    onMessage: "onmessage",\n    onMouseDown: "onmousedown",\n    onMouseEnter: "onmouseenter",\n    onMouseLeave: "onmouseleave",\n    onMouseMove: "onmousemove",\n    onMouseOut: "onmouseout",\n    onMouseOver: "onmouseover",\n    onMouseUp: "onmouseup",\n    onMouseWheel: "onmousewheel",\n    onOffline: "onoffline",\n    onOnline: "ononline",\n    onPageHide: "onpagehide",\n    onPageShow: "onpageshow",\n    onPaste: "onpaste",\n    onPause: "onpause",\n    onPlay: "onplay",\n    onPlaying: "onplaying",\n    onPopState: "onpopstate",\n    onProgress: "onprogress",\n    onRateChange: "onratechange",\n    onRepeat: "onrepeat",\n    onReset: "onreset",\n    onResize: "onresize",\n    onScroll: "onscroll",\n    onSeeked: "onseeked",\n    onSeeking: "onseeking",\n    onSelect: "onselect",\n    onShow: "onshow",\n    onStalled: "onstalled",\n    onStorage: "onstorage",\n    onSubmit: "onsubmit",\n    onSuspend: "onsuspend",\n    onTimeUpdate: "ontimeupdate",\n    onToggle: "ontoggle",\n    onUnload: "onunload",\n    onVolumeChange: "onvolumechange",\n    onWaiting: "onwaiting",\n    onZoom: "onzoom",\n    overlinePosition: "overline-position",\n    overlineThickness: "overline-thickness",\n    paintOrder: "paint-order",\n    panose1: "panose-1",\n    pointerEvents: "pointer-events",\n    referrerPolicy: "referrerpolicy",\n    renderingIntent: "rendering-intent",\n    shapeRendering: "shape-rendering",\n    stopColor: "stop-color",\n    stopOpacity: "stop-opacity",\n    strikethroughPosition: "strikethrough-position",\n    strikethroughThickness: "strikethrough-thickness",\n    strokeDashArray: "stroke-dasharray",\n    strokeDashOffset: "stroke-dashoffset",\n    strokeLineCap: "stroke-linecap",\n    strokeLineJoin: "stroke-linejoin",\n    strokeMiterLimit: "stroke-miterlimit",\n    strokeOpacity: "stroke-opacity",\n    strokeWidth: "stroke-width",\n    tabIndex: "tabindex",\n    textAnchor: "text-anchor",\n    textDecoration: "text-decoration",\n    textRendering: "text-rendering",\n    typeOf: "typeof",\n    underlinePosition: "underline-position",\n    underlineThickness: "underline-thickness",\n    unicodeBidi: "unicode-bidi",\n    unicodeRange: "unicode-range",\n    unitsPerEm: "units-per-em",\n    vAlphabetic: "v-alphabetic",\n    vHanging: "v-hanging",\n    vIdeographic: "v-ideographic",\n    vMathematical: "v-mathematical",\n    vectorEffect: "vector-effect",\n    vertAdvY: "vert-adv-y",\n    vertOriginX: "vert-origin-x",\n    vertOriginY: "vert-origin-y",\n    wordSpacing: "word-spacing",\n    writingMode: "writing-mode",\n    xHeight: "x-height",\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: "playbackorder",\n    timelineBegin: "timelinebegin"\n  },\n  transform: tr,\n  properties: {\n    about: ln,\n    accentHeight: S,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: S,\n    amplitude: S,\n    arabicForm: null,\n    ascent: S,\n    attributeName: null,\n    attributeType: null,\n    azimuth: S,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: S,\n    by: null,\n    calcMode: null,\n    capHeight: S,\n    className: V,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: S,\n    diffuseConstant: S,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: S,\n    dominantBaseline: null,\n    download: z,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: S,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: S,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: S,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: Dn,\n    g2: Dn,\n    glyphName: Dn,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: S,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: S,\n    horizOriginX: S,\n    horizOriginY: S,\n    id: null,\n    ideographic: S,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: S,\n    k: S,\n    k1: S,\n    k2: S,\n    k3: S,\n    k4: S,\n    kernelMatrix: ln,\n    kernelUnitLength: null,\n    keyPoints: null,\n    // SEMI_COLON_SEPARATED\n    keySplines: null,\n    // SEMI_COLON_SEPARATED\n    keyTimes: null,\n    // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: S,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: S,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: S,\n    overlineThickness: S,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: S,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: V,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: S,\n    pointsAtY: S,\n    pointsAtZ: S,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: ln,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: ln,\n    rev: ln,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: ln,\n    requiredFeatures: ln,\n    requiredFonts: ln,\n    requiredFormats: ln,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: S,\n    specularExponent: S,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: S,\n    strikethroughThickness: S,\n    string: null,\n    stroke: null,\n    strokeDashArray: ln,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: S,\n    strokeOpacity: S,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: S,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: ln,\n    tabIndex: S,\n    tableValues: null,\n    target: null,\n    targetX: S,\n    targetY: S,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: ln,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: S,\n    underlineThickness: S,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: S,\n    values: null,\n    vAlphabetic: S,\n    vMathematical: S,\n    vectorEffect: null,\n    vHanging: S,\n    vIdeographic: S,\n    version: null,\n    vertAdvY: S,\n    vertOriginX: S,\n    vertOriginY: S,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: S,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n}), Ro = /^data[-\\w.:]+$/i, gt = /-[a-z]/g, _o = /[A-Z]/g;\nfunction Mo(n, e) {\n  const t = be(e);\n  let r = e, i = pn;\n  if (t in n.normal)\n    return n.property[n.normal[t]];\n  if (t.length > 4 && t.slice(0, 4) === "data" && Ro.test(e)) {\n    if (e.charAt(4) === "-") {\n      const l = e.slice(5).replace(gt, No);\n      r = "data" + l.charAt(0).toUpperCase() + l.slice(1);\n    } else {\n      const l = e.slice(4);\n      if (!gt.test(l)) {\n        let o = l.replace(_o, Bo);\n        o.charAt(0) !== "-" && (o = "-" + o), e = "data" + o;\n      }\n    }\n    i = Oe;\n  }\n  return new i(r, e);\n}\nfunction Bo(n) {\n  return "-" + n.toLowerCase();\n}\nfunction No(n) {\n  return n.charAt(1).toUpperCase();\n}\nconst yt = {\n  classId: "classID",\n  dataType: "datatype",\n  itemId: "itemID",\n  strokeDashArray: "strokeDasharray",\n  strokeDashOffset: "strokeDashoffset",\n  strokeLineCap: "strokeLinecap",\n  strokeLineJoin: "strokeLinejoin",\n  strokeMiterLimit: "strokeMiterlimit",\n  typeOf: "typeof",\n  xLinkActuate: "xlinkActuate",\n  xLinkArcRole: "xlinkArcrole",\n  xLinkHref: "xlinkHref",\n  xLinkRole: "xlinkRole",\n  xLinkShow: "xlinkShow",\n  xLinkTitle: "xlinkTitle",\n  xLinkType: "xlinkType",\n  xmlnsXLink: "xmlnsXlink"\n}, jo = Zt([er, nr, ir, lr, vo], "html"), $o = Zt([er, nr, ir, lr, zo], "svg"), or = (\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  /**\n   * @param {Test} [test]\n   * @returns {AssertAnything}\n   */\n  function(n) {\n    if (n == null)\n      return qo;\n    if (typeof n == "string")\n      return Vo(n);\n    if (typeof n == "object")\n      return Array.isArray(n) ? Ho(n) : Uo(n);\n    if (typeof n == "function")\n      return ne(n);\n    throw new Error("Expected function, string, or object as test");\n  }\n);\nfunction Ho(n) {\n  const e = [];\n  let t = -1;\n  for (; ++t < n.length; )\n    e[t] = or(n[t]);\n  return ne(r);\n  function r(...i) {\n    let l = -1;\n    for (; ++l < e.length; )\n      if (e[l].call(this, ...i))\n        return !0;\n    return !1;\n  }\n}\nfunction Uo(n) {\n  return ne(e);\n  function e(t) {\n    let r;\n    for (r in n)\n      if (t[r] !== n[r])\n        return !1;\n    return !0;\n  }\n}\nfunction Vo(n) {\n  return ne(e);\n  function e(t) {\n    return t && t.type === n;\n  }\n}\nfunction ne(n) {\n  return e;\n  function e(t, ...r) {\n    return !!(t && typeof t == "object" && "type" in t && n.call(this, t, ...r));\n  }\n}\nfunction qo() {\n  return !0;\n}\nconst Wo = !0, xt = !1, Yo = "skip", Qo = (\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  /**\n   * @param {Node} tree\n   * @param {Test} test\n   * @param {Visitor<Node>} visitor\n   * @param {boolean | null | undefined} [reverse]\n   * @returns {void}\n   */\n  function(n, e, t, r) {\n    typeof e == "function" && typeof t != "function" && (r = t, t = e, e = null);\n    const i = or(e), l = r ? -1 : 1;\n    o(n, void 0, [])();\n    function o(u, a, c) {\n      const s = u && typeof u == "object" ? u : {};\n      if (typeof s.type == "string") {\n        const g = (\n          // `hast`\n          typeof s.tagName == "string" ? s.tagName : (\n            // `xast`\n            typeof s.name == "string" ? s.name : void 0\n          )\n        );\n        Object.defineProperty(h, "name", {\n          value: "node (" + (u.type + (g ? "<" + g + ">" : "")) + ")"\n        });\n      }\n      return h;\n      function h() {\n        let g = [], d, m, y;\n        if ((!e || i(u, a, c[c.length - 1] || null)) && (g = Xo(t(u, c)), g[0] === xt))\n          return g;\n        if (u.children && g[0] !== Yo)\n          for (m = (r ? u.children.length : -1) + l, y = c.concat(u); m > -1 && m < u.children.length; ) {\n            if (d = o(u.children[m], m, y)(), d[0] === xt)\n              return d;\n            m = typeof d[1] == "number" ? d[1] : m + l;\n          }\n        return g;\n      }\n    }\n  }\n);\nfunction Xo(n) {\n  return Array.isArray(n) ? n : typeof n == "number" ? [Wo, n] : [n];\n}\nconst Ko = (\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  /**\n   * @param {Node} tree\n   * @param {Test} test\n   * @param {Visitor} visitor\n   * @param {boolean | null | undefined} [reverse]\n   * @returns {void}\n   */\n  function(n, e, t, r) {\n    typeof e == "function" && typeof t != "function" && (r = t, t = e, e = null), Qo(n, e, i, r);\n    function i(l, o) {\n      const u = o[o.length - 1];\n      return t(\n        l,\n        u ? u.children.indexOf(l) : null,\n        u\n      );\n    }\n  }\n);\nfunction Go(n) {\n  if (n.allowedElements && n.disallowedElements)\n    throw new TypeError(\n      "Only one of `allowedElements` and `disallowedElements` should be defined"\n    );\n  if (n.allowedElements || n.disallowedElements || n.allowElement)\n    return (e) => {\n      Ko(e, "element", (t, r, i) => {\n        const l = (\n          /** @type {Element|Root} */\n          i\n        );\n        let o;\n        if (n.allowedElements ? o = !n.allowedElements.includes(t.tagName) : n.disallowedElements && (o = n.disallowedElements.includes(t.tagName)), !o && n.allowElement && typeof r == "number" && (o = !n.allowElement(t, r, l)), o && typeof r == "number")\n          return n.unwrapDisallowed && t.children ? l.children.splice(r, 1, ...t.children) : l.children.splice(r, 1), r;\n      });\n    };\n}\nvar Se = {}, Zo = {\n  get exports() {\n    return Se;\n  },\n  set exports(n) {\n    Se = n;\n  }\n}, N = {};\n/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar kt;\nfunction Jo() {\n  if (kt)\n    return N;\n  kt = 1;\n  var n = Symbol.for("react.element"), e = Symbol.for("react.portal"), t = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), i = Symbol.for("react.profiler"), l = Symbol.for("react.provider"), o = Symbol.for("react.context"), u = Symbol.for("react.server_context"), a = Symbol.for("react.forward_ref"), c = Symbol.for("react.suspense"), s = Symbol.for("react.suspense_list"), h = Symbol.for("react.memo"), g = Symbol.for("react.lazy"), d = Symbol.for("react.offscreen"), m;\n  m = Symbol.for("react.module.reference");\n  function y(x) {\n    if (typeof x == "object" && x !== null) {\n      var w = x.$$typeof;\n      switch (w) {\n        case n:\n          switch (x = x.type, x) {\n            case t:\n            case i:\n            case r:\n            case c:\n            case s:\n              return x;\n            default:\n              switch (x = x && x.$$typeof, x) {\n                case u:\n                case o:\n                case a:\n                case g:\n                case h:\n                case l:\n                  return x;\n                default:\n                  return w;\n              }\n          }\n        case e:\n          return w;\n      }\n    }\n  }\n  return N.ContextConsumer = o, N.ContextProvider = l, N.Element = n, N.ForwardRef = a, N.Fragment = t, N.Lazy = g, N.Memo = h, N.Portal = e, N.Profiler = i, N.StrictMode = r, N.Suspense = c, N.SuspenseList = s, N.isAsyncMode = function() {\n    return !1;\n  }, N.isConcurrentMode = function() {\n    return !1;\n  }, N.isContextConsumer = function(x) {\n    return y(x) === o;\n  }, N.isContextProvider = function(x) {\n    return y(x) === l;\n  }, N.isElement = function(x) {\n    return typeof x == "object" && x !== null && x.$$typeof === n;\n  }, N.isForwardRef = function(x) {\n    return y(x) === a;\n  }, N.isFragment = function(x) {\n    return y(x) === t;\n  }, N.isLazy = function(x) {\n    return y(x) === g;\n  }, N.isMemo = function(x) {\n    return y(x) === h;\n  }, N.isPortal = function(x) {\n    return y(x) === e;\n  }, N.isProfiler = function(x) {\n    return y(x) === i;\n  }, N.isStrictMode = function(x) {\n    return y(x) === r;\n  }, N.isSuspense = function(x) {\n    return y(x) === c;\n  }, N.isSuspenseList = function(x) {\n    return y(x) === s;\n  }, N.isValidElementType = function(x) {\n    return typeof x == "string" || typeof x == "function" || x === t || x === i || x === r || x === c || x === s || x === d || typeof x == "object" && x !== null && (x.$$typeof === g || x.$$typeof === h || x.$$typeof === l || x.$$typeof === o || x.$$typeof === a || x.$$typeof === m || x.getModuleId !== void 0);\n  }, N.typeOf = y, N;\n}\nvar j = {};\n/**\n * @license React\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar bt;\nfunction nu() {\n  return bt || (bt = 1,  false && 0), j;\n}\n(function(n) {\n   true ? n.exports = Jo() : 0;\n})(Zo);\nconst eu = /* @__PURE__ */ (0,_index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.g)(Se);\nfunction tu(n) {\n  const e = (\n    // @ts-expect-error looks like a node.\n    n && typeof n == "object" && n.type === "text" ? (\n      // @ts-expect-error looks like a text.\n      n.value || ""\n    ) : n\n  );\n  return typeof e == "string" && e.replace(/[ \\t\\n\\f\\r]/g, "") === "";\n}\nfunction ru(n) {\n  return n.join(" ").trim();\n}\nfunction iu(n, e) {\n  const t = e || {};\n  return (n[n.length - 1] === "" ? [...n, ""] : n).join(\n    (t.padRight ? " " : "") + "," + (t.padLeft === !1 ? "" : " ")\n  ).trim();\n}\nvar Gn = {}, lu = {\n  get exports() {\n    return Gn;\n  },\n  set exports(n) {\n    Gn = n;\n  }\n}, wt = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g, ou = /\\n/g, uu = /^\\s*/, au = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/, su = /^:\\s*/, cu = /^((?:\'(?:\\\\\'|.)*?\'|"(?:\\\\"|.)*?"|\\([^)]*?\\)|[^};])+)/, pu = /^[;\\s]*/, fu = /^\\s+|\\s+$/g, hu = `\n`, St = "/", Et = "*", Tn = "", mu = "comment", du = "declaration", gu = function(n, e) {\n  if (typeof n != "string")\n    throw new TypeError("First argument must be a string");\n  if (!n)\n    return [];\n  e = e || {};\n  var t = 1, r = 1;\n  function i(m) {\n    var y = m.match(ou);\n    y && (t += y.length);\n    var x = m.lastIndexOf(hu);\n    r = ~x ? m.length - x : r + m.length;\n  }\n  function l() {\n    var m = { line: t, column: r };\n    return function(y) {\n      return y.position = new o(m), c(), y;\n    };\n  }\n  function o(m) {\n    this.start = m, this.end = { line: t, column: r }, this.source = e.source;\n  }\n  o.prototype.content = n;\n  function u(m) {\n    var y = new Error(\n      e.source + ":" + t + ":" + r + ": " + m\n    );\n    if (y.reason = m, y.filename = e.source, y.line = t, y.column = r, y.source = n, !e.silent)\n      throw y;\n  }\n  function a(m) {\n    var y = m.exec(n);\n    if (y) {\n      var x = y[0];\n      return i(x), n = n.slice(x.length), y;\n    }\n  }\n  function c() {\n    a(uu);\n  }\n  function s(m) {\n    var y;\n    for (m = m || []; y = h(); )\n      y !== !1 && m.push(y);\n    return m;\n  }\n  function h() {\n    var m = l();\n    if (!(St != n.charAt(0) || Et != n.charAt(1))) {\n      for (var y = 2; Tn != n.charAt(y) && (Et != n.charAt(y) || St != n.charAt(y + 1)); )\n        ++y;\n      if (y += 2, Tn === n.charAt(y - 1))\n        return u("End of comment missing");\n      var x = n.slice(2, y - 2);\n      return r += 2, i(x), n = n.slice(y), r += 2, m({\n        type: mu,\n        comment: x\n      });\n    }\n  }\n  function g() {\n    var m = l(), y = a(au);\n    if (y) {\n      if (h(), !a(su))\n        return u("property missing \':\'");\n      var x = a(cu), w = m({\n        type: du,\n        property: Ct(y[0].replace(wt, Tn)),\n        value: x ? Ct(x[0].replace(wt, Tn)) : Tn\n      });\n      return a(pu), w;\n    }\n  }\n  function d() {\n    var m = [];\n    s(m);\n    for (var y; y = g(); )\n      y !== !1 && (m.push(y), s(m));\n    return m;\n  }\n  return c(), d();\n};\nfunction Ct(n) {\n  return n ? n.replace(fu, Tn) : Tn;\n}\nvar yu = gu;\nfunction ur(n, e) {\n  var t = null;\n  if (!n || typeof n != "string")\n    return t;\n  for (var r, i = yu(n), l = typeof e == "function", o, u, a = 0, c = i.length; a < c; a++)\n    r = i[a], o = r.property, u = r.value, l ? e(o, u, r) : u && (t || (t = {}), t[o] = u);\n  return t;\n}\nlu.exports = ur;\nGn.default = ur;\nconst xu = Gn, Ee = {}.hasOwnProperty, ku = /* @__PURE__ */ new Set(["table", "thead", "tbody", "tfoot", "tr"]);\nfunction ar(n, e) {\n  const t = [];\n  let r = -1, i;\n  for (; ++r < e.children.length; )\n    i = e.children[r], i.type === "element" ? t.push(bu(n, i, r, e)) : i.type === "text" ? (e.type !== "element" || !ku.has(e.tagName) || !tu(i)) && t.push(i.value) : i.type === "raw" && !n.options.skipHtml && t.push(i.value);\n  return t;\n}\nfunction bu(n, e, t, r) {\n  const i = n.options, l = i.transformLinkUri === void 0 ? gr : i.transformLinkUri, o = n.schema, u = e.tagName, a = {};\n  let c = o, s;\n  if (o.space === "html" && u === "svg" && (c = $o, n.schema = c), e.properties)\n    for (s in e.properties)\n      Ee.call(e.properties, s) && Su(a, s, e.properties[s], n);\n  (u === "ol" || u === "ul") && n.listDepth++;\n  const h = ar(n, e);\n  (u === "ol" || u === "ul") && n.listDepth--, n.schema = o;\n  const g = e.position || {\n    start: { line: null, column: null, offset: null },\n    end: { line: null, column: null, offset: null }\n  }, d = i.components && Ee.call(i.components, u) ? i.components[u] : u, m = typeof d == "string" || d === react__WEBPACK_IMPORTED_MODULE_0__.Fragment;\n  if (!eu.isValidElementType(d))\n    throw new TypeError(\n      `Component for name \\`${u}\\` not defined or is not renderable`\n    );\n  if (a.key = [\n    u,\n    g.start.line,\n    g.start.column,\n    t\n  ].join("-"), u === "a" && i.linkTarget && (a.target = typeof i.linkTarget == "function" ? i.linkTarget(\n    String(a.href || ""),\n    e.children,\n    typeof a.title == "string" ? a.title : null\n  ) : i.linkTarget), u === "a" && l && (a.href = l(\n    String(a.href || ""),\n    e.children,\n    typeof a.title == "string" ? a.title : null\n  )), !m && u === "code" && r.type === "element" && r.tagName !== "pre" && (a.inline = !0), !m && (u === "h1" || u === "h2" || u === "h3" || u === "h4" || u === "h5" || u === "h6") && (a.level = Number.parseInt(u.charAt(1), 10)), u === "img" && i.transformImageUri && (a.src = i.transformImageUri(\n    String(a.src || ""),\n    String(a.alt || ""),\n    typeof a.title == "string" ? a.title : null\n  )), !m && u === "li" && r.type === "element") {\n    const y = wu(e);\n    a.checked = y && y.properties ? !!y.properties.checked : null, a.index = fe(r, e), a.ordered = r.tagName === "ol";\n  }\n  return !m && (u === "ol" || u === "ul") && (a.ordered = u === "ol", a.depth = n.listDepth), (u === "td" || u === "th") && (a.align && (a.style || (a.style = {}), a.style.textAlign = a.align, delete a.align), m || (a.isHeader = u === "th")), !m && u === "tr" && r.type === "element" && (a.isHeader = r.tagName === "thead"), i.sourcePos && (a["data-sourcepos"] = Au(g)), !m && i.rawSourcePos && (a.sourcePosition = e.position), !m && i.includeElementIndex && (a.index = fe(r, e), a.siblingCount = fe(r)), m || (a.node = e), h.length > 0 ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(d, a, h) : react__WEBPACK_IMPORTED_MODULE_0__.createElement(d, a);\n}\nfunction wu(n) {\n  let e = -1;\n  for (; ++e < n.children.length; ) {\n    const t = n.children[e];\n    if (t.type === "element" && t.tagName === "input")\n      return t;\n  }\n  return null;\n}\nfunction fe(n, e) {\n  let t = -1, r = 0;\n  for (; ++t < n.children.length && n.children[t] !== e; )\n    n.children[t].type === "element" && r++;\n  return r;\n}\nfunction Su(n, e, t, r) {\n  const i = Mo(r.schema, e);\n  let l = t;\n  l == null || l !== l || (Array.isArray(l) && (l = i.commaSeparated ? iu(l) : ru(l)), i.property === "style" && typeof l == "string" && (l = Eu(l)), i.space && i.property ? n[Ee.call(yt, i.property) ? yt[i.property] : i.property] = l : i.attribute && (n[i.attribute] = l));\n}\nfunction Eu(n) {\n  const e = {};\n  try {\n    xu(n, t);\n  } catch {\n  }\n  return e;\n  function t(r, i) {\n    const l = r.slice(0, 4) === "-ms-" ? `ms-${r.slice(4)}` : r;\n    e[l.replace(/-([a-z])/g, Cu)] = i;\n  }\n}\nfunction Cu(n, e) {\n  return e.toUpperCase();\n}\nfunction Au(n) {\n  return [\n    n.start.line,\n    ":",\n    n.start.column,\n    "-",\n    n.end.line,\n    ":",\n    n.end.column\n  ].map(String).join("");\n}\nconst At = {}.hasOwnProperty, Pu = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md", Wn = {\n  plugins: { to: "remarkPlugins", id: "change-plugins-to-remarkplugins" },\n  renderers: { to: "components", id: "change-renderers-to-components" },\n  astPlugins: { id: "remove-buggy-html-in-markdown-parser" },\n  allowDangerousHtml: { id: "remove-buggy-html-in-markdown-parser" },\n  escapeHtml: { id: "remove-buggy-html-in-markdown-parser" },\n  source: { to: "children", id: "change-source-to-children" },\n  allowNode: {\n    to: "allowElement",\n    id: "replace-allownode-allowedtypes-and-disallowedtypes"\n  },\n  allowedTypes: {\n    to: "allowedElements",\n    id: "replace-allownode-allowedtypes-and-disallowedtypes"\n  },\n  disallowedTypes: {\n    to: "disallowedElements",\n    id: "replace-allownode-allowedtypes-and-disallowedtypes"\n  },\n  includeNodeIndex: {\n    to: "includeElementIndex",\n    id: "change-includenodeindex-to-includeelementindex"\n  }\n};\nfunction Fu(n) {\n  for (const l in Wn)\n    if (At.call(Wn, l) && At.call(n, l)) {\n      const o = Wn[l];\n      console.warn(\n        `[react-markdown] Warning: please ${o.to ? `use \\`${o.to}\\` instead of` : "remove"} \\`${l}\\` (see <${Pu}#${o.id}> for more info)`\n      ), delete Wn[l];\n    }\n  const e = Dr().use(_l).use(n.remarkPlugins || []).use(To, {\n    ...n.remarkRehypeOptions,\n    allowDangerousHtml: !0\n  }).use(n.rehypePlugins || []).use(Go, n), t = new Ft();\n  typeof n.children == "string" ? t.value = n.children : n.children !== void 0 && n.children !== null && console.warn(\n    `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${n.children}\\`)`\n  );\n  const r = e.runSync(e.parse(t), t);\n  if (r.type !== "root")\n    throw new TypeError("Expected a `root` node");\n  let i = react__WEBPACK_IMPORTED_MODULE_0__.createElement(\n    react__WEBPACK_IMPORTED_MODULE_0__.Fragment,\n    {},\n    ar({ options: n, schema: jo, listDepth: 0 }, r)\n  );\n  return n.className && (i = react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { className: n.className }, i)), i;\n}\nFu.propTypes = {\n  // Core options:\n  children: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string,\n  // Layout options:\n  className: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string,\n  // Filter options:\n  allowElement: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func,\n  allowedElements: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(_index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string),\n  disallowedElements: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(_index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string),\n  unwrapDisallowed: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n  // Plugin options:\n  remarkPlugins: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(\n    _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.oneOfType([\n      _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.object,\n      _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func,\n      _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(\n        _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.oneOfType([\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.object,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(\n    _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.oneOfType([\n      _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.object,\n      _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func,\n      _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(\n        _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.oneOfType([\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.object,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func,\n          _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n  rawSourcePos: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n  skipHtml: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n  includeElementIndex: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool,\n  transformLinkUri: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.oneOfType([_index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func, _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.bool]),\n  linkTarget: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.oneOfType([_index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func, _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.string]),\n  transformImageUri: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.func,\n  components: _index_a2491bf3_js__WEBPACK_IMPORTED_MODULE_1__.p.object\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///995\n')}}]);