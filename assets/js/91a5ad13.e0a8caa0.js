"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[4559],{6098:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\n/* harmony import */ var _site_src_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9441);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'AtomSelectorConfig\',title:\'AtomSelectorConfig\'};var contentTitle=undefined;var metadata={"unversionedId":"api/types/AtomSelectorConfig","id":"api/types/AtomSelectorConfig","title":"AtomSelectorConfig","description":"Everywhere Zedux accepts an AtomSelector, it also accepts an AtomSelectorConfig object. This object has a required selector field and a few optional fields used to configure the selector.","source":"@site/docs/api/types/AtomSelectorConfig.mdx","sourceDirName":"api/types","slug":"/api/types/AtomSelectorConfig","permalink":"/zedux/docs/api/types/AtomSelectorConfig","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/api/types/AtomSelectorConfig.mdx","tags":[],"version":"current","frontMatter":{"id":"AtomSelectorConfig","title":"AtomSelectorConfig"},"sidebar":"react","previous":{"title":"AtomSelector","permalink":"/zedux/docs/api/types/AtomSelector"},"next":{"title":"DependentCallback","permalink":"/zedux/docs/api/types/DependentCallback"}};var assets={};var toc=[{value:\'Examples\',id:\'examples\',level:2},{value:\'Definition\',id:\'definition\',level:2},{value:\'See Also\',id:\'see-also\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Everywhere Zedux accepts an AtomSelector, it also accepts an AtomSelectorConfig object. This object has a required ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"selector")," field and a few optional fields used to configure the selector."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It is recommended to set the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"name")," field for optimal debugging when viewing the atom graph since Zedux can\'t derive a useful name from AtomSelectorConfig objects like it can with named AtomSelector functions. You can also make the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"selector")," field a named function instead of using an anonymous function."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"examples"},"Examples"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=AtomSelector/example resultVar=CountBy5","live":true,"ecosystemId":"AtomSelector/example","resultVar":"CountBy5"},"const counterAtom = atom(\'counter\', 0)\\n\\nfunction CountBy5() {\\n  const { setState } = useAtomInstance(counterAtom)\\n  const counter = useAtomSelector({\\n    name: \'getCounter\',\\n    resultsComparator: newCount => newCount % 5,\\n    selector: ({ get }) => get(counterAtom),\\n  })\\n\\n  return (\\n    <>\\n      <div>Value: {counter}</div>\\n      <button onClick={() => setState(state => state + 1)}>\\n        Increment (click me 5 times)\\n      </button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",{parentName:"admonition"},"AtomSelectors sometimes have config that\'s inherent to how they operate. Rather than exporting the selector function and requiring consumers to specify the config, export the config object itself (tightly coupling the selector to its mandatory config):")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// instead of:\\nexport const getUserSnapshot = ({ get }: AtomGetters) => get(currentUserAtom)\\n...\\nselect({\\n  resultsComparator: (a, b) => a.id === b.id,\\n  selector: getUserSnapshot,\\n})\\n\\n// do:\\nexport const getUserSnapshot = {\\n  name: \'getUserSnapshot\', // recommended if using an anonymous function\\n  resultsComparator: (a, b) => a.id === b.id,\\n  selector: ({ get }) => get(currentUserAtom)\\n}\\n...\\nselect(getUserSnapshot)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Miscellaneous:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// Inline:\\nuseAtomSelector({\\n  argsComparator: (newVal, oldVal) => Math.abs(newVal - oldVal) > 5,\\n  name: \'timesTwo\',\\n  selector: ({ get }: AtomGetters) => get(myAtom) * 2,\\n})\\n\\n// Extracted:\\nconst timesTwo = {\\n  argsComparator: (newVal, oldVal) => Math.abs(newVal - oldVal) > 5,\\n  name: \'timesTwo\',\\n  selector: ({ get }) => get(myAtom) * 2,\\n}\\nuseAtomSelector(timesTwo)\\n\\n// With arguments:\\nconst timesTwoPlusWhatever = {\\n  argsComparator: (newVal, oldVal) => Math.abs(newVal - oldVal) > 5,\\n  name: \'timesTwo\',\\n  selector: ({ get }, whatever: number) => get(myAtom) * 2 + whatever,\\n}\\nuseAtomSelector(timesTwoPlusWhatever, 3)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"definition"},"Definition"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Tabs */ .mQ,{mdxType:"Tabs"},(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab1 */ .x_)("atomSelectorConfig = { argsComparator?, name?, resultsComparator?, selector }"),(0,_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .tab2 */ .s2)("interface AtomSelectorConfig<T = any, Args extends any[] = []> {\\n  argsComparator?: (newArgs: Args, oldArgs: Args) => boolean\\n  name?: string\\n  resultsComparator?: (newResult: T, oldResult: T) => boolean\\n  selector: AtomSelector<T, Args>\\n}")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Legend */ .De,{mdxType:"Legend"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"argsComparator",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("b",null,"Important!")," This config option is only respected in",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"../hooks/useAtomSelector",mdxType:"Link"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"useAtomSelector()")),". It is ignored in all other AtomSelector-related APIs. This is because selectors are given completely different cache entries when different args are passed. However ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"useAtomSelector()")," does some special optimizations. Regardless, because of this limitation, this config option is rarely useful."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Optional. A function. Signature:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__.Ts,{mdxType:"Ts"},"(newArgs, oldArgs) => areEqual"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Accepts two arrays - the list of arguments most recently passed and the list of arguments passed previously."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Return true if ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"useAtomSelector()")," should consider both lists the \\"same\\", preventing the selector from reevaluating. Return false to force the selector to reevaluate."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This function is only called after the selector has already run once (otherwise there wouldn\'t be any ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"oldArgs"),").")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"name",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Optional. A string."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"It is highly recommended to pass this when passing an anonymous function as the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"selector"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux uses this name to create the node\'s key in the graph. For your debugging pleasure, always try to make sure selectors are named functions or specify this config option.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"resultsComparator",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Optional. A function. Signature:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__.Ts,{mdxType:"Ts"},"(newResult, oldResult) => areEqual"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Accepts the previously-cached result of running this selector and the new result that Zedux is about to cache."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Return true if Zedux should consider both results equal, preventing the cache from updating and all dependents from reevaluating. Return false to force all dependents to reevaluate."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This function is only called after the selector has already run once (otherwise there wouldn\'t be any ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"oldResult"),").")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Item */ .ck,{name:"selector",mdxType:"Item"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Required. The actual ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(_site_src_all__WEBPACK_IMPORTED_MODULE_2__/* .Link */ .rU,{to:"AtomSelector",mdxType:"Link"},"AtomSelector")," function you\'re configuring."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"If passing an anonymous function, it\'s recommended to also specify the",\' \',(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",null,"name")," property."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"see-also"},"See Also"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"../../walkthrough/selectors"},"The Selectors walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"li","href":"AtomSelector"},"The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"AtomSelector")," type"))));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6098\n')}}]);