"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[2677],{2716:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'overview\',title:\'Overview\'};var contentTitle=undefined;var metadata={"unversionedId":"about/overview","id":"about/overview","title":"Overview","description":"Buckle in for a quick description and contrived example of every key feature of Zedux. The walkthrough will walk through this list in much more detail.","source":"@site/docs/about/overview.mdx","sourceDirName":"about","slug":"/about/overview","permalink":"/zedux/docs/about/overview","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/about/overview.mdx","tags":[],"version":"current","frontMatter":{"id":"overview","title":"Overview"},"sidebar":"react","previous":{"title":"Introducing Zedux","permalink":"/zedux/docs/about/introduction"},"next":{"title":"Recoil Comparison","permalink":"/zedux/docs/about/recoil-comparison"}};var assets={};var toc=[{value:\'Atoms\',id:\'atoms\',level:2},{value:\'Hooks\',id:\'hooks\',level:3},{value:\'Injectors\',id:\'injectors\',level:3},{value:\'EcosystemProvider\',id:\'ecosystemprovider\',level:3},{value:\'Ions\',id:\'ions\',level:3},{value:\'Flags\',id:\'flags\',level:3},{value:\'Exports\',id:\'exports\',level:3},{value:\'Dependency Injection\',id:\'dependency-injection\',level:2},{value:\'Composition\',id:\'composition\',level:3},{value:\'Overrides\',id:\'overrides\',level:3},{value:\'Stores\',id:\'stores\',level:2},{value:\'Redux-Style State\',id:\'redux-style-state\',level:3},{value:\'State Machines\',id:\'state-machines\',level:3},{value:\'Action Streams\',id:\'action-streams\',level:3},{value:\'Caching\',id:\'caching\',level:2},{value:\'Params\',id:\'params\',level:3},{value:\'Destruction\',id:\'destruction\',level:3},{value:\'Atom Instances\',id:\'atom-instances\',level:3},{value:\'Invalidation\',id:\'invalidation\',level:3},{value:\'Side Effects\',id:\'side-effects\',level:2},{value:\'<code>injectEffect</code>\',id:\'injecteffect\',level:3},{value:\'Streams\',id:\'streams\',level:3},{value:\'Suspense\',id:\'suspense\',level:3},{value:\'Advanced\',id:\'advanced\',level:2},{value:\'Hydration\',id:\'hydration\',level:3},{value:\'Preloading\',id:\'preloading\',level:3},{value:\'Dev Tools\',id:\'dev-tools\',level:2},{value:\'<code>injectWhy()</code>\',id:\'injectwhy\',level:3}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Buckle in for a quick description and contrived example of every key feature of Zedux. The ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/quick-start"},"walkthrough")," will walk through this list in much more detail."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"atoms"},"Atoms"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms are the basic state management unit in Zedux."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { atom } from \'@zedux/react\'\\n\\nconst myFirstAtom = atom(\'myFirst\', \'Hello, world!\')\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/quick-start#meet-the-atoms"},"the quick start")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/factories/atom"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"atom()")," factory"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"hooks"},"Hooks"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux exports various hooks for accessing and updating atom values."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { useAtomInstance, useAtomState } from \'@zedux/react\'\\n\\nfunction MyComponent() {\\n  const [state] = useAtomState(myFirstAtom)\\n\\n  return <div>A message from the universe: {state}</div>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/quick-start"},"the quick start"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injectors"},"Injectors"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Injectors are like hooks for atoms."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=overview/injectors resultVar=Seconds","live":true,"ecosystemId":"overview/injectors","resultVar":"Seconds"},"const secondsAtom = atom(\'seconds\', () => {\\n  const store = injectStore(0)\\n\\n  injectEffect(() => {\\n    const intervalId = setInterval(() => store.setState(val => val + 1), 1000)\\n\\n    return () => clearInterval(intervalId)\\n  }, [])\\n\\n  return store\\n})\\n\\nfunction Seconds() {\\n  const state = useAtomValue(secondsAtom)\\n\\n  return <div>{state}</div>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/quick-start"},"the quick start"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ecosystemprovider"},"EcosystemProvider"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An optional ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"<EcosystemProvider />")," can be rendered at the top level of your app. All atom instances created in any children will be scoped to the EcosystemProvider."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { EcosystemProvider } from \'@zedux/react\'\\n\\nfunction App() {\\n  return (\\n    <EcosystemProvider>\\n      <Routes />\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An ecosystem can also be created and used completely outside of React."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"import { createEcosystem } from \'@zedux/react\'\\n\\nconst rootEcosystem = createEcosystem({ id: \'root\' })\\n\\nconst myAtomInstance = rootEcosystem.getInstance(myAtom, [\'a param\'])\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/ecosystems"},"the Ecosystems walkthrough"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/components/EcosystemProvider"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"<EcosystemProvider />")),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"Ecosystem")," class"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"ions"},"Ions"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Selector-type operations can be done with special atoms called ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ion"},"ions"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { atom, ion } from \'@zedux/react\'\\n\\nconst bigListAtom = atom(\'bigList\', Array(1000).fill(\'bigness\'))\\n\\n// highlight-next-line\\nconst smallListAtom = ion(\'smallList\', ({ get }) => {\\n  const bigList = get(bigListAtom)\\n\\n  return bigList.slice(0, 10)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/selectors"},"the Selectors walkthrough")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ion"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"Ion")," class"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"flags"},"Flags"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be given flags. One major use case for these is to raise warnings if a flagged atom is used in invalid environments."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const axiosAtom = atom(\'axios\', axios, {\\n  flags: [\'async\'],\\n  readonly: true,\\n})\\n\\nfunction SomeComponent() {\\n  const axios = axiosAtom.useValue()\\n  ...\\n}\\n\\nfunction TestApp() {\\n  return (\\n    <EcosystemProvider flags={[/* no flags */]}>\\n      <SomeComponent />\\n    </EcosystemProvider>\\n  )\\n}\\n// logs warning: Unsafe atom \\"axios\\" encountered with flag \\"async\\"\\n\\nfunction DevApp() {\\n  return (\\n    <EcosystemProvider flags={[\'async\']}>\\n      <SomeComponent />\\n    </EcosystemProvider>\\n  )\\n}\\n// no warnings\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"/not-done"},"the testing guide")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#flags"},"Ecosystem\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},".flags")," property"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"exports"},"Exports"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can expose variables to consumers."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=overview/exports resultVar=Counter","live":true,"ecosystemId":"overview/exports","resultVar":"Counter"},"const counterAtom = ion(\'counter\', () => {\\n  const store = injectStore(0)\\n\\n  return api(store).setExports({\\n    decrement: () => store.setState(state => state - 1),\\n    increment: () => store.setState(state => state + 1),\\n  })\\n})\\n\\nfunction Counter() {\\n  const counter = useAtomValue(counterAtom)\\n  const { decrement, increment } = useAtomInstance(counterAtom).exports\\n\\n  return (\\n    <>\\n      <div>Counter State: {counter}</div>\\n      <button onClick={increment}>Increment</button>\\n      <button onClick={decrement}>Decrement</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/atom-apis"},"the Atom APIs walkthrough")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomApi"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"AtomApi")," class"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"dependency-injection"},"Dependency Injection"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux atoms create a perfect environment for Inversion of Control."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"composition"},"Composition"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be composed of other atoms by \\"injecting\\" them."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const bigListAtom = atom(\'bigList\', Array(1000).fill(\'fluff\'))\\n\\nconst smallListAtom = atom(\'smallList\', () => {\\n  const [bigList] = injectAtomState(bigListAtom)\\n\\n  return bigList.slice(0, 10)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/quick-start#dependency-injection"},"the quick start"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"overrides"},"Overrides"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Injected atoms can be overridden."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const fetchTodosAtom = atom(\'fetchTodos\', () => {\\n  // a theoretical custom injector for simplicity:\\n  return injectFetch(\'/todos\', [])\\n})\\n\\nfunction Todos() {\\n  const [todos] = useAtomState(fetchTodosAtom)\\n\\n  return <div>The todos: {todos.join(\', \')}</div>\\n}\\n\\n// In some test:\\n// highlight-next-line\\nconst fetchTodosTestAtom = fetchTodosAtom.override([\'Todo 1\', \'Todo 2\'])\\n\\nfunction TestApp() {\\n  return (\\n    // highlight-next-line\\n    <EcosystemProvider overrides={[fetchTodosTestAtom]}>\\n      <Todos />\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/overrides"},"the Overrides walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"stores"},"Stores"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An atom\'s value can be a store."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=overview/stores resultVar=BigComponent","live":true,"ecosystemId":"overview/stores","resultVar":"BigComponent"},"const goBig = actionFactory(\'goBig\')\\n\\nconst bigAtom = atom(\'big\', () => {\\n  const store = injectStore()\\n\\n  injectEffect(() => {\\n    const subscription = store.subscribe({\\n      effects: ({ action }) => {\\n        if (action?.type === goBig.type) alert(\'go home\')\\n      },\\n    })\\n\\n    return () => subscription.unsubscribe()\\n  }, [])\\n\\n  return store\\n})\\n\\nfunction BigComponent() {\\n  const { dispatch } = useAtomInstance(bigAtom)\\n\\n  return <button onClick={() => dispatch(goBig())}>Go Big</button>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/stores"},"the stores walkthrough")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Store"},"the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"Store")," class"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"redux-style-state"},"Redux-Style State"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Stores can be configured with Redux-style reducers."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { actionFactory, createReducer, createStore } from \'@zedux/react\'\\n\\nconst addTodo = actionFactory<string>(\'addTodo\')\\n\\nconst todosReducer = createReducer<string[]>([]).reduce(\\n  addTodo,\\n  (state, todo) => [...state, todo]\\n)\\n\\nconst todosStore = createStore({ todos: todosReducer })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/stores"},"the stores walkthrough"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/factories/actionFactory"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"actionFactory()")),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/factories/createReducer"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"createReducer()")),", and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/factories/createStore"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"createStore()")),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"state-machines"},"State Machines"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Stores can be configured with simple state machines."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { actionFactory, createMachine, createStore, states } from \'@zedux/react\'\\n\\nconst timer = actionFactory(\'timer\')\\nconst [green, yellow, red] = states(\'green\', \'yellow\', \'red\')\\n\\nconst stopLightMachine = createMachine(\\n  green.on(timer, yellow), // \\"green\\" will be the initial state\\n  yellow.on(timer, red),\\n  red.on(timer, green)\\n)\\n\\n// machines are just pure reducers\\nconst stopLightStore = createStore(stopLightMachine)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/state-machines"},"the state machines walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"action-streams"},"Action Streams"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"One of the superpowers of Zedux stores is that they can be simultaneously consumed as streams of state ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"and")," streams of actions."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const store = createStore(null, \'initial state\')\\n\\nstore.subscribe(myCallback) // stream of state\\nstore.actionStream().subscribe(myCallback) // stream of dispatched actions\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/side-effects"},"the side effects walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"caching"},"Caching"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When atoms are used, atom instances are created. These instances are like data caches. The cache can be controlled in many ways."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"params"},"Params"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can take parameters. Different params cause new atom instances to be created."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const totallyUsefulAtom = atom(\\n  \'totallyUseful\',\\n  (usefulness: number) => usefulness * 10\\n)\\n\\nfunction MyComponent() {\\n  const [totallyUsefulNumber] = useAtomState(totallyUsefulAtom, [4.2])\\n  const [moreUsefulNumber] = useAtomState(totallyUsefulAtom, [0.314159])\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/quick-start#params"},"the quick start")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/atom-instances"},"the atom instances walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"destruction"},"Destruction"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atom instances can be destroyed with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ttl"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const deathStarAtom = atom(\'deathStar\', \'All the Sith\', {\\n  // destroy deathStarAtom instances 10 seconds after their ref count reaches 0\\n  ttl: 10000,\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"/not-done"},"the destruction walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"atom-instances"},"Atom Instances"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atom instances can be accessed directly."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const randomNumAtom = atom(\'randomNum\', (max: number) =>\\n  Math.floor(Math.random() * max)\\n)\\n\\nfunction RandomNumber() {\\n  const instance = useAtomInstance(randomNumAtom, [100])\\n  const state = useAtomValue(instance) // don\'t have to re-pass params here\\n\\n  return (\\n    {/* instances can be provided over React context */}\\n    <AtomInstanceProvider instance={instance}>\\n      <SomeChild />\\n    </AtomInstanceProvider>\\n  )\\n}\\n\\nfunction SomeChild() {\\n  const instance = useAtomConsumer(randomNumAtom) // don\'t need to pass params\\n  ...\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/atom-instances"},"atom instances")," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/react-context"},"React context")," walkthroughs."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"invalidation"},"Invalidation"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can invalidate their own state using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"injectInvalidate()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { injectInvalidate } from \'@zedux/react\'\\n\\nconst asyncAtom = atom(\'async\', () => {\\n  // can be called directly in a callback or effect to trigger a reevaluation\\n  const invalidate = injectInvalidate()\\n\\n  // in some callback or effect:\\n  invalidate()\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Consumers can invalidate an atom\'s state using ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"instance.invalidate()"),":"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"function App() {\\n  const myInstance = myAtom.useInstance()\\n\\n  return <button onClick={() => myInstance.invalidate()}>Invalidate</button>\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/injectors/injectInvalidate"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectInvalidate()"))," and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"/not-done"},"the resets walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"side-effects"},"Side Effects"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms are designed for executing and sharing promises and observables"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injecteffect"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectEffect")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"An injector that works just like React\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"useEffect"),", but in atoms"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const currentUserDataAtom = ion(\'userData\', ({ get }) => {\\n  const userId = get(currentUser).id\\n  const store = injectStore()\\n\\n  injectEffect(() => {\\n    fetch(`/api/user/${userId}`)\\n      .then(data => data.json())\\n      .then(data => store.setState(data))\\n  }, [userId])\\n\\n  return store\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"streams"},"Streams"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms work well with streams, e.g. websockets and RxJS observables."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"const socketAtom = atom(\'socket\', () => io(\'ws://localhost:8080\'))\\n\\nconst usersStreamAtom = ion(\'usersStream\', ({ get }) => {\\n  const socket = get(socketAtom)\\n\\n  const users$ = defer(() => of(socket.emit(\'start-users-stream\'))).pipe(\\n    mergeMap(() => fromEvent(socket, \'user\')),\\n    finalize(() => socket.emit(\'end-users-stream\'))\\n  )\\n\\n  return users$\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/side-effects"},"the side effects walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"suspense"},"Suspense"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be used as suspending resources in React concurrent mode."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { api, atom } from \'@zedux/react\'\\n\\nconst suspendingAtom = atom(\'suspending\', () => {\\n  return api(someVal).setPromise(somePromise)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/suspense"},"the suspense walkthrough")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"advanced"},"Advanced"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"hydration"},"Hydration"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Hydrating atom state can be done with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.hydrate()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { createEcosystem } from \'@zedux/react\'\\n\\nconst rootEcosystem = createEcosystem({\\n  id: \'root\',\\n  onReady: ecosystem => {\\n    ecosystem.hydrate(serverSnapshot)\\n  },\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../advanced/persistence"},"the persistence walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"preloading"},"Preloading"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Atoms can be preloaded to kickstart hydration, alleviate render waterfalls, and bootstrap data from outside Zedux."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { EcosystemProvider, useEcosystem } from \'@zedux/react\'\\n\\nfunction App() {\\n  return (\\n    <EcosystemProvider\\n      onReady={ecosystem => {\\n        ecosystem.getInstance(authAtom)\\n        ecosystem.getInstance(initialDataAtom)\\n\\n        const storage = ecosystem.get(localStorageAtom)\\n        ecosystem.hydrate(storage.persistedAtomState)\\n      }}\\n    >\\n      <Routes />\\n    </EcosystemProvider>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../walkthrough/ecosystems"},"the ecosystems walkthrough"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"dev-tools"},"Dev Tools"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux ships with several Dev X features out of the box. And more can be installed."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"injectwhy"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"h3"},"injectWhy()")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Why Did This UpDaTe??!!"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx"},"import { injectStore, injectWhy, ion } from \'@zedux/react\'\\n\\nconst crazyAtom = ion(\'crazy\', ({ get, select }) => {\\n  // say we have an atom that injects several state sources\\n  const store = injectStore()\\n  const other = get(otherAtom)\\n  const derivation = select(someSelector)\\n\\n  // with such atoms it can be difficult to tell why state keeps updating\\n  // injectWhy FTW!\\n  // highlight-next-line\\n  const lameExcuse = injectWhy()\\n  console.log(\'why???\', lameExcuse)\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/injectors/injectWhy"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectWhy()")),"."));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2716\n')}}]);