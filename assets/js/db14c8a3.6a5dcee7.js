"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[9271],{7282:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var a=n(3117),s=n(102),r=(n(7294),n(3905)),o=["components"],i={id:"AtomGetters",title:"AtomGetters"},c=void 0,l={unversionedId:"api/types/AtomGetters",id:"api/types/AtomGetters",isDocsHomePage:!1,title:"AtomGetters",description:"The object Zedux passes as the first parameter to ion getters and AtomSelectors.",source:"@site/docs/api/types/AtomGetters.mdx",sourceDirName:"api/types",slug:"/api/types/AtomGetters",permalink:"/zedux/docs/api/types/AtomGetters",editUrl:"https://github.com/Omnistac/zedux/tree/master/docs/api/types/AtomGetters.mdx",tags:[],version:"current",frontMatter:{id:"AtomGetters",title:"AtomGetters"},sidebar:"react",previous:{title:"AtomConfig",permalink:"/zedux/docs/api/types/AtomConfig"},next:{title:"AtomInstanceTtl",permalink:"/zedux/docs/api/types/AtomInstanceTtl"}},p=[{value:"Definition",id:"definition",children:[{value:"<code>ecosystem</code>",id:"ecosystem",children:[],level:3},{value:"<code>get</code>",id:"get",children:[],level:3},{value:"<code>getInstance</code>",id:"getinstance",children:[],level:3},{value:"<code>select</code>",id:"select",children:[],level:3}],level:2}],d={toc:p};function m(e){var t=e.components,n=(0,s.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The object Zedux passes as the first parameter to ",(0,r.kt)("a",{parentName:"p",href:"../factories/ion#get"},"ion getters")," and ",(0,r.kt)("a",{parentName:"p",href:"AtomSelector"},"AtomSelectors"),"."),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface AtomGetters {\n  ecosystem: Ecosystem\n\n  get<A extends Atom<any, []>>(atom: A): AtomStateType<A>\n\n  get<A extends Atom<any, [...any]>>(\n    atom: A,\n    params: AtomParamsType<A>\n  ): AtomStateType<A>\n\n  get<I extends AtomInstance>(instance: I): AtomInstanceStateType<I>\n\n  getInstance<A extends Atom<any, []>>(atom: A): AtomInstanceType<A>\n\n  getInstance<A extends Atom<any, any, any>>(\n    atom: A,\n    params: AtomParamsType<A>\n  ): AtomInstanceType<A>\n\n  getInstance<I extends AtomInstance>(instance: I): I\n\n  select<T, Args extends any[]>(\n    atomSelector: AtomSelectorOrConfig<T, Args>,\n    ...args: Args\n  ): T\n\n  select<A extends AtomBase<any, [], any>, D>(\n    atom: A,\n    selector: Selector<AtomStateType<A>, D>\n  ): D\n\n  select<A extends AtomBase<any, [...any], any>, D>(\n    atom: A,\n    params: AtomParamsType<A>\n  ): D\n\n  select<AI extends AtomInstanceBase<any, [], any>, D>(instance: AI): D\n}\n")),(0,r.kt)("h3",{id:"ecosystem"},(0,r.kt)("inlineCode",{parentName:"h3"},"ecosystem")),(0,r.kt)("p",null,"A reference to the ",(0,r.kt)("a",{parentName:"p",href:"../classes/Ecosystem"},"ecosystem")," this ion instance was created in."),(0,r.kt)("h3",{id:"get"},(0,r.kt)("inlineCode",{parentName:"h3"},"get")),(0,r.kt)("p",null,"A function that returns the current state of an atom instance. You can pass either an instance directly or an atom and its params (if any)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"get(otherAtom)\nget(otherAtom, ['param 1', 'param 2'])\nget(anInstance)\n")),(0,r.kt)("p",null,"When called synchronously during instance evaluation, ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," registers a ",(0,r.kt)("a",{parentName:"p",href:"../glossary#dynamic-graph-dependency"},"dynamic graph dependency")," on the resolved atom instance."),(0,r.kt)("p",null,"When called asynchronously (e.g. in an ",(0,r.kt)("a",{parentName:"p",href:"../injectors/injectEffect"},(0,r.kt)("inlineCode",{parentName:"a"},"injectEffect")),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," does not register a dependency; it simply returns the resolved atom instance's value."),(0,r.kt)("h3",{id:"getinstance"},(0,r.kt)("inlineCode",{parentName:"h3"},"getInstance")),(0,r.kt)("p",null,"A function that returns an atom instance. Pass an atom and its params (if any)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getInstance(otherAtom)\ngetInstance(otherAtom, ['param 1', 'param 2'])\ngetInstance(anInstance)\n")),(0,r.kt)("p",null,"When called synchronously during instance evaluation, ",(0,r.kt)("inlineCode",{parentName:"p"},"getInstance")," registers a ",(0,r.kt)("a",{parentName:"p",href:"../glossary#static-graph-dependency"},"static graph dependency")," on the resolved atom instance."),(0,r.kt)("p",null,"When called asynchronously (e.g. in an ",(0,r.kt)("inlineCode",{parentName:"p"},"injectEffect"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"getInstance")," does not register a dependency; it simply returns the resolved atom instance."),(0,r.kt)("h3",{id:"select"},(0,r.kt)("inlineCode",{parentName:"h3"},"select")),(0,r.kt)("p",null,"A function that returns a derivation of an atom instance's state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"select(atomSelector)\nselect(anAtom, selectorFn)\nselect(anAtom, ['param 1', 'param 2'], selectorFn)\nselect(anInstance, selectorFn)\n")),(0,r.kt)("p",null,"When called synchronously during instance evaluation, ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," registers ",(0,r.kt)("a",{parentName:"p",href:"../glossary/#restricted-dynamic-graph-dependency"},"restricted dynamic graph dependencies")," on any atom instances it uses."),(0,r.kt)("p",null,"If an ",(0,r.kt)("a",{parentName:"p",href:"AtomSelector"},"AtomSelector")," is passed, ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," will register static dependencies for every ",(0,r.kt)("inlineCode",{parentName:"p"},"getInstance"),", dynamic dependencies for every ",(0,r.kt)("inlineCode",{parentName:"p"},"get"),", and restricted dynamic dependencies for every ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," that it calls (this is recursive!) synchronously."),(0,r.kt)("p",null,'If an atom or atom instance is passed, the selector will register a single restricted dynamic dependency on the resolved atom instance - with updates "restricted" to only happening when the passed ',(0,r.kt)("inlineCode",{parentName:"p"},"selectorFn"),"'s result changes."),(0,r.kt)("p",null,"When called asynchronously (e.g. in an ",(0,r.kt)("inlineCode",{parentName:"p"},"injectEffect"),"), ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," does not register any dependencies; it simply returns the selected value."))}m.isMDXComponent=!0}}]);