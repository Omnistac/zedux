"use strict";(self.webpackChunkzedux_docs=self.webpackChunkzedux_docs||[]).push([[786],{727:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "assets": function() { return /* binding */ assets; },\n/* harmony export */   "contentTitle": function() { return /* binding */ contentTitle; },\n/* harmony export */   "default": function() { return /* binding */ MDXContent; },\n/* harmony export */   "frontMatter": function() { return /* binding */ frontMatter; },\n/* harmony export */   "metadata": function() { return /* binding */ metadata; },\n/* harmony export */   "toc": function() { return /* binding */ toc; }\n/* harmony export */ });\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7462);\n/* harmony import */ var _Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3366);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7294);\n/* harmony import */ var _mdx_js_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3905);\nvar _excluded=["components"];/* @jsxRuntime classic */ /* @jsx mdx */ /* @jsxFrag React.Fragment */var frontMatter={id:\'batching\',title:\'Batching\'};var contentTitle=undefined;var metadata={"unversionedId":"advanced/batching","id":"advanced/batching","title":"Batching","description":"Zedux flushes updates synchronously. It needs to do this to keep user input in sync with state for optimal UX. But this can lead to unnecessary evaluations when setting the state of multiple stores at once.","source":"@site/docs/advanced/batching.mdx","sourceDirName":"advanced","slug":"/advanced/batching","permalink":"/zedux/docs/advanced/batching","draft":false,"editUrl":"https://github.com/Omnistac/zedux/tree/master/docs/advanced/batching.mdx","tags":[],"version":"current","frontMatter":{"id":"batching","title":"Batching"},"sidebar":"react","previous":{"title":"State Machines","permalink":"/zedux/docs/walkthrough/state-machines"},"next":{"title":"Complex Params","permalink":"/zedux/docs/advanced/complex-params"}};var assets={};var toc=[{value:\'Batching Known Updates\',id:\'batching-known-updates\',level:2},{value:\'Batching Unknown Updates\',id:\'batching-unknown-updates\',level:2},{value:\'Automatic Batching\',id:\'automatic-batching\',level:2},{value:\'Atom Exports\',id:\'atom-exports\',level:3},{value:\'Why Batch?\',id:\'why-batch\',level:2},{value:\'Recap\',id:\'recap\',level:2}];var layoutProps={toc:toc};var MDXLayout="wrapper";function MDXContent(_ref){var components=_ref.components,props=(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(_ref,_excluded);return (0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)(MDXLayout,(0,_Users_joshuaclaunch_code_oss_zedux_docs_node_modules_babel_runtime_helpers_esm_extends_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z)({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Zedux flushes updates synchronously. It needs to do this to keep user input in sync with state for optimal UX. But this can lead to unnecessary evaluations when setting the state of multiple stores at once."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"These extra evaluations are often an unnecessary performance loss. They can also be unexpected, leading to values seeming out of sync during the in-between evaluations. This is a form of \\"state tearing\\" and can even lead to bugs in rare cases."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To combat all this, Zedux offers batching APIs. It also batches some things by default."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("admonition",{"title":"you will learn:","type":"tip"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",{parentName:"admonition"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to batch a known set of updates"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"How to batch an unknown number of updates"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"When Zedux automatically batches updates and how to disable it."))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"batching-known-updates"},"Batching Known Updates"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When you have a piece of code with multiple synchronous ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setState()")," or similar calls, you can wrap the whole thing in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#batch"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ecosystem.batch()"))," to prevent Zedux from evaluating any atoms until all state is updated."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// before:\\nanInstance.setState(newState)\\naStore.setStateDeep({ newValue })\\n\\n// after:\\necosystem.batch(() => {\\n  anInstance.setState(newState)\\n  aStore.setStateDeep({ newValue })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.batch()")," prevents the scheduler from flushing until the callback completes. This is the simplest way to batch updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"batching-unknown-updates"},"Batching Unknown Updates"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Sometimes it isn\'t convenient to wrap a bunch of ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},".setState()")," calls in a single ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.batch()")," call. For these situations, you can set the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"meta")," property of the dispatched action to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/utils/internalTypes#batch"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"internalTypes.batch")),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// before:\\nanInstance.setState(newState)\\naStore.setStateDeep({ newValue })\\n\\n// after:\\nanInstance.setState(newState, internalTypes.batch)\\naStore.setStateDeep({ newValue }, internalTypes.batch)\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"When Zedux sees ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"internalTypes.batch"),", it doesn\'t flush immediately. Instead, it sets a timeout to flush on the next event loop cycle. If any non-batching dispatch happens during the current event loop cycle, it will trigger a flush - canceling the timeout and batching itself with any previously-batched state updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"// batches:\\nanInstance.setState(newState, internalTypes.batch)\\n\\n// flushes the above state update (and itself):\\naStore.setStateDeep({ newValue })\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"automatic-batching"},"Automatic Batching"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"There are a few situations where Zedux batches updates automatically. Some of this batching you can\'t control - it\'s an integral part of Zedux\'s graph algorithm. But there is one place where you can control it:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h3",{"id":"atom-exports"},"Atom Exports"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"By default, Zedux wraps all of an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/AtomInstance#exports"},"atom\'s exported functions")," in ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/classes/Ecosystem#batch"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"ecosystem.batch()"))," calls. This wrapping adds a little overhead, but prevents rare cases of state tearing as we\'ll soon see."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"To prevent this overhead, batch state updates yourself and pass ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"false")," as the 2nd param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"api()")," to prevent Zedux from automatically wrapping your exported functions."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-ts"},"const automaticBatchingAtom = atom(\'automaticBatching\', () => {\\n  const store = injectStore(0)\\n\\n  return api(store).setExports({\\n    updateTwice: () => {\\n      store.setState(state => state + 1)\\n      store.setState(state => state + 1)\\n    },\\n  })\\n})\\n\\nconst manualBatchingAtom = atom(\'manualBatching\', () => {\\n  const { ecosystem } = injectAtomGetters()\\n  const store = injectStore(0)\\n\\n  // just pass false to turn off automatic batching\\n  // highlight-next-line\\n  return api(store, false).setExports({\\n    updateTwice: () => {\\n      ecosystem.batch(() => {\\n        store.setState(state => state + 1)\\n        store.setState(state => state + 1)\\n      })\\n    },\\n  })\\n})\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Both of these atoms behave exactly the same. However, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"manualBatchingAtom")," prevents Zedux from checking and wrapping the atom\'s exports, saving a ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"tiny bit")," of overhead at the cost of boilerplate."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"why-batch"},"Why Batch?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since Zedux only deals with local state, batching updates in Zedux doesn\'t improve performance as much as you might think. Batching is much more important in UI or data fetching libraries where network speed and I/O are bottlenecks."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Allowing an atom to reevaluate an extra time is usually not a big deal performance-wise. So why would Zedux wrap exported functions by default? Or why would you ever care to call ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"ecosystem.batch()")," yourself?"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Turns out, there are rare situations where ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("em",{parentName:"p"},"not")," batching can lead to state \\"tearing\\" bugs. Since Zedux flushes all updates synchronously by default, you may encounter situations where setting state in one place leads to an atom reevaluating before you have a chance to update another piece of state that you\'re expecting to be in sync with the first piece."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Oof, too many words? Here\'s an example:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=batching/tearing-part-1 resultVar=Switcher","live":true,"ecosystemId":"batching/tearing-part-1","resultVar":"Switcher"},"const countersAtom = atom(\'counters\', () => ({ even: 0, odd: 1 }))\\n\\nconst switcherAtom = ion(\'switcher\', ({ get, getInstance }) => {\\n  // this store determines which counter we subscribe to:\\n  const internalStore = injectStore(\'odd\')\\n  const key = internalStore.getState()\\n  const countersInstance = getInstance(countersAtom)\\n  const value = get(countersInstance)[key]\\n\\n  // pass `false` to `api()` to prevent automatic batching:\\n  return api(value, false).setExports({\\n    switchAndIncrement: () => {\\n      const newKey = internalStore.getState() === \'even\' ? \'odd\' : \'even\'\\n      internalStore.setState(newKey)\\n      countersInstance.setStateDeep(state => ({ [newKey]: state[newKey] + 2 }))\\n    },\\n  })\\n})\\n\\nfunction Switcher() {\\n  const [count, { switchAndIncrement }] = useAtomState(switcherAtom)\\n\\n  return (\\n    <>\\n      <div>Count: {count}</div>\\n      <button onClick={switchAndIncrement}>Switch and increment</button>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"This example causes ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switcherAtom")," to evaluate twice every time ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switchAndIncrement")," is called. Try logging an ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("a",{parentName:"p","href":"../api/injectors/injectWhy"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"a"},"injectWhy()"))," during evaluation and you\'ll see this happening:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The first evaluation is caused by ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switcherAtom"),"\'s internal store updating. However, ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"countersAtom"),"\'s state hasn\'t changed yet, so ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switcherAtom")," returns the current value of the new counter. This schedules updates in all ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switcherAtom"),"\'s dependents - namely the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"Switcher")," component in this example."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The second evaluation is caused by ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"countersAtom")," updating. Now ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switcherAtom")," sees the new value and updates again, scheduling updates in all its dependents again with the correct value this time."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"As you can see, there is no real bug in this example. Well we did say they were rare! Eventually, things usually turn out right. However, if we were to give ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"switcherAtom")," a side effect that relies on things happening in a specific order, we might start to see this degrade."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("code",{parentName:"pre","className":"language-tsx","metastring":"live ecosystemId=batching/tearing-part-2 resultVar=Switcher","live":true,"ecosystemId":"batching/tearing-part-2","resultVar":"Switcher"},"const countersAtom = atom(\'counters\', () => ({ even: 0, odd: 1 }))\\n\\nconst switcherAtom = ion(\'switcher\', ({ get, getInstance }) => {\\n  const internalStore = injectStore(\'odd\')\\n  const key = internalStore.getState()\\n  const countersInstance = getInstance(countersAtom)\\n  const value = get(countersInstance)[key]\\n  const history = injectRef([{ key, value }])\\n\\n  // track update history whenever key changes\\n  if (key !== history.current[history.current.length - 1].key) {\\n    history.current.push({ key, value })\\n  }\\n\\n  // removing this `false` fixes everything:\\n  return api(value, false).setExports({\\n    history,\\n    switchAndIncrement: () => {\\n      const newKey = internalStore.getState() === \'even\' ? \'odd\' : \'even\'\\n      internalStore.setState(newKey)\\n      countersInstance.setStateDeep(state => ({ [newKey]: state[newKey] + 2 }))\\n    },\\n  })\\n})\\n\\nfunction Switcher() {\\n  const switcherInstance = useAtomInstance(switcherAtom)\\n  const { history, switchAndIncrement } = switcherInstance.exports\\n  const count = useAtomValue(switcherInstance)\\n\\n  return (\\n    <>\\n      <div>Count: {count}</div>\\n      <button onClick={switchAndIncrement}>Switch and increment</button>\\n      <pre>{JSON.stringify(history.current, null, 2)}</pre>\\n    </>\\n  )\\n}\\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Now if you click the button, you can see that history is getting tracked, but it\'s capturing the wrong value."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"In this simple case, it\'s easy to update the logic to also check against ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"value")," changing, but the complexity grows (linearly) the more fields there are to check. That\'s a brittle approach."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"The better solution is to use batching to make sure the state you want to update is fully updated everywhere before any atoms evaluate."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("p",null,"Since this example uses an export, simply removing the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"false")," passed to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"p"},"api()")," turns automatic batching back on, fixing everything (try it in the above sandbox!)."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("h2",{"id":"recap"},"Recap"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Use ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"ecosystem.batch()")," to batch a specific set of updates."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Set an action\'s ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"meta")," property to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"internalTypes.batch")," to batch open-endedly."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Prevent Zedux from automatically batching an atom\'s exported functions by passing ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"false")," as the 2nd param to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("inlineCode",{parentName:"li"},"api()"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_1__/* .mdx */ .kt)("li",{parentName:"ul"},"Batching can prevent state tearing bugs. But you typically won\'t need to worry about it, especially if you structure side effects well.")));};MDXContent.isMDXComponent=true;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///727\n')}}]);